{"clarifying_information": [{"clarifying_question1": "Are you interested in a specific type of visual programming language, such as block-based (e.g., Scratch) or node-based systems (e.g., Unreal Engine's Blueprints), or are you looking for a general overview?", "clarifying_answer1": {"clarifying_answer": "I am looking for a general overview of visual programming rather than focusing on a specific type."}}, {"clarifying_question2": "Would you like to focus on the advantages and educational applications of visual programming, particularly its effectiveness for beginners and non-programmers?", "clarifying_answer2": {"clarifying_answer": "Yes, I would like to focus on the advantages and educational applications of visual programming, especially regarding its effectiveness for beginners and non-programmers."}}, {"clarifying_question3": "Are you seeking information about the historical development and technical implementation of visual programming environments, or about current use cases in domains like IoT, AI, and game development?", "clarifying_answer3": {"clarifying_answer": "I am interested in both aspects: I would like to understand the historical development and technical foundations of visual programming environments, as well as their current use cases in domains such as IoT, AI, and game development."}}], "better_query": "Provide a general overview of visual programming, with a particular focus on its advantages and educational applications\u2014especially regarding its effectiveness for beginners and non-programmers.", "better_answer": {"sections": [{"title": "Introduction to Visual Programming", "tldr": "Visual Programming Languages (VPLs) enable users to create programs by manipulating graphical elements rather than writing text. They represent programs in two or more dimensions using elements like blocks, icons, and arrows, making programming more accessible to beginners and non-programmers. (8 sources)", "text": "\nVisual Programming Languages (VPLs) represent a paradigm shift from traditional text-based programming by allowing users to create programs through the manipulation of graphical elements rather than typing code. Myers defined visual programming in 1990 as \"any system that allows the user to specify a program in a two (or more) dimensional fashion\" <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. This multidimensional approach uses visual expressions such as blocks, symbols, arrows, diagrams, and spatial arrangements to represent program structure and logic <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper> <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper>.\n\nVPLs emerged from the integration of three fields: Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI) <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>. The history of VPLs dates back to the 1960s, when Logo was designed by Feurzeig, Seymour and Cynthia Solomon in 1967 to introduce programming to children <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>. Since then, VPLs have evolved significantly, with block-based programming becoming particularly popular in educational contexts.\n\nBlock-based programming, a form of visual programming, allows users to create programs by selecting and connecting blocks of code <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. In these environments, blocks are typically organized into colored categories to help users select appropriate code elements, and the interface prevents syntactically incorrect blocks from connecting <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. Popular block-based environments include Scratch, App Inventor, Alice, and PencilCode.\n\nVPLs are designed to emphasize underlying semantics rather than syntax, making them particularly valuable in learning environments for children and novice programmers, as well as in specialized domains <Paper corpusId=\"19038821\" paperTitle=\"(Sukumar et al., 2017)\" isShortName></Paper>. They have been applied across numerous fields, including educational activities, multimedia, video game development, system design, simulations, automation, data warehousing, and business analytics <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>. Kodu Game Lab exemplifies a VPL tailored for game development, expressing concepts like sight, hearing, and time to control character behavior in an intuitive manner <Paper corpusId=\"272639481\" paperTitle=\"(Meepung, 2024)\" isShortName></Paper>.\n\nThe primary goal of visual programming is to abstract low-level programming concepts into high-level logic through visual metaphors <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>, making programming more intuitive and accessible to non-programmers <Paper corpusId=\"268272915\" paperTitle=\"(Kodytek et al., 2024)\" isShortName></Paper>. This accessibility stems from VPLs' ability to reduce the need for understanding complex language syntax while emphasizing conceptual understanding <Paper corpusId=\"268272915\" paperTitle=\"(Kodytek et al., 2024)\" isShortName></Paper>.", "citations": [{"id": "(Joao et al., 2019)", "paper": {"corpus_id": 199002134, "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers", "year": 2019, "venue": "Education sciences", "authors": [{"name": "Piedade Jo\u00e3o", "authorId": "2157028104"}, {"name": "Dorotea Nuno", "authorId": "72582337"}, {"name": "Sampaio Ferrentini F\u00e1bio", "authorId": "2157024771"}, {"name": "P. ana", "authorId": "144370033"}], "n_citations": 23}, "snippets": ["In 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs.\n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39].\n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes.\n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41]."], "score": 0.947265625}, {"id": "(Dias et al., 2018)", "paper": {"corpus_id": 53282492, "title": "State of the Software Development Life-Cycle for the Internet-of-Things", "year": 2018, "venue": "arXiv.org", "authors": [{"name": "Jo\u00e3o Pedro Dias", "authorId": "145745979"}, {"name": "H. Ferreira", "authorId": "144027277"}], "n_citations": 14}, "snippets": ["Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007].\n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as:\n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device.\n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002].\n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017].\n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003]."], "score": 0.927734375}, {"id": "(Hamzabegovic, 2019)", "paper": {"corpus_id": 86787308, "title": "Development of application software without programming", "year": 2019, "venue": "IOP Conference Series: Materials Science and Engineering", "authors": [{"name": "J. Hamzabegovi\u0107", "authorId": "30811658"}], "n_citations": 0}, "snippets": ["In computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun.\n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages."], "score": 0.94091796875}, {"id": "(Aldhlan et al., 2021)", "paper": {"corpus_id": 236566925, "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games", "year": 2021, "venue": "Indian Journal of Science and Technology", "authors": [{"name": "Kawther A. Aldhlan", "authorId": "9207310"}, {"name": "Hamad Alreshidi", "authorId": "2836785"}], "n_citations": 2}, "snippets": ["Visual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI).\n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations.\n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts", ") and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer.\n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc.\n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions."], "score": 0.939453125}, {"id": "(Daskalov et al., 2021)", "paper": {"corpus_id": 236336244, "title": "Hybrid Visual Programming Language Environment for Programming Training", "year": 2021, "venue": "TEM Journal", "authors": [{"name": "R. Daskalov", "authorId": "2666781"}, {"name": "G. Pashev", "authorId": "94696738"}, {"name": "Silvia N. Gaftandzhieva", "authorId": "2299512"}], "n_citations": 2}, "snippets": ["In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists."], "score": 0.9521484375}, {"id": "(Sukumar et al., 2017)", "paper": {"corpus_id": 19038821, "title": "Design Space of Programming Tools on Mobile Touchscreen Devices", "year": 2017, "venue": "arXiv.org", "authors": [{"name": "P. Sukumar", "authorId": "2207677"}, {"name": "Ronald A. Metoyer", "authorId": "1809549"}], "n_citations": 0}, "snippets": ["Visual Programming (VP) languages enable programming by means of interacting with graphical elements, such as blocks, symbols, and arrows, rather than text. They are known, in general, to promote program comprehension by representing content in two-dimensions (text is considered onedimensional) and by emphasizing the underlying semantics rather than the syntax (Myers, 1990)[53]. The contexts where VP is used mostly include learning environments (for both children and novice programmers) and specialized domains (Myers, 1990)[41]."], "score": 0.94091796875}, {"id": "(Meepung, 2024)", "paper": {"corpus_id": 272639481, "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills", "year": 2024, "venue": "International Education Studies", "authors": [{"name": "Tippawan Meepung", "authorId": "2128894602"}], "n_citations": 0}, "snippets": ["A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly", "Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users", "Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills."], "score": 0.97802734375}, {"id": "(Kodytek et al., 2024)", "paper": {"corpus_id": 268272915, "title": "Automated code development based on genetic programming in graphical programming language: A pilot study", "year": 2024, "venue": "PLoS ONE", "authors": [{"name": "Pavel Kodytek", "authorId": "100971028"}, {"name": "Alexandra Bodzas", "authorId": "1910708525"}, {"name": "Jan Zidek", "authorId": "2290253497"}], "n_citations": 1}, "snippets": ["Graphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements. Since graphical programming does not require a strong understanding of the language and its syntax, these languages are often designed to make programming more intuitive and accessible to non-programmers."], "score": 0.93603515625}], "table": null}, {"title": "Key Features of Visual Programming Languages", "tldr": "Visual Programming Languages (VPLs) use graphical elements like blocks, icons, and diagrams that can be manipulated to create programs without writing traditional code. They eliminate syntax errors, emphasize program semantics over syntax, and provide intuitive interfaces that make programming more accessible to beginners and non-programmers. (11 sources)", "text": "\nVisual Programming Languages (VPLs) are characterized by several distinct features that differentiate them from traditional text-based programming approaches. The most fundamental aspect of VPLs is their use of graphical representations\u2014such as blocks, icons, symbols, diagrams, and spatial arrangements\u2014to represent program structure and logic <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper> <Paper corpusId=\"272639481\" paperTitle=\"(Meepung, 2024)\" isShortName></Paper>. This multidimensional approach extends beyond the one-dimensional text streams of conventional programming languages <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper>.\n\nVPLs typically employ a node-graph editor interface where users design programs by configuring and connecting visual elements with arrows, lines, or arcs that represent relationships between program components <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper> <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>. Many VPLs follow a \"boxes and arrows\" paradigm, treating screen objects as entities connected by lines representing relations <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper>.\n\nA key advantage of VPLs is their elimination of syntax errors. By design, they prevent common programming mistakes such as forgotten parentheses and semicolons, allowing users to focus on developing algorithms and logic rather than troubleshooting syntax problems <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper>. This shift in focus from syntax to semantics is intentional, as VPLs abstract low-level programming concepts into high-level logic through visual metaphors <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nVPLs are integrated with development environments that shift much of the programming burden from the user to the software, making the task more user-friendly <Paper corpusId=\"11795228\" paperTitle=\"(Lucanin, 2012)\" isShortName></Paper>. These integrated development environments (IDEs) provide intuitive interfaces with features like drag-and-drop functionality, color-coded categories, and built-in validation that prevents incorrect connections between elements <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>.\n\nThe nature of VPLs makes them particularly suitable for specific applications and audiences. They excel in educational settings, providing an accessible entry point for children and novice programmers <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper>. VPLs are also well-suited for specialized domains such as robotics programming, allowing users to program robots without significant knowledge of traditional programming languages <Paper corpusId=\"235234208\" paperTitle=\"(Dawoud et al., 2021)\" isShortName></Paper>. Beyond education, VPLs have found applications in multimedia development, video game creation, system design, simulations, automation, data warehousing, and business analytics <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nThe design philosophy behind VPLs emphasizes intuitive interaction, making programming more accessible to non-programmers by creating a more natural programming environment <Paper corpusId=\"268272915\" paperTitle=\"(Kodytek et al., 2024)\" isShortName></Paper> <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper>. This approach leverages visual thinking, which for many users provides a more natural way to specify program behavior than text-based languages <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper>. The result is a programming paradigm that accelerates experimentation and exploration while making advanced technology more accessible to beginners <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>.", "citations": [{"id": "(Daskalov et al., 2021)", "paper": {"corpus_id": 236336244, "title": "Hybrid Visual Programming Language Environment for Programming Training", "year": 2021, "venue": "TEM Journal", "authors": [{"name": "R. Daskalov", "authorId": "2666781"}, {"name": "G. Pashev", "authorId": "94696738"}, {"name": "Silvia N. Gaftandzhieva", "authorId": "2299512"}], "n_citations": 2}, "snippets": ["In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists."], "score": 0.9521484375}, {"id": "(Meepung, 2024)", "paper": {"corpus_id": 272639481, "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills", "year": 2024, "venue": "International Education Studies", "authors": [{"name": "Tippawan Meepung", "authorId": "2128894602"}], "n_citations": 0}, "snippets": ["A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly", "Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users", "Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills."], "score": 0.97802734375}, {"id": "(Hamzabegovic, 2019)", "paper": {"corpus_id": 86787308, "title": "Development of application software without programming", "year": 2019, "venue": "IOP Conference Series: Materials Science and Engineering", "authors": [{"name": "J. Hamzabegovi\u0107", "authorId": "30811658"}], "n_citations": 0}, "snippets": ["In computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun.\n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages."], "score": 0.94091796875}, {"id": "(Zhou et al., 2023)", "paper": {"corpus_id": 276961580, "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs", "year": 2023, "venue": "International Conference on Human Factors in Computing Systems", "authors": [{"name": "Zhongyi Zhou", "authorId": "2261898099"}, {"name": "Jing Jin", "authorId": "2214751677"}, {"name": "Vrushank Phadnis", "authorId": "95798184"}, {"name": "Xiuxiu Yuan", "authorId": "29436685"}, {"name": "Jun Jiang", "authorId": "2261902264"}, {"name": "Xun Qian", "authorId": "2274943688"}, {"name": "Kristen Wright", "authorId": "2261902483"}, {"name": "Mark Sherwood", "authorId": "2261902982"}, {"name": "Jason Mayes", "authorId": "2261904117"}, {"name": "Jingtao Zhou", "authorId": "2261943879"}, {"name": "Yiyi Huang", "authorId": "2275032507"}, {"name": "Zheng Xu", "authorId": "2275017028"}, {"name": "Yinda Zhang", "authorId": "2274975067"}, {"name": "Johnny Lee", "authorId": "2274929798"}, {"name": "Alex Olwal", "authorId": "2292510931"}, {"name": "David Kim", "authorId": "2274972576"}, {"name": "Ram Iyengar", "authorId": "2214753154"}, {"name": "Na Li", "authorId": "2262397661"}, {"name": "Ruofei Du", "authorId": "2350823722"}], "n_citations": 1}, "snippets": ["Visual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace.\n\nA visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners.\n\nRecent work further explored the application of visual programming in education [9,35,40], XR creativity support [88,91,93], and robotics [14,30]31]."], "score": 0.90380859375}, {"id": "(Karaca et al., 2020)", "paper": {"corpus_id": 227209010, "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications", "year": 2020, "venue": "arXiv.org", "authors": [{"name": "Mustafa Karaca", "authorId": "2069724711"}, {"name": "U\u011fur Yayan", "authorId": "2272032"}], "n_citations": 5}, "snippets": ["Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments.\n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers."], "score": 0.93505859375}, {"id": "(Dias et al., 2018)", "paper": {"corpus_id": 53282492, "title": "State of the Software Development Life-Cycle for the Internet-of-Things", "year": 2018, "venue": "arXiv.org", "authors": [{"name": "Jo\u00e3o Pedro Dias", "authorId": "145745979"}, {"name": "H. Ferreira", "authorId": "144027277"}], "n_citations": 14}, "snippets": ["Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007].\n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as:\n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device.\n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002].\n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017].\n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003]."], "score": 0.927734375}, {"id": "(Lucanin, 2012)", "paper": {"corpus_id": 11795228, "title": "Visual definition of procedures for automatic virtual scene generation", "year": 2012, "venue": "arXiv.org", "authors": [{"name": "Dra\u017een Lu\u010danin", "authorId": "3352207"}], "n_citations": 1}, "snippets": ["Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task."], "score": 0.9287109375}, {"id": "(Aldhlan et al., 2021)", "paper": {"corpus_id": 236566925, "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games", "year": 2021, "venue": "Indian Journal of Science and Technology", "authors": [{"name": "Kawther A. Aldhlan", "authorId": "9207310"}, {"name": "Hamad Alreshidi", "authorId": "2836785"}], "n_citations": 2}, "snippets": ["Visual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI).\n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations.\n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts", ") and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer.\n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc.\n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions."], "score": 0.939453125}, {"id": "(Plauska et al., 2014)", "paper": {"corpus_id": 60941791, "title": "Reflections on Using Robots and Visual Programming Environments for Project-Based Teaching", "year": 2014, "venue": "", "authors": [{"name": "Ignas Plauska", "authorId": "3102760"}, {"name": "R. Lukas", "authorId": "69972564"}, {"name": "Robertas Dama\u0161evi\u010dius", "authorId": null}], "n_citations": 8}, "snippets": ["Visual programming is a method to specify a program in a two (or more) dimensional fashion (Myers, 1986), whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification (Lee et al., 2011)."], "score": 0.9453125}, {"id": "(Dawoud et al., 2021)", "paper": {"corpus_id": 235234208, "title": "Collaborative Coding in a Robotic Visual Language", "year": 2021, "venue": "International Conference on Computer Supported Education", "authors": [{"name": "Farah Yasser Dawoud", "authorId": "2106215024"}, {"name": "A. Adel", "authorId": "143859112"}, {"name": "Nada Sharaf", "authorId": "2730794"}], "n_citations": 1}, "snippets": ["Visual Programming reduces the need to write lond textual programs. Program thus have multiple dimensions not only the text (Laporte et al., 2016). The idea is that with visual constructs, it could have a better learning curve and be more appealing. \n\nFor example, with a robotic visual programming language, users can program the robot without writing a textual code and without significant knowledge of any programming language. Examples include Make Block1 and Open Roberta2 for programming different hardware systems using blocks. \n\nVisual programming languages have different several classes including block-based, diagrammatic, and iconic visual languages (Myers, 1990)."], "score": 0.90966796875}, {"id": "(Kodytek et al., 2024)", "paper": {"corpus_id": 268272915, "title": "Automated code development based on genetic programming in graphical programming language: A pilot study", "year": 2024, "venue": "PLoS ONE", "authors": [{"name": "Pavel Kodytek", "authorId": "100971028"}, {"name": "Alexandra Bodzas", "authorId": "1910708525"}, {"name": "Jan Zidek", "authorId": "2290253497"}], "n_citations": 1}, "snippets": ["Graphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements. Since graphical programming does not require a strong understanding of the language and its syntax, these languages are often designed to make programming more intuitive and accessible to non-programmers."], "score": 0.93603515625}], "table": null}, {"title": "Types and Examples of Visual Programming Languages", "tldr": "Visual Programming Languages can be categorized into block-based, game development, dataflow, and educational VPLs. Popular examples include Scratch, Alice, App Inventor, Kodu Game Lab, and GameMaker, each serving specific educational purposes and application domains. (11 sources)", "text": "\nVisual Programming Languages (VPLs) come in several distinct types, each designed for specific audiences and purposes:\n\n## Block-Based Programming Languages\n* **Scratch**: A block-based VPL primarily designed for education that allows users to create applications by combining visual components with scripted functionalities. Users assemble pre-defined blocks (similar to Lego bricks) to define application logic, with access to media resources including graphics and sound effects <Paper corpusId=\"270526114\" paperTitle=\"(Ming et al., 2024)\" isShortName></Paper>. Scratch has been successfully integrated into mathematics education, promoting more meaningful and creative learning experiences <Paper corpusId=\"270526114\" paperTitle=\"(Ming et al., 2024)\" isShortName></Paper> <Paper corpusId=\"253005339\" paperTitle=\"(Silva et al., 2022)\" isShortName></Paper>.\n\n* **App Inventor**: A visual programming platform developed by MIT that enables users to create Android apps through a block-based interface. It's suitable for teaching programming in middle school, high school, and college settings <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>.\n\n* **Alice**: A 3D visual programming environment that allows users to create interactive games, animations, and videos. Alice has been used to introduce programming in middle schools across various subjects including math, science, language arts, and social studies <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>.\n\n* **PencilCode**: Another block-based programming environment with similar principles to Scratch but with its own unique features <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>.\n\n## Game Development VPLs\n* **Kodu Game Lab**: A 3D visual programming platform specifically designed for game development. Kodu uses concepts such as sight, hearing, and time to control character behavior in games, making it particularly effective for teaching programming to children <Paper corpusId=\"272639481\" paperTitle=\"(Meepung, 2024)\" isShortName></Paper>. It has been used to introduce children to programming at an early age while teaching problem-solving skills <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>.\n\n* **GameMaker**: A visual programming environment that has been successfully used to teach programming concepts to diverse age groups, including children, adolescents, adults, and senior citizens <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper> <Paper corpusId=\"1600632\" paperTitle=\"(Guimaraes et al., 2008)\" isShortName></Paper>. GameMaker may be particularly effective in engaging both genders, as research has shown women prefer computer games with creative components <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper>.\n\n## Historical and Other VPLs\n* **Logo**: One of the earliest visual programming languages, designed in 1967 by Feurzeig, Seymour and Cynthia Solomon specifically to introduce programming to children. Logo is famous for its turtle graphics, where commands for movement and drawing produced line or vector graphics <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>.\n\n* **Dataflow/Diagrammatic Programming**: Many VPLs follow the \"boxes and arrows\" paradigm, where screen objects are treated as entities connected by arrows, lines, or arcs representing relationships between program components <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper> <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>.\n\n* **Robot Programming VPLs**: Visual programming languages are increasingly being used in educational robotic environments, allowing users to program robots without extensive knowledge of traditional programming languages <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper>.\n\nEach of these VPLs is typically built on a text-based programming language (such as ActionScript, JavaScript, C#, Java, etc.), but users don't need to know these underlying languages to create programs <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>. This abstraction is a key feature that makes VPLs accessible to beginners and non-programmers, as they use interfaces that eliminate syntax errors and focus on program logic rather than language syntax <Paper corpusId=\"62816171\" paperTitle=\"(Eguiluz et al., 2018)\" isShortName></Paper>.\n\nResearch has shown that visual programming environments are successful interventions for introducing programming to new students across various age groups <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper> <Paper corpusId=\"54038126\" paperTitle=\"(Siiman et al., 2014)\" isShortName></Paper>. These tools support the development of computational thinking skills, algorithmic thinking, and problem-solving abilities while making programming accessible and engaging for beginners <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>.", "citations": [{"id": "(Ming et al., 2024)", "paper": {"corpus_id": 270526114, "title": "Mirror, Mirror, on The Wall, How Do We Measure What Our Students do in Scratch Programming?", "year": 2024, "venue": "International Journal of Academic Research in Progressive Education and Development", "authors": [{"name": "Goh Kok Ming", "authorId": "2270269430"}, {"name": "Anuthra Sirisena", "authorId": "2306843847"}, {"name": "Dayang Rafidah Syariff M. Fuad", "authorId": "2235731262"}, {"name": "J. Juharyanto", "authorId": "2086538793"}], "n_citations": 0}, "snippets": ["Scratch is a visual programming language primarily designed for education. It uses a blockbased system, allowing users to create applications by combining visual components such as images, sounds, and videos with scripted functionalities. The logic of these applications is defined by assembling pre-defined blocks, similar to building with Lego bricks (Ford (Jr.), 2014; Stewart & Baek, 2023). Each block represents a specific command or action, guiding the application through various tasks. Additionally, Scratch provides a wide range of media resources, including graphics and sound effects, as well as features for designing personalized graphical and audio elements (Ford (Jr.), 2014). It offers a comprehensive environment that empowers users of all ages (Stewart & Baek, 2023). The intuitive visual programming language removes barriers, allowing beginners to easily dive into application development and receive immediate feedback on their creations (Ford (Jr.), 2014). This fosters a hands-on learning experience that helps users grasp fundamental programming concepts (Rose et al., 2017).\n\nBeyond being a programming language, Scratch is also a valuable pedagogical tool when integrated into different subject areas and learning environments (Stewart & Baek, 2023;Voinohovska & Doncheva, 2021;Resnick & Rusk, 2020). According to the study by Silva et al. (2022), integrating Scratch into mathematics education enhances the teaching and learning process. This approach promotes a more meaningful, creative, and playful learning experience, as reported by four Mathematics undergraduate students from a Federal Public Institution in the Midwest."], "score": 0.912109375}, {"id": "(Silva et al., 2022)", "paper": {"corpus_id": 253005339, "title": "A utiliza\u00e7\u00e3o do Scratch como ferramenta pedag\u00f3gica na percep\u00e7\u00e3o de quem ensinar\u00e1 matem\u00e1tica", "year": 2022, "venue": "Revista Brasileira de Ensino de Ci\u00eancia e Tecnologia", "authors": [{"name": "Jana\u00edna Mendes Pereira da Silva", "authorId": "2146549251"}, {"name": "C. Nogueira", "authorId": "133782099"}, {"name": "Regina da Silva Pina Neves", "authorId": "2144852833"}, {"name": "P. C. Silva", "authorId": "145953496"}], "n_citations": 1}, "snippets": ["Este artigo apresenta uma pesquisa sobre o uso da linguagem de programa\u00e7\u00e3o Scratch, como poss\u00edvel ferramenta no processo de ensino e de aprendizagem de conceitos matem\u00e1ticos na forma\u00e7\u00e3o inicial de professores.\u00a0 Para o estudo, utilizou-se o Scratch que, al\u00e9m de desenvolver o pensamento computacional, possibilita ao professor trabalhar os conte\u00fados matem\u00e1ticos por meio de seus jogos, anima\u00e7\u00f5es e diversas outras atividades. Os dados emp\u00edricos foram constru\u00eddos com quatro estudantes da licenciatura em Matem\u00e1tica de uma Institui\u00e7\u00e3o P\u00fablica Federal do Centro-Oeste, por meio de question\u00e1rios, que foram socializados ao final de duas oficinas de constru\u00e7\u00e3o de jogos com o Scratch. Para compor os resultados, optou-se pela An\u00e1lise de Conte\u00fado de Bardin (2016). Constitu\u00edram-se como categorias: o trabalho e a intera\u00e7\u00e3o. Os resultados sugerem, na percep\u00e7\u00e3o dos licenciandos, que o uso do Scratch pode melhorar o processo de ensino e de aprendizagem da Matem\u00e1tica, tornando essa experi\u00eancia significativa, criativa e l\u00fadica."], "score": 0.0}, {"id": "(Asad et al., 2016)", "paper": {"corpus_id": 63111506, "title": "Primary School Pupils\u2019 Attitudes toward Learning Programming through Visual Interactive Environments", "year": 2016, "venue": "", "authors": [{"name": "K. Asad", "authorId": "2521176"}, {"name": "M. Tibi", "authorId": "71281932"}, {"name": "J. Raiyn", "authorId": "2772208"}], "n_citations": 24}, "snippets": ["Rodger et al. (2009) introduced the integration of the Alice 3D into middle school and designed lessons in math, science, languages arts, social studies, and technology. Alice is an innovative 3D visual programming environment with which users can create interactive games, animations, and videos. It is a free teaching tool designed to create object-oriented programming. Ben-Ari (2012) introduced Scratch as a visual programming interactive medium in order to support the development of computational thinking skills. (Wilson et al., 2009) introduced games-based learning, such as Scratch, and games-based construction into primary education to engage children at the primary level in developing computer programming skills. With Scratch, users can program interactive stories, games, and animations, which helps young people learn to think creatively. Stolee and Fristoe (2011) used Kodu Game Lab to introduce children to programming at an early age. Kodu is a 3D visual programming platform that can be used to teach creativity and problem solving, as well as programming. Ioannidou (2011) used games to support and develop computational thinking skills and to promote and increase opportunities for computer science education in the regular curriculum. Hero et.al. (2015) used the visual programming platform, MIT App, to increase interest and skills in computational practices. The visual programming platform, MIT App, enables users to create and design Android apps such as games, and more, and it can be used in various fields. MIT's App Inventor platform is used to learn how to program and create mobile apps. The materials available through the MIT App Inventor platform are suitable for teaching courses for middle school, high school, and college. Peluso and Sprechini (2012) used Alice to make a statement about the attitudes of high school student toward computer science. The students expressed their satisfaction with the use of Alice visual programming. The most common programming concepts gained from visual programming environments like Alice are loops (iteration), conditional statements that support problem solving, logic, reasoning and systematic thinking. We conclude that the development of educational visual programming environments like Alice, Scratch, Kodu, and Greenfoot, support the development of algorithmic thinking, and are effective for introducing primary school children to visual programming skills and concepts."], "score": 0.94873046875}, {"id": "(Joao et al., 2019)", "paper": {"corpus_id": 199002134, "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers", "year": 2019, "venue": "Education sciences", "authors": [{"name": "Piedade Jo\u00e3o", "authorId": "2157028104"}, {"name": "Dorotea Nuno", "authorId": "72582337"}, {"name": "Sampaio Ferrentini F\u00e1bio", "authorId": "2157024771"}, {"name": "P. ana", "authorId": "144370033"}], "n_citations": 23}, "snippets": ["In 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs.\n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39].\n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes.\n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41]."], "score": 0.947265625}, {"id": "(Meepung, 2024)", "paper": {"corpus_id": 272639481, "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills", "year": 2024, "venue": "International Education Studies", "authors": [{"name": "Tippawan Meepung", "authorId": "2128894602"}], "n_citations": 0}, "snippets": ["A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly", "Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users", "Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills."], "score": 0.97802734375}, {"id": "(Doman et al., 2015)", "paper": {"corpus_id": 55310713, "title": "Effect of GameMaker on Student Attitudes and Perceptions of Instructors", "year": 2015, "venue": "", "authors": [{"name": "M. Doman", "authorId": "38066480"}, {"name": "M. Sleigh", "authorId": "46430396"}, {"name": "C. Garrison", "authorId": "48828482"}], "n_citations": 3}, "snippets": ["Research has shown VPEs are successful interventions to introduce programming to new students (Siiman et al., 2014). GameMaker, in particular, has been successfully utilized to teach programming concepts to children, adolescents, adults, and senior citizens (Guimar\u00e3es et al., 2008)(Overmars, 2004). This tool may be especially useful in engaging both genders, as women show a preference for computer games with a creative, versus solely destructive, component (Chamillard, 2006)."], "score": 0.888671875}, {"id": "(Guimaraes et al., 2008)", "paper": {"corpus_id": 1600632, "title": "An exploratory overview of teaching computer game development", "year": 2008, "venue": "Journal of Computing Sciences in Colleges (JCSC; Formerly: Journal of Computing in Small Colleges)", "authors": [{"name": "M. Guimar\u00e3es", "authorId": "144654035"}, {"name": "M. Murray", "authorId": "4096538"}], "n_citations": 11}, "snippets": ["The computer game industry has exploded reaching sales of several billion dollars a year and, consequently, a majority of college students are familiar with the gaming environment. In fact, videogame development has been cited as one way to motivate students to explore the world of Computer Science. However, most videogames are extremely complex computer programs created by a team of developers including programmers and graphic artists and represent thousands of hours of work. Fortunately there are software tools available that provide a way for simple computer games to be created fairly easily using a building block approach. This paper discusses the successes and challenges of teaching a videogame design and development summer program using the software development tool, Game Maker, and from this experience examines how videogame development might be incorporated into a Computer Science curriculum. The first section provides an overview of the Game Maker program and outlines the material taught in the program. Observations of the most successful teaching methods and approaches utilized are also explored. We conclude with a discussion of where videogame design might best be suited in a Computer Science curriculum citing its attractiveness to non-Computer Science majors, its use as a way to introduce introductory programming concepts and as a way to help students learn to read code. While Game Maker is not sophisticated nor is it a substitute for teaching a standard programming language, it can be easily integrated into introductory Computer Science courses."], "score": 0.0}, {"id": "(Daskalov et al., 2021)", "paper": {"corpus_id": 236336244, "title": "Hybrid Visual Programming Language Environment for Programming Training", "year": 2021, "venue": "TEM Journal", "authors": [{"name": "R. Daskalov", "authorId": "2666781"}, {"name": "G. Pashev", "authorId": "94696738"}, {"name": "Silvia N. Gaftandzhieva", "authorId": "2299512"}], "n_citations": 2}, "snippets": ["In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists."], "score": 0.9521484375}, {"id": "(Karaca et al., 2020)", "paper": {"corpus_id": 227209010, "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications", "year": 2020, "venue": "arXiv.org", "authors": [{"name": "Mustafa Karaca", "authorId": "2069724711"}, {"name": "U\u011fur Yayan", "authorId": "2272032"}], "n_citations": 5}, "snippets": ["Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments.\n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers."], "score": 0.93505859375}, {"id": "(Eguiluz et al., 2018)", "paper": {"corpus_id": 62816171, "title": "An Evaluation of Open Digital Gaming Platforms for Developing Computational Thinking Skills", "year": 2018, "venue": "", "authors": [{"name": "A. Egu\u00edluz", "authorId": "38948497"}, {"name": "P. Garaizar", "authorId": "2476416"}, {"name": "M. Guenaga", "authorId": "3070661"}], "n_citations": 15}, "snippets": ["It is also important that all these tools seek to avoid novice programmers having to confront the complexity of text-based computer coding and to improve the learnability [7]. There are several ways to address this problem such as narrative tools, flow-model tools, or specialized output realizations (8394893); in this chapter, we focus on the most common tools, which are those that use the block-based visual programming. These tools employ user interfaces based on visual blocks that are moved and placed constructively as an assembly game, usually with the visual abstraction of a puzzle with its pieces and fitting ways. These blocks work as an abstraction of programming components: sentences, data, control structures, procedures, and so on. Consequently, they considerably limit the prior knowledge required to program and reinforce the program structure, eliminating the possibility of syntax errors and focusing only on the logic that exists in the activity that is to be undertaken."], "score": 0.927734375}, {"id": "(Siiman et al., 2014)", "paper": {"corpus_id": 54038126, "title": "A Review of Interventions to Recruit and Retain ICT Students", "year": 2014, "venue": "", "authors": [{"name": "L. Siiman", "authorId": "2462457"}, {"name": "M. Pedaste", "authorId": "3222434"}, {"name": "Eno T\u00f5nisson", "authorId": "31881352"}, {"name": "R. Sell", "authorId": "37306732"}, {"name": "Tomi Jaakkola", "authorId": "29241908"}, {"name": "Dimitris Alimisis", "authorId": "2604851"}], "n_citations": 16}, "snippets": ["Abstract \u2014This article reviews and analyses the educational research literature on interventions to I.increase the recruitment and retention of information and communications technology (ICT) students. The results show that three changes in computing pedagogy characterize successful interventions, and consequently offer promising ways to attract and prepare more people for careers in ICT. The most important selection criterion considered when choosing papers to review was that interventions had been tested in practice and their effectiveness measured. Interventions were arranged into two groups: recruitment and retention. Recruitment interventions described initiatives to motivate interest in computing among secondary schools students, whereas retention interventions described efforts to retain students in ICT majors at universities. The three pedagogical approaches that emerged from an analysis of the successful interventions were: (1) visual programming environments to teach introductory programming, (2) inquiry learning activities to engage students in computing, and (3) integration of interdisciplinary knowledge to attract students from diverse disciplines. This review draws attention to innovative teaching practices currently shaping computer science education. Wider adoption of these pedagogical strategies has the potential to significantly increase the number of qualified ICT professionals."], "score": 0.0}], "table": null}, {"title": "Advantages for Beginners and Non-Programmers", "tldr": "Visual Programming Languages remove syntax barriers that often frustrate beginners, allowing them to focus on logic and problem-solving rather than complex language rules. They provide intuitive drag-and-drop interfaces that make programming more accessible, reduce cognitive load, and enable faster achievement of programming goals. (14 sources)", "text": "\nVisual Programming Languages (VPLs) offer numerous advantages that make programming significantly more accessible to beginners and non-programmers compared to traditional text-based languages. One of the most fundamental benefits is the elimination of syntax errors, which are a common frustration for novices. With VPLs, there are \"no forgotten parentheses and semicolons,\" allowing users to focus on developing algorithms and logic rather than troubleshooting syntax problems <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper>. This shift in focus from syntax to semantics is crucial because traditional programming languages often require precise and complex syntax that is \"unfamiliar and unnatural for beginners\" <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper>.\n\nThe graphical user interfaces of VPLs transfer much of the programming burden from the user to the integrated development environment (IDE), \"making programming a user-friendlier task\" <Paper corpusId=\"11795228\" paperTitle=\"(Lucanin, 2012)\" isShortName></Paper>. Block-based programming, in particular, facilitates learning by reducing the cognitive load that would otherwise be required for textual programming <Paper corpusId=\"208615635\" paperTitle=\"(Chiazzese et al., 2019)\" isShortName></Paper>. This allows beginners to concentrate on the logic and structures involved in programming tasks rather than the challenges related to writing code.\n\nResearch has demonstrated the effectiveness of visual programming interfaces in making learning more efficient. Studies have shown that students using visual interfaces \"spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface\" <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper> <Paper corpusId=\"38535646\" paperTitle=\"(Saito et al., 2017)\" isShortName></Paper>. Visual programming also appears to induce \"a larger change in attitude toward programming,\" suggesting it can better motivate novice learners <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper> <Paper corpusId=\"38535646\" paperTitle=\"(Saito et al., 2017)\" isShortName></Paper>.\n\nThe intuitive nature of VPLs provides significant support for beginners. Visual block-based programming \"lowers the initial entry hurdles\" of conventional programming languages through drag-and-drop puzzle blocks <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper>. These languages often use visual cues, such as puzzle tabs, to indicate how blocks can be connected, preventing incorrect connections and eliminating syntax errors <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper>. Furthermore, many VPLs use icons that facilitate students' recognition of functions, such as commands, conditions, and loops <Paper corpusId=\"208615635\" paperTitle=\"(Chiazzese et al., 2019)\" isShortName></Paper>.\n\nThe accessibility of VPLs extends to specialized domains through Domain-Specific Languages (DSLs), which \"offer specific abstractions and notations that provide increased expressiveness over particular problem domains\" <Paper corpusId=\"264307073\" paperTitle=\"(Rozen, 2023)\" isShortName></Paper> <Paper corpusId=\"264769167\" paperTitle=\"(Deursen et al., 2000)\" isShortName></Paper>. This makes programming more relevant and applicable to non-programmers in fields such as banking, digital forensics, and game design.\n\nResearch comparing visual and textual programming languages indicates that students whose first programming language was visual performed better than those who started with textual languages, particularly when introduced at K-12 stages <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper>. Visual programming has been found to significantly improve students' understanding of computational concepts, logical thinking skills, and problem-solving abilities <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper> <Paper corpusId=\"55683453\" paperTitle=\"(Chou, 2018)\" isShortName></Paper>.\n\nThe block-based VPI paradigm has been shown to be \"effective in supporting novice programming learners\" <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>, and tools like Teachable Machine have successfully used visual interfaces to help students learn complex concepts such as training machine learning models <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper> <Paper corpusId=\"218482766\" paperTitle=\"(Carney et al., 2020)\" isShortName></Paper>.\n\nA significant advantage noted by educational researchers is that VPLs address a common teaching problem where \"the focus is too much on learning specific syntax or semantics rather than understanding the process\" <Paper corpusId=\"248387201\" paperTitle=\"(Kaivo et al., 2024)\" isShortName></Paper>. When students understand the process of coding through visual programming, they can construct more meaningful programs and exercise greater creativity, focusing on ideas rather than technical limitations <Paper corpusId=\"248387201\" paperTitle=\"(Kaivo et al., 2024)\" isShortName></Paper> <Paper corpusId=\"6485878\" paperTitle=\"(Przybylla et al., 2014)\" isShortName></Paper>.", "citations": [{"id": "(Karaca et al., 2020)", "paper": {"corpus_id": 227209010, "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications", "year": 2020, "venue": "arXiv.org", "authors": [{"name": "Mustafa Karaca", "authorId": "2069724711"}, {"name": "U\u011fur Yayan", "authorId": "2272032"}], "n_citations": 5}, "snippets": ["Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments.\n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers."], "score": 0.93505859375}, {"id": "(Chiu, 2020)", "paper": {"corpus_id": 212726996, "title": "Facilitating K-12 Teachers in Creating Apps by Visual Programming and Project-based Learning", "year": 2020, "venue": "International Journal of Emerging Technologies in Learning (iJET)", "authors": [{"name": "Chiung-Fang Chiu", "authorId": "2111748"}], "n_citations": 40}, "snippets": ["Traditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming (Denny et al., 2011)- (Denny et al., 2012). Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions. Study by (Price et al., 2015) indicated that students who used the visual interface for programming spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface for programming. Saito, Washizaki, and Fukazawa also compared the learning effects of text-based and visual-based programming and found that visual-based programming induces a larger change in attitude toward programming (Saito et al., 2017). Therefore, research results suggest that visual-based programming is advantageous in a programming implementation environment for novice programmers."], "score": 0.9560546875}, {"id": "(Lucanin, 2012)", "paper": {"corpus_id": 11795228, "title": "Visual definition of procedures for automatic virtual scene generation", "year": 2012, "venue": "arXiv.org", "authors": [{"name": "Dra\u017een Lu\u010danin", "authorId": "3352207"}], "n_citations": 1}, "snippets": ["Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task."], "score": 0.9287109375}, {"id": "(Chiazzese et al., 2019)", "paper": {"corpus_id": 208615635, "title": "Educational Robotics in Primary School: Measuring the Development of Computational Thinking Skills with the Bebras Tasks", "year": 2019, "venue": "Informatics", "authors": [{"name": "G. Chiazzese", "authorId": "1985775"}, {"name": "M. Arrigo", "authorId": "33520169"}, {"name": "Antonella Chifari", "authorId": "3344445"}, {"name": "Violetta Lonati", "authorId": "1770175"}, {"name": "Crispino Tosto", "authorId": "26632478"}], "n_citations": 64}, "snippets": ["Block programming is based on drag and drop of consecutive visual tiles on the editing area to compose different instructions; first of all, it facilitates the learning of programming skills because of a reduction in the cognitive load potentially required for textual programming (Weintrop et al., 2015)(Weintrop et al., 2017). Moreover, Kelleher, and Pausch (Kelleher et al., 2005) recognize further advantages in the use of visual programming for novice learners. Indeed, the visual block-based instruction is built using icons that facilitate students' recognition of its function, such as commands, conditions, and loops. Accordingly, visual programming allows students to focus their attention more on the logic and structures involved in programming tasks than in challenges related to writing code."], "score": 0.9326171875}, {"id": "(Saito et al., 2017)", "paper": {"corpus_id": 38535646, "title": "Comparison of Text-Based and Visual-Based Programming Input Methods for First-Time Learners", "year": 2017, "venue": "J. Inf. Technol. Educ. Res.", "authors": [{"name": "Daisuke Saito", "authorId": "2064115776"}, {"name": "H. Washizaki", "authorId": "1794290"}, {"name": "Y. Fukazawa", "authorId": "1759835"}], "n_citations": 18}, "snippets": ["Findings The following results are revealed: (1) The visual input method induces a larger change in attitude toward programming. (2) The number of operations and input quantity influence both groups. (3) The overall results suggest that a visual input is advantageous in a programming implementation environment for first learners."], "score": 0.0}, {"id": "(DeLozier et al., 2023)", "paper": {"corpus_id": 259335765, "title": "Using Visual Programming Games to Study Novice Programmers", "year": 2023, "venue": "Int. J. Serious Games", "authors": [{"name": "Christian DeLozier", "authorId": "39722092"}, {"name": "James Shey", "authorId": "38203562"}], "n_citations": 6}, "snippets": ["Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13].\n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]."], "score": 0.947265625}, {"id": "(Rozen, 2023)", "paper": {"corpus_id": 264307073, "title": "Game Engine Wizardry for Programming Mischief", "year": 2023, "venue": "PAINT@SPLASH", "authors": [{"name": "Riemer van Rozen", "authorId": "2163321"}], "n_citations": 4}, "snippets": ["Visual programming environments have the potential to make programming more accessible to programmers of all backgrounds and skill levels. For instance, Domain-Specific Languages (DSLs) have been shown to help non-programmers raise their productivity, and improve the quality of their work (Deursen et al., 2000). DSLs offer specific abstractions and notations that provide increased expressiveness over particular problem domains, e.g., banking, digital forensics and game design."], "score": 0.9169921875}, {"id": "(Deursen et al., 2000)", "paper": {"corpus_id": 264769167, "title": "Domain-specific languages: an annotated bibliography", "year": 2000, "venue": "SIGP", "authors": [{"name": "A. Deursen", "authorId": "1737202"}, {"name": "P. Klint", "authorId": "2257221078"}, {"name": "Joost Visser", "authorId": "2263636981"}], "n_citations": 496}, "snippets": ["We survey the literature available on the topic of domain-specific languages as used for the construction and maintenance of software systems. We list a selection of 75 key publications in the area, and provide a summary for each of the papers. Moreover, we discuss terminology, risks and benefits, example domain-specific languages, design methodologies, and implementation techniques."], "score": 0.0}, {"id": "(Zhu et al., 2023)", "paper": {"corpus_id": 264371146, "title": "Core competencies of K-12 computer science education from the perspectives of college faculties and K-12 teachers", "year": 2023, "venue": "International Journal of Computer Science Education in Schools", "authors": [{"name": "Meina Zhu", "authorId": "2260904421"}, {"name": "Cheng Wang", "authorId": "2119129129"}], "n_citations": 3}, "snippets": ["Some of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace. Thus, novice CS learners can focus on the computational concepts and logic without being bothered by the syntax (Bau et al., 2017;(Kelleher et al., 2005). Some research argues that visual programming languages might be more appropriate for novice learners as they are easier to learn (Bau et al., 2017;Chen et al., 2020;(Malan et al., 2007). For example, Chen et al. (2020) analyzed data from 10,000 undergraduate students who enrolled in CS courses and found that students whose first programming language was visual performed better than did students whose first programming language was textual when the programming languages were first introduced in K-12 stages. Moreover, the visual languages and environments provide scaffolds and enable knowledge transfer. Research indicates that visual programming languages are used in K-12 CT education. For example, (Hsu et al., 2018) and Lockwood and Mooney (2017) find that many schools have utilized visual programming languages to teach CT skills. Other studies indicate that using visual programming languages to teach students CT skills is effective in elementary education (The Horizon Report, 2017). Application of visual program languages in K-12 CS education is found to significantly improve students' understanding of computational concepts and computation practices (S\u00e1ez-L\u00f3pez et al., 2016), logical thinking skills (Lindh et al., 2007), and problem-solving skills in general (Chou, 2018)."], "score": 0.89697265625}, {"id": "(Chou, 2018)", "paper": {"corpus_id": 55683453, "title": "Skill Development and Knowledge Acquisition Cultivated by Maker Education: Evidence from Arduino-based Educational Robotics", "year": 2018, "venue": "Eurasia Journal of Mathematics, Science and Technology Education", "authors": [{"name": "Pao-Nan Chou", "authorId": "3233604"}], "n_citations": 48}, "snippets": ["This study investigated elementary school students\u2019 learning performances and behaviors in a maker education program. An informal after-school learning environment entitled Robot MakerSpace was created at a public elementary school in Taiwan and 30 grade 5 students voluntarily participated in a 16-week educational experiment. The student participants were randomly divided into two experimental groups. Students in the maker group received weekly educational robotics lessons, whereas those in the nonmaker group only engaged in other after-school learning activities such as homework practice in traditional classrooms. Mixed methods research was used for data collection. An experiment with a pretest\u2013posttest and control group design was employed to measure the students\u2019 electrical engineering and computer programming content knowledge and problem-solving skills. In addition, a qualitative approach with an emphasis on filed observation was adopted to evaluate the instructional implementation of the maker education program. The quantitative findings revealed that maker education training significantly improved the electrical engineering and computer programming content knowledge of the students and improved their problem-solving skills. The qualitative findings showed the students required considerable learning support from the instructor such as strategies for software and hardware debugging."], "score": 0.0}, {"id": "(Lin et al., 2023)", "paper": {"corpus_id": 269747039, "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models", "year": 2023, "venue": "International Conference on Human Factors in Computing Systems", "authors": [{"name": "David Chuan-En Lin", "authorId": "2106412318"}, {"name": "Nikolas Martelaro", "authorId": "3111790"}], "n_citations": 18}, "snippets": ["Visual programming interfaces (VPIs) have been extensively studied as tools to aid users in designing and implementing systems through graphical elements rather than text-based code [31]. A key benefit of VPIs is their lower entry barrier for novice programmers [45]. There are primarily two main paradigms for VPIs. The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph. Pioneering work in this area includes Prograph [17] and LabVIEW [27]. The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together. Notable works in this area include Scratch [35] and Blockly [19]. Many commercial creative applications have adopted VPIs, including game engines such as Unity [11], CAD tools such as Grasshopper [9], and multimedia development tools such as Max/MSP [12].\n\nVPI concepts have been applied to machine learning applications. For example, Teachable Machine [15] uses a visual interface to help students learn to train a machine learning model", "First, our tool leverages a block-based VPI paradigm, which has been shown to be effective in supporting novice programming learners [35]."], "score": 0.9384765625}, {"id": "(Carney et al., 2020)", "paper": {"corpus_id": 218482766, "title": "Teachable Machine: Approachable Web-Based Tool for Exploring Machine Learning Classification", "year": 2020, "venue": "CHI Extended Abstracts", "authors": [{"name": "Michelle Carney", "authorId": "1664904153"}, {"name": "Barron Webster", "authorId": "72500270"}, {"name": "Irene Alvarado", "authorId": "2062749837"}, {"name": "Kyle Phillips", "authorId": "2056288455"}, {"name": "Noura Howell", "authorId": "39707815"}, {"name": "Jordan Griffith", "authorId": "2055443643"}, {"name": "J. Jongejan", "authorId": "153631211"}, {"name": "Amit Pitaru", "authorId": "2156576"}, {"name": "Alexander Chen", "authorId": "2116403860"}], "n_citations": 237}, "snippets": ["Teachable Machine (teachablemachine.withgoogle.com) is a web-based GUI tool for creating custom machine learning classification models without specialized technical expertise. (Machine learning, or ML, lets systems learn to analyze data without being explicitly programmed.) We created it to help students, teachers, designers, and others learn about ML by creating and using their own classification models. Its broad uptake suggests it has empowered people to learn, teach, and explore ML concepts: People have created curriculum, tutorials, and other resources using Teachable Machine on topics like AI ethics at institutions including the Stanford d.school, NYU's Interactive Telecommunications Program, the MIT Media Lab, as well as creative experiments. Users in 201 countries have created over 125,000 classification models. Here we outline the project and its key contributions of (1) a flexible, approachable interface for ML classification models without ML or coding expertise, (2) a set of technical and design decisions that can inform future interactive machine learning tools, and (3) an example of how structured learning content surrounding the tool supports people accessing ML concepts."], "score": 0.0}, {"id": "(Kaivo et al., 2024)", "paper": {"corpus_id": 248387201, "title": "Designing activities and tools to support university students' creative and collaborative exploration of physical computing", "year": 2024, "venue": "Networked Learning Conference", "authors": [{"name": "Melissa Kaivo", "authorId": "151119319"}, {"name": "David Cuartielles", "authorId": "1710284"}, {"name": "Daniel Spikol", "authorId": "3167385"}], "n_citations": 0}, "snippets": ["Visual programming tools have been developed to help with these challenges and aim to make programming more accessible for non-technical students. However, the differences between visual programming and traditional text-based programming are considerably extensive. Visual programming languages simplify procedures and guide the user through the creation, for example, with blocks that snap together or use colour-coding. (Vihavainen et al., 2011) noticed that a common problem when teaching text-based programming languages is that the focus is too much on learning specific syntax or semantics rather than understanding the process. When students understand the process of coding, they can construct more meaningful programs. Also, (Przybylla et al., 2014) assert that physical computing encourages learners to use their imagination and creativity, focusing more on ideas, not on technical limitation. Physical computing takes a hands-on approach to understand computational thinking, building tangible artefacts to visualise the abstract programming concepts."], "score": 0.89111328125}, {"id": "(Przybylla et al., 2014)", "paper": {"corpus_id": 6485878, "title": "Physical Computing and its Scope - Towards a Constructionist Computer Science Curriculum with Physical Computing", "year": 2014, "venue": "Informatics Educ.", "authors": [{"name": "M. Przybylla", "authorId": "1923328"}, {"name": "R. Romeike", "authorId": "1711129"}], "n_citations": 86}, "snippets": ["Physical computing covers the design and realization of interactive objects and instal- lations and allows students to develop concrete, tangible products of the real world, which arise from the learners' imagination. This can be used in computer science education to provide students with interesting and motivating access to the different topic areas of the subject in construction- ist and creative learning environments. To make many existing activities and examples of such project ideas available for classroom use and to expand the topic areas suitable for learning in such environments beyond introductory to programming, a physical computing syllabus for computer science courses in general education schools has been developed. In this paper the methods and different perspectives that were taken into account are presented. The resulting syllabus can be used to develop a constructionist computer science curriculum with physical computing."], "score": 0.0}], "table": null}, {"title": "Educational Applications and Effectiveness", "tldr": "Visual Programming Languages have been successfully deployed across educational settings from preschool to college, improving students' computational thinking, problem-solving abilities, and attitudes toward programming. Research demonstrates that VPLs help students perform better and complete learning goals more efficiently than text-based approaches. (21 sources)", "text": "\nVisual Programming Languages (VPLs) have been successfully implemented across various educational levels, from preschool and elementary school <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper> to high school and college <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper>. Their flexibility makes them valuable teaching tools across this wide age spectrum, providing an accessible entry point for learning computational concepts and programming principles.\n\nThe educational applications of VPLs are extensive and diverse. In middle schools, tools like Alice have been integrated across multiple subjects including mathematics, science, language arts, and social studies <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>. Scratch has been effectively incorporated into mathematics education, promoting more meaningful and creative learning experiences <Paper corpusId=\"270526114\" paperTitle=\"(Ming et al., 2024)\" isShortName></Paper> <Paper corpusId=\"253005339\" paperTitle=\"(Silva et al., 2022)\" isShortName></Paper>. In game development education, tools like Kodu Game Lab help teach programming at an early age while developing problem-solving skills <Paper corpusId=\"272639481\" paperTitle=\"(Meepung, 2024)\" isShortName></Paper> <Paper corpusId=\"237618637\" paperTitle=\"(Miller et al., 2021)\" isShortName></Paper>.\n\nResearch consistently demonstrates the effectiveness of VPLs in educational settings. Studies show that students using visual programming interfaces \"spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface\" <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. Meta-analysis of multiple studies confirms that interventions using VPLs like Scratch are \"especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code\" <Paper corpusId=\"264168616\" paperTitle=\"(Wen et al., 2023)\" isShortName></Paper>.\n\nThe educational benefits of VPLs are substantial and well-documented. They significantly improve students' understanding of computational concepts <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper> <Paper corpusId=\"225393741\" paperTitle=\"(Mladenovic et al., 2020)\" isShortName></Paper>, enhance logical thinking skills <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper> <Paper corpusId=\"55683453\" paperTitle=\"(Chou, 2018)\" isShortName></Paper>, develop problem-solving abilities <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper>, and increase computational thinking skills <Paper corpusId=\"249048171\" paperTitle=\"(Wang et al., 2022)\" isShortName></Paper>. Block-based VPLs like Scratch have been found to be particularly effective in supporting novice programming learners <Paper corpusId=\"257145390\" paperTitle=\"(Chen et al., 2023)\" isShortName></Paper> <Paper corpusId=\"235749050\" paperTitle=\"(Zheng et al., 2021)\" isShortName></Paper> <Paper corpusId=\"237732833\" paperTitle=\"(Xiang et al., 2021)\" isShortName></Paper>.\n\nResearch comparing visual and textual programming languages indicates that students whose first programming language was visual performed better than those who started with textual languages, particularly when introduced at K-12 stages <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper> <Paper corpusId=\"225492990\" paperTitle=\"(Hu et al., 2020)\" isShortName></Paper>. This advantage stems from VPLs' ability to help students focus on developing and designing programs without being hindered by syntax constraints <Paper corpusId=\"249048171\" paperTitle=\"(Wang et al., 2022)\" isShortName></Paper>.\n\nVisual programming tools have also proven successful in introducing programming concepts to diverse age groups and demographics. GameMaker, for instance, has been effectively used to teach programming to children, adolescents, adults, and senior citizens <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper> <Paper corpusId=\"1600632\" paperTitle=\"(Guimaraes et al., 2008)\" isShortName></Paper>. These tools may be particularly effective in engaging both genders, as research has shown women prefer computer games with creative components <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper>.\n\nThe adoption of visual programming in education is growing globally, with many countries now incorporating computational thinking and programming into their curricula starting from the earliest grades <Paper corpusId=\"235383033\" paperTitle=\"(Papadakis, 2021)\" isShortName></Paper> <Paper corpusId=\"69960068\" paperTitle=\"(Lindberg et al., 2018)\" isShortName></Paper>. Tools like Scratch, App Inventor, and Kodu are increasingly being used to introduce students to programming concepts in fun and engaging ways, making advanced technology more accessible to beginners <Paper corpusId=\"68068900\" paperTitle=\"(Bai et al., 2019)\" isShortName></Paper>. This trend reflects recognition of VPLs' ability to make programming more accessible while developing valuable computational thinking skills that are increasingly important in today's technology-driven world.", "citations": [{"id": "(DeLozier et al., 2023)", "paper": {"corpus_id": 259335765, "title": "Using Visual Programming Games to Study Novice Programmers", "year": 2023, "venue": "Int. J. Serious Games", "authors": [{"name": "Christian DeLozier", "authorId": "39722092"}, {"name": "James Shey", "authorId": "38203562"}], "n_citations": 6}, "snippets": ["Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13].\n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]."], "score": 0.947265625}, {"id": "(Zhu et al., 2023)", "paper": {"corpus_id": 264371146, "title": "Core competencies of K-12 computer science education from the perspectives of college faculties and K-12 teachers", "year": 2023, "venue": "International Journal of Computer Science Education in Schools", "authors": [{"name": "Meina Zhu", "authorId": "2260904421"}, {"name": "Cheng Wang", "authorId": "2119129129"}], "n_citations": 3}, "snippets": ["Some of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace. Thus, novice CS learners can focus on the computational concepts and logic without being bothered by the syntax (Bau et al., 2017;(Kelleher et al., 2005). Some research argues that visual programming languages might be more appropriate for novice learners as they are easier to learn (Bau et al., 2017;Chen et al., 2020;(Malan et al., 2007). For example, Chen et al. (2020) analyzed data from 10,000 undergraduate students who enrolled in CS courses and found that students whose first programming language was visual performed better than did students whose first programming language was textual when the programming languages were first introduced in K-12 stages. Moreover, the visual languages and environments provide scaffolds and enable knowledge transfer. Research indicates that visual programming languages are used in K-12 CT education. For example, (Hsu et al., 2018) and Lockwood and Mooney (2017) find that many schools have utilized visual programming languages to teach CT skills. Other studies indicate that using visual programming languages to teach students CT skills is effective in elementary education (The Horizon Report, 2017). Application of visual program languages in K-12 CS education is found to significantly improve students' understanding of computational concepts and computation practices (S\u00e1ez-L\u00f3pez et al., 2016), logical thinking skills (Lindh et al., 2007), and problem-solving skills in general (Chou, 2018)."], "score": 0.89697265625}, {"id": "(Asad et al., 2016)", "paper": {"corpus_id": 63111506, "title": "Primary School Pupils\u2019 Attitudes toward Learning Programming through Visual Interactive Environments", "year": 2016, "venue": "", "authors": [{"name": "K. Asad", "authorId": "2521176"}, {"name": "M. Tibi", "authorId": "71281932"}, {"name": "J. Raiyn", "authorId": "2772208"}], "n_citations": 24}, "snippets": ["Rodger et al. (2009) introduced the integration of the Alice 3D into middle school and designed lessons in math, science, languages arts, social studies, and technology. Alice is an innovative 3D visual programming environment with which users can create interactive games, animations, and videos. It is a free teaching tool designed to create object-oriented programming. Ben-Ari (2012) introduced Scratch as a visual programming interactive medium in order to support the development of computational thinking skills. (Wilson et al., 2009) introduced games-based learning, such as Scratch, and games-based construction into primary education to engage children at the primary level in developing computer programming skills. With Scratch, users can program interactive stories, games, and animations, which helps young people learn to think creatively. Stolee and Fristoe (2011) used Kodu Game Lab to introduce children to programming at an early age. Kodu is a 3D visual programming platform that can be used to teach creativity and problem solving, as well as programming. Ioannidou (2011) used games to support and develop computational thinking skills and to promote and increase opportunities for computer science education in the regular curriculum. Hero et.al. (2015) used the visual programming platform, MIT App, to increase interest and skills in computational practices. The visual programming platform, MIT App, enables users to create and design Android apps such as games, and more, and it can be used in various fields. MIT's App Inventor platform is used to learn how to program and create mobile apps. The materials available through the MIT App Inventor platform are suitable for teaching courses for middle school, high school, and college. Peluso and Sprechini (2012) used Alice to make a statement about the attitudes of high school student toward computer science. The students expressed their satisfaction with the use of Alice visual programming. The most common programming concepts gained from visual programming environments like Alice are loops (iteration), conditional statements that support problem solving, logic, reasoning and systematic thinking. We conclude that the development of educational visual programming environments like Alice, Scratch, Kodu, and Greenfoot, support the development of algorithmic thinking, and are effective for introducing primary school children to visual programming skills and concepts."], "score": 0.94873046875}, {"id": "(Ming et al., 2024)", "paper": {"corpus_id": 270526114, "title": "Mirror, Mirror, on The Wall, How Do We Measure What Our Students do in Scratch Programming?", "year": 2024, "venue": "International Journal of Academic Research in Progressive Education and Development", "authors": [{"name": "Goh Kok Ming", "authorId": "2270269430"}, {"name": "Anuthra Sirisena", "authorId": "2306843847"}, {"name": "Dayang Rafidah Syariff M. Fuad", "authorId": "2235731262"}, {"name": "J. Juharyanto", "authorId": "2086538793"}], "n_citations": 0}, "snippets": ["Scratch is a visual programming language primarily designed for education. It uses a blockbased system, allowing users to create applications by combining visual components such as images, sounds, and videos with scripted functionalities. The logic of these applications is defined by assembling pre-defined blocks, similar to building with Lego bricks (Ford (Jr.), 2014; Stewart & Baek, 2023). Each block represents a specific command or action, guiding the application through various tasks. Additionally, Scratch provides a wide range of media resources, including graphics and sound effects, as well as features for designing personalized graphical and audio elements (Ford (Jr.), 2014). It offers a comprehensive environment that empowers users of all ages (Stewart & Baek, 2023). The intuitive visual programming language removes barriers, allowing beginners to easily dive into application development and receive immediate feedback on their creations (Ford (Jr.), 2014). This fosters a hands-on learning experience that helps users grasp fundamental programming concepts (Rose et al., 2017).\n\nBeyond being a programming language, Scratch is also a valuable pedagogical tool when integrated into different subject areas and learning environments (Stewart & Baek, 2023;Voinohovska & Doncheva, 2021;Resnick & Rusk, 2020). According to the study by Silva et al. (2022), integrating Scratch into mathematics education enhances the teaching and learning process. This approach promotes a more meaningful, creative, and playful learning experience, as reported by four Mathematics undergraduate students from a Federal Public Institution in the Midwest."], "score": 0.912109375}, {"id": "(Silva et al., 2022)", "paper": {"corpus_id": 253005339, "title": "A utiliza\u00e7\u00e3o do Scratch como ferramenta pedag\u00f3gica na percep\u00e7\u00e3o de quem ensinar\u00e1 matem\u00e1tica", "year": 2022, "venue": "Revista Brasileira de Ensino de Ci\u00eancia e Tecnologia", "authors": [{"name": "Jana\u00edna Mendes Pereira da Silva", "authorId": "2146549251"}, {"name": "C. Nogueira", "authorId": "133782099"}, {"name": "Regina da Silva Pina Neves", "authorId": "2144852833"}, {"name": "P. C. Silva", "authorId": "145953496"}], "n_citations": 1}, "snippets": ["Este artigo apresenta uma pesquisa sobre o uso da linguagem de programa\u00e7\u00e3o Scratch, como poss\u00edvel ferramenta no processo de ensino e de aprendizagem de conceitos matem\u00e1ticos na forma\u00e7\u00e3o inicial de professores.\u00a0 Para o estudo, utilizou-se o Scratch que, al\u00e9m de desenvolver o pensamento computacional, possibilita ao professor trabalhar os conte\u00fados matem\u00e1ticos por meio de seus jogos, anima\u00e7\u00f5es e diversas outras atividades. Os dados emp\u00edricos foram constru\u00eddos com quatro estudantes da licenciatura em Matem\u00e1tica de uma Institui\u00e7\u00e3o P\u00fablica Federal do Centro-Oeste, por meio de question\u00e1rios, que foram socializados ao final de duas oficinas de constru\u00e7\u00e3o de jogos com o Scratch. Para compor os resultados, optou-se pela An\u00e1lise de Conte\u00fado de Bardin (2016). Constitu\u00edram-se como categorias: o trabalho e a intera\u00e7\u00e3o. Os resultados sugerem, na percep\u00e7\u00e3o dos licenciandos, que o uso do Scratch pode melhorar o processo de ensino e de aprendizagem da Matem\u00e1tica, tornando essa experi\u00eancia significativa, criativa e l\u00fadica."], "score": 0.0}, {"id": "(Meepung, 2024)", "paper": {"corpus_id": 272639481, "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills", "year": 2024, "venue": "International Education Studies", "authors": [{"name": "Tippawan Meepung", "authorId": "2128894602"}], "n_citations": 0}, "snippets": ["A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly", "Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users", "Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills."], "score": 0.97802734375}, {"id": "(Miller et al., 2021)", "paper": {"corpus_id": 237618637, "title": "Motivating Teaching, Sustaining Change in Practice: Design Principles for Teacher Learning in Project-Based Learning Contexts", "year": 2021, "venue": "Journal of Science Teacher Education", "authors": [{"name": "Emily Miller", "authorId": "144324587"}, {"name": "Samuel J. Severance", "authorId": "23199794"}, {"name": "J. Krajcik", "authorId": "1794213"}], "n_citations": 52}, "snippets": ["ABSTRACT In A Framework for K-12 Science Education, researchers call for teachers to make dramatic shifts in practice \u2013 and sustain in these changes in practice \u2013 so students can engage in rigorous and equitable three-dimensional science learning. Project-Based Learning (PBL) motivates students from diverse backgrounds to persist in learning. This project presents design features that bring together the assets of the Framework with PBL, and then tests these features to derive design principles that serve as commitments for designing for teacher change and student learning. Close ethnographic study of 10 teachers over 5 years in a design-based research study is triangulated with data collected across 41 districts in multiple states engaged in a PBL elementary science curriculum. The following design principles provide guidance for developing materials that support the depth necessary for promoting changes to teachers\u2019 practice at scale: Adaptive, Responsive, and both Enjoyable and Intellectually Satisfying."], "score": 0.0}, {"id": "(Joao et al., 2019)", "paper": {"corpus_id": 199002134, "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers", "year": 2019, "venue": "Education sciences", "authors": [{"name": "Piedade Jo\u00e3o", "authorId": "2157028104"}, {"name": "Dorotea Nuno", "authorId": "72582337"}, {"name": "Sampaio Ferrentini F\u00e1bio", "authorId": "2157024771"}, {"name": "P. ana", "authorId": "144370033"}], "n_citations": 23}, "snippets": ["In 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs.\n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39].\n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes.\n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41]."], "score": 0.947265625}, {"id": "(Wen et al., 2023)", "paper": {"corpus_id": 264168616, "title": "Toward improving student motivation and performance in introductory programming learning by Scratch: The role of achievement emotions", "year": 2023, "venue": "Science in progress", "authors": [{"name": "Fu-Hsiang Wen", "authorId": "133986052"}, {"name": "Tienhua Wu", "authorId": "31324477"}, {"name": "W. Hsu", "authorId": "2072747383"}], "n_citations": 5}, "snippets": ["In contrast to traditional textual languages, Scratch enables students to learn algorithms and programming logic with a simple interface and drag-and-drop structure without focusing on syntax, which renders the process more attractive by designing important and unique content (Erol et al., 2017) and supports a more intuitive and engaging experience. (Papadakis et al., 2019) Specifically, Scratch provides an interactive media-rich environment for learners to create animated stories and games, leading to creativity and programming skill development in an exciting, fun way. (Y\u00fckselt\u00fcrk et al., 2017)(Erol et al., 2017)(Papadakis et al., 2019) he advantages of Scratch for programming novices are evidential. Many researchers have identified positive results in learning, including programming knowledge and achievement, (Erol et al., 2017)(Papadakis et al., 2016)(Piedade et al., 2022) computational thinking skills, (Papadakis et al., 2016)(Piedade et al., 2022) a positive attitude toward programming, (Y\u00fckselt\u00fcrk et al., 2017)(Cheng, 2019)(Marcelino et al., 2018)(Papadakis et al., 2016) and learning motivation. (Erol et al., 2017) Scherer et al. (Scherer et al., 2020) meta-analyzed previous studies and found that interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code. The authors also suggested that Scratch accommodates different projects, allowing for different interests and learning styles that may positively influence learners' attitudes, resulting in better performance."], "score": 0.89306640625}, {"id": "(Mladenovic et al., 2020)", "paper": {"corpus_id": 225393741, "title": "The impact of using program visualization techniques on learning basic programming concepts at the K\u201312 level", "year": 2020, "venue": "Computer Applications in Engineering Education", "authors": [{"name": "M. Mladenovi\u0107", "authorId": "50980685"}, {"name": "\u017dana \u017danko", "authorId": "84715380"}, {"name": "M. A. Cuvic", "authorId": "21173824"}], "n_citations": 32}, "snippets": ["Novices enrolled in introductory programming courses often face many difficulties. These difficulties are more emphasized when novices are K\u201312 students. Many new visual programming languages have primarily been designed to provide a smooth introduction to programming for children. However, at some point, a general\u2010purpose text\u2010based programming language should be used. A well\u2010known and studied method is to visualize program execution to assist novices in forming correct mental models. Although many studies have investigated the effects of using visualizations in teaching and learning, most of them focus on courses taught at the university level. Studies that focus on investigating the impact of program visualizations at the K\u201312 level are, to the best of our knowledge, scarce. Therefore, we investigated the impact of using program visualizations with a group of K\u201312 students. Because of the underrepresentation of girls in computer science and known gender stereotypes, we additionally investigated student performance based on gender. Our research included 98 fifth\u2010grade students from three elementary schools. The lectures in the experimental group included different visualization techniques, including a program visualization tool and PowerPoint animations, whereas the control group had no program visualizations. All students learned Python as part of their curriculum. We present the results of our research in this paper."], "score": 0.0}, {"id": "(Chou, 2018)", "paper": {"corpus_id": 55683453, "title": "Skill Development and Knowledge Acquisition Cultivated by Maker Education: Evidence from Arduino-based Educational Robotics", "year": 2018, "venue": "Eurasia Journal of Mathematics, Science and Technology Education", "authors": [{"name": "Pao-Nan Chou", "authorId": "3233604"}], "n_citations": 48}, "snippets": ["This study investigated elementary school students\u2019 learning performances and behaviors in a maker education program. An informal after-school learning environment entitled Robot MakerSpace was created at a public elementary school in Taiwan and 30 grade 5 students voluntarily participated in a 16-week educational experiment. The student participants were randomly divided into two experimental groups. Students in the maker group received weekly educational robotics lessons, whereas those in the nonmaker group only engaged in other after-school learning activities such as homework practice in traditional classrooms. Mixed methods research was used for data collection. An experiment with a pretest\u2013posttest and control group design was employed to measure the students\u2019 electrical engineering and computer programming content knowledge and problem-solving skills. In addition, a qualitative approach with an emphasis on filed observation was adopted to evaluate the instructional implementation of the maker education program. The quantitative findings revealed that maker education training significantly improved the electrical engineering and computer programming content knowledge of the students and improved their problem-solving skills. The qualitative findings showed the students required considerable learning support from the instructor such as strategies for software and hardware debugging."], "score": 0.0}, {"id": "(Wang et al., 2022)", "paper": {"corpus_id": 249048171, "title": "Research on the Impacts of Cognitive Style and Computational Thinking on College Students in a Visual Artificial Intelligence Course", "year": 2022, "venue": "Frontiers in Psychology", "authors": [{"name": "Chi-Jane Wang", "authorId": "2270159"}, {"name": "Hua-Xu Zhong", "authorId": "1753583551"}, {"name": "Po-Sheng Chiu", "authorId": "3154987"}, {"name": "Jui-Hung Chang", "authorId": "144336191"}, {"name": "Pei-Hsuan Wu", "authorId": "2153093796"}], "n_citations": 8}, "snippets": ["Visual programming plays an important role in programming education to promote students' understanding of programming and to maximize their engagement in problem-solving (Mladenovi\u0107 et al., 2020). Visual programming provides a programming interface that helps students learn programming concepts and processes (Lye et al., 2014)(Chao, 2016)(Essel et al., 2017)(Mladenovi\u0107 et al., 2018)(Scherer et al., 2020). In particular, (Hu et al., 2020) indicated that visual programming can improve student's academic performance with a small to medium significant overall mean effect size in this area. A visual programming environment allows students to focus on developing and designing programs (Mladenovi\u0107 et al., 2018)(Topalli et al., 2018), so they become more motivated to solve programming problems without grammar constraints. Visual programming has major learning benefits for students, including an intuitive programming interface and reduced difficulties related to programming (Lye et al., 2014)(Essel et al., 2017)(Mladenovi\u0107 et al., 2018)(Lindberg et al., 2018). Considering the need to effectively develop AI talents at the university level, it is necessary to consider the learning benefits provided by a visual programming learning environment. It helps university students quickly learn about AI and helps them gain a better understanding of AI."], "score": 0.89208984375}, {"id": "(Chen et al., 2023)", "paper": {"corpus_id": 257145390, "title": "Computational Thinking Training and Deep Learning Evaluation Model Construction Based on Scratch Modular Programming Course", "year": 2023, "venue": "Computational Intelligence and Neuroscience", "authors": [{"name": "Xiaoli Chen", "authorId": "2157262938"}, {"name": "XiaoMing Wang", "authorId": "2209867633"}], "n_citations": 5}, "snippets": ["Visual programming tools lead learners to contact the code language in the way of module splicing, which can make learners accept learning programming psychologically. Its main teaching function is to weaken the writing of programming code, emphasize the application of CT knowledge and methods, and enhance the learner's motivation (Zheng et al., 2021). Visual programming tools can describe and execute problems in real situations in a modular programming language according to the problemsolving plan (Xiang et al., 2021)."], "score": 0.90478515625}, {"id": "(Zheng et al., 2021)", "paper": {"corpus_id": 235749050, "title": "Improving Visual Reasoning Through Semantic Representation", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "Wenfeng Zheng", "authorId": "51452833"}, {"name": "Xiangjun Liu", "authorId": "2144226207"}, {"name": "X. Ni", "authorId": "2121973028"}, {"name": "Lirong Yin", "authorId": "143931711"}, {"name": "Bo Yang", "authorId": "143787142"}], "n_citations": 111}, "snippets": ["In visual reasoning, the achievement of deep learning significantly improved the accuracy of results. Image features are primarily used as input to get answers. However, the image features are too redundant to learn accurate characterizations within a limited complexity and time. While in the process of human reasoning, abstract description of an image is usually to avoid irrelevant details. Inspired by this, a higher-level representation named semantic representation is introduced. In this paper, a detailed visual reasoning model is proposed. This new model contains an image understanding model based on semantic representation, feature extraction and process model refined with watershed and u-distance method, a feature vector learning model using pyramidal pooling and residual network, and a question understanding model combining problem embedding coding method and machine translation decoding method. The feature vector could better represent the whole image instead of overly focused on specific characteristics. The model using semantic representation as input verifies that more accurate results can be obtained by introducing a high-level semantic representation. The result also shows that it is feasible and effective to introduce high-level and abstract forms of knowledge representation into deep learning tasks. This study lays a theoretical and experimental foundation for introducing different levels of knowledge representation into deep learning in the future."], "score": 0.0}, {"id": "(Xiang et al., 2021)", "paper": {"corpus_id": 237732833, "title": "GeoPS: An interactive visual computing tool for thermodynamic modelling of phase equilibria", "year": 2021, "venue": "Journal of Metamorphic Geology", "authors": [{"name": "Hua Xiang", "authorId": "2064888120"}, {"name": "J. Connolly", "authorId": "145109359"}], "n_citations": 134}, "snippets": ["The availability of thermodynamic data for geologically relevant phases has made practical the calculation of stable phase relations throughout the mantle and crust of terrestrial planets. GeoPS (http://www.geops.org) is a program designed for this purpose in which both input and output are done through an intuitive graphical user interface. GeoPS provides a wide range of phase equilibrium calculations based on a novel Gibbs energy minimization algorithm. The algorithm provides for exceptionally robust and computationally efficient solution to the phase equilibrium problem by successive alternation between a linear programming step to identify stable phase compositions and a non\u2010linear programming step to refine the compositions estimated during the linear programming. Applications include calculation of various types of phase diagrams and path\u2010dependent phase fractionation. By combining an easy\u2010to\u2010use graphical user interface with a robust and efficient solver, GeoPS makes phase equilibrium modelling accessible to researchers and students with minimal training and provides a powerful tool for understanding natural phase relations and for planning experimental work."], "score": 0.0}, {"id": "(Hu et al., 2020)", "paper": {"corpus_id": 225492990, "title": "Exploring the Effectiveness and Moderators of Block-Based Visual Programming on Student Learning: A Meta-Analysis", "year": 2020, "venue": "Journal of educational computing research", "authors": [{"name": "Yue Hu", "authorId": "2108955049"}, {"name": "Cheng-Huan Chen", "authorId": "2004926649"}, {"name": "C. Su", "authorId": "2355658"}], "n_citations": 46}, "snippets": ["Block-based visual programming tools, such as Scratch, Alice, and MIT App Inventor, provide an intuitive and easy-to-use editing interface through which to promote programming learning for novice students of various ages. However, very little attention has been paid to investigating these tools\u2019 overall effects on students\u2019 academic achievement and the study features that may moderate the effects of block-based visual programming from a comprehensive perspective. Thus, the present study carried out a meta-analysis to systemically examine 29 empirical studies (extracting 34 effect sizes) using experimental or quasi-experiments involving the programming learning effects of employing block-based visual programming tools to date (until the end of 2019). The results showed a small to medium significant positive overall mean effect size (fixed-effect model g\u2009=\u20090.37; random-effects model g = 0.47) of the use of these block-based visual programming tools with respect to students\u2019 academic achievement. Furthermore, the overall mean effect size was significantly affected by the educational stage, programming tool used, experimental treatment, and school location. Discussions and implications based on the findings are provided."], "score": 0.0}, {"id": "(Doman et al., 2015)", "paper": {"corpus_id": 55310713, "title": "Effect of GameMaker on Student Attitudes and Perceptions of Instructors", "year": 2015, "venue": "", "authors": [{"name": "M. Doman", "authorId": "38066480"}, {"name": "M. Sleigh", "authorId": "46430396"}, {"name": "C. Garrison", "authorId": "48828482"}], "n_citations": 3}, "snippets": ["Research has shown VPEs are successful interventions to introduce programming to new students (Siiman et al., 2014). GameMaker, in particular, has been successfully utilized to teach programming concepts to children, adolescents, adults, and senior citizens (Guimar\u00e3es et al., 2008)(Overmars, 2004). This tool may be especially useful in engaging both genders, as women show a preference for computer games with a creative, versus solely destructive, component (Chamillard, 2006)."], "score": 0.888671875}, {"id": "(Guimaraes et al., 2008)", "paper": {"corpus_id": 1600632, "title": "An exploratory overview of teaching computer game development", "year": 2008, "venue": "Journal of Computing Sciences in Colleges (JCSC; Formerly: Journal of Computing in Small Colleges)", "authors": [{"name": "M. Guimar\u00e3es", "authorId": "144654035"}, {"name": "M. Murray", "authorId": "4096538"}], "n_citations": 11}, "snippets": ["The computer game industry has exploded reaching sales of several billion dollars a year and, consequently, a majority of college students are familiar with the gaming environment. In fact, videogame development has been cited as one way to motivate students to explore the world of Computer Science. However, most videogames are extremely complex computer programs created by a team of developers including programmers and graphic artists and represent thousands of hours of work. Fortunately there are software tools available that provide a way for simple computer games to be created fairly easily using a building block approach. This paper discusses the successes and challenges of teaching a videogame design and development summer program using the software development tool, Game Maker, and from this experience examines how videogame development might be incorporated into a Computer Science curriculum. The first section provides an overview of the Game Maker program and outlines the material taught in the program. Observations of the most successful teaching methods and approaches utilized are also explored. We conclude with a discussion of where videogame design might best be suited in a Computer Science curriculum citing its attractiveness to non-Computer Science majors, its use as a way to introduce introductory programming concepts and as a way to help students learn to read code. While Game Maker is not sophisticated nor is it a substitute for teaching a standard programming language, it can be easily integrated into introductory Computer Science courses."], "score": 0.0}, {"id": "(Papadakis, 2021)", "paper": {"corpus_id": 235383033, "title": "The Impact of Coding Apps to Support Young Children in Computational Thinking and Computational Fluency. A Literature Review", "year": 2021, "venue": "Frontiers in Education", "authors": [{"name": "Stamatis Papadakis", "authorId": "31818512"}], "n_citations": 90}, "snippets": ["Data that shows that young children can learn and acquire Computational Thinking (CT) skills has led governments and policymakers internationally to integrate CT into the curriculum, starting in the earliest grades. Researchers support the idea that this introduction must not solely focus on a problem-solving process skill (CT) but instead provide children with new ways to express themselves, supporting their cognitive, language, and socio-emotional development (Computational Fluency-CF). Coupled with the media and government\u2019s rhetoric and an increasing number of apps offering various programming lessons, puzzles, and challenges, educators have been responsible for introducing young children to CT and CF using touchscreen technology. This paper presents a literature review (N = 21) of empirical studies on applying four coding apps to support young children\u2019s learning of CT and CF. The main conclusion is that all apps positively affect the development of children\u2019s CT skills. None of the apps can ultimately support the development of CF, although ScratchJr, with a \"sandbox\" approach, can better help students express themselves."], "score": 0.0}, {"id": "(Lindberg et al., 2018)", "paper": {"corpus_id": 69960068, "title": "Gamifying programming education in K\u201012: A review of programming curricula in seven countries and programming games", "year": 2018, "venue": "British Journal of Educational Technology", "authors": [{"name": "Renny S. N. Lindberg", "authorId": "40502733"}, {"name": "T. Laine", "authorId": "33012794"}, {"name": "Lassi Haaranen", "authorId": "1785335"}], "n_citations": 105}, "snippets": ["An increasing number of countries have recently included programming education in their curricula. Similarly, utilizing programming concepts in gameplay has become popular in the videogame industry. Although many games have been developed for learning to program, their variety and their correspondence to national curricula remain an uncharted territory. Consequently, this paper has three objectives. Firstly, an investigation on the guidelines on programming education in K\u201012 in seven countries was performed by collecting curricula and other relevant data official from governmental and non\u2010profit educational websites. Secondly, a review of existing acquirable games that utilize programming topics in their gameplay was conducted by searching popular game stores. Lastly, we compared the curricula and made suggestions as to which age group the identified games would be suitable. The results of this study can be useful to educators and curriculum designers who wish to gamify programming education. [ABSTRACT FROM AUTHOR] uracy of the copy. Users should refer to the original published version of the material for the full abstract. (Copyright applies to all Abstracts.)"], "score": 0.0}, {"id": "(Bai et al., 2019)", "paper": {"corpus_id": 68068900, "title": "Application of Visual Programming in Program Design Course", "year": 2019, "venue": "DEStech Transactions on Social Science Education and Human Science", "authors": [{"name": "Xiaojun Bai", "authorId": "2114140303"}, {"name": "Baili Liu", "authorId": "2801842"}], "n_citations": 1}, "snippets": ["According to the problems in teaching of computer programming course, brought visual programming tools to assist teaching, introduced the advantages of visual programming, and made use of it in algorithm design, coding and modular design. Practice shows that by introducing of visual programming, it helps the students to improve their interesting, and develop the ability of logic thinking as well as programming", ".But in teaching practice, it is quite difficult to reach the objects of this course. Firstly, it needs great efforts on coding and debugging of programs, but Students are often afraid of tedious syntax of the language, and finally lost confidence for programming when meet program errors again and again. Secondly, the procedure of programming is indeed a procedure of logical thinking, but for many fresh students, the ability of logical thinking is still weak, there is some difficulty for them to understand the logic of programs, so we need a gradual training method for logical thinking. Thirdly, the flow diagram that been used for expressing the algorithm, but for it cannot be executed, there has no way to verify the result of the algorithm, we need stronger tools to express algorithms and verify them. In recent years, a lot of visual programming tools came into being, for example, Scratch [3] , Blockly [4] , Snap [5] and so on. By introducing of visual programming tools in computer programming course, the problems mentioned above can be solved effectively. First, for that the core of computational thinking is the ideas rather than the language syntax, by using of visual tools will simplify programming, thus students will focus on the program logic rather than the language syntax, it will help to overcome the fear of programming and cultivate there interesting. Second, visual program help to express the logic of algorithm clearly, thus it helps to train logical thinking through visual programming, lastly, by modeling with visual programming tools, it is easy to execute the algorithm immediately, thus convenient to verify the algorithm."], "score": 0.9365234375}], "table": null}, {"title": "Cognitive Benefits of Visual Programming", "tldr": "Visual Programming Languages reduce cognitive load by eliminating syntax concerns and providing intuitive visual representations that better align with human spatial reasoning. This allows beginners to focus on program logic and problem-solving rather than language mechanics, making programming concepts more accessible and comprehensible. (10 sources)", "text": "\nVisual Programming Languages (VPLs) offer significant cognitive advantages that make them particularly effective for learning programming concepts. One of the primary cognitive benefits is the substantial reduction in cognitive load compared to text-based programming. Block-based programming, for instance, facilitates learning by reducing the mental effort that would otherwise be required for textual programming, allowing learners to focus on the logic and structures involved in programming rather than the challenges of writing code <Paper corpusId=\"208615635\" paperTitle=\"(Chiazzese et al., 2019)\" isShortName></Paper>.\n\nTraditional programming languages often impose a heavy cognitive burden due to their requirement for precise and complex syntax that is \"unfamiliar and unnatural for beginners\" <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper>. This syntax complexity frequently creates barriers to learning programming as novices struggle with language mechanics rather than conceptual understanding. Visual programming environments address this issue by providing block-based elements that offer clear visual cues on how to use commands, drastically reducing the cognitive resources devoted to syntax concerns <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper>.\n\nFrom a cognitive perspective, visual languages are \"less likely to tax a novice's working memory\" compared to text-based alternatives <Paper corpusId=\"60833664\" paperTitle=\"(Bonar et al., 1990)\" isShortName></Paper>. This reduced cognitive load manifests in practical learning outcomes, with research showing that students using visual interfaces \"spent less time off track and completed more of the activity's goals in less time\" compared to those using textual interfaces <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper> <Paper corpusId=\"38535646\" paperTitle=\"(Saito et al., 2017)\" isShortName></Paper>.\n\nThe visual nature of VPLs aligns better with human spatial reasoning abilities. By using graphical elements that can be manipulated in two-dimensional space, VPLs leverage spatial cognition to make programming concepts more intuitive <Paper corpusId=\"32610688\" paperTitle=\"(Basu et al., 2016)\" isShortName></Paper>. Visual constructs significantly reduce issues with program syntax, allowing students to focus on the semantic meaning of programming constructs rather than textual structures <Paper corpusId=\"32610688\" paperTitle=\"(Basu et al., 2016)\" isShortName></Paper>. This is particularly helpful for understanding complex programming concepts like loops and conditionals, which are easier to interpret through visual representations <Paper corpusId=\"32610688\" paperTitle=\"(Basu et al., 2016)\" isShortName></Paper>.\n\nVPLs also address a common educational problem where \"the focus is too much on learning specific syntax or semantics rather than understanding the process\" <Paper corpusId=\"248387201\" paperTitle=\"(Kaivo et al., 2024)\" isShortName></Paper> <Paper corpusId=\"6485878\" paperTitle=\"(Przybylla et al., 2014)\" isShortName></Paper>. By shifting attention from syntax to the underlying logic of programming, VPLs help students construct more meaningful programs and exercise greater creativity, focusing on ideas rather than technical limitations <Paper corpusId=\"248387201\" paperTitle=\"(Kaivo et al., 2024)\" isShortName></Paper> <Paper corpusId=\"6485878\" paperTitle=\"(Przybylla et al., 2014)\" isShortName></Paper>.\n\nThe use of icons and visual cues in block-based programming facilitates students' recognition of programming functions, such as commands, conditions, and loops <Paper corpusId=\"208615635\" paperTitle=\"(Chiazzese et al., 2019)\" isShortName></Paper> <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper>. These visual elements help learners build mental models of programming concepts more easily than abstract textual representations. Meta-analysis of previous studies has found that \"interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code\" <Paper corpusId=\"264168616\" paperTitle=\"(Wen et al., 2023)\" isShortName></Paper>.\n\nThe puzzle-like interface common in many VPLs provides additional cognitive scaffolding. By using interfaces based on visual blocks that fit together like puzzle pieces, these tools \"considerably limit the prior knowledge required to program and reinforce the program structure\" <Paper corpusId=\"62816171\" paperTitle=\"(Eguiluz et al., 2018)\" isShortName></Paper>. This approach eliminates the possibility of syntax errors and allows learners to focus exclusively on the logic of the task at hand <Paper corpusId=\"62816171\" paperTitle=\"(Eguiluz et al., 2018)\" isShortName></Paper>.", "citations": [{"id": "(Chiazzese et al., 2019)", "paper": {"corpus_id": 208615635, "title": "Educational Robotics in Primary School: Measuring the Development of Computational Thinking Skills with the Bebras Tasks", "year": 2019, "venue": "Informatics", "authors": [{"name": "G. Chiazzese", "authorId": "1985775"}, {"name": "M. Arrigo", "authorId": "33520169"}, {"name": "Antonella Chifari", "authorId": "3344445"}, {"name": "Violetta Lonati", "authorId": "1770175"}, {"name": "Crispino Tosto", "authorId": "26632478"}], "n_citations": 64}, "snippets": ["Block programming is based on drag and drop of consecutive visual tiles on the editing area to compose different instructions; first of all, it facilitates the learning of programming skills because of a reduction in the cognitive load potentially required for textual programming (Weintrop et al., 2015)(Weintrop et al., 2017). Moreover, Kelleher, and Pausch (Kelleher et al., 2005) recognize further advantages in the use of visual programming for novice learners. Indeed, the visual block-based instruction is built using icons that facilitate students' recognition of its function, such as commands, conditions, and loops. Accordingly, visual programming allows students to focus their attention more on the logic and structures involved in programming tasks than in challenges related to writing code."], "score": 0.9326171875}, {"id": "(Chiu, 2020)", "paper": {"corpus_id": 212726996, "title": "Facilitating K-12 Teachers in Creating Apps by Visual Programming and Project-based Learning", "year": 2020, "venue": "International Journal of Emerging Technologies in Learning (iJET)", "authors": [{"name": "Chiung-Fang Chiu", "authorId": "2111748"}], "n_citations": 40}, "snippets": ["Traditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming (Denny et al., 2011)- (Denny et al., 2012). Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions. Study by (Price et al., 2015) indicated that students who used the visual interface for programming spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface for programming. Saito, Washizaki, and Fukazawa also compared the learning effects of text-based and visual-based programming and found that visual-based programming induces a larger change in attitude toward programming (Saito et al., 2017). Therefore, research results suggest that visual-based programming is advantageous in a programming implementation environment for novice programmers."], "score": 0.9560546875}, {"id": "(Bonar et al., 1990)", "paper": {"corpus_id": 60833664, "title": "A visual programming language for novices", "year": 1990, "venue": "", "authors": [{"name": "Jeffrey Bonar", "authorId": "143925072"}, {"name": "Blaise W. Liffick", "authorId": "2074295"}], "n_citations": 28}, "snippets": ["There are two basic reasons to turn to a visual language in a programming language for novices.\n\nFirst, a visual language provides the flexibility and expressiveness needed for a novice language to express a large vocabulary of programming plans. In our experience, a linear textual version of a plan-based programming language is quite unwieldy. Second, from a point of view of novice cognitive capability, a visual language is less likely to tax a novice's working memory."], "score": 0.927734375}, {"id": "(Saito et al., 2017)", "paper": {"corpus_id": 38535646, "title": "Comparison of Text-Based and Visual-Based Programming Input Methods for First-Time Learners", "year": 2017, "venue": "J. Inf. Technol. Educ. Res.", "authors": [{"name": "Daisuke Saito", "authorId": "2064115776"}, {"name": "H. Washizaki", "authorId": "1794290"}, {"name": "Y. Fukazawa", "authorId": "1759835"}], "n_citations": 18}, "snippets": ["Findings The following results are revealed: (1) The visual input method induces a larger change in attitude toward programming. (2) The number of operations and input quantity influence both groups. (3) The overall results suggest that a visual input is advantageous in a programming implementation environment for first learners."], "score": 0.0}, {"id": "(Basu et al., 2016)", "paper": {"corpus_id": 32610688, "title": "Identifying middle school students\u2019 challenges in computational thinking-based science learning", "year": 2016, "venue": "Research and Practice in Technology Enhanced Learning", "authors": [{"name": "Satabdi Basu", "authorId": "2843915"}, {"name": "Gautam Biswas", "authorId": "145800351"}, {"name": "P. Sengupta", "authorId": "35019130"}, {"name": "A. Dickes", "authorId": "2813127"}, {"name": "J. Kinnebrew", "authorId": "1732269"}, {"name": "Douglas B. Clark", "authorId": "34995102"}], "n_citations": 110}, "snippets": ["In a visual programming (VP) environment, students construct programs using graphical objects and a drag-and-drop interface, thus making the programming more intuitive and accessible to the novice programmer (Kelleher et al., 2005). Visual constructs significantly reduce issues with program syntax and understanding textual structures making it easier for students to focus on the semantic meaning of the constructs (Soloway, 1993). For example, visual interfaces make it easier to interpret and use flow of control constructs, such as loops and conditionals (Parsons and Haden 2007a, b). \n\nCTSiM provides a library of visual constructs that students can choose from and arrange spatially to generate their computational models. If students try to drag and drop a programming construct incorrectly, the system disallows the action and indicates the error by explicitly displaying an \"x\" sign. Therefore, CTSiM eliminates the possibility of generating programs (that is, models) with syntax errors. Examples of other agent-based VP environments include AgentSheets (Repenning, 1993), StarLogo TNG (Klopfer et al., 2005), Scratch (Maloney et al. 2004), ViMAP (Sengupta et al., 2015), and Alice (Conway 1997). They have been used successfully in teaching children CT through game design, storytelling, and modeling activities."], "score": 0.90869140625}, {"id": "(Kaivo et al., 2024)", "paper": {"corpus_id": 248387201, "title": "Designing activities and tools to support university students' creative and collaborative exploration of physical computing", "year": 2024, "venue": "Networked Learning Conference", "authors": [{"name": "Melissa Kaivo", "authorId": "151119319"}, {"name": "David Cuartielles", "authorId": "1710284"}, {"name": "Daniel Spikol", "authorId": "3167385"}], "n_citations": 0}, "snippets": ["Visual programming tools have been developed to help with these challenges and aim to make programming more accessible for non-technical students. However, the differences between visual programming and traditional text-based programming are considerably extensive. Visual programming languages simplify procedures and guide the user through the creation, for example, with blocks that snap together or use colour-coding. (Vihavainen et al., 2011) noticed that a common problem when teaching text-based programming languages is that the focus is too much on learning specific syntax or semantics rather than understanding the process. When students understand the process of coding, they can construct more meaningful programs. Also, (Przybylla et al., 2014) assert that physical computing encourages learners to use their imagination and creativity, focusing more on ideas, not on technical limitation. Physical computing takes a hands-on approach to understand computational thinking, building tangible artefacts to visualise the abstract programming concepts."], "score": 0.89111328125}, {"id": "(Przybylla et al., 2014)", "paper": {"corpus_id": 6485878, "title": "Physical Computing and its Scope - Towards a Constructionist Computer Science Curriculum with Physical Computing", "year": 2014, "venue": "Informatics Educ.", "authors": [{"name": "M. Przybylla", "authorId": "1923328"}, {"name": "R. Romeike", "authorId": "1711129"}], "n_citations": 86}, "snippets": ["Physical computing covers the design and realization of interactive objects and instal- lations and allows students to develop concrete, tangible products of the real world, which arise from the learners' imagination. This can be used in computer science education to provide students with interesting and motivating access to the different topic areas of the subject in construction- ist and creative learning environments. To make many existing activities and examples of such project ideas available for classroom use and to expand the topic areas suitable for learning in such environments beyond introductory to programming, a physical computing syllabus for computer science courses in general education schools has been developed. In this paper the methods and different perspectives that were taken into account are presented. The resulting syllabus can be used to develop a constructionist computer science curriculum with physical computing."], "score": 0.0}, {"id": "(DeLozier et al., 2023)", "paper": {"corpus_id": 259335765, "title": "Using Visual Programming Games to Study Novice Programmers", "year": 2023, "venue": "Int. J. Serious Games", "authors": [{"name": "Christian DeLozier", "authorId": "39722092"}, {"name": "James Shey", "authorId": "38203562"}], "n_citations": 6}, "snippets": ["Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13].\n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]."], "score": 0.947265625}, {"id": "(Wen et al., 2023)", "paper": {"corpus_id": 264168616, "title": "Toward improving student motivation and performance in introductory programming learning by Scratch: The role of achievement emotions", "year": 2023, "venue": "Science in progress", "authors": [{"name": "Fu-Hsiang Wen", "authorId": "133986052"}, {"name": "Tienhua Wu", "authorId": "31324477"}, {"name": "W. Hsu", "authorId": "2072747383"}], "n_citations": 5}, "snippets": ["In contrast to traditional textual languages, Scratch enables students to learn algorithms and programming logic with a simple interface and drag-and-drop structure without focusing on syntax, which renders the process more attractive by designing important and unique content (Erol et al., 2017) and supports a more intuitive and engaging experience. (Papadakis et al., 2019) Specifically, Scratch provides an interactive media-rich environment for learners to create animated stories and games, leading to creativity and programming skill development in an exciting, fun way. (Y\u00fckselt\u00fcrk et al., 2017)(Erol et al., 2017)(Papadakis et al., 2019) he advantages of Scratch for programming novices are evidential. Many researchers have identified positive results in learning, including programming knowledge and achievement, (Erol et al., 2017)(Papadakis et al., 2016)(Piedade et al., 2022) computational thinking skills, (Papadakis et al., 2016)(Piedade et al., 2022) a positive attitude toward programming, (Y\u00fckselt\u00fcrk et al., 2017)(Cheng, 2019)(Marcelino et al., 2018)(Papadakis et al., 2016) and learning motivation. (Erol et al., 2017) Scherer et al. (Scherer et al., 2020) meta-analyzed previous studies and found that interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code. The authors also suggested that Scratch accommodates different projects, allowing for different interests and learning styles that may positively influence learners' attitudes, resulting in better performance."], "score": 0.89306640625}, {"id": "(Eguiluz et al., 2018)", "paper": {"corpus_id": 62816171, "title": "An Evaluation of Open Digital Gaming Platforms for Developing Computational Thinking Skills", "year": 2018, "venue": "", "authors": [{"name": "A. Egu\u00edluz", "authorId": "38948497"}, {"name": "P. Garaizar", "authorId": "2476416"}, {"name": "M. Guenaga", "authorId": "3070661"}], "n_citations": 15}, "snippets": ["It is also important that all these tools seek to avoid novice programmers having to confront the complexity of text-based computer coding and to improve the learnability [7]. There are several ways to address this problem such as narrative tools, flow-model tools, or specialized output realizations (8394893); in this chapter, we focus on the most common tools, which are those that use the block-based visual programming. These tools employ user interfaces based on visual blocks that are moved and placed constructively as an assembly game, usually with the visual abstraction of a puzzle with its pieces and fitting ways. These blocks work as an abstraction of programming components: sentences, data, control structures, procedures, and so on. Consequently, they considerably limit the prior knowledge required to program and reinforce the program structure, eliminating the possibility of syntax errors and focusing only on the logic that exists in the activity that is to be undertaken."], "score": 0.927734375}], "table": null}, {"title": "Applications Beyond Education", "tldr": "Visual Programming Languages have expanded beyond educational settings into numerous professional domains including Internet of Things, robotics, game development, and business applications. Their intuitive interfaces make complex technologies accessible to non-programmers while increasing productivity across specialized fields. (11 sources)", "text": "\nWhile Visual Programming Languages (VPLs) initially gained prominence in educational contexts, they have evolved to serve numerous practical applications across diverse professional domains:\n\n## Internet of Things (IoT)\nVPLs are increasingly being used in IoT applications, allowing end users to access and manage connected devices and services through visual abstractions <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. These tools enable non-programmers to create sophisticated IoT systems without requiring extensive programming knowledge.\n\n## Mobile Application Development\nVisual programming has become an important approach for creating mobile applications, making app development accessible to users without traditional coding expertise <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. This aligns with the growing low-code movement that aims to reduce programming complexity and raise abstraction levels <Paper corpusId=\"259318509\" paperTitle=\"(Rybinski et al., 2023)\" isShortName></Paper> <Paper corpusId=\"254101606\" paperTitle=\"(Trigo et al., 2022)\" isShortName></Paper>.\n\n## Robotics\nVPLs have found significant applications in robotics programming, allowing users to program robots without extensive knowledge of traditional programming languages <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper> <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper> <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper>. The 2D representation of visual languages is particularly suitable for representing the parallel behavior of complex robotic systems with multiple components <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper> <Paper corpusId=\"61809687\" paperTitle=\"(Corral et al., 2019)\" isShortName></Paper>.\n\n## Virtual and Augmented Reality\nVPLs are being applied in VR/AR development, making these complex technologies more accessible to creators without specialized programming skills <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper> <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>.\n\n## Game Development\nVisual programming is widely used in game engines and development environments. Commercial creative applications like Unity have adopted visual programming interfaces to help developers create interactive experiences more intuitively <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper> <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\n## Business Applications\nVPLs have been applied to various business domains including:\n- Business process automation <Paper corpusId=\"248510289\" paperTitle=\"(Savidis, 2022)\" isShortName></Paper>\n- System administration <Paper corpusId=\"248510289\" paperTitle=\"(Savidis, 2022)\" isShortName></Paper>\n- Data warehousing and business analytics <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>\n- Banking applications <Paper corpusId=\"264307073\" paperTitle=\"(Rozen, 2023)\" isShortName></Paper> <Paper corpusId=\"264769167\" paperTitle=\"(Deursen et al., 2000)\" isShortName></Paper>\n\n## Domain-Specific Applications\nDomain-Specific Languages (DSLs) based on visual programming principles offer specific abstractions and notations that provide increased expressiveness for particular problem domains <Paper corpusId=\"264307073\" paperTitle=\"(Rozen, 2023)\" isShortName></Paper> <Paper corpusId=\"264769167\" paperTitle=\"(Deursen et al., 2000)\" isShortName></Paper>. These specialized VPLs have been successfully applied in fields such as:\n- Digital forensics <Paper corpusId=\"264307073\" paperTitle=\"(Rozen, 2023)\" isShortName></Paper> <Paper corpusId=\"264769167\" paperTitle=\"(Deursen et al., 2000)\" isShortName></Paper>\n- Multimedia development <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>\n- Computer-aided design (CAD) through tools like Grasshopper <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>\n- Simulations and system design <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>\n\n## Creative and Artistic Applications\nVisual programming interfaces are used in creative fields through tools like Max/MSP for multimedia development <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>. These environments \"often accelerate experimentation and exploration in the prototyping phases of creative applications\" <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>.\n\nThe expansion of VPLs beyond educational contexts reflects their ability to make programming more accessible while increasing productivity. Research indicates that low-code visual programming technologies enable \"significantly faster\" development and maintenance of software compared to traditional coding approaches <Paper corpusId=\"259318509\" paperTitle=\"(Rybinski et al., 2023)\" isShortName></Paper> <Paper corpusId=\"254101606\" paperTitle=\"(Trigo et al., 2022)\" isShortName></Paper>. This productivity advantage explains why visual programming systems \"are increasingly deployed in various domains for rapid development by non-professional programmers\" <Paper corpusId=\"248510289\" paperTitle=\"(Savidis, 2022)\" isShortName></Paper>.", "citations": [{"id": "(Kuhail et al., 2021)", "paper": {"corpus_id": 231725028, "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "M. Kuhail", "authorId": "1980707"}, {"name": "Shahbano Farooq", "authorId": "153238394"}, {"name": "R. Hammad", "authorId": "3083161"}, {"name": "Mohammed Bahja", "authorId": "8357681"}], "n_citations": 39}, "snippets": ["Visual programming refers to approaches and methods that use two-dimensional graphical elements to allow nonprogrammer end-users to create, extend, and customize software applications [9]. Visual programming languages (VPLs) are described by programming constructs and rules which are visually depicted [13].\n\nTraditionally, visual programming has been successfully used to help novices learn basics of programming by visualizing elements of a program. However, visual programming is increasingly being used by end users in various domains to create and tailor applications that are useful beyond the realm of education. For instance, VPLs are now being used in fields such as the Internet of Things (IoT) [3], [10], mobile application development [51], robotics [8], and Virtual/Augmented Reality [4].\n\nDespite the difference of VPL approaches, most tools utilize high-level abstractions to hide implementation details, and use similar interaction styles such as direct manipulation (in the form of drag-drop) and menu selection. Some commonalities have been observed among tools of the same domain. For instance, tools that target IoT allow end users to access services using visual abstractions, while tools built for educational purposes mostly use a block-based approach, and use similar visual abstractions representing programming constructs."], "score": 0.96044921875}, {"id": "(Rybinski et al., 2023)", "paper": {"corpus_id": 259318509, "title": "Visual Low-Code Language for Orchestrating Large-Scale Distributed Computing", "year": 2023, "venue": "Journal of Grid Computing", "authors": [{"name": "Kamil Rybi\u0144ski", "authorId": "1856819"}, {"name": "M. Smialek", "authorId": "3073900"}, {"name": "A. Sostaks", "authorId": "2868722"}, {"name": "Krzysztof Marek", "authorId": "152329569"}, {"name": "Rados\u0142aw Roszczyk", "authorId": "79552271"}, {"name": "Marek Wdowiak", "authorId": "50728919"}], "n_citations": 1}, "snippets": ["This tendency to reduce the complexity of programming and raise the abstraction at which programming constructs are formulated led to the emergence of the low-code approach [1]. Low-code solutions are predominantly based on creating visual, model-based languages [2] with the aim of making them more understandable and accessible. It can be argued that such a solution should be easier to use by inexperienced programmers and raises the productivity of programming (Trigo et al., 2022). For this reason, the usage of visual programming languages is recently gaining popularity in engineering, and education (Noone et al., 2017)(Kuhail et al., 2021)."], "score": 0.9052734375}, {"id": "(Trigo et al., 2022)", "paper": {"corpus_id": 254101606, "title": "Low-Code Versus Code-Based Software Development: Which Wins the Productivity Game?", "year": 2022, "venue": "IT Professional", "authors": [{"name": "Ant\u00f3nio Trigo", "authorId": "144341645"}, {"name": "J. Varaj\u00e3o", "authorId": "1743021"}, {"name": "M. Almeida", "authorId": "2146567324"}], "n_citations": 8}, "snippets": ["Software is becoming increasingly larger and complex, and companies should be aware of which technologies and platforms allow for higher productivity, that then translates into lower costs, shorter development times, and fewer required specialized resources. This article presents the results of an experiment carried out to compare the productivity of two low-code/code-based software development technologies. The results show that the development and maintenance of software with low-code technology is significantly faster, thus supporting the high potential of this technology. The key lesson is that low-code technology needs to be seriously taken into account by companies because of the potential productivity increase it represents for the development of management information systems."], "score": 0.0}, {"id": "(Zhou et al., 2023)", "paper": {"corpus_id": 276961580, "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs", "year": 2023, "venue": "International Conference on Human Factors in Computing Systems", "authors": [{"name": "Zhongyi Zhou", "authorId": "2261898099"}, {"name": "Jing Jin", "authorId": "2214751677"}, {"name": "Vrushank Phadnis", "authorId": "95798184"}, {"name": "Xiuxiu Yuan", "authorId": "29436685"}, {"name": "Jun Jiang", "authorId": "2261902264"}, {"name": "Xun Qian", "authorId": "2274943688"}, {"name": "Kristen Wright", "authorId": "2261902483"}, {"name": "Mark Sherwood", "authorId": "2261902982"}, {"name": "Jason Mayes", "authorId": "2261904117"}, {"name": "Jingtao Zhou", "authorId": "2261943879"}, {"name": "Yiyi Huang", "authorId": "2275032507"}, {"name": "Zheng Xu", "authorId": "2275017028"}, {"name": "Yinda Zhang", "authorId": "2274975067"}, {"name": "Johnny Lee", "authorId": "2274929798"}, {"name": "Alex Olwal", "authorId": "2292510931"}, {"name": "David Kim", "authorId": "2274972576"}, {"name": "Ram Iyengar", "authorId": "2214753154"}, {"name": "Na Li", "authorId": "2262397661"}, {"name": "Ruofei Du", "authorId": "2350823722"}], "n_citations": 1}, "snippets": ["Visual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace.\n\nA visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners.\n\nRecent work further explored the application of visual programming in education [9,35,40], XR creativity support [88,91,93], and robotics [14,30]31]."], "score": 0.90380859375}, {"id": "(Plauska et al., 2014)", "paper": {"corpus_id": 60941791, "title": "Reflections on Using Robots and Visual Programming Environments for Project-Based Teaching", "year": 2014, "venue": "", "authors": [{"name": "Ignas Plauska", "authorId": "3102760"}, {"name": "R. Lukas", "authorId": "69972564"}, {"name": "Robertas Dama\u0161evi\u010dius", "authorId": null}], "n_citations": 8}, "snippets": ["Visual programming is a method to specify a program in a two (or more) dimensional fashion (Myers, 1986), whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification (Lee et al., 2011)."], "score": 0.9453125}, {"id": "(Corral et al., 2019)", "paper": {"corpus_id": 61809687, "title": "A Study on the Suitability of Visual Languages for Non-Expert Robot Programmers", "year": 2019, "venue": "IEEE Access", "authors": [{"name": "Jos\u00e9 Mar\u00eda Rodr\u00edguez Corral", "authorId": "70644982"}, {"name": "Iv\u00e1n Ruiz-Rube", "authorId": "1409150721"}, {"name": "Ant\u00f3n Civit Balcells", "authorId": "1410550855"}, {"name": "Jos\u00e9 Miguel Mota-Mac\u00edas", "authorId": "1410550098"}, {"name": "Arturo Morgado-Est\u00e9vez", "authorId": "1410538136"}, {"name": "J. Dodero", "authorId": "1779677"}], "n_citations": 22}, "snippets": ["A visual programming language allows users and developers to create programs by manipulating program elements graphically. Several studies have shown the benefits of visual languages for learning purposes and their applicability to robot programming."], "score": 0.923828125}, {"id": "(Lin et al., 2023)", "paper": {"corpus_id": 269747039, "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models", "year": 2023, "venue": "International Conference on Human Factors in Computing Systems", "authors": [{"name": "David Chuan-En Lin", "authorId": "2106412318"}, {"name": "Nikolas Martelaro", "authorId": "3111790"}], "n_citations": 18}, "snippets": ["Visual programming interfaces (VPIs) have been extensively studied as tools to aid users in designing and implementing systems through graphical elements rather than text-based code [31]. A key benefit of VPIs is their lower entry barrier for novice programmers [45]. There are primarily two main paradigms for VPIs. The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph. Pioneering work in this area includes Prograph [17] and LabVIEW [27]. The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together. Notable works in this area include Scratch [35] and Blockly [19]. Many commercial creative applications have adopted VPIs, including game engines such as Unity [11], CAD tools such as Grasshopper [9], and multimedia development tools such as Max/MSP [12].\n\nVPI concepts have been applied to machine learning applications. For example, Teachable Machine [15] uses a visual interface to help students learn to train a machine learning model", "First, our tool leverages a block-based VPI paradigm, which has been shown to be effective in supporting novice programming learners [35]."], "score": 0.9384765625}, {"id": "(Dias et al., 2018)", "paper": {"corpus_id": 53282492, "title": "State of the Software Development Life-Cycle for the Internet-of-Things", "year": 2018, "venue": "arXiv.org", "authors": [{"name": "Jo\u00e3o Pedro Dias", "authorId": "145745979"}, {"name": "H. Ferreira", "authorId": "144027277"}], "n_citations": 14}, "snippets": ["Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007].\n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as:\n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device.\n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002].\n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017].\n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003]."], "score": 0.927734375}, {"id": "(Savidis, 2022)", "paper": {"corpus_id": 248510289, "title": "Programming Experience Requirements for Future Visual Development Environments", "year": 2022, "venue": "International Conference on Computer Supported Education", "authors": [{"name": "Anthony Savidis", "authorId": "1685511"}], "n_citations": 1}, "snippets": ["Visual programming is widely adopted for teaching purposes, considered as an appropriate starting base before introducing learners to typical programming languages.\n\nThe notion of visual programming concerns methods to define programs in a multi-dimensional fashion (Myers, 1990). The latter is not linked to the underlying program representation, but concerns the interactive visual means through which a program is created, refined and managed. Hence, text-based code is considered as one-dimension method and is therefore not treated as visual programming.\n\nWhile visual programming adoption ranges from rapid application development, interactive software configurations, and system administration, it became popular for educational purposes, in particular for teaching programming skills. In this framework, Scratch (Maloney et al., 2010), a block-based tool and Lego Mindstorms\u2122 (Vallance et al., 2009) are amongst the most well-known visual tools in learning contexts. Historically, visual programing systems have been deployed to introduce students in the programming universe before being enabled to manage and master professional source-based programming languages. In this context, their scope is generally considered to be restricted in the early stages of acquiring programming skills. But today, there are visual tools for professional development purposes, ranging from business process, Internet of Things, 3d graphics and robotics, meaning their scope is not merely restricted to learning activities.\n\nVisual programming systems are currently the primary instruments for the early teaching of basic programming skills, while they are increasingly deployed in various domains for rapid development by non-professional programmers."], "score": 0.9267578125}, {"id": "(Rozen, 2023)", "paper": {"corpus_id": 264307073, "title": "Game Engine Wizardry for Programming Mischief", "year": 2023, "venue": "PAINT@SPLASH", "authors": [{"name": "Riemer van Rozen", "authorId": "2163321"}], "n_citations": 4}, "snippets": ["Visual programming environments have the potential to make programming more accessible to programmers of all backgrounds and skill levels. For instance, Domain-Specific Languages (DSLs) have been shown to help non-programmers raise their productivity, and improve the quality of their work (Deursen et al., 2000). DSLs offer specific abstractions and notations that provide increased expressiveness over particular problem domains, e.g., banking, digital forensics and game design."], "score": 0.9169921875}, {"id": "(Deursen et al., 2000)", "paper": {"corpus_id": 264769167, "title": "Domain-specific languages: an annotated bibliography", "year": 2000, "venue": "SIGP", "authors": [{"name": "A. Deursen", "authorId": "1737202"}, {"name": "P. Klint", "authorId": "2257221078"}, {"name": "Joost Visser", "authorId": "2263636981"}], "n_citations": 496}, "snippets": ["We survey the literature available on the topic of domain-specific languages as used for the construction and maintenance of software systems. We list a selection of 75 key publications in the area, and provide a summary for each of the papers. Moreover, we discuss terminology, risks and benefits, example domain-specific languages, design methodologies, and implementation techniques."], "score": 0.0}], "table": null}], "cost": 0.5844960000000001}}
