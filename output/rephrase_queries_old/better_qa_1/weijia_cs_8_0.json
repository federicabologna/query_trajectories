{"better_query": "What are the main categories of visual programming languages, such as block-based, node-based, or diagram-based, and how do they differ?", "better_answer": {"sections": [{"title": "Introduction to Visual Programming Languages", "tldr": "Visual Programming Languages (VPLs) allow users to create programs by manipulating graphical elements rather than writing textual code. They use various visual representations such as blocks, diagrams, icons, and spatial arrangements to make programming more accessible, especially for novices. (9 sources)", "text": "\nVisual Programming Languages (VPLs) represent a departure from traditional text-based programming by enabling users to develop programs through graphical manipulation rather than textual specification <Paper corpusId=\"15820022\" paperTitle=\"(Bellucci et al., 2017)\" isShortName></Paper> <Paper corpusId=\"221340525\" paperTitle=\"(Alturayeif et al., 2020)\" isShortName></Paper>. In a foundational definition from 1990, Myers described visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion\" and distinguished it from program visualization, where graphics are used to visualize the execution of text-based programs <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. This multidimensional approach utilizes spatial associations and time-based dimensions to describe semantic relationships between programming elements <Paper corpusId=\"20991852\" paperTitle=\"(Kahanwal, 2013)\" isShortName></Paper>.\n\nVPLs are characterized by several key features, including the ability to drag blocks around the screen, construct flow diagrams, wire different blocks together, and use icons or other non-textual representations <Paper corpusId=\"116768063\" paperTitle=\"(Ariza, 2019)\" isShortName></Paper>. Unlike traditional programming, where code is written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements <Paper corpusId=\"268272915\" paperTitle=\"(Kodytek et al., 2024)\" isShortName></Paper>. This approach makes programming more accessible, particularly for novices, by lowering barriers to entry.\n\nBlock-based programming has emerged as one of the most prominent forms of visual programming. In these environments, users select appropriate blocks of code and snap them together to create programs <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. A significant milestone in this field was the introduction of blocks programming by AgentSheets in 1995, which marked a substantial advancement in visual programming languages <Paper corpusId=\"221340525\" paperTitle=\"(Alturayeif et al., 2020)\" isShortName></Paper> <Paper corpusId=\"41867280\" paperTitle=\"(Repenning, 2017)\" isShortName></Paper>. This approach has since been adopted by popular environments such as Scratch and Blockly, which incorporated key properties from AgentSheets to become widely used block programming languages <Paper corpusId=\"221340525\" paperTitle=\"(Alturayeif et al., 2020)\" isShortName></Paper>.\n\nWhen discussing software construction using non-textual methods, two primary approaches exist: Visual Programming Languages (VPL) and Visual Programming Interfaces (VPI). While VPLs involve program specification through graphical artifact manipulation, VPIs don't completely eliminate textual programming but offer graphical interfaces that generate code automatically <Paper corpusId=\"238126162\" paperTitle=\"(Lutalo et al., 2020)\" isShortName></Paper> <Paper corpusId=\"4039308\" paperTitle=\"(Noone et al., 2017)\" isShortName></Paper>. Notable examples of VPLs include RAPTOR (a flowchart-based VPL), Alice, and Scratch, where programs themselves can be considered executable graphical artifacts <Paper corpusId=\"238126162\" paperTitle=\"(Lutalo et al., 2020)\" isShortName></Paper>.", "citations": [{"id": "(Bellucci et al., 2017)", "paper": {"corpus_id": 15820022, "title": "ECCE Toolkit: Prototyping Sensor-Based Interaction", "year": 2017, "venue": "Italian National Conference on Sensors", "authors": [{"name": "Andrea Bellucci", "authorId": "145582592"}, {"name": "I. Aedo", "authorId": "1708076"}, {"name": "P. D\u00edaz", "authorId": "145429731"}], "n_citations": 9}, "snippets": ["Relevant for this research is visual programming, which allow end-users to create programs by manipulating graphic elements rather than by textual specification (Myers, 1986) and programming-by-demonstration, in which \"users provide example interactions and the system infers a routine from them\" without requiring textual programming (Lieberman et al., 2006) (p. 3)."], "score": 0.87548828125}, {"id": "(Alturayeif et al., 2020)", "paper": {"corpus_id": 221340525, "title": "DeepScratch: Scratch Programming Language Extension for Deep Learning Education", "year": 2020, "venue": "International Journal of Advanced Computer Science and Applications", "authors": [{"name": "Nora S. Alturayeif", "authorId": "2315312012"}, {"name": "Nouf Alturaief", "authorId": "2023398349"}, {"name": "Zainab Alhathloul", "authorId": "2023401654"}], "n_citations": 19}, "snippets": ["Visual programming languages allow users to develop programs by manipulating elements graphically instead of writing a program as a text", "There is a rich history of different visual programming tools designed for novices comprehensively surveyed in (Lye et al., 2014). AgentSheets by Repenning and Sumner [5] is a tool that introduced the blocks programming in 1995 to create games and simulations. Their work marked a substantial step in the field of visual programming language (Repenning, 2017). Several block-based programming language were designed after AgentSheet, such as Squeak eToys, Alice, and Scratch (Repenning, 2017)", "Blocks are end-user composable, editable, and can be arranged geometrically to represent tree structure and to define syntax [9]. The previous four keys form the properties of a highly accessible visual programming paradigm combined by the AgentSheets (Repenning, 2017). According to (Repenning, 2017), Scratch and Blockly adopted these properties to be in their core, and became the popular blocks programming language."], "score": 0.9208984375}, {"id": "(Joao et al., 2019)", "paper": {"corpus_id": 199002134, "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers", "year": 2019, "venue": "Education sciences", "authors": [{"name": "Piedade Jo\u00e3o", "authorId": "2157028104"}, {"name": "Dorotea Nuno", "authorId": "72582337"}, {"name": "Sampaio Ferrentini F\u00e1bio", "authorId": "2157024771"}, {"name": "P. ana", "authorId": "144370033"}], "n_citations": 23}, "snippets": ["In 1990, Myers (Myers, 1990) defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs. In this paper, we understand VPE to be a block-based or visual text-based or hybrid (block + text) programming environment, where the focus is on the core characteristics of each environment in order to improve the pupils\u00b4learning. \n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program (Cheng, 2019). In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming (Lye et al., 2014). Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together (Weintrop et al., 2018)."], "score": 0.94384765625}, {"id": "(Kahanwal, 2013)", "paper": {"corpus_id": 20991852, "title": "Abstraction Level Taxonomy of Programming Language Frameworks", "year": 2013, "venue": "arXiv.org", "authors": [{"name": "Brijender Kahanwal", "authorId": "2145585"}], "n_citations": 9}, "snippets": ["Visual programming language (VPL): So many dimensions are utilized here to describe the semantics. Such type of added dimensions uses the multi-dimensional objects, the spatial associations are utilized, or the time based dimensions are utilized to describe the \"before-after\" semantic associations. All these multi-dimensional objects or associations are the tokens and the collection these tokens are the visually based expressions. The visual expressions utilized in these may have a diagram, a free-hand sketch, an icon, or revelation of actions achieved by graphical objects. Where the visual expressions are involved, those are called the visual programming languages. These are also know as the object-based programming languages."], "score": 0.91845703125}, {"id": "(Ariza, 2019)", "paper": {"corpus_id": 116768063, "title": "DSCBlocks: An Open-Source Platform for Learning Embedded Systems Based on Algorithm Visualizations and Digital Signal Controllers", "year": 2019, "venue": "Electronics", "authors": [{"name": "Jonathan \u00c1lvarez Ariza", "authorId": "102148671"}], "n_citations": 7}, "snippets": ["Several features identify Visual Programming Languages (VPL), e.g., drag blocks around the screen, flow diagrams or any mechanism for wiring different blocks and using icons or non-text representations."], "score": 0.896484375}, {"id": "(Kodytek et al., 2024)", "paper": {"corpus_id": 268272915, "title": "Automated code development based on genetic programming in graphical programming language: A pilot study", "year": 2024, "venue": "PLoS ONE", "authors": [{"name": "Pavel Kodytek", "authorId": "100971028"}, {"name": "Alexandra Bodzas", "authorId": "1910708525"}, {"name": "Jan Zidek", "authorId": "2290253497"}], "n_citations": 1}, "snippets": ["Graphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements."], "score": 0.9091796875}, {"id": "(Repenning, 2017)", "paper": {"corpus_id": 41867280, "title": "Moving Beyond Syntax: Lessons from 20 Years of Blocks Programing in AgentSheets", "year": 2017, "venue": "Journal of Visual Languages and Sentient Systems", "authors": [{"name": "A. Repenning", "authorId": "1782080"}], "n_citations": 50}, "snippets": ["The blocks programming community has been preoccupied with identifying syntactic obstacles that keep novices from learning to program. Unfortunately, this focus is now holding back research from systematically investigating various technological affordances that can make programming more accessible. Employing approaches from program analysis, program visualization, and real-time interfaces can push blocks programming beyond syntax towards the support of semantics and even pragmatics. Syntactic support could be compared to checking spelling and grammar in word processing. Spell checking is relatively simple to implement and immediately useful, but provides essentially no support to create meaningful text. Over the last 25 years, I have worked to empower students to create their own games, simulations, and robots. In this time I have explored, combined, and evaluated a number of programming paradigms. Every paradigm including data flow, programming by example, and programming through analogies brings its own set of affordances and obstacles. Twenty years ago, AgentSheets combined four key affordances of blocks programming, and since then has evolved into a highly accessible Computational Thinking Tool. This article describes the journey to overcome first syntactic, then semantic, and most recently pragmatic, obstacles in computer science education."], "score": 0.0}, {"id": "(Lutalo et al., 2020)", "paper": {"corpus_id": 238126162, "title": "DNAP: Dynamic Nuchwezi Architecture Platform - A New Software Extension and Construction Technology", "year": 2020, "venue": "", "authors": [{"name": "Joseph Willrich Lutalo", "authorId": "2007576185"}, {"name": "Odongo Steven Eyobu", "authorId": "2041303630"}, {"name": "Benjamin Kanagwa", "authorId": "1774407"}], "n_citations": 0}, "snippets": ["When it comes to software construction using non-textual methods, two dominant approaches prevail: the use of visual programming interfaces (VPI) and then visual programming languages (VPL). VPL involves approaches to software construction in which the specification of a program relies on the manipulation of graphical artifacts [12]. VPI on the other hand does not eschew textual specification of a program entirely, but offers some graphical interface that allows the textual code to be generated automatically via manipulation of graphical artifacts.\n\nExamples of VPL include RAPTOR, a flow chart based VPL, Alice and Scratch [12]. Note that VPL approaches to software construction involve not just graphical interfaces or environments for producing the program, but that the program itself might be thought of as an executable graphical artifact -what traditionally have been called \"executable graphics\" [13].\n\nConsidering VPL approaches, the most outstanding in the industry today are block programming languages."], "score": 0.931640625}, {"id": "(Noone et al., 2017)", "paper": {"corpus_id": 4039308, "title": "Visual and textual programming languages: a systematic review of the literature", "year": 2017, "venue": "Journal of Computers in Education", "authors": [{"name": "Mark Noone", "authorId": "2056455701"}, {"name": "Aidan Mooney", "authorId": "12733217"}], "n_citations": 95}, "snippets": ["It is well documented and has been the topic of much research as well that Computer Science courses tend to have higher than average drop-out rates at third level, particularly so, for students advancing from first year to second year. This is a problem that needs to be addressed not only with urgency but also with caution. The required number of Computer Science graduates is growing every year, but the number of graduates is not meeting this demand, and one way that this problem can be alleviated is to encourage students, at an early age, towards studying Computer Science courses. This paper presents a systematic literature review that examines the role of visual and textual programming languages when learning to program, particularly as a First Programming Language. The approach is systematic in that a structured search of electronic resources has been conducted, and the results are presented and quantitatively analysed. This study will provide insight into whether or not the current approaches to teaching young learners programming are viable, and examines what we can do to increase the interest and retention of these students as they progress through their education."], "score": 0.0}], "table": null}, {"title": "Block-based Visual Programming Languages", "tldr": "Block-based visual programming languages use interlocking, puzzle-like blocks that can be dragged and dropped to create programs, preventing syntax errors while visually representing programming structures. Blocks typically have distinctive shapes, colors, and connectors that provide visual cues about how program elements can be combined to create syntactically valid code. (12 sources)", "text": "\nBlock-based programming is one of the most prominent forms of visual programming languages (VPLs), allowing users to create programs by dragging and dropping predefined \"blocks\" into a development area and connecting them together like puzzle pieces <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. This approach was pioneered by AgentSheets in 1995, marking a substantial step forward in the field of visual programming languages <Paper corpusId=\"221340525\" paperTitle=\"(Alturayeif et al., 2020)\" isShortName></Paper> <Paper corpusId=\"41867280\" paperTitle=\"(Repenning, 2017)\" isShortName></Paper>.\n\nIn block-based environments, blocks represent the atomic conceptual elements of a programming language and are typically organized into colored categories that help users identify and select appropriate blocks <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper> <Paper corpusId=\"253049931\" paperTitle=\"(Mayr-Dorn et al., 2022)\" isShortName></Paper>. These blocks have characteristic shapes with dents or nobs (following the puzzle piece metaphor) that provide visual cues about which blocks can connect with each other <Paper corpusId=\"253049931\" paperTitle=\"(Mayr-Dorn et al., 2022)\" isShortName></Paper>. If two blocks cannot form a valid syntactic statement, the interface prevents them from snapping together, thereby eliminating syntax errors <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper> <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper>.\n\nBlocks in these languages can be categorized into different types based on their function:\n1. Holders or control structures (loops, conditionals)\n2. Task execution blocks that perform specific actions\n3. Result-returning blocks used in conditions for control blocks <Paper corpusId=\"4793447\" paperTitle=\"(Vithana et al., 2017)\" isShortName></Paper>\n\nThe visual representation in block-based languages often uses color-coding to signify functionality, such as yellow for actions and green for sensor usage <Paper corpusId=\"232029733\" paperTitle=\"(Dragule et al., 2021)\" isShortName></Paper>. Most block-based environments also include descriptive text and/or icons within blocks, as well as editable fields to allow users to provide additional input <Paper corpusId=\"253049931\" paperTitle=\"(Mayr-Dorn et al., 2022)\" isShortName></Paper>.\n\nBlock-based programming has become particularly valuable for education, as it lowers barriers to entry by allowing users to focus on programming concepts rather than implementation details or syntax <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper> <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper>. This paradigm has proven effective for teaching programming across various age groups, from preschool to college <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper> <Paper corpusId=\"235383033\" paperTitle=\"(Papadakis, 2021)\" isShortName></Paper> <Paper corpusId=\"253196672\" paperTitle=\"(Timur et al., 2021)\" isShortName></Paper>.\n\nProminent block-based programming environments include Scratch, Blockly, and App Inventor, which adopted key properties from AgentSheets to become widely used programming tools <Paper corpusId=\"221340525\" paperTitle=\"(Alturayeif et al., 2020)\" isShortName></Paper> <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper> <Paper corpusId=\"264306865\" paperTitle=\"(Avishahar-Zeira et al., 2023)\" isShortName></Paper>. These platforms form part of the second major paradigm for Visual Programming Interfaces, which utilizes block-based function representations and allows users to create programs by connecting compatible components <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>.", "citations": [{"id": "(Joao et al., 2019)", "paper": {"corpus_id": 199002134, "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers", "year": 2019, "venue": "Education sciences", "authors": [{"name": "Piedade Jo\u00e3o", "authorId": "2157028104"}, {"name": "Dorotea Nuno", "authorId": "72582337"}, {"name": "Sampaio Ferrentini F\u00e1bio", "authorId": "2157024771"}, {"name": "P. ana", "authorId": "144370033"}], "n_citations": 23}, "snippets": ["In 1990, Myers (Myers, 1990) defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs. In this paper, we understand VPE to be a block-based or visual text-based or hybrid (block + text) programming environment, where the focus is on the core characteristics of each environment in order to improve the pupils\u00b4learning. \n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program (Cheng, 2019). In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming (Lye et al., 2014). Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together (Weintrop et al., 2018)."], "score": 0.94384765625}, {"id": "(Alturayeif et al., 2020)", "paper": {"corpus_id": 221340525, "title": "DeepScratch: Scratch Programming Language Extension for Deep Learning Education", "year": 2020, "venue": "International Journal of Advanced Computer Science and Applications", "authors": [{"name": "Nora S. Alturayeif", "authorId": "2315312012"}, {"name": "Nouf Alturaief", "authorId": "2023398349"}, {"name": "Zainab Alhathloul", "authorId": "2023401654"}], "n_citations": 19}, "snippets": ["Visual programming languages allow users to develop programs by manipulating elements graphically instead of writing a program as a text", "There is a rich history of different visual programming tools designed for novices comprehensively surveyed in (Lye et al., 2014). AgentSheets by Repenning and Sumner [5] is a tool that introduced the blocks programming in 1995 to create games and simulations. Their work marked a substantial step in the field of visual programming language (Repenning, 2017). Several block-based programming language were designed after AgentSheet, such as Squeak eToys, Alice, and Scratch (Repenning, 2017)", "Blocks are end-user composable, editable, and can be arranged geometrically to represent tree structure and to define syntax [9]. The previous four keys form the properties of a highly accessible visual programming paradigm combined by the AgentSheets (Repenning, 2017). According to (Repenning, 2017), Scratch and Blockly adopted these properties to be in their core, and became the popular blocks programming language."], "score": 0.9208984375}, {"id": "(Repenning, 2017)", "paper": {"corpus_id": 41867280, "title": "Moving Beyond Syntax: Lessons from 20 Years of Blocks Programing in AgentSheets", "year": 2017, "venue": "Journal of Visual Languages and Sentient Systems", "authors": [{"name": "A. Repenning", "authorId": "1782080"}], "n_citations": 50}, "snippets": ["The blocks programming community has been preoccupied with identifying syntactic obstacles that keep novices from learning to program. Unfortunately, this focus is now holding back research from systematically investigating various technological affordances that can make programming more accessible. Employing approaches from program analysis, program visualization, and real-time interfaces can push blocks programming beyond syntax towards the support of semantics and even pragmatics. Syntactic support could be compared to checking spelling and grammar in word processing. Spell checking is relatively simple to implement and immediately useful, but provides essentially no support to create meaningful text. Over the last 25 years, I have worked to empower students to create their own games, simulations, and robots. In this time I have explored, combined, and evaluated a number of programming paradigms. Every paradigm including data flow, programming by example, and programming through analogies brings its own set of affordances and obstacles. Twenty years ago, AgentSheets combined four key affordances of blocks programming, and since then has evolved into a highly accessible Computational Thinking Tool. This article describes the journey to overcome first syntactic, then semantic, and most recently pragmatic, obstacles in computer science education."], "score": 0.0}, {"id": "(Mayr-Dorn et al., 2022)", "paper": {"corpus_id": 253049931, "title": "Assessing industrial end-user programming of robotic production cells: A controlled experiment", "year": 2022, "venue": "Journal of Systems and Software", "authors": [{"name": "Christoph Mayr-Dorn", "authorId": "1412106655"}, {"name": "M. Winterer", "authorId": "39590163"}, {"name": "Christian Salomon", "authorId": "153704508"}, {"name": "Doris Hohensinger", "authorId": "2120343508"}, {"name": "Harald F\u00fcrschu\u00df", "authorId": "1730456"}], "n_citations": 3}, "snippets": ["A block-based programming language is a type of visual programming language. It uses blocks to represent statements, i.e. the atomic conceptual elements of a programming language, in contrast to text-based languages where statements are mapped to words. Usually, an instruction is expressed by a block representation that has a specific shape and color-code related to its type. Blocks also contain a describing text and/or an icon as well as optional editable fields to allow users to provide additional input. Most blocks have characteristic dents or nobs (following the metaphor of puzzle pieces) that provide visual clues to the user about where matching blocks can be connected to combine elements to syntactically correct programs. Furthermore, the resulting programs appear as larger blocks themselves, containing groups of aligned (nested) blocks from which they are compiled."], "score": 0.94677734375}, {"id": "(DeLozier et al., 2023)", "paper": {"corpus_id": 259335765, "title": "Using Visual Programming Games to Study Novice Programmers", "year": 2023, "venue": "Int. J. Serious Games", "authors": [{"name": "Christian DeLozier", "authorId": "39722092"}, {"name": "James Shey", "authorId": "38203562"}], "n_citations": 6}, "snippets": ["Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool (Timur et al., 2021)(Papadakis, 2021), to high school (Weintrop et al., 2017), to college (Urness et al., 2011). The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors (Weintrop et al., 2018)."], "score": 0.91162109375}, {"id": "(Vithana et al., 2017)", "paper": {"corpus_id": 4793447, "title": "Extensible Visual Programming Model for Modular Systems Targeting Novices", "year": 2017, "venue": "British Computer Society Conference on Human-Computer Interaction", "authors": [{"name": "Yasura Vithana", "authorId": "9346844"}, {"name": "Hashini Senaratne", "authorId": "40894841"}], "n_citations": 0}, "snippets": ["These blocks can be divided into three categories. One category is holders that represent programming structures. These include single task blocks, blocks with a task and terminating condition, loops and conditional blocks. They alone do not result in any useful output but need to be utilized in the process of creating a program combining the other two types of programming blocks. These can be even nested when required. The second category is the programming blocks that represent the execution of a task. Each task that the modules are capable of doing, but do not return a result results in this type of a block. The third category is the blocks that request the modules to return a result with or without doing a specific task. These are the blocks that are used in conditions for control blocks."], "score": 0.94091796875}, {"id": "(Dragule et al., 2021)", "paper": {"corpus_id": 232029733, "title": "A survey on the design space of end-user-oriented languages for specifying robotic missions", "year": 2021, "venue": "Journal of Software and Systems Modeling", "authors": [{"name": "Swaib Dragule", "authorId": "23203814"}, {"name": "T. Berger", "authorId": "39565422"}, {"name": "C. Menghi", "authorId": "144341567"}, {"name": "Patrizio Pelliccione", "authorId": "2909166"}], "n_citations": 15}, "snippets": ["Block-based languages use visual blocks to represent the language syntax. Such blocks have various shapes and colors for the various language constructs. Typically, the block shapes visualize constraints, e.g., where, in the mission specification the language concept represented by the block can be used. Block colors often depict a particular kind of functionality, such as yellow for actions and green for sensor usages, as seen in the environment Open Roberta [45]."], "score": 0.90234375}, {"id": "(Kuhail et al., 2021)", "paper": {"corpus_id": 231725028, "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "M. Kuhail", "authorId": "1980707"}, {"name": "Shahbano Farooq", "authorId": "153238394"}, {"name": "R. Hammad", "authorId": "3083161"}, {"name": "Mohammed Bahja", "authorId": "8357681"}], "n_citations": 39}, "snippets": ["Combining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages. All categories (or subcategories), based on visual program representation, presented in both [1] and [2] are assigned to a category under our new categorization. For instance, block-based languages represent jigsaw puzzle pieces in [1], while diagram-based languages cover diagrammatic languages in [2], data flow graphs and directed graphs in [1].\n\nBlock-based languages allow users to drag and drop ''blocks'' (program elements) from a predefined list of commands into the development area. These blocks are pieced together to make a program. This paradigm prevents syntax errors, which reduces the mental load of end users allowing them to focus on concepts rather than implementation details. Many block-based languages such as Scratch [92] and App Inventor [93] have made application development accessible to numerous end users.\n\nIcon-based or Iconic languages capitalize on the use of icons, graphical symbols representing objects or action [14]. Chang [15] explained that icons can be classified as complex and elementary icons. Elementary icons represent objects (e.g., file) or actions (e.g., delete, edit), whereas complex icons are composite object icons and visual sentences. Composite object icons are the outcome of assembling elementary object icons. Visual sentences are spatial arrangements of elementary icons.\n\nForm-based visual programming languages allow end-user developers to configure a form, in which triggers and actions are added by textual drop-down menus or visual dragand-drop [19]. Some form-based approaches are mostly visual, whereas others use some textual specifications.\n\nDiagram-based visual programming languages, also known as diagrammatic or data flow languages, are characterized by connecting graphical objects ( e.g., boxes) by arrows, lines, or arcs that represent relations. To understand a diagram-based program, users traverse the diagram. Such a diagram uses different means of perceptual coding to represent the flow of the program."], "score": 0.9921875}, {"id": "(Papadakis, 2021)", "paper": {"corpus_id": 235383033, "title": "The Impact of Coding Apps to Support Young Children in Computational Thinking and Computational Fluency. A Literature Review", "year": 2021, "venue": "Frontiers in Education", "authors": [{"name": "Stamatis Papadakis", "authorId": "31818512"}], "n_citations": 90}, "snippets": ["Data that shows that young children can learn and acquire Computational Thinking (CT) skills has led governments and policymakers internationally to integrate CT into the curriculum, starting in the earliest grades. Researchers support the idea that this introduction must not solely focus on a problem-solving process skill (CT) but instead provide children with new ways to express themselves, supporting their cognitive, language, and socio-emotional development (Computational Fluency-CF). Coupled with the media and government\u2019s rhetoric and an increasing number of apps offering various programming lessons, puzzles, and challenges, educators have been responsible for introducing young children to CT and CF using touchscreen technology. This paper presents a literature review (N = 21) of empirical studies on applying four coding apps to support young children\u2019s learning of CT and CF. The main conclusion is that all apps positively affect the development of children\u2019s CT skills. None of the apps can ultimately support the development of CF, although ScratchJr, with a \"sandbox\" approach, can better help students express themselves."], "score": 0.0}, {"id": "(Timur et al., 2021)", "paper": {"corpus_id": 253196672, "title": "Pre-service pre-school teachers' opinions about using block-based coding/scratch", "year": 2021, "venue": "Acta Didactica Napocensia", "authors": [{"name": "Serkan Timur", "authorId": "2057521942"}, {"name": "Bet\u00fcl Timur", "authorId": "70546556"}, {"name": "Elif G\u00fcven\u00e7", "authorId": "2129327879"}, {"name": "\u0130lknur Us", "authorId": "2189176196"}, {"name": "Eylem Yal\u00e7\u0131nkaya-\u00d6nder", "authorId": "1712266999"}], "n_citations": 6}, "snippets": ["\"Abstract: In this study, it was aimed to examine the pre-service pre-school teachers\u2019 opinions about using block-based coding/Scratch in education. 28 pre-service pre-school teachers were participated studying at a public university in a Marmara province region. Within the scope of the study, pre-service teachers were trained on the block-based coding Scratch program for four weeks. A semi-structured interview form consisting of 12 questions was used to determine the opinions of the participants. The data of the study were analyzed using the descriptive analysis method. As a result of the study, 85.71% of pre-school teacher candidates stated that block-based coding education should start at an early age like a language education, this education is important as a necessity of the technology age and all students should benefit from this education in order to provide an effective education, 14.25% of teacher candidates specified that this education is untimely for younger age levels and should not be given to everyone. In addition, the pre-service teachers stated that the block-based coding/Scratch program training helped them gain new ideas in terms of creating materials, improved their creativity and contributed to design abstract material in addition to concrete ones. Additionally, 46.42% of pre-service teachers stated that block-based coding education should start between the ages of 5-7. In this context, it is recommended to provide coding education both in pre-school and undergraduate education.\""], "score": 0.0}, {"id": "(Avishahar-Zeira et al., 2023)", "paper": {"corpus_id": 264306865, "title": "Could No-Code Be Code? Toward a No-Code Programming Language for Citizen Developers", "year": 2023, "venue": "SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software", "authors": [{"name": "Assaf Avishahar-Zeira", "authorId": "2260344112"}, {"name": "David H. Lorenz", "authorId": "2260344780"}], "n_citations": 4}, "snippets": ["Both No-Code and Low-Code are special cases of visual programming languages that use visual elements such as blocks, graphs, and owcharts to represent code. However, not every graphical language is necessarily No-Code.\n\nBlock-based coding languages [21] are visual programming languages that let end users create programs by connecting program elements graphically rather than textually [38]. For example, Scratch8 [28] is a popular visual programming language for children that uses blocks to represent commands. More generally, Blockly9 [25] is a JavaScript library for building a customized visual programming editor that uses interlocking blocks to represent elements of the code."], "score": 0.88671875}, {"id": "(Lin et al., 2023)", "paper": {"corpus_id": 269747039, "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models", "year": 2023, "venue": "International Conference on Human Factors in Computing Systems", "authors": [{"name": "David Chuan-En Lin", "authorId": "2106412318"}, {"name": "Nikolas Martelaro", "authorId": "3111790"}], "n_citations": 18}, "snippets": ["There are primarily two main paradigms for VPIs. The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph. Pioneering work in this area includes Prograph [17] and LabVIEW [27]. The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together. Notable works in this area include Scratch [35] and Blockly [19]."], "score": 0.95263671875}], "table": null}, {"title": "Node/Diagram/Flow-based Visual Programming Languages", "tldr": "Node/diagram/flow-based visual programming languages represent programs as directed graphs where nodes (typically boxes or other graphical objects) perform operations and are connected by arrows or lines that show data or control flow. These languages are particularly suited for representing data transformations, parallel processing, and system architecture. (10 sources)", "text": "\nNode-based visual programming languages, also known as diagram-based or flow-based languages, represent program structures and data flow using logical nodes linked with edges that reflect their correlation <Paper corpusId=\"202566030\" paperTitle=\"(Zikas et al., 2019)\" isShortName></Paper>. The resulting structure typically resembles a directed graph that provides users with a visual overview of data and program flow <Paper corpusId=\"202566030\" paperTitle=\"(Zikas et al., 2019)\" isShortName></Paper>. In these languages, boxes or other graphical objects are treated as entities, connected by arrows, lines, or arcs that represent relations between them <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>.\n\nDiagram-based VPLs (also referred to as diagrammatic or data flow languages) are characterized by connecting graphical objects (e.g., boxes) using arrows, lines, or arcs that represent relationships <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. To understand a diagram-based program, users traverse the diagram, which uses different means of perceptual coding to represent the program's flow <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. These languages constitute one of the two prominent domain-independent visual representations, alongside block-based languages, where boxes represent instructions in the program and arrows between boxes represent how data and control flows between instructions <Paper corpusId=\"248524774\" paperTitle=\"(Hirzel, 2022)\" isShortName></Paper>.\n\nIn the flow-based paradigm, models are created by joining different nodes and graphic lines representing data flow or transitions between different states <Paper corpusId=\"253043422\" paperTitle=\"(Baena-Perez et al., 2022)\" isShortName></Paper>. Notable examples in this category include BPMN, PetriNet, DRAKON, and UML activity diagrams <Paper corpusId=\"253043422\" paperTitle=\"(Baena-Perez et al., 2022)\" isShortName></Paper>. Node-based editing, exemplified by tools like Grasshopper, enables users to control the data flow through nodes and wires <Paper corpusId=\"258217657\" paperTitle=\"(Jiang, 2023)\" isShortName></Paper>.\n\nThe dataflow paradigm, one of the two main paradigms for Visual Programming Interfaces (VPIs), lets users specify how a program transforms data from step to step by connecting nodes in a directed graph <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>. Pioneering work in this area includes Prograph and LabVIEW <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>. According to Dias et al., graph-based approaches are among the most disseminated VPL development approaches, leveraging the metaphor of visual graphs with nodes and connections <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nSeveral subcategories exist within the node/diagram/flow-based paradigm:\n\n1. Data-flow languages: Computation is specified through graphs consisting of icons or similar visual representations that correspond to operational nodes, with lines connecting these nodes representing the flow of data between them <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\n2. Component-based languages: Based on the metaphor of networked computing devices or components, each component can perform various tasks in response to messages and data received from others <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\n3. Rule-based languages: These are based on the definition of triggering actions that happen upon changes, usually through visual if-then rules <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nSome visual programming environments combine aspects of both block-based and node-based approaches. For example, VPL (Visual Programming Language) for the Thymio robot uses event-action pairs represented by blocks, while the graphical software environment for the Dash robot uses events and actions represented by nodes and arrows between nodes <Paper corpusId=\"64771513\" paperTitle=\"(Ben-Ari et al., 2018)\" isShortName></Paper>. Similarly, Mosaicode uses a block metaphor where blocks have input/output ports, and connections between ports create a diagram\u2014resembling the node-based approach but generating code rather than being an interpreted environment like Pure Data or Max/MSP <Paper corpusId=\"67344764\" paperTitle=\"(Schiavoni et al., 2018)\" isShortName></Paper>.", "citations": [{"id": "(Zikas et al., 2019)", "paper": {"corpus_id": 202566030, "title": "Scenior: An Immersive Visual Scripting system of Gamified Training based on VR Software Design Patterns", "year": 2019, "venue": "arXiv.org", "authors": [{"name": "Paul Zikas", "authorId": "3419237"}, {"name": "Nick Lydatakis", "authorId": "1388001839"}, {"name": "Steve Kateros", "authorId": "19309698"}, {"name": "G. Papagiannakis", "authorId": "2896538"}], "n_citations": 1}, "snippets": ["Visual programming is getting more publicity as more platforms and tools are emerging to enlarge the community. We can separate them into two categories according to their visual appearance and basic functionalities: a) block-based and b) node-based scripting languages Block-based visual languages consist of modular blocks that represent fundamental programming utilities (if else, while, for loops etc.) or even custom prototypes that describe more complex functionalities", "On the other hand, node-based visual languages, represent structures and data flow using logical nodes linked with edges reflecting their correlation. The resulting structure looks like a directed graph that provides users with a visual overview of important data and program flow."], "score": 0.9775390625}, {"id": "(Daskalov et al., 2021)", "paper": {"corpus_id": 236336244, "title": "Hybrid Visual Programming Language Environment for Programming Training", "year": 2021, "venue": "TEM Journal", "authors": [{"name": "R. Daskalov", "authorId": "2666781"}, {"name": "G. Pashev", "authorId": "94696738"}, {"name": "Silvia N. Gaftandzhieva", "authorId": "2299512"}], "n_citations": 2}, "snippets": ["Many VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations", "Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding."], "score": 0.92236328125}, {"id": "(Kuhail et al., 2021)", "paper": {"corpus_id": 231725028, "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "M. Kuhail", "authorId": "1980707"}, {"name": "Shahbano Farooq", "authorId": "153238394"}, {"name": "R. Hammad", "authorId": "3083161"}, {"name": "Mohammed Bahja", "authorId": "8357681"}], "n_citations": 39}, "snippets": ["Combining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages. All categories (or subcategories), based on visual program representation, presented in both [1] and [2] are assigned to a category under our new categorization. For instance, block-based languages represent jigsaw puzzle pieces in [1], while diagram-based languages cover diagrammatic languages in [2], data flow graphs and directed graphs in [1].\n\nBlock-based languages allow users to drag and drop ''blocks'' (program elements) from a predefined list of commands into the development area. These blocks are pieced together to make a program. This paradigm prevents syntax errors, which reduces the mental load of end users allowing them to focus on concepts rather than implementation details. Many block-based languages such as Scratch [92] and App Inventor [93] have made application development accessible to numerous end users.\n\nIcon-based or Iconic languages capitalize on the use of icons, graphical symbols representing objects or action [14]. Chang [15] explained that icons can be classified as complex and elementary icons. Elementary icons represent objects (e.g., file) or actions (e.g., delete, edit), whereas complex icons are composite object icons and visual sentences. Composite object icons are the outcome of assembling elementary object icons. Visual sentences are spatial arrangements of elementary icons.\n\nForm-based visual programming languages allow end-user developers to configure a form, in which triggers and actions are added by textual drop-down menus or visual dragand-drop [19]. Some form-based approaches are mostly visual, whereas others use some textual specifications.\n\nDiagram-based visual programming languages, also known as diagrammatic or data flow languages, are characterized by connecting graphical objects ( e.g., boxes) by arrows, lines, or arcs that represent relations. To understand a diagram-based program, users traverse the diagram. Such a diagram uses different means of perceptual coding to represent the flow of the program."], "score": 0.9921875}, {"id": "(Hirzel, 2022)", "paper": {"corpus_id": 248524774, "title": "Low-Code Programming Models", "year": 2022, "venue": "Communications of the ACM", "authors": [{"name": "Martin Hirzel", "authorId": "1728836"}], "n_citations": 21}, "snippets": ["Two prominent domain-independent visual representations are boxes-and-arrows (e.g., BPMN (Ouyang et al., 2006)) or interlocking puzzle pieces (e.g., Scratch [30]). Here, boxes or puzzle pieces represent instructions in the program, and arrows between boxes or the interlock of pieces represent how data and control flows between instructions."], "score": 0.9423828125}, {"id": "(Baena-Perez et al., 2022)", "paper": {"corpus_id": 253043422, "title": "Visual authoring of virtual reality conversational scenarios for e-learning", "year": 2022, "venue": "Universal Access in the Information Society", "authors": [{"name": "Rub\u00e9n Baena-P\u00e9rez", "authorId": "1411449483"}, {"name": "Iv\u00e1n Ruiz-Rube", "authorId": "1409150721"}, {"name": "Jos\u00e9 Miguel Mota", "authorId": "32483651"}, {"name": "Anke Berns", "authorId": "49031811"}, {"name": "Antonio Balderas", "authorId": "144050001"}], "n_citations": 3}, "snippets": ["VPLs can be classified into two categories: imperative languages and flow-based languages (Mason et al., 2017). With the imperative languages, namely, block languages, the user creates their software by assembling different puzzle pieces intuitively. Within this category, Scratch, Snap! and Google Blockly stand out. Scratch enables novice programmers to create apps through its block-based language. However, the purpose with which these languages were created entails some limitations when it comes to use the latest technological innovations as, for instance, VR. On the other hand, with the flow-based languages, the models are created by joining different nodes and graphic lines representing the data flow or the transition between different states. Within this category, languages such as BPMN, PetriNet, DRAKON or UML activity diagrams can be found, among others (Garc\u00eda-Borgo\u00f1\u00f3n et al., 2014)."], "score": 0.958984375}, {"id": "(Jiang, 2023)", "paper": {"corpus_id": 258217657, "title": "Positional Control in Node-Based Programming", "year": 2023, "venue": "CHI Extended Abstracts", "authors": [{"name": "Peiling Jiang", "authorId": "2061281840"}], "n_citations": 4}, "snippets": ["Visual programming languages typically employ one of two popular design approaches \u2014 block-based editing (e.g. Scratch), which allows users to control the execution order of code blocks, and node-based editing (e.g. Grasshopper), which enables users to control the data flow through nodes and wires."], "score": 0.94921875}, {"id": "(Lin et al., 2023)", "paper": {"corpus_id": 269747039, "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models", "year": 2023, "venue": "International Conference on Human Factors in Computing Systems", "authors": [{"name": "David Chuan-En Lin", "authorId": "2106412318"}, {"name": "Nikolas Martelaro", "authorId": "3111790"}], "n_citations": 18}, "snippets": ["There are primarily two main paradigms for VPIs. The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph. Pioneering work in this area includes Prograph [17] and LabVIEW [27]. The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together. Notable works in this area include Scratch [35] and Blockly [19]."], "score": 0.95263671875}, {"id": "(Dias et al., 2018)", "paper": {"corpus_id": 53282492, "title": "State of the Software Development Life-Cycle for the Internet-of-Things", "year": 2018, "venue": "arXiv.org", "authors": [{"name": "Jo\u00e3o Pedro Dias", "authorId": "145745979"}, {"name": "H. Ferreira", "authorId": "144027277"}], "n_citations": 14}, "snippets": ["Based on their classification, we can consider that there are two main approaches for developing VPLs, namely: (1) graph-based, which are the most disseminated and in some way leverage the metaphor of visual graphs (nodes and connections), and, (2) box-based, which leverage the use of the metaphor of box and sub-boxes (e.g. User-Interfaces builders and Forms).\n\nWe can consider the next set of paradigms as the main paradigms as they are the most widespread in the literature [Burnett and Baker 1994;Diehl 2007; S. K. Chang 2002]: \n\n\u2022 Data-flow languages: Computation is specified by the means of graphs. This graph consists of icons (or similar visual representations) that correspond to operational nodes, being these nodes connected by lines that represent the flow of data between them. \n\n\u2022 Component-based languages (graph-based): These languages are based on the metaphor of networked computing devices or components. Each one of those components can perform a variety of tasks in response to messages and data received from others. \n\n\u2022 Rule-based languages: Language based on the definition of triggering actions that happen upon changes (e.g. the modification of a variable value can trigger an action). Usually, these mechanisms are based upon visual if-then rules. \n\n\u2022 Program-by-demonstration languages: Languages that, instead of relying on the specification of actions through instructions or commands, depend on demonstrations of the pretended task or objective. As so, the language bases itself on the manipulation of visual objects, and the tasks carried out are performed according to those manipulations. \n\n\u2022 Form-based & Spreadsheet-based languages: Spreadsheets are the most widespread VPL paradigm. These languages present a ledger-like sheet for entering and performing arithmetic on values. In these languages, the sheet is the single significant pictorial element that qualifies the original spreadsheet as a VPL. Form-based languages are somewhat similar in the scene that they result in a generalization of sheets into forms."], "score": 0.98974609375}, {"id": "(Ben-Ari et al., 2018)", "paper": {"corpus_id": 64771513, "title": "Robots and Their Applications", "year": 2018, "venue": "", "authors": [{"name": "M. Ben-Ari", "authorId": "1398913278"}, {"name": "F. Mondada", "authorId": "1727799"}], "n_citations": 96}, "snippets": ["Programming is simplified if a block-based language is used, usually a language based upon Scratch or Blockly (Fig. 1.7). \n\nTo further simplify programming a robot by young students, a fully graphical programming notation can be used. Figure 1.8 shows VPL (Visual Programming Language), a graphical software environment for the Thymio robot. It uses eventaction pairs: when the event represented by the block on the left occurs, the actions in the following blocks are performed. \n\nFigure 1.9 shows the graphical software environment for the Dash robot. It also uses events and actions, where the actions are represented by nodes and events are represented by arrows between nodes."], "score": 0.9033203125}, {"id": "(Schiavoni et al., 2018)", "paper": {"corpus_id": 67344764, "title": "Mosaicode and the visual programming of Web Application for Music and Multimedia", "year": 2018, "venue": "", "authors": [{"name": "F. Schiavoni", "authorId": "2116792"}, {"name": "L. Goncalves", "authorId": "29793059"}, {"name": "Jos\u00e9 Mauro da Silva Sandy", "authorId": "72875756"}], "n_citations": 7}, "snippets": ["The visual programming environment uses the Block metaphor to create computer programs. Blocks are organized into groups in our environment GUI, presented on Figure 1. A block is the minimal source code part and brings the abstraction of a functionality of our desired domain. Blocks have static properties, used to set up their functionality, presented in Figure 2. Blocks also have dynamic properties whose values can be set up by other blocks. This capability to exchange information is represented by the blocks input/output ports. The information exchange by different blocks is made creating a connection between two or more ports. A block port has a defined type and a connection can be done using ports of the same type. A Collection of Blocks and Connections creates a Diagram, as presented in Figure 3. In contrast with other visual programming languages, like Pure Data or Max/MSP, Mosaicode is not an interpreted environment but a code generator."], "score": 0.89306640625}], "table": null}, {"title": "Form-based Visual Programming Languages", "tldr": "Form-based visual programming languages allow users to create programs by configuring forms where triggers and actions are added through drop-down menus or drag-and-drop interfaces. These languages are closely related to spreadsheet-based approaches, with the form serving as the primary visual element that enables programming without traditional code. (3 sources)", "text": "\nForm-based visual programming languages represent a distinct category of VPLs where users configure forms by adding triggers and actions through textual drop-down menus or visual drag-and-drop interfaces <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. These languages vary in their visual nature, with some approaches being predominantly visual while others incorporate textual specifications <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>.\n\nThe form-based paradigm is closely related to spreadsheet-based languages, which are considered the most widespread VPL paradigm <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>. In spreadsheet-based languages, a ledger-like sheet serves as the interface for entering and performing arithmetic operations on values. The sheet itself is the significant pictorial element that qualifies spreadsheets as visual programming languages. Form-based languages can be seen as a generalization of sheets into forms, expanding on this foundation <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nThis type of visual programming language is particularly evident in electronic tables and their applications, where users can influence groups of related cells. An example of a form-based language is Forms/3 <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>. The form-based approach is one of several main paradigms for developing VPLs, alongside graph-based approaches that use nodes and connections <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nForm-based and spreadsheet-based languages offer a more structured approach to programming compared to other VPL categories. Rather than manipulating blocks or connecting nodes, users work within a predefined form structure, making these languages particularly suitable for certain types of applications, especially those involving data manipulation and calculations <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.", "citations": [{"id": "(Kuhail et al., 2021)", "paper": {"corpus_id": 231725028, "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "M. Kuhail", "authorId": "1980707"}, {"name": "Shahbano Farooq", "authorId": "153238394"}, {"name": "R. Hammad", "authorId": "3083161"}, {"name": "Mohammed Bahja", "authorId": "8357681"}], "n_citations": 39}, "snippets": ["Combining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages. All categories (or subcategories), based on visual program representation, presented in both [1] and [2] are assigned to a category under our new categorization. For instance, block-based languages represent jigsaw puzzle pieces in [1], while diagram-based languages cover diagrammatic languages in [2], data flow graphs and directed graphs in [1].\n\nBlock-based languages allow users to drag and drop ''blocks'' (program elements) from a predefined list of commands into the development area. These blocks are pieced together to make a program. This paradigm prevents syntax errors, which reduces the mental load of end users allowing them to focus on concepts rather than implementation details. Many block-based languages such as Scratch [92] and App Inventor [93] have made application development accessible to numerous end users.\n\nIcon-based or Iconic languages capitalize on the use of icons, graphical symbols representing objects or action [14]. Chang [15] explained that icons can be classified as complex and elementary icons. Elementary icons represent objects (e.g., file) or actions (e.g., delete, edit), whereas complex icons are composite object icons and visual sentences. Composite object icons are the outcome of assembling elementary object icons. Visual sentences are spatial arrangements of elementary icons.\n\nForm-based visual programming languages allow end-user developers to configure a form, in which triggers and actions are added by textual drop-down menus or visual dragand-drop [19]. Some form-based approaches are mostly visual, whereas others use some textual specifications.\n\nDiagram-based visual programming languages, also known as diagrammatic or data flow languages, are characterized by connecting graphical objects ( e.g., boxes) by arrows, lines, or arcs that represent relations. To understand a diagram-based program, users traverse the diagram. Such a diagram uses different means of perceptual coding to represent the flow of the program."], "score": 0.9921875}, {"id": "(Dias et al., 2018)", "paper": {"corpus_id": 53282492, "title": "State of the Software Development Life-Cycle for the Internet-of-Things", "year": 2018, "venue": "arXiv.org", "authors": [{"name": "Jo\u00e3o Pedro Dias", "authorId": "145745979"}, {"name": "H. Ferreira", "authorId": "144027277"}], "n_citations": 14}, "snippets": ["Based on their classification, we can consider that there are two main approaches for developing VPLs, namely: (1) graph-based, which are the most disseminated and in some way leverage the metaphor of visual graphs (nodes and connections), and, (2) box-based, which leverage the use of the metaphor of box and sub-boxes (e.g. User-Interfaces builders and Forms).\n\nWe can consider the next set of paradigms as the main paradigms as they are the most widespread in the literature [Burnett and Baker 1994;Diehl 2007; S. K. Chang 2002]: \n\n\u2022 Data-flow languages: Computation is specified by the means of graphs. This graph consists of icons (or similar visual representations) that correspond to operational nodes, being these nodes connected by lines that represent the flow of data between them. \n\n\u2022 Component-based languages (graph-based): These languages are based on the metaphor of networked computing devices or components. Each one of those components can perform a variety of tasks in response to messages and data received from others. \n\n\u2022 Rule-based languages: Language based on the definition of triggering actions that happen upon changes (e.g. the modification of a variable value can trigger an action). Usually, these mechanisms are based upon visual if-then rules. \n\n\u2022 Program-by-demonstration languages: Languages that, instead of relying on the specification of actions through instructions or commands, depend on demonstrations of the pretended task or objective. As so, the language bases itself on the manipulation of visual objects, and the tasks carried out are performed according to those manipulations. \n\n\u2022 Form-based & Spreadsheet-based languages: Spreadsheets are the most widespread VPL paradigm. These languages present a ledger-like sheet for entering and performing arithmetic on values. In these languages, the sheet is the single significant pictorial element that qualifies the original spreadsheet as a VPL. Form-based languages are somewhat similar in the scene that they result in a generalization of sheets into forms."], "score": 0.98974609375}, {"id": "(Aldhlan et al., 2021)", "paper": {"corpus_id": 236566925, "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games", "year": 2021, "venue": "Indian Journal of Science and Technology", "authors": [{"name": "Kawther A. Aldhlan", "authorId": "9207310"}, {"name": "Hamad Alreshidi", "authorId": "2836785"}], "n_citations": 2}, "snippets": ["Visual programming languages can be classified into several classes as follows: \n\n1. Form-based languages: This type is observed in dealing with electronic tables and their uses and is used to influence a group of related cells, for example, the Forms / 3 language. 2. Integrated Languages (Textual and Visual) As the name indicates, it mixes text and image, for example, Rehearsal World, C, C++. 3. Programming-by-Example Language: Through which the user provides the system with a method or mechanism to perform a specific task, for example, Rehearsal World, and the language of Pygmalion. \n\nhttps://www.indjst.org/ 4. Constraint-Oriented language This type deals with physical objects in the visual environment within specific constraints equivalent to natural laws. These languages fit the Simulation Design process, for example, the Thinklab language and the Alternate Reality Kit (ARK) language. 5. Pure visual programming languages: Matthew Revell (2019) illustrate that this type of language fully supports the programming process with pictures, for example (Cube Lab View, Prograph, PICT / D) software. It is worth mentioning that the program here is produced entirely by processing icons and other graphics, and it is compiled directly through visual representation and it is linked here to the term (Executable Graphics). (23)"], "score": 0.935546875}], "table": null}, {"title": "Icon-based Visual Programming Languages", "tldr": "Icon-based visual programming languages use graphical symbols to represent programming objects and actions, allowing users to create programs by arranging these icons spatially. These languages can employ elementary icons (representing simple objects or actions) or complex icons (composite objects and visual sentences), creating visual metaphors that help users understand programming concepts. (3 sources)", "text": "\nIcon-based (or iconic) visual programming languages distinguish themselves by leveraging graphical symbols or icons as their primary visual representation of programming elements. These languages capitalize on icons to represent both objects (such as files or data elements) and actions (such as delete or edit operations) <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. They form one of the major categories of visual programming languages alongside block-based, diagram-based, and form-based approaches <Paper corpusId=\"235234208\" paperTitle=\"(Dawoud et al., 2021)\" isShortName></Paper>.\n\nAccording to Chang's classification, icons in these languages can be categorized as either elementary or complex. Elementary icons represent basic programming objects or actions, while complex icons take two forms: composite object icons (assembled from elementary object icons) and visual sentences (spatial arrangements of elementary icons) <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. This hierarchical structure allows icon-based languages to represent increasingly complex programming concepts while maintaining visual clarity.\n\nPure visual programming languages represent a subcategory that fully supports the programming process with pictures. In these environments, programs are produced entirely by manipulating icons and other graphics, and they can be compiled directly through their visual representation\u2014a concept sometimes linked to \"Executable Graphics\" <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>. Examples of such purely visual programming environments include Cube Lab View, Prograph, and PICT/D <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>.\n\nIcon-based languages create a direct visual metaphor for programming concepts, which can make them particularly accessible to certain types of users. By representing programming elements as recognizable symbols, these languages can reduce the cognitive load associated with remembering syntax and instead allow users to focus on the logical flow and relationships between programming elements <Model name=\"Anthropic\" version=\"claude-3-7-sonnet-20250219\">.", "citations": [{"id": "(Kuhail et al., 2021)", "paper": {"corpus_id": 231725028, "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "M. Kuhail", "authorId": "1980707"}, {"name": "Shahbano Farooq", "authorId": "153238394"}, {"name": "R. Hammad", "authorId": "3083161"}, {"name": "Mohammed Bahja", "authorId": "8357681"}], "n_citations": 39}, "snippets": ["Combining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages. All categories (or subcategories), based on visual program representation, presented in both [1] and [2] are assigned to a category under our new categorization. For instance, block-based languages represent jigsaw puzzle pieces in [1], while diagram-based languages cover diagrammatic languages in [2], data flow graphs and directed graphs in [1].\n\nBlock-based languages allow users to drag and drop ''blocks'' (program elements) from a predefined list of commands into the development area. These blocks are pieced together to make a program. This paradigm prevents syntax errors, which reduces the mental load of end users allowing them to focus on concepts rather than implementation details. Many block-based languages such as Scratch [92] and App Inventor [93] have made application development accessible to numerous end users.\n\nIcon-based or Iconic languages capitalize on the use of icons, graphical symbols representing objects or action [14]. Chang [15] explained that icons can be classified as complex and elementary icons. Elementary icons represent objects (e.g., file) or actions (e.g., delete, edit), whereas complex icons are composite object icons and visual sentences. Composite object icons are the outcome of assembling elementary object icons. Visual sentences are spatial arrangements of elementary icons.\n\nForm-based visual programming languages allow end-user developers to configure a form, in which triggers and actions are added by textual drop-down menus or visual dragand-drop [19]. Some form-based approaches are mostly visual, whereas others use some textual specifications.\n\nDiagram-based visual programming languages, also known as diagrammatic or data flow languages, are characterized by connecting graphical objects ( e.g., boxes) by arrows, lines, or arcs that represent relations. To understand a diagram-based program, users traverse the diagram. Such a diagram uses different means of perceptual coding to represent the flow of the program."], "score": 0.9921875}, {"id": "(Dawoud et al., 2021)", "paper": {"corpus_id": 235234208, "title": "Collaborative Coding in a Robotic Visual Language", "year": 2021, "venue": "International Conference on Computer Supported Education", "authors": [{"name": "Farah Yasser Dawoud", "authorId": "2106215024"}, {"name": "A. Adel", "authorId": "143859112"}, {"name": "Nada Sharaf", "authorId": "2730794"}], "n_citations": 1}, "snippets": ["Visual programming languages have different several classes including block-based, diagrammatic, and iconic visual languages (Myers, 1990)."], "score": 0.94482421875}, {"id": "(Aldhlan et al., 2021)", "paper": {"corpus_id": 236566925, "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games", "year": 2021, "venue": "Indian Journal of Science and Technology", "authors": [{"name": "Kawther A. Aldhlan", "authorId": "9207310"}, {"name": "Hamad Alreshidi", "authorId": "2836785"}], "n_citations": 2}, "snippets": ["Visual programming languages can be classified into several classes as follows: \n\n1. Form-based languages: This type is observed in dealing with electronic tables and their uses and is used to influence a group of related cells, for example, the Forms / 3 language. 2. Integrated Languages (Textual and Visual) As the name indicates, it mixes text and image, for example, Rehearsal World, C, C++. 3. Programming-by-Example Language: Through which the user provides the system with a method or mechanism to perform a specific task, for example, Rehearsal World, and the language of Pygmalion. \n\nhttps://www.indjst.org/ 4. Constraint-Oriented language This type deals with physical objects in the visual environment within specific constraints equivalent to natural laws. These languages fit the Simulation Design process, for example, the Thinklab language and the Alternate Reality Kit (ARK) language. 5. Pure visual programming languages: Matthew Revell (2019) illustrate that this type of language fully supports the programming process with pictures, for example (Cube Lab View, Prograph, PICT / D) software. It is worth mentioning that the program here is produced entirely by processing icons and other graphics, and it is compiled directly through visual representation and it is linked here to the term (Executable Graphics). (23)"], "score": 0.935546875}], "table": null}, {"title": "Other Visual Programming Language Categories", "tldr": "Beyond the major categories, visual programming languages include integrated textual-visual languages, programming-by-example languages, constraint-oriented languages, and 3D visual programming languages. These specialized categories address specific programming needs, from simulation design to learning environments, offering alternative visual approaches to code creation. (4 sources)", "text": "\nIn addition to the block-based, node/diagram/flow-based, form-based, and icon-based categories, several other significant visual programming language categories exist. These specialized approaches cater to different programming contexts and user needs.\n\nIntegrated Languages (Textual and Visual) represent a hybrid approach that combines textual code with visual elements. As the name suggests, these languages mix text and images, with examples including Rehearsal World, C, and C++ <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>. This approach enables users to leverage the precision of textual programming alongside the intuitive nature of visual representations.\n\nProgramming-by-Example Languages allow users to demonstrate specific tasks rather than explicitly coding them. In these environments, users provide the system with a method or mechanism to perform a particular task. Examples include Rehearsal World and Pygmalion <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>. These languages depend on the manipulation of visual objects, with tasks performed according to those manipulations rather than through explicit instructions or commands <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nConstraint-Oriented Languages deal with physical objects in the visual environment within specific constraints that are equivalent to natural laws. These languages are particularly suitable for simulation design processes, with examples including Thinklab and Alternate Reality Kit (ARK) <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>. By incorporating physics-like constraints, these languages can model real-world behaviors more effectively.\n\nThree-dimensional visual programming languages have also emerged as an extension of traditional two-dimensional approaches. While most VPLs use two-dimensional blocks or diagrams to structure programs, some 3D versions have been developed to provide additional spatial dimensions for program representation <Paper corpusId=\"258990742\" paperTitle=\"(Brinksma et al., 2022)\" isShortName></Paper>.\n\nFrom a tools perspective, visual programming and parameterization can be classified into four sub-categories: graphical user interface tools, high-level parameterization software programs, tools using diagrams for describing data or process flows, and tools for graphical representation of program logic <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper>. This classification highlights the diverse approaches to making programming more accessible through visual means.", "citations": [{"id": "(Aldhlan et al., 2021)", "paper": {"corpus_id": 236566925, "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games", "year": 2021, "venue": "Indian Journal of Science and Technology", "authors": [{"name": "Kawther A. Aldhlan", "authorId": "9207310"}, {"name": "Hamad Alreshidi", "authorId": "2836785"}], "n_citations": 2}, "snippets": ["Visual programming languages can be classified into several classes as follows: \n\n1. Form-based languages: This type is observed in dealing with electronic tables and their uses and is used to influence a group of related cells, for example, the Forms / 3 language. 2. Integrated Languages (Textual and Visual) As the name indicates, it mixes text and image, for example, Rehearsal World, C, C++. 3. Programming-by-Example Language: Through which the user provides the system with a method or mechanism to perform a specific task, for example, Rehearsal World, and the language of Pygmalion. \n\nhttps://www.indjst.org/ 4. Constraint-Oriented language This type deals with physical objects in the visual environment within specific constraints equivalent to natural laws. These languages fit the Simulation Design process, for example, the Thinklab language and the Alternate Reality Kit (ARK) language. 5. Pure visual programming languages: Matthew Revell (2019) illustrate that this type of language fully supports the programming process with pictures, for example (Cube Lab View, Prograph, PICT / D) software. It is worth mentioning that the program here is produced entirely by processing icons and other graphics, and it is compiled directly through visual representation and it is linked here to the term (Executable Graphics). (23)"], "score": 0.935546875}, {"id": "(Dias et al., 2018)", "paper": {"corpus_id": 53282492, "title": "State of the Software Development Life-Cycle for the Internet-of-Things", "year": 2018, "venue": "arXiv.org", "authors": [{"name": "Jo\u00e3o Pedro Dias", "authorId": "145745979"}, {"name": "H. Ferreira", "authorId": "144027277"}], "n_citations": 14}, "snippets": ["Based on their classification, we can consider that there are two main approaches for developing VPLs, namely: (1) graph-based, which are the most disseminated and in some way leverage the metaphor of visual graphs (nodes and connections), and, (2) box-based, which leverage the use of the metaphor of box and sub-boxes (e.g. User-Interfaces builders and Forms).\n\nWe can consider the next set of paradigms as the main paradigms as they are the most widespread in the literature [Burnett and Baker 1994;Diehl 2007; S. K. Chang 2002]: \n\n\u2022 Data-flow languages: Computation is specified by the means of graphs. This graph consists of icons (or similar visual representations) that correspond to operational nodes, being these nodes connected by lines that represent the flow of data between them. \n\n\u2022 Component-based languages (graph-based): These languages are based on the metaphor of networked computing devices or components. Each one of those components can perform a variety of tasks in response to messages and data received from others. \n\n\u2022 Rule-based languages: Language based on the definition of triggering actions that happen upon changes (e.g. the modification of a variable value can trigger an action). Usually, these mechanisms are based upon visual if-then rules. \n\n\u2022 Program-by-demonstration languages: Languages that, instead of relying on the specification of actions through instructions or commands, depend on demonstrations of the pretended task or objective. As so, the language bases itself on the manipulation of visual objects, and the tasks carried out are performed according to those manipulations. \n\n\u2022 Form-based & Spreadsheet-based languages: Spreadsheets are the most widespread VPL paradigm. These languages present a ledger-like sheet for entering and performing arithmetic on values. In these languages, the sheet is the single significant pictorial element that qualifies the original spreadsheet as a VPL. Form-based languages are somewhat similar in the scene that they result in a generalization of sheets into forms."], "score": 0.98974609375}, {"id": "(Brinksma et al., 2022)", "paper": {"corpus_id": 258990742, "title": "VAPE-3D: A 3D Visual Avatar-based Programming Environment", "year": 2022, "venue": "Computer Science Education Research Conference", "authors": [{"name": "Wouter Brinksma", "authorId": "2218649267"}, {"name": "Berber Bouma", "authorId": "2219317025"}], "n_citations": 0}, "snippets": ["Visual Programming Languages are a common vehicle to teach programming. Usually, these languages use two-dimensional blocks or diagrams to structure a program and some 3D versions have emerged as well."], "score": 0.90478515625}, {"id": "(Hamzabegovic, 2019)", "paper": {"corpus_id": 86787308, "title": "Development of application software without programming", "year": 2019, "venue": "IOP Conference Series: Materials Science and Engineering", "authors": [{"name": "J. Hamzabegovi\u0107", "authorId": "30811658"}], "n_citations": 0}, "snippets": ["Research has shown that visual programming and parameterization tools can be classified into four sub-categories: graphical user interface tools, high-level parameterization software programs, tools that use diagrams for describing data flows or process flows, and graphical representation of program logic tools."], "score": 0.92333984375}], "table": null}, {"title": "Characteristics and Differences Between VPL Categories", "tldr": "Visual programming language categories differ in their representation style, level of abstraction, domain specialization, and programming paradigms. These differences make certain VPL categories more suitable for specific contexts such as education, data processing, or application development. (7 sources)", "text": "\nVisual programming languages can be characterized and evaluated across several key dimensions that highlight their differences and relative strengths. McDaid et al. identify three important characteristics: the spectrum from literal to abstract representation, the extent to which they provide a partial or complete programming language, and whether they target a specialist domain or are general purpose <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper>. In literal languages, such as those resembling flowcharts, there is a clear correspondence between visual elements and conventional programming constructs, while abstract languages like use case diagrams may be more remote from the code they represent.\n\nA fundamental distinction exists in the programming paradigms employed by different VPL categories. Visual programming languages can be broadly divided into two categories: flow-based functional programming and block-based imperative programming <Paper corpusId=\"242281246\" paperTitle=\"(Dave, 0)\" isShortName></Paper>. This paradigmatic difference influences how programs are structured and executed in each category. Similarly, VPLs can be classified as imperative languages (block languages) where software is created by assembling puzzle pieces, or flow-based languages where models are created by connecting nodes with lines representing data flow or state transitions <Paper corpusId=\"253043422\" paperTitle=\"(Baena-Perez et al., 2022)\" isShortName></Paper>.\n\nThe visual representation used in different VPL categories serves as another distinguishing characteristic. Two prominent domain-independent visual representations are boxes-and-arrows (as in BPMN) and interlocking puzzle pieces (as in Scratch), where the visual elements represent instructions and their connections show how data and control flows between them <Paper corpusId=\"248524774\" paperTitle=\"(Hirzel, 2022)\" isShortName></Paper>. These different visual approaches affect how users interact with and understand the programming environment.\n\nWhen comparing the four main categories of VPLs\u2014block-based, diagram-based, form-based, and icon-based\u2014several distinct characteristics emerge. Block-based languages prevent syntax errors by using predefined blocks that fit together like puzzle pieces, reducing mental load and allowing users to focus on concepts rather than implementation details. Icon-based languages use graphical symbols to represent objects or actions, with elementary icons representing basic elements and complex icons created by combining elementary ones. Form-based languages allow configuration through dropdown menus or drag-and-drop interfaces, while diagram-based languages connect graphical objects with arrows or lines to represent relations and program flow <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>.\n\nBeyond these four main categories, VPLs can also be evaluated based on additional programming approaches, such as event-based, device-based, and state-based programming, which affect characteristics like programming effort, readability, and portability <Paper corpusId=\"273376382\" paperTitle=\"(Narkthong et al., 2024)\" isShortName></Paper>.\n\nFrom a development perspective, there are two main approaches for creating VPLs: graph-based approaches that leverage the metaphor of visual graphs with nodes and connections, and box-based approaches that use the metaphor of boxes and sub-boxes. Within these approaches, several paradigms have become widespread, including data-flow languages (using graphs with operational nodes connected by data flow lines), component-based languages (based on networked computing devices), rule-based languages (using visual if-then rules), program-by-demonstration languages (relying on demonstrations rather than explicit instructions), and form-based/spreadsheet-based languages (the most widespread VPL paradigm) <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nThese varying characteristics make different VPL categories more suitable for specific contexts and user groups. Block-based languages excel in educational settings, diagram-based languages are valuable for visualizing complex data and control flows, form-based languages simplify data manipulation, and icon-based languages create intuitive visual metaphors for programming concepts.", "citations": [{"id": "(McDaid et al., 2020)", "paper": {"corpus_id": 221802417, "title": "A Visual Language for Composable Inductive Programming", "year": 2020, "venue": "arXiv.org", "authors": [{"name": "Edward McDaid", "authorId": "1420120235"}, {"name": "S. McDaid", "authorId": "4697495"}], "n_citations": 4}, "snippets": ["Visual programming languages can be characterised and evaluated with respect to a number of dimensions [18]. In this paper we will focus on the following characteristics as being the most relevant: \n\n\u2022 Literal to abstract representation; \n\n\u2022 Partial to complete programming language; \n\n\u2022 Specialist domain or general purpose.\n\nLiteral languages such as those that resemble flow charts often have a clear correspondence between visual and conventional language elements. Abstract languages, such as use case diagrams, are more remote from the code they relate to and may include non-software elements such as users."], "score": 0.94140625}, {"id": "(Dave, 0)", "paper": {"corpus_id": 242281246, "title": "Comparison of flow-based versus block-based programming for naive programmers", "year": 0, "venue": "", "authors": [{"name": "Kruti Dave", "authorId": "2071526509"}], "n_citations": 2}, "snippets": ["Visual Programming Languages comprise two broad categories: Flow-based, functional programming or Block-based, imperative programming."], "score": 0.92041015625}, {"id": "(Baena-Perez et al., 2022)", "paper": {"corpus_id": 253043422, "title": "Visual authoring of virtual reality conversational scenarios for e-learning", "year": 2022, "venue": "Universal Access in the Information Society", "authors": [{"name": "Rub\u00e9n Baena-P\u00e9rez", "authorId": "1411449483"}, {"name": "Iv\u00e1n Ruiz-Rube", "authorId": "1409150721"}, {"name": "Jos\u00e9 Miguel Mota", "authorId": "32483651"}, {"name": "Anke Berns", "authorId": "49031811"}, {"name": "Antonio Balderas", "authorId": "144050001"}], "n_citations": 3}, "snippets": ["VPLs can be classified into two categories: imperative languages and flow-based languages (Mason et al., 2017). With the imperative languages, namely, block languages, the user creates their software by assembling different puzzle pieces intuitively. Within this category, Scratch, Snap! and Google Blockly stand out. Scratch enables novice programmers to create apps through its block-based language. However, the purpose with which these languages were created entails some limitations when it comes to use the latest technological innovations as, for instance, VR. On the other hand, with the flow-based languages, the models are created by joining different nodes and graphic lines representing the data flow or the transition between different states. Within this category, languages such as BPMN, PetriNet, DRAKON or UML activity diagrams can be found, among others (Garc\u00eda-Borgo\u00f1\u00f3n et al., 2014)."], "score": 0.958984375}, {"id": "(Hirzel, 2022)", "paper": {"corpus_id": 248524774, "title": "Low-Code Programming Models", "year": 2022, "venue": "Communications of the ACM", "authors": [{"name": "Martin Hirzel", "authorId": "1728836"}], "n_citations": 21}, "snippets": ["Two prominent domain-independent visual representations are boxes-and-arrows (e.g., BPMN (Ouyang et al., 2006)) or interlocking puzzle pieces (e.g., Scratch [30]). Here, boxes or puzzle pieces represent instructions in the program, and arrows between boxes or the interlock of pieces represent how data and control flows between instructions."], "score": 0.9423828125}, {"id": "(Kuhail et al., 2021)", "paper": {"corpus_id": 231725028, "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "M. Kuhail", "authorId": "1980707"}, {"name": "Shahbano Farooq", "authorId": "153238394"}, {"name": "R. Hammad", "authorId": "3083161"}, {"name": "Mohammed Bahja", "authorId": "8357681"}], "n_citations": 39}, "snippets": ["Combining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages. All categories (or subcategories), based on visual program representation, presented in both [1] and [2] are assigned to a category under our new categorization. For instance, block-based languages represent jigsaw puzzle pieces in [1], while diagram-based languages cover diagrammatic languages in [2], data flow graphs and directed graphs in [1].\n\nBlock-based languages allow users to drag and drop ''blocks'' (program elements) from a predefined list of commands into the development area. These blocks are pieced together to make a program. This paradigm prevents syntax errors, which reduces the mental load of end users allowing them to focus on concepts rather than implementation details. Many block-based languages such as Scratch [92] and App Inventor [93] have made application development accessible to numerous end users.\n\nIcon-based or Iconic languages capitalize on the use of icons, graphical symbols representing objects or action [14]. Chang [15] explained that icons can be classified as complex and elementary icons. Elementary icons represent objects (e.g., file) or actions (e.g., delete, edit), whereas complex icons are composite object icons and visual sentences. Composite object icons are the outcome of assembling elementary object icons. Visual sentences are spatial arrangements of elementary icons.\n\nForm-based visual programming languages allow end-user developers to configure a form, in which triggers and actions are added by textual drop-down menus or visual dragand-drop [19]. Some form-based approaches are mostly visual, whereas others use some textual specifications.\n\nDiagram-based visual programming languages, also known as diagrammatic or data flow languages, are characterized by connecting graphical objects ( e.g., boxes) by arrows, lines, or arcs that represent relations. To understand a diagram-based program, users traverse the diagram. Such a diagram uses different means of perceptual coding to represent the flow of the program."], "score": 0.9921875}, {"id": "(Narkthong et al., 2024)", "paper": {"corpus_id": 273376382, "title": "ALLI/O Diagram: An Action-based Visual Programming Language for Embedded System", "year": 2024, "venue": "IEEE Symposium on Visual Languages / Human-Centric Computing Languages and Environments", "authors": [{"name": "Nuntipat Narkthong", "authorId": "2297972654"}, {"name": "C. Jariyavajee", "authorId": "18086059"}, {"name": "Xiaolin Xu", "authorId": "2326245511"}], "n_citations": 0}, "snippets": ["We evaluate it against block-based, event-based, device-based, and state-based programming approaches in terms of programming effort, readability, and portability of the result programs."], "score": 0.90478515625}, {"id": "(Dias et al., 2018)", "paper": {"corpus_id": 53282492, "title": "State of the Software Development Life-Cycle for the Internet-of-Things", "year": 2018, "venue": "arXiv.org", "authors": [{"name": "Jo\u00e3o Pedro Dias", "authorId": "145745979"}, {"name": "H. Ferreira", "authorId": "144027277"}], "n_citations": 14}, "snippets": ["Based on their classification, we can consider that there are two main approaches for developing VPLs, namely: (1) graph-based, which are the most disseminated and in some way leverage the metaphor of visual graphs (nodes and connections), and, (2) box-based, which leverage the use of the metaphor of box and sub-boxes (e.g. User-Interfaces builders and Forms).\n\nWe can consider the next set of paradigms as the main paradigms as they are the most widespread in the literature [Burnett and Baker 1994;Diehl 2007; S. K. Chang 2002]: \n\n\u2022 Data-flow languages: Computation is specified by the means of graphs. This graph consists of icons (or similar visual representations) that correspond to operational nodes, being these nodes connected by lines that represent the flow of data between them. \n\n\u2022 Component-based languages (graph-based): These languages are based on the metaphor of networked computing devices or components. Each one of those components can perform a variety of tasks in response to messages and data received from others. \n\n\u2022 Rule-based languages: Language based on the definition of triggering actions that happen upon changes (e.g. the modification of a variable value can trigger an action). Usually, these mechanisms are based upon visual if-then rules. \n\n\u2022 Program-by-demonstration languages: Languages that, instead of relying on the specification of actions through instructions or commands, depend on demonstrations of the pretended task or objective. As so, the language bases itself on the manipulation of visual objects, and the tasks carried out are performed according to those manipulations. \n\n\u2022 Form-based & Spreadsheet-based languages: Spreadsheets are the most widespread VPL paradigm. These languages present a ledger-like sheet for entering and performing arithmetic on values. In these languages, the sheet is the single significant pictorial element that qualifies the original spreadsheet as a VPL. Form-based languages are somewhat similar in the scene that they result in a generalization of sheets into forms."], "score": 0.98974609375}], "table": null}, {"title": "Examples of Visual Programming Languages", "tldr": "Visual programming languages span a wide range of implementations, from educational tools like Scratch and Blockly to professional development environments like LabVIEW and MATLAB. Each language employs different visual paradigms that align with their intended purpose and target audience. (12 sources)", "text": "\n## Block-based Languages\n* **Scratch**: A widely popular block-based language targeted primarily at children aged 8-16 as an educational tool for coding <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>. It allows novice programmers to create applications through an intuitive interface that prevents syntax errors <Paper corpusId=\"236447670\" paperTitle=\"(Ikarashi et al., 2021)\" isShortName></Paper>.\n\n* **Blockly**: A JavaScript library for building customized visual programming editors that use interlocking blocks to represent code elements <Paper corpusId=\"264306865\" paperTitle=\"(Avishahar-Zeira et al., 2023)\" isShortName></Paper>. Along with Scratch, it adopted key properties from AgentSheets to become one of the most popular block programming languages <Paper corpusId=\"221340525\" paperTitle=\"(Alturayeif et al., 2020)\" isShortName></Paper>.\n\n* **Snap!**: A notable block-based language that falls into the category of imperative languages where users create software by assembling puzzle pieces intuitively <Paper corpusId=\"253043422\" paperTitle=\"(Baena-Perez et al., 2022)\" isShortName></Paper>.\n\n* **Alice**: A 3D interactive animation environment designed as a block-based VPL for novice programmers to learn basic programming principles <Paper corpusId=\"236447670\" paperTitle=\"(Ikarashi et al., 2021)\" isShortName></Paper> <Paper corpusId=\"62491646\" paperTitle=\"(Cooper et al., 2000)\" isShortName></Paper>. It's considered an example of a true VPL where the program itself can be thought of as an executable graphical artifact <Paper corpusId=\"238126162\" paperTitle=\"(Lutalo et al., 2020)\" isShortName></Paper>.\n\n* **AgentSheets**: The pioneering tool that introduced blocks programming in 1995 to create games and simulations, marking a substantial advancement in visual programming languages <Paper corpusId=\"221340525\" paperTitle=\"(Alturayeif et al., 2020)\" isShortName></Paper> <Paper corpusId=\"41867280\" paperTitle=\"(Repenning, 2017)\" isShortName></Paper>.\n\n## Flow/Node-based Languages\n* **LabVIEW**: A flow-based programming environment used primarily for embedded applications that implements graphics of electronic devices and signs to represent systems <Paper corpusId=\"246022597\" paperTitle=\"(Pongthanisorn et al., 2022)\" isShortName></Paper>. It's considered pioneering work in the dataflow paradigm of visual programming interfaces <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>.\n\n* **MATLAB Model-Based Design**: Represents equations in blocks and logic flow using a flow-based design approach <Paper corpusId=\"246022597\" paperTitle=\"(Pongthanisorn et al., 2022)\" isShortName></Paper>.\n\n* **Prograph**: A notable pioneering work in the dataflow paradigm that lets users specify how a program transforms data step by step by connecting nodes in a directed graph <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>.\n\n* **BPMN, PetriNet, DRAKON, UML Activity Diagrams**: Examples of flow-based languages where models are created by joining different nodes and graphic lines representing data flow or transitions between different states <Paper corpusId=\"253043422\" paperTitle=\"(Baena-Perez et al., 2022)\" isShortName></Paper>.\n\n## Robot Programming VPLs\n* **VPL (Visual Programming Language) for Thymio**: A graphical software environment that uses event-action pairs where when the event represented by the block on the left occurs, the actions in the following blocks are performed <Paper corpusId=\"64771513\" paperTitle=\"(Ben-Ari et al., 2018)\" isShortName></Paper>.\n\n* **Dash Robot Environment**: A graphical software environment that also uses events and actions, but represents actions as nodes and events as arrows between nodes <Paper corpusId=\"64771513\" paperTitle=\"(Ben-Ari et al., 2018)\" isShortName></Paper>.\n\n## Other Notable VPLs\n* **RAPTOR**: A flowchart-based visual programming language <Paper corpusId=\"238126162\" paperTitle=\"(Lutalo et al., 2020)\" isShortName></Paper> <Paper corpusId=\"4039308\" paperTitle=\"(Noone et al., 2017)\" isShortName></Paper>.\n\n* **Squeak eToys**: A block-based programming language developed after AgentSheets <Paper corpusId=\"221340525\" paperTitle=\"(Alturayeif et al., 2020)\" isShortName></Paper>.\n\n* **MIT Blocks**: A block-based programming system that employs the concept of representing computer instructions as blocks <Paper corpusId=\"246022597\" paperTitle=\"(Pongthanisorn et al., 2022)\" isShortName></Paper>.", "citations": [{"id": "(Daskalov et al., 2021)", "paper": {"corpus_id": 236336244, "title": "Hybrid Visual Programming Language Environment for Programming Training", "year": 2021, "venue": "TEM Journal", "authors": [{"name": "R. Daskalov", "authorId": "2666781"}, {"name": "G. Pashev", "authorId": "94696738"}, {"name": "Silvia N. Gaftandzhieva", "authorId": "2299512"}], "n_citations": 2}, "snippets": ["Many VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations", "Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding."], "score": 0.92236328125}, {"id": "(Ikarashi et al., 2021)", "paper": {"corpus_id": 236447670, "title": "Guided Optimization for Image Processing Pipelines", "year": 2021, "venue": "IEEE Symposium on Visual Languages / Human-Centric Computing Languages and Environments", "authors": [{"name": "Yuka Ikarashi", "authorId": "2134665163"}, {"name": "Jonathan Ragan-Kelley", "authorId": "1401885963"}, {"name": "Tsukasa Fukusato", "authorId": "33439074"}, {"name": "Jun Kato", "authorId": "153049675"}, {"name": "T. Igarashi", "authorId": "1717356"}], "n_citations": 9}, "snippets": ["Visual programming languages (VPLs) use an interactive and graphical approach to help users avoid syntactic errors. Agentsheets utilizes a drag-and-drop mechanism to prevent syntactic mistakes (Repenning et al., 2000). Alice (Cooper et al., 2000) and Scratch (273180521) are block-based VPLs for novice programmers to learn the basic principles of programming by combining the provided blocks."], "score": 0.9375}, {"id": "(Avishahar-Zeira et al., 2023)", "paper": {"corpus_id": 264306865, "title": "Could No-Code Be Code? Toward a No-Code Programming Language for Citizen Developers", "year": 2023, "venue": "SIGPLAN symposium on New ideas, new paradigms, and reflections on programming and software", "authors": [{"name": "Assaf Avishahar-Zeira", "authorId": "2260344112"}, {"name": "David H. Lorenz", "authorId": "2260344780"}], "n_citations": 4}, "snippets": ["Both No-Code and Low-Code are special cases of visual programming languages that use visual elements such as blocks, graphs, and owcharts to represent code. However, not every graphical language is necessarily No-Code.\n\nBlock-based coding languages [21] are visual programming languages that let end users create programs by connecting program elements graphically rather than textually [38]. For example, Scratch8 [28] is a popular visual programming language for children that uses blocks to represent commands. More generally, Blockly9 [25] is a JavaScript library for building a customized visual programming editor that uses interlocking blocks to represent elements of the code."], "score": 0.88671875}, {"id": "(Alturayeif et al., 2020)", "paper": {"corpus_id": 221340525, "title": "DeepScratch: Scratch Programming Language Extension for Deep Learning Education", "year": 2020, "venue": "International Journal of Advanced Computer Science and Applications", "authors": [{"name": "Nora S. Alturayeif", "authorId": "2315312012"}, {"name": "Nouf Alturaief", "authorId": "2023398349"}, {"name": "Zainab Alhathloul", "authorId": "2023401654"}], "n_citations": 19}, "snippets": ["Visual programming languages allow users to develop programs by manipulating elements graphically instead of writing a program as a text", "There is a rich history of different visual programming tools designed for novices comprehensively surveyed in (Lye et al., 2014). AgentSheets by Repenning and Sumner [5] is a tool that introduced the blocks programming in 1995 to create games and simulations. Their work marked a substantial step in the field of visual programming language (Repenning, 2017). Several block-based programming language were designed after AgentSheet, such as Squeak eToys, Alice, and Scratch (Repenning, 2017)", "Blocks are end-user composable, editable, and can be arranged geometrically to represent tree structure and to define syntax [9]. The previous four keys form the properties of a highly accessible visual programming paradigm combined by the AgentSheets (Repenning, 2017). According to (Repenning, 2017), Scratch and Blockly adopted these properties to be in their core, and became the popular blocks programming language."], "score": 0.9208984375}, {"id": "(Baena-Perez et al., 2022)", "paper": {"corpus_id": 253043422, "title": "Visual authoring of virtual reality conversational scenarios for e-learning", "year": 2022, "venue": "Universal Access in the Information Society", "authors": [{"name": "Rub\u00e9n Baena-P\u00e9rez", "authorId": "1411449483"}, {"name": "Iv\u00e1n Ruiz-Rube", "authorId": "1409150721"}, {"name": "Jos\u00e9 Miguel Mota", "authorId": "32483651"}, {"name": "Anke Berns", "authorId": "49031811"}, {"name": "Antonio Balderas", "authorId": "144050001"}], "n_citations": 3}, "snippets": ["VPLs can be classified into two categories: imperative languages and flow-based languages (Mason et al., 2017). With the imperative languages, namely, block languages, the user creates their software by assembling different puzzle pieces intuitively. Within this category, Scratch, Snap! and Google Blockly stand out. Scratch enables novice programmers to create apps through its block-based language. However, the purpose with which these languages were created entails some limitations when it comes to use the latest technological innovations as, for instance, VR. On the other hand, with the flow-based languages, the models are created by joining different nodes and graphic lines representing the data flow or the transition between different states. Within this category, languages such as BPMN, PetriNet, DRAKON or UML activity diagrams can be found, among others (Garc\u00eda-Borgo\u00f1\u00f3n et al., 2014)."], "score": 0.958984375}, {"id": "(Cooper et al., 2000)", "paper": {"corpus_id": 62491646, "title": "Alice: a 3-D tool for introductory programming concepts", "year": 2000, "venue": "Journal of Computing Sciences in Colleges (JCSC; Formerly: Journal of Computing in Small Colleges)", "authors": [{"name": "S. Cooper", "authorId": "145819506"}, {"name": "W. Dann", "authorId": "3227142"}, {"name": "R. Pausch", "authorId": "1717974"}], "n_citations": 591}, "snippets": ["In learning to program, many students struggle with developing algorithms, figuring out how to apply problem solving techniques in their programs, and with how to use common programming constructs. In this paper, we present a new tool that provides a possible approach to actively engage students in increasing their knowledge and skills in these areas. The tool is Alice, a 3-D interactive animation environment."], "score": 0.0}, {"id": "(Lutalo et al., 2020)", "paper": {"corpus_id": 238126162, "title": "DNAP: Dynamic Nuchwezi Architecture Platform - A New Software Extension and Construction Technology", "year": 2020, "venue": "", "authors": [{"name": "Joseph Willrich Lutalo", "authorId": "2007576185"}, {"name": "Odongo Steven Eyobu", "authorId": "2041303630"}, {"name": "Benjamin Kanagwa", "authorId": "1774407"}], "n_citations": 0}, "snippets": ["When it comes to software construction using non-textual methods, two dominant approaches prevail: the use of visual programming interfaces (VPI) and then visual programming languages (VPL). VPL involves approaches to software construction in which the specification of a program relies on the manipulation of graphical artifacts [12]. VPI on the other hand does not eschew textual specification of a program entirely, but offers some graphical interface that allows the textual code to be generated automatically via manipulation of graphical artifacts.\n\nExamples of VPL include RAPTOR, a flow chart based VPL, Alice and Scratch [12]. Note that VPL approaches to software construction involve not just graphical interfaces or environments for producing the program, but that the program itself might be thought of as an executable graphical artifact -what traditionally have been called \"executable graphics\" [13].\n\nConsidering VPL approaches, the most outstanding in the industry today are block programming languages."], "score": 0.931640625}, {"id": "(Repenning, 2017)", "paper": {"corpus_id": 41867280, "title": "Moving Beyond Syntax: Lessons from 20 Years of Blocks Programing in AgentSheets", "year": 2017, "venue": "Journal of Visual Languages and Sentient Systems", "authors": [{"name": "A. Repenning", "authorId": "1782080"}], "n_citations": 50}, "snippets": ["The blocks programming community has been preoccupied with identifying syntactic obstacles that keep novices from learning to program. Unfortunately, this focus is now holding back research from systematically investigating various technological affordances that can make programming more accessible. Employing approaches from program analysis, program visualization, and real-time interfaces can push blocks programming beyond syntax towards the support of semantics and even pragmatics. Syntactic support could be compared to checking spelling and grammar in word processing. Spell checking is relatively simple to implement and immediately useful, but provides essentially no support to create meaningful text. Over the last 25 years, I have worked to empower students to create their own games, simulations, and robots. In this time I have explored, combined, and evaluated a number of programming paradigms. Every paradigm including data flow, programming by example, and programming through analogies brings its own set of affordances and obstacles. Twenty years ago, AgentSheets combined four key affordances of blocks programming, and since then has evolved into a highly accessible Computational Thinking Tool. This article describes the journey to overcome first syntactic, then semantic, and most recently pragmatic, obstacles in computer science education."], "score": 0.0}, {"id": "(Pongthanisorn et al., 2022)", "paper": {"corpus_id": 246022597, "title": "Visual Programming for Artificial Intelligent and Robotic Application (VPAR) Framework", "year": 2022, "venue": "European-Japanese Conference on Information Modelling and Knowledge Bases", "authors": [{"name": "Goragod Pongthanisorn", "authorId": "2001006030"}, {"name": "W. Viriyavit", "authorId": "19305117"}, {"name": "Thatsanee Charoenporn", "authorId": "2844764"}, {"name": "Virach Sornlertlamvanich", "authorId": "1779078"}], "n_citations": 0}, "snippets": ["This paradigm of programming, instead of text, uses a block or another notation to represent a logical flow. It is also called a block-based programming style. This enables more intuitive of a computer programming. Moreover, a graphical representation of visual programming evaluates information in the closest manner to human mental representation of real-world problems (Myers, 1990). There are multiple well-known visual programming styles in broad range, for example a model-based design of MATLAB [4] which represents an equation in a block and flow of logic using a flow-based design. LabView is used for an embedded application that implements a graphic of an electronic device and sign for the representation the system [5], Scratch, MIT Block and Google Blockly [6,7]8] which employ a concept of representing computer instruction into a block called block-based programming."], "score": 0.90771484375}, {"id": "(Lin et al., 2023)", "paper": {"corpus_id": 269747039, "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models", "year": 2023, "venue": "International Conference on Human Factors in Computing Systems", "authors": [{"name": "David Chuan-En Lin", "authorId": "2106412318"}, {"name": "Nikolas Martelaro", "authorId": "3111790"}], "n_citations": 18}, "snippets": ["There are primarily two main paradigms for VPIs. The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph. Pioneering work in this area includes Prograph [17] and LabVIEW [27]. The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together. Notable works in this area include Scratch [35] and Blockly [19]."], "score": 0.95263671875}, {"id": "(Ben-Ari et al., 2018)", "paper": {"corpus_id": 64771513, "title": "Robots and Their Applications", "year": 2018, "venue": "", "authors": [{"name": "M. Ben-Ari", "authorId": "1398913278"}, {"name": "F. Mondada", "authorId": "1727799"}], "n_citations": 96}, "snippets": ["Programming is simplified if a block-based language is used, usually a language based upon Scratch or Blockly (Fig. 1.7). \n\nTo further simplify programming a robot by young students, a fully graphical programming notation can be used. Figure 1.8 shows VPL (Visual Programming Language), a graphical software environment for the Thymio robot. It uses eventaction pairs: when the event represented by the block on the left occurs, the actions in the following blocks are performed. \n\nFigure 1.9 shows the graphical software environment for the Dash robot. It also uses events and actions, where the actions are represented by nodes and events are represented by arrows between nodes."], "score": 0.9033203125}, {"id": "(Noone et al., 2017)", "paper": {"corpus_id": 4039308, "title": "Visual and textual programming languages: a systematic review of the literature", "year": 2017, "venue": "Journal of Computers in Education", "authors": [{"name": "Mark Noone", "authorId": "2056455701"}, {"name": "Aidan Mooney", "authorId": "12733217"}], "n_citations": 95}, "snippets": ["It is well documented and has been the topic of much research as well that Computer Science courses tend to have higher than average drop-out rates at third level, particularly so, for students advancing from first year to second year. This is a problem that needs to be addressed not only with urgency but also with caution. The required number of Computer Science graduates is growing every year, but the number of graduates is not meeting this demand, and one way that this problem can be alleviated is to encourage students, at an early age, towards studying Computer Science courses. This paper presents a systematic literature review that examines the role of visual and textual programming languages when learning to program, particularly as a First Programming Language. The approach is systematic in that a structured search of electronic resources has been conducted, and the results are presented and quantitatively analysed. This study will provide insight into whether or not the current approaches to teaching young learners programming are viable, and examines what we can do to increase the interest and retention of these students as they progress through their education."], "score": 0.0}], "table": null}], "cost": 0.461028}}
