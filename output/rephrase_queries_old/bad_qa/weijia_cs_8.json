{"original_query": "Can you explain to me what is Visual programming?", "input": "Can explain what Visual programming", "output": {"sections": [{"title": "Introduction/Background", "tldr": "Visual programming is a programming approach that uses graphical elements instead of text-based code to create software. It enables users to develop programs by manipulating visual elements on a screen rather than writing traditional text-based code. (LLM Memory)", "text": "\nVisual programming represents a paradigm shift from traditional text-based programming, offering an alternative approach to software development that emphasizes graphical representations over written code. Instead of typing lines of text commands, visual programming allows developers to create programs by manipulating visual elements such as blocks, diagrams, icons, and connections through a graphical user interface. This approach aims to make programming more intuitive and accessible, particularly for beginners, domain experts without formal programming training, and visual thinkers. By providing a more concrete representation of program structure and data flow, visual programming environments help users visualize relationships between components and understand program execution in a more tangible way. The visual nature of these environments often reduces syntax errors that are common in text-based programming, as the user is working with pre-defined components that can only be connected in ways that make logical sense. <Model name=\"Anthropic\" version=\"claude-3-7-sonnet-20250219\">", "citations": [], "table": null}, {"title": "Definition and Core Concepts", "tldr": "Visual programming is defined as a programming approach that uses two-dimensional or multi-dimensional graphical elements instead of one-dimensional text for creating programs. Its core concepts include visual representation of program logic, manipulation of graphical objects, and the integration of computer graphics with programming languages. (8 sources)", "text": "\nVisual programming is formally defined as \"any system that allows the user to specify a program in a two (or more) dimensional fashion\" <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper> <Paper corpusId=\"248510289\" paperTitle=\"(Savidis, 2022)\" isShortName></Paper>. This multi-dimensional approach stands in contrast to traditional text-based programming, which is considered one-dimensional <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper>. The fundamental characteristic of visual programming languages (VPLs) is their use of \"meaningful graphic representation and manipulates visual information or supports visual interaction\" in the programming process <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper>.\n\nVPLs are characterized by programming constructs and rules that are visually depicted <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. These languages allow users to \"create programs by manipulating more graphic elements of the program than text files\" <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper>. The visual nature of these languages uses spatial relationships, multidimensional objects, and temporal dimensions to represent program semantics, making multidimensionality a key differentiator between VPLs and purely textual languages <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper>.\n\nAccording to the Wiley Encyclopedia of Computer Science and Engineering, a Visual Programming Language is one \"in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device\" <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>. These visual elements utilize imagery thinking to provide a more natural approach to programming than textual languages <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper>.\n\nIt is important to distinguish between visual programming and graphical user interfaces (GUIs). While GUIs help users execute programs via visual menu items, they typically don't allow users to create new programs or combine menu functions. In contrast, visual programming languages have \"the same power as a textual programming language\" when they feature equivalent functional elements, enabling the design and compilation of new algorithms and programs <Paper corpusId=\"3874016\" paperTitle=\"(Milicchio et al., 2016)\" isShortName></Paper>.\n\nVisual programming emerges from the integration of three fields: Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI) <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>. It employs various visual elements including \"icons, diagrams, idle sketches, or demonstrations of actions using graphic objects\" <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper> <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>. These elements can be categorized into different types, such as Process Icons (denoting accounts) and Object Icons (representing basic or composite objects) <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>.\n\nAn important distinction exists between visual programming and program visualization. In visual programming, graphics are used to create programs, while in program visualization, programs are created using traditional text-based methods and graphics are used to visualize program execution and outputs <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. This distinction highlights the primary purpose of visual programming: to enable program creation through direct manipulation of visual elements rather than just visualizing existing code.", "citations": [{"id": "(Joao et al., 2019)", "paper": {"corpus_id": 199002134, "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers", "year": 2019, "venue": "Education sciences", "authors": [{"name": "Piedade Jo\u00e3o", "authorId": "2157028104"}, {"name": "Dorotea Nuno", "authorId": "72582337"}, {"name": "Sampaio Ferrentini F\u00e1bio", "authorId": "2157024771"}, {"name": "P. ana", "authorId": "144370033"}], "n_citations": 23}, "snippets": ["In 1990, Myers (Myers, 1990) defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs."], "score": 0.98291015625}, {"id": "(Savidis, 2022)", "paper": {"corpus_id": 248510289, "title": "Programming Experience Requirements for Future Visual Development Environments", "year": 2022, "venue": "International Conference on Computer Supported Education", "authors": [{"name": "Anthony Savidis", "authorId": "1685511"}], "n_citations": 1}, "snippets": ["The notion of visual programming concerns methods to define programs in a multi-dimensional fashion (Myers, 1990)). The latter is not linked to the underlying program representation, but concerns the interactive visual means through which a program is created, refined and managed. Hence, text-based code is considered as one-dimension method and is therefore not treated as visual programming."], "score": 0.97265625}, {"id": "(Plauska et al., 2014)", "paper": {"corpus_id": 60941791, "title": "Reflections on Using Robots and Visual Programming Environments for Project-Based Teaching", "year": 2014, "venue": "", "authors": [{"name": "Ignas Plauska", "authorId": "3102760"}, {"name": "R. Lukas", "authorId": "69972564"}, {"name": "Robertas Dama\u0161evi\u010dius", "authorId": null}], "n_citations": 8}, "snippets": ["Visual programming is a method to specify a program in a two (or more) dimensional fashion (Myers, 1986), whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification (Lee et al., 2011)."], "score": 0.9892578125}, {"id": "(Kuhail et al., 2021)", "paper": {"corpus_id": 231725028, "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "M. Kuhail", "authorId": "1980707"}, {"name": "Shahbano Farooq", "authorId": "153238394"}, {"name": "R. Hammad", "authorId": "3083161"}, {"name": "Mohammed Bahja", "authorId": "8357681"}], "n_citations": 39}, "snippets": ["Visual programming refers to approaches and methods that use two-dimensional graphical elements to allow nonprogrammer end-users to create, extend, and customize software applications [9]. Visual programming languages (VPLs) are described by programming constructs and rules which are visually depicted [13].\n\nCombining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages."], "score": 0.9912109375}, {"id": "(Hamzabegovic, 2019)", "paper": {"corpus_id": 86787308, "title": "Development of application software without programming", "year": 2019, "venue": "IOP Conference Series: Materials Science and Engineering", "authors": [{"name": "J. Hamzabegovi\u0107", "authorId": "30811658"}], "n_citations": 0}, "snippets": ["In computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun.\n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages."], "score": 0.98486328125}, {"id": "(Dias et al., 2018)", "paper": {"corpus_id": 53282492, "title": "State of the Software Development Life-Cycle for the Internet-of-Things", "year": 2018, "venue": "arXiv.org", "authors": [{"name": "Jo\u00e3o Pedro Dias", "authorId": "145745979"}, {"name": "H. Ferreira", "authorId": "144027277"}], "n_citations": 14}, "snippets": ["A Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as:\n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device.\n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002]."], "score": 0.96337890625}, {"id": "(Milicchio et al., 2016)", "paper": {"corpus_id": 3874016, "title": "Visual programming for next-generation sequencing data analytics", "year": 2016, "venue": "BioData Mining", "authors": [{"name": "F. Milicchio", "authorId": "2667295"}, {"name": "R. Rose", "authorId": "3381593"}, {"name": "J. Bian", "authorId": "152441499"}, {"name": "Jae Min", "authorId": "145545650"}, {"name": "M. Prosperi", "authorId": "144270737"}], "n_citations": 21}, "snippets": ["In computer science, a visual programming (VP) language is a medium for implementing computer programs that makes uses of graphical operators and elements rather than textual ones. VP is not a new concept [71](Shu, 1986)[73][74]; it has been envisioned in several ways starting from the early 1960s and has been the object of philosophical debates (Cypher et al., 1993)(Green et al., 1996). VP is different from GUI. A GUI aids users executing programs via visual menu items in contrast to command-line (i.e. terminal) text scripting. In general, GUI menus are premade and users cannot create new programs or combine menu functions within the GUI. Conversely, a VP language has the same power as a textual programming language or a library, if it features the same functional elements (e.g. data structures and methods); therefore, new algorithms and programs can be designed and compiled within a VP, and VP can even be used to implement GUIs. Visual approaches to programming have been explored in diverse environments, including education, multimedia, system simulation and automation, data warehousing, and business intelligence, with probably the most successful example being the computer-aided design (CAD) software industry. Another extremely popular area for VP is video game design (MacLaurin, 2011)[78]. Although in principle VP can be used to create algorithms starting from the lowest hierarchy of programming language elements, in practice, VP is employed for creating applications using libraries. This facilitates developers' work when a large amount of coding (and redundant coding) is required."], "score": 0.94580078125}, {"id": "(Aldhlan et al., 2021)", "paper": {"corpus_id": 236566925, "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games", "year": 2021, "venue": "Indian Journal of Science and Technology", "authors": [{"name": "Kawther A. Aldhlan", "authorId": "9207310"}, {"name": "Hamad Alreshidi", "authorId": "2836785"}], "n_citations": 2}, "snippets": ["Visual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI).\n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations.\n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts", ") and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer.\n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc.\n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions."], "score": 0.9814453125}], "table": null}, {"title": "Types and Categories of Visual Programming", "tldr": "Visual programming languages can be categorized into several distinct types including block-based, node-based, form-based, diagram-based, and icon-based approaches. Each type uses different visual metaphors and interaction patterns to represent program logic and data flow. (6 sources)", "text": "\nVisual programming languages (VPLs) have evolved into several distinct categories, each with unique visual representations and interaction models:\n\n1. **Block-based languages** - These consist of modular blocks representing fundamental programming constructs (if-else statements, loops, etc.) or custom prototypes for more complex functionalities <Paper corpusId=\"202566030\" paperTitle=\"(Zikas et al., 2019)\" isShortName></Paper>. Block-based languages often use an interlocking puzzle piece metaphor, where pieces represent instructions and their interlocking nature shows how data and control flow between them <Paper corpusId=\"248524774\" paperTitle=\"(Hirzel, 2022)\" isShortName></Paper>. Scratch is a prominent example of this approach.\n\n2. **Node-based languages** - These represent structures and data flow using logical nodes connected by edges that reflect their relationships. The resulting structure resembles a directed graph that provides users with a visual overview of program and data flow <Paper corpusId=\"202566030\" paperTitle=\"(Zikas et al., 2019)\" isShortName></Paper>. Node-based approaches often use a boxes-and-arrows representation similar to those found in business process modeling notation (BPMN) <Paper corpusId=\"248524774\" paperTitle=\"(Hirzel, 2022)\" isShortName></Paper>.\n\n3. **Form-based languages** - These use forms and spreadsheet-like interfaces to define program behavior <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>.\n\n4. **Diagram-based languages** - These use diagrams to represent program logic and behavior. DiaPlan is an example of a visual rule-based language founded on graph transformation as its computational model <Paper corpusId=\"58394\" paperTitle=\"(Hoffmann et al., 2000)\" isShortName></Paper>.\n\n5. **Icon-based languages** - These use icons to represent program elements and actions <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>.\n\nSome visual programming languages are designed with specific domains in mind. For example, command-based models can be developed for modular systems like robot kits, where the visual programming environment issues commands to various connected modules that handle specific tasks <Paper corpusId=\"4793447\" paperTitle=\"(Vithana et al., 2017)\" isShortName></Paper>. Visual programming has been successfully applied in diverse domains including education, multimedia, system simulation and automation, data warehousing, business intelligence, computer-aided design (CAD), and video game development <Paper corpusId=\"3874016\" paperTitle=\"(Milicchio et al., 2016)\" isShortName></Paper>.\n\nDespite the diversity in visual representations, most visual programming environments share common elements, including a code canvas where users can read and write programs, component palettes from which elements can be dragged, and configuration panes for setting properties <Paper corpusId=\"248524774\" paperTitle=\"(Hirzel, 2022)\" isShortName></Paper>.", "citations": [{"id": "(Zikas et al., 2019)", "paper": {"corpus_id": 202566030, "title": "Scenior: An Immersive Visual Scripting system of Gamified Training based on VR Software Design Patterns", "year": 2019, "venue": "arXiv.org", "authors": [{"name": "Paul Zikas", "authorId": "3419237"}, {"name": "Nick Lydatakis", "authorId": "1388001839"}, {"name": "Steve Kateros", "authorId": "19309698"}, {"name": "G. Papagiannakis", "authorId": "2896538"}], "n_citations": 1}, "snippets": ["Visual programming is getting more publicity as more platforms and tools are emerging to enlarge the community. We can separate them into two categories according to their visual appearance and basic functionalities: a) block-based and b) node-based scripting languages Block-based visual languages consist of modular blocks that represent fundamental programming utilities (if else, while, for loops etc.) or even custom prototypes that describe more complex functionalities", ".On the other hand, node-based visual languages, represent structures and data flow using logical nodes linked with edges reflecting their correlation. The resulting structure looks like a directed graph that provides users with a visual overview of important data and program flow."], "score": 0.9638671875}, {"id": "(Hirzel, 2022)", "paper": {"corpus_id": 248524774, "title": "Low-Code Programming Models", "year": 2022, "venue": "Communications of the ACM", "authors": [{"name": "Martin Hirzel", "authorId": "1728836"}], "n_citations": 21}, "snippets": ["Visual programming languages let users write programs by directly manipulating their visual representation. There is a plethora of possible visual representations [8], often inspired by domain notation, such as electrical circuit diagrams. Two prominent domain-independent visual representations are boxes-and-arrows (e.g., BPMN (Ouyang et al., 2006)) or interlocking puzzle pieces (e.g., Scratch [30]). Here, boxes or puzzle pieces represent instructions in the program, and arrows between boxes or the interlock of pieces represent how data and control flows between instructions. Despite the diversity in visual languages, their programming environments tend to comprise similar building blocks, as depicted in Figure 2. The central building block is the code canvas, where the user can both read (red arrow from canvas to eye) and write (blue arrow from hand to canvas) the program. Writing the program also involves dragging components from the palette to the canvas and possibly configuring them in a separate configuration pane."], "score": 0.98193359375}, {"id": "(Kuhail et al., 2021)", "paper": {"corpus_id": 231725028, "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "M. Kuhail", "authorId": "1980707"}, {"name": "Shahbano Farooq", "authorId": "153238394"}, {"name": "R. Hammad", "authorId": "3083161"}, {"name": "Mohammed Bahja", "authorId": "8357681"}], "n_citations": 39}, "snippets": ["Visual programming refers to approaches and methods that use two-dimensional graphical elements to allow nonprogrammer end-users to create, extend, and customize software applications [9]. Visual programming languages (VPLs) are described by programming constructs and rules which are visually depicted [13].\n\nCombining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages."], "score": 0.9912109375}, {"id": "(Hoffmann et al., 2000)", "paper": {"corpus_id": 58394, "title": "Towards rule-based visual programming of generic visual systems", "year": 2000, "venue": "arXiv.org", "authors": [{"name": "Berthold Hoffmann", "authorId": "38400881"}, {"name": "M. Minas", "authorId": "1731543"}], "n_citations": 9}, "snippets": ["This paper illustrates how the diagram programming language DiaPlan can be used to program visual systems. DiaPlan is a visual rule-based language that is founded on the computational model of graph transformation."], "score": 0.94287109375}, {"id": "(Vithana et al., 2017)", "paper": {"corpus_id": 4793447, "title": "Extensible Visual Programming Model for Modular Systems Targeting Novices", "year": 2017, "venue": "British Computer Society Conference on Human-Computer Interaction", "authors": [{"name": "Yasura Vithana", "authorId": "9346844"}, {"name": "Hashini Senaratne", "authorId": "40894841"}], "n_citations": 0}, "snippets": ["The visual programming language in topic is a command based model and the processing of each of the command is expected to be done in a distributed manner. Since this model was developed targeting modular systems like robot kits, the main motive was to coordinate tasks done by the connected modules. These tasks can be standalone tasks which can be simply started and ignored and some other tasks in which the results are passed to decision making. For example, in the context of a robot kit, there can be a task which makes the robot turn right and also a task to measure the distance to an obstacle using a sensor. The visual programming model is developed to program the central controlling entity that can control all the other connected modules by issuing commands and analysing their results. The important point here is that due to this configuration, the output of the visual programming environment can be made extremely simple and uniform as the native executions of the tasks are offloaded to various modules which are built with all the necessary algorithms and other programming components."], "score": 0.97802734375}, {"id": "(Milicchio et al., 2016)", "paper": {"corpus_id": 3874016, "title": "Visual programming for next-generation sequencing data analytics", "year": 2016, "venue": "BioData Mining", "authors": [{"name": "F. Milicchio", "authorId": "2667295"}, {"name": "R. Rose", "authorId": "3381593"}, {"name": "J. Bian", "authorId": "152441499"}, {"name": "Jae Min", "authorId": "145545650"}, {"name": "M. Prosperi", "authorId": "144270737"}], "n_citations": 21}, "snippets": ["In computer science, a visual programming (VP) language is a medium for implementing computer programs that makes uses of graphical operators and elements rather than textual ones. VP is not a new concept [71](Shu, 1986)[73][74]; it has been envisioned in several ways starting from the early 1960s and has been the object of philosophical debates (Cypher et al., 1993)(Green et al., 1996). VP is different from GUI. A GUI aids users executing programs via visual menu items in contrast to command-line (i.e. terminal) text scripting. In general, GUI menus are premade and users cannot create new programs or combine menu functions within the GUI. Conversely, a VP language has the same power as a textual programming language or a library, if it features the same functional elements (e.g. data structures and methods); therefore, new algorithms and programs can be designed and compiled within a VP, and VP can even be used to implement GUIs. Visual approaches to programming have been explored in diverse environments, including education, multimedia, system simulation and automation, data warehousing, and business intelligence, with probably the most successful example being the computer-aided design (CAD) software industry. Another extremely popular area for VP is video game design (MacLaurin, 2011)[78]. Although in principle VP can be used to create algorithms starting from the lowest hierarchy of programming language elements, in practice, VP is employed for creating applications using libraries. This facilitates developers' work when a large amount of coding (and redundant coding) is required."], "score": 0.94580078125}], "table": null}, {"title": "Advantages of Visual Programming", "tldr": "Visual programming offers significant advantages by reducing syntax barriers, increasing program comprehension, and allowing users to focus on logic rather than memorizing programming syntax. It provides immediate visual feedback, enhances accessibility for beginners, and supports exploratory programming through interactive interfaces. (24 sources)", "text": "\nVisual programming environments provide numerous benefits that address common challenges in traditional text-based programming. One of the most significant advantages is the reduction of syntax barriers. By using graphical elements instead of text-based code with precise syntax requirements, visual programming eliminates many of the common errors that novice programmers encounter <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper>. This allows users to focus on the logical structure and semantics of the program rather than struggling with syntax details <Paper corpusId=\"221340525\" paperTitle=\"(Alturayeif et al., 2020)\" isShortName></Paper> <Paper corpusId=\"68068900\" paperTitle=\"(Bai et al., 2019)\" isShortName></Paper>.\n\nThe visual representation of program elements enhances program comprehension by presenting content in two dimensions, which better aligns with human cognitive processes <Paper corpusId=\"19038821\" paperTitle=\"(Sukumar et al., 2017)\" isShortName></Paper>. This multidimensional approach allows programmers to visualize relationships between program components more naturally, as graphical representations evaluate information in a manner closer to human mental representations of real-world problems <Paper corpusId=\"246022597\" paperTitle=\"(Pongthanisorn et al., 2022)\" isShortName></Paper>.\n\nVisual programming environments assist users in overcoming three key cognitive challenges: syntactic (arranging programming components into well-formed programs), semantic (comprehending program meaning), and pragmatic (understanding program behavior in specific situations) <Paper corpusId=\"256827582\" paperTitle=\"(Wagner et al., 2023)\" isShortName></Paper> <Paper corpusId=\"41867280\" paperTitle=\"(Repenning, 2017)\" isShortName></Paper>. By providing visual cues about how programming elements can be connected, these environments prevent users from creating invalid programs, thus eliminating many common programming errors <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper>.\n\nThe drag-and-drop interface common in many visual programming environments makes programming more accessible and less intimidating for beginners <Paper corpusId=\"63194770\" paperTitle=\"(Gunawan et al., 2016)\" isShortName></Paper> <Paper corpusId=\"269622739\" paperTitle=\"(Sermeno, 2019)\" isShortName></Paper>. This approach has proven effective across a wide range of age groups and skill levels, from preschool children to college students <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper> <Paper corpusId=\"235383033\" paperTitle=\"(Papadakis, 2021)\" isShortName></Paper> <Paper corpusId=\"253196672\" paperTitle=\"(Timur et al., 2021)\" isShortName></Paper> <Paper corpusId=\"35735491\" paperTitle=\"(Urness et al., 2011)\" isShortName></Paper>.\n\nVisual programming also supports immediate feedback through the on-screen execution of constructed programs, allowing users to quickly verify their solutions and make adjustments <Paper corpusId=\"250414169\" paperTitle=\"(Fanchamps et al., 2022)\" isShortName></Paper> <Paper corpusId=\"8626769\" paperTitle=\"(Moreno et al., 2011)\" isShortName></Paper>. This immediate feedback facilitates exploratory programming and experimentation, accelerating the learning process and making advanced technology more accessible to beginners <Paper corpusId=\"273147365\" paperTitle=\"(Kletsko et al., 2024)\" isShortName></Paper> <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>.\n\nAnother key advantage is the effective use of computer display, showing only information that is important to the user at any given time <Paper corpusId=\"7271567\" paperTitle=\"(Lucanin et al., 2011)\" isShortName></Paper> <Paper corpusId=\"13484911\" paperTitle=\"(Burnett et al., 1995)\" isShortName></Paper>. This helps manage screen real estate efficiently and reduces cognitive overload for the programmer.\n\nVisual programming has proven particularly valuable in educational contexts, where it helps students develop computational thinking skills while reducing the intimidation factor associated with traditional programming <Paper corpusId=\"225541919\" paperTitle=\"(Falgenti, 2020)\" isShortName></Paper> <Paper corpusId=\"3949077\" paperTitle=\"(Fayed, 2017)\" isShortName></Paper>. It enables students to learn programming concepts and express their ideas without being hindered by the complexities of syntax <Paper corpusId=\"257145390\" paperTitle=\"(Chen et al., 2023)\" isShortName></Paper> <Paper corpusId=\"235749050\" paperTitle=\"(Zheng et al., 2021)\" isShortName></Paper> <Paper corpusId=\"237732833\" paperTitle=\"(Xiang et al., 2021)\" isShortName></Paper>.", "citations": [{"id": "(Chiu, 2020)", "paper": {"corpus_id": 212726996, "title": "Facilitating K-12 Teachers in Creating Apps by Visual Programming and Project-based Learning", "year": 2020, "venue": "International Journal of Emerging Technologies in Learning (iJET)", "authors": [{"name": "Chiung-Fang Chiu", "authorId": "2111748"}], "n_citations": 40}, "snippets": ["Traditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming (Denny et al., 2011)- (Denny et al., 2012). Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions."], "score": 0.96484375}, {"id": "(Alturayeif et al., 2020)", "paper": {"corpus_id": 221340525, "title": "DeepScratch: Scratch Programming Language Extension for Deep Learning Education", "year": 2020, "venue": "International Journal of Advanced Computer Science and Applications", "authors": [{"name": "Nora S. Alturayeif", "authorId": "2315312012"}, {"name": "Nouf Alturaief", "authorId": "2023398349"}, {"name": "Zainab Alhathloul", "authorId": "2023401654"}], "n_citations": 19}, "snippets": ["Visual programming languages allow users to develop programs by manipulating elements graphically instead of writing a program as a text. These languages can potentially allow young people to acquire the computational concepts more easily by reducing unnecessary syntax and facilitating the use of dragging and snapping the command blocks. With such features, these frameworks can help reduce the cognitive load on novices by allowing them to focus on the logic and structures of a program rather than worrying about the syntax and the mechanism of coding [3]."], "score": 0.94873046875}, {"id": "(Bai et al., 2019)", "paper": {"corpus_id": 68068900, "title": "Application of Visual Programming in Program Design Course", "year": 2019, "venue": "DEStech Transactions on Social Science Education and Human Science", "authors": [{"name": "Xiaojun Bai", "authorId": "2114140303"}, {"name": "Baili Liu", "authorId": "2801842"}], "n_citations": 1}, "snippets": ["In recent years, a lot of visual programming tools came into being, for example, Scratch [3] , Blockly [4] , Snap [5] and so on. By introducing of visual programming tools in computer programming course, the problems mentioned above can be solved effectively. First, for that the core of computational thinking is the ideas rather than the language syntax, by using of visual tools will simplify programming, thus students will focus on the program logic rather than the language syntax, it will help to overcome the fear of programming and cultivate there interesting. Second, visual program help to express the logic of algorithm clearly, thus it helps to train logical thinking through visual programming, lastly, by modeling with visual programming tools, it is easy to execute the algorithm immediately, thus convenient to verify the algorithm."], "score": 0.96826171875}, {"id": "(Sukumar et al., 2017)", "paper": {"corpus_id": 19038821, "title": "Design Space of Programming Tools on Mobile Touchscreen Devices", "year": 2017, "venue": "arXiv.org", "authors": [{"name": "P. Sukumar", "authorId": "2207677"}, {"name": "Ronald A. Metoyer", "authorId": "1809549"}], "n_citations": 0}, "snippets": ["Visual Programming (VP) languages enable programming by means of interacting with graphical elements, such as blocks, symbols, and arrows, rather than text. They are known, in general, to promote program comprehension by representing content in two-dimensions (text is considered onedimensional) and by emphasizing the underlying semantics rather than the syntax (Myers, 1990)[53]. The contexts where VP is used mostly include learning environments (for both children and novice programmers) and specialized domains (Myers, 1990)[41]."], "score": 0.953125}, {"id": "(Pongthanisorn et al., 2022)", "paper": {"corpus_id": 246022597, "title": "Visual Programming for Artificial Intelligent and Robotic Application (VPAR) Framework", "year": 2022, "venue": "European-Japanese Conference on Information Modelling and Knowledge Bases", "authors": [{"name": "Goragod Pongthanisorn", "authorId": "2001006030"}, {"name": "W. Viriyavit", "authorId": "19305117"}, {"name": "Thatsanee Charoenporn", "authorId": "2844764"}, {"name": "Virach Sornlertlamvanich", "authorId": "1779078"}], "n_citations": 0}, "snippets": ["Visual programming has become popular for the novice and first-time learner. This paradigm of programming, instead of text, uses a block or another notation to represent a logical flow. It is also called a block-based programming style. This enables more intuitive of a computer programming. Moreover, a graphical representation of visual programming evaluates information in the closest manner to human mental representation of real-world problems (Myers, 1990)."], "score": 0.97216796875}, {"id": "(Wagner et al., 2023)", "paper": {"corpus_id": 256827582, "title": "ELEA - Build your own Evolutionary Algorithm in your Browser", "year": 2023, "venue": "GECCO Companion", "authors": [{"name": "Markus Wagner", "authorId": "2194782585"}, {"name": "Erik Kohlros", "authorId": "2205544441"}, {"name": "Gerome Quantmeyer", "authorId": "2205539993"}, {"name": "Timo K\u00f6tzing", "authorId": "1751539"}], "n_citations": 1}, "snippets": ["A visual programming system (VPS) [8] allows users to create programs by manipulating program elements graphically rather than specifying them textually. In a VPS, a user creates a program by arranging \"boxes and arrows\", where boxes represent entities and arrows represent relations.\n\nA VPS can assist programmers to overcome three cognitive challenges [6]: \n\n\u2022 Syntactic: arranging programming language components into well-formed programs. \u2022 Semantic: assisting users with the comprehension of the meaning of programs. \u2022 Pragmatic: bringing a program into a specific situation and understanding its behaviour."], "score": 0.96435546875}, {"id": "(Repenning, 2017)", "paper": {"corpus_id": 41867280, "title": "Moving Beyond Syntax: Lessons from 20 Years of Blocks Programing in AgentSheets", "year": 2017, "venue": "Journal of Visual Languages and Sentient Systems", "authors": [{"name": "A. Repenning", "authorId": "1782080"}], "n_citations": 50}, "snippets": ["The blocks programming community has been preoccupied with identifying syntactic obstacles that keep novices from learning to program. Unfortunately, this focus is now holding back research from systematically investigating various technological affordances that can make programming more accessible. Employing approaches from program analysis, program visualization, and real-time interfaces can push blocks programming beyond syntax towards the support of semantics and even pragmatics. Syntactic support could be compared to checking spelling and grammar in word processing. Spell checking is relatively simple to implement and immediately useful, but provides essentially no support to create meaningful text. Over the last 25 years, I have worked to empower students to create their own games, simulations, and robots. In this time I have explored, combined, and evaluated a number of programming paradigms. Every paradigm including data flow, programming by example, and programming through analogies brings its own set of affordances and obstacles. Twenty years ago, AgentSheets combined four key affordances of blocks programming, and since then has evolved into a highly accessible Computational Thinking Tool. This article describes the journey to overcome first syntactic, then semantic, and most recently pragmatic, obstacles in computer science education."], "score": 0.0}, {"id": "(DeLozier et al., 2023)", "paper": {"corpus_id": 259335765, "title": "Using Visual Programming Games to Study Novice Programmers", "year": 2023, "venue": "Int. J. Serious Games", "authors": [{"name": "Christian DeLozier", "authorId": "39722092"}, {"name": "James Shey", "authorId": "38203562"}], "n_citations": 6}, "snippets": ["Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool (Timur et al., 2021)(Papadakis, 2021), to high school (Weintrop et al., 2017), to college (Urness et al., 2011). The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors (Weintrop et al., 2018). This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13]."], "score": 0.96240234375}, {"id": "(Gunawan et al., 2016)", "paper": {"corpus_id": 63194770, "title": "PEMANFAATAN PEMROGRAMAN VISUAL SEBAGAI ALTERNATIF PEMBUATAN MEDIA BELAJAR BERBASIS GAME DAN ANIMASI", "year": 2016, "venue": "", "authors": [{"name": "Dedi Gunawan", "authorId": "1885335036"}, {"name": "Fatah Yasin Al Irsyadi", "authorId": "70024582"}], "n_citations": 5}, "snippets": ["Visual programming is the one programming technique in computer Science which aims to give easy understanding in writing code program. The main users of visual programming are students and people who have no experiences in making computer code and lack of computer programming language.Visual programming gives advantages to develop any kind of application software such as game and application related to education."], "score": 0.95068359375}, {"id": "(Sermeno, 2019)", "paper": {"corpus_id": 269622739, "title": "Graphical Block Structured Programming: A Visual Programming Paradigm", "year": 2019, "venue": "Journal of Innovative Technology Convergence", "authors": [{"name": "Jason Sermeno", "authorId": "2300620753"}], "n_citations": 0}, "snippets": ["This paper discusses the concept and design of a graphical block-structured programming paradigm that presents a model for constructing computer programs using a set of graphical objects that resembles the existing lexical instructions in a C language. The design of the paradigm was motivated by the results from studies investigating the previous designs and the acquisition of existing visual programming languages. Studies showed that most people are having trouble expressing the structures that they cannot write or verbally describe due to their limited grasp of natural language. The aim of this proposed programming paradigm is to improve the user's ability to create programs by making programming more accessible to some particular audience and improving the correctness and speed with which people perform programming tasks."], "score": 0.95263671875}, {"id": "(Papadakis, 2021)", "paper": {"corpus_id": 235383033, "title": "The Impact of Coding Apps to Support Young Children in Computational Thinking and Computational Fluency. A Literature Review", "year": 2021, "venue": "Frontiers in Education", "authors": [{"name": "Stamatis Papadakis", "authorId": "31818512"}], "n_citations": 90}, "snippets": ["Data that shows that young children can learn and acquire Computational Thinking (CT) skills has led governments and policymakers internationally to integrate CT into the curriculum, starting in the earliest grades. Researchers support the idea that this introduction must not solely focus on a problem-solving process skill (CT) but instead provide children with new ways to express themselves, supporting their cognitive, language, and socio-emotional development (Computational Fluency-CF). Coupled with the media and government\u2019s rhetoric and an increasing number of apps offering various programming lessons, puzzles, and challenges, educators have been responsible for introducing young children to CT and CF using touchscreen technology. This paper presents a literature review (N = 21) of empirical studies on applying four coding apps to support young children\u2019s learning of CT and CF. The main conclusion is that all apps positively affect the development of children\u2019s CT skills. None of the apps can ultimately support the development of CF, although ScratchJr, with a \"sandbox\" approach, can better help students express themselves."], "score": 0.0}, {"id": "(Timur et al., 2021)", "paper": {"corpus_id": 253196672, "title": "Pre-service pre-school teachers' opinions about using block-based coding/scratch", "year": 2021, "venue": "Acta Didactica Napocensia", "authors": [{"name": "Serkan Timur", "authorId": "2057521942"}, {"name": "Bet\u00fcl Timur", "authorId": "70546556"}, {"name": "Elif G\u00fcven\u00e7", "authorId": "2129327879"}, {"name": "\u0130lknur Us", "authorId": "2189176196"}, {"name": "Eylem Yal\u00e7\u0131nkaya-\u00d6nder", "authorId": "1712266999"}], "n_citations": 6}, "snippets": ["\"Abstract: In this study, it was aimed to examine the pre-service pre-school teachers\u2019 opinions about using block-based coding/Scratch in education. 28 pre-service pre-school teachers were participated studying at a public university in a Marmara province region. Within the scope of the study, pre-service teachers were trained on the block-based coding Scratch program for four weeks. A semi-structured interview form consisting of 12 questions was used to determine the opinions of the participants. The data of the study were analyzed using the descriptive analysis method. As a result of the study, 85.71% of pre-school teacher candidates stated that block-based coding education should start at an early age like a language education, this education is important as a necessity of the technology age and all students should benefit from this education in order to provide an effective education, 14.25% of teacher candidates specified that this education is untimely for younger age levels and should not be given to everyone. In addition, the pre-service teachers stated that the block-based coding/Scratch program training helped them gain new ideas in terms of creating materials, improved their creativity and contributed to design abstract material in addition to concrete ones. Additionally, 46.42% of pre-service teachers stated that block-based coding education should start between the ages of 5-7. In this context, it is recommended to provide coding education both in pre-school and undergraduate education.\""], "score": 0.0}, {"id": "(Urness et al., 2011)", "paper": {"corpus_id": 35735491, "title": "Building a thriving CS program at a small liberal arts college", "year": 2011, "venue": "Journal of Computing Sciences in Colleges (JCSC; Formerly: Journal of Computing in Small Colleges)", "authors": [{"name": "T. Urness", "authorId": "2046138"}, {"name": "E. Manley", "authorId": "3303190"}], "n_citations": 2}, "snippets": ["In this paper we describe several techniques that have helped increase enrollment in the computer science program from 23 computer science majors in 2008 to 42 computer science majors in 2010 - an increase of 82.6%. We discuss issues related to curriculum, programming assignments, and professor-student interactions that have made the discipline more attractive and manageable to a variety of students within the setting of a small liberal arts college."], "score": 0.0}, {"id": "(Fanchamps et al., 2022)", "paper": {"corpus_id": 250414169, "title": "Effect of SRA-programming on computational thinking through different output modalities", "year": 2022, "venue": "Journal of Computers in Education", "authors": [{"name": "Nardie Fanchamps", "authorId": "2103048484"}, {"name": "L.A.M.P. Slangen", "authorId": "101239469"}, {"name": "M. Specht", "authorId": "143989442"}, {"name": "P. Hennissen", "authorId": "102715196"}], "n_citations": 5}, "snippets": ["In a visual programming environment, a computer program to solve a computational problem is constructed by manipulating visual programming elements in order to formulate and design a solution to the problem (S\u00e1ez- (S\u00e1ez-L\u00f3pez et al., 2016). Through the on-screen execution of the constructed program, direct visual feedback can be obtained from which the user can anticipate and determine the subsequent interventions by means of problem-solving actions (Moreno et al., 2011)(Tsai, 2019)."], "score": 0.9580078125}, {"id": "(Moreno et al., 2011)", "paper": {"corpus_id": 8626769, "title": "Teaching with Concrete and Abstract Visual Representations: Effects on Students' Problem Solving, Problem Representations, and Learning Perceptions.", "year": 2011, "venue": "", "authors": [{"name": "R. Moreno", "authorId": "144006457"}, {"name": "Gamze Ozogul", "authorId": "1717551"}, {"name": "M. Reisslein", "authorId": "1740196"}], "n_citations": 136}, "snippets": ["In 3 experiments, we examined the effects of using concrete and/or abstract visual problem representations during instruction on students' problem-solving practice, near transfer, problem representations, and learning perceptions. In Experiments 1 and 2, novice students learned about electrical circuit analysis with an instructional program that included worked-out and practice problems represented with abstract (Group A), concrete (Group C), or abstract and concrete diagrams (Group AC), whereby the cover stories were abstract in Group A and concrete in Groups C and AC. Experiment 3 added a 4th condition (C-A) with a concrete cover story and abstract diagrams. Group AC outperformed Groups A and C on problem-solving practice in Experiments 1 and 2 and outperformed Group C on transfer across the 3 experiments; Group AC also outperformed Group C-A in Experiment 3. Further, Group A outperformed Group C on transfer in Experiments 2 and 3 and outperformed Group C-A in Experiment 3. Transfer scores were positively associated with the quality of the diagrams and the number of abstract representations drawn during the transfer test. Data on students' learning perceptions suggest that the advantage of Group AC relies on the combined cognitive support of both representations. Our studies indicate that problem solving is fostered when learners experience concrete visual representations that connect to their prior knowledge and are enabled to use abstract visual representations"], "score": 0.0}, {"id": "(Kletsko et al., 2024)", "paper": {"corpus_id": 273147365, "title": "Advanced Game Engine Wizardry for Visual Programming Environments", "year": 2024, "venue": "PAINT@SPLASH", "authors": [{"name": "Elisabeth Kletsko", "authorId": "2326538317"}, {"name": "Riemer van Rozen", "authorId": "2047732442"}], "n_citations": 0}, "snippets": ["Visual programming environments empower end-users with interactive input and feedback mechanisms that support live and exploratory programming."], "score": 0.93359375}, {"id": "(Zhou et al., 2023)", "paper": {"corpus_id": 276961580, "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs", "year": 2023, "venue": "International Conference on Human Factors in Computing Systems", "authors": [{"name": "Zhongyi Zhou", "authorId": "2261898099"}, {"name": "Jing Jin", "authorId": "2214751677"}, {"name": "Vrushank Phadnis", "authorId": "95798184"}, {"name": "Xiuxiu Yuan", "authorId": "29436685"}, {"name": "Jun Jiang", "authorId": "2261902264"}, {"name": "Xun Qian", "authorId": "2274943688"}, {"name": "Kristen Wright", "authorId": "2261902483"}, {"name": "Mark Sherwood", "authorId": "2261902982"}, {"name": "Jason Mayes", "authorId": "2261904117"}, {"name": "Jingtao Zhou", "authorId": "2261943879"}, {"name": "Yiyi Huang", "authorId": "2275032507"}, {"name": "Zheng Xu", "authorId": "2275017028"}, {"name": "Yinda Zhang", "authorId": "2274975067"}, {"name": "Johnny Lee", "authorId": "2274929798"}, {"name": "Alex Olwal", "authorId": "2292510931"}, {"name": "David Kim", "authorId": "2274972576"}, {"name": "Ram Iyengar", "authorId": "2214753154"}, {"name": "Na Li", "authorId": "2262397661"}, {"name": "Ruofei Du", "authorId": "2350823722"}], "n_citations": 1}, "snippets": ["Visual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace.\n\nA visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners."], "score": 0.9638671875}, {"id": "(Lucanin et al., 2011)", "paper": {"corpus_id": 7271567, "title": "A visual programming language for drawing and executing flowcharts", "year": 2011, "venue": "2011 Proceedings of the 34th International Convention MIPRO", "authors": [{"name": "Dra\u017een Lu\u010danin", "authorId": "3352207"}, {"name": "Ivan Fabek", "authorId": "2754593"}], "n_citations": 10}, "snippets": ["In (Burnett et al., 1995) a general overview of the visual programming strengths and weaknesses is examined with a lot of examples of how certain languages cope with these opportunities and challenges. The two most notable items proposed are: \n\n\u2022 static representation -is a graphical notation used to present a program at rest sufficient to understand the logic \u2022 effective use of computer display -showing only the information important to the user at any given time"], "score": 0.966796875}, {"id": "(Burnett et al., 1995)", "paper": {"corpus_id": 13484911, "title": "Scaling Up Visual Programming Languages", "year": 1995, "venue": "Computer", "authors": [{"name": "M. Burnett", "authorId": "1737204"}, {"name": "M. J. Baker", "authorId": "28202905"}, {"name": "Carisa Bohus", "authorId": "3104602"}, {"name": "Paul Carlson", "authorId": "2059765752"}, {"name": "Sherry Yang", "authorId": "47569072"}, {"name": "P. V. Zee", "authorId": "2032553"}], "n_citations": 154}, "snippets": ["The directness, immediacy, and simplicity of visual programming languages are appealing. The question is, can VPLs be effectively applied to large scale programming problems while retaining these characteristics. In scaling up, the problem is how to expand applicability without sacrificing the goals of better logic expression and understanding. From a size standpoint, scaling up refers to the programmer's ability to apply VPLs in larger programs. Such programs range from those requiring several days' work by a single programmer to programs requiring months of work, large programming teams, and large data structures. From a problem domain standpoint, scaling up refers to suitability for many kinds of problems. These range from visual application domains-such as user interface design or scientific visualization-to general purpose programming in such diverse areas as financial planning, simulations, and real time applications with explicit timing requirements. To illustrate the scaling up problem, we discuss nine major subproblems and describe emerging solutions from existing VPL systems. First, we examine representation issues, including static representation, screen real estate, and documentation. Next, we examine programming language issues-procedural abstraction, interactive visual data abstraction, type checking, persistence, and efficiency. Finally, we look at issues beyond the coding process. >"], "score": 0.0}, {"id": "(Falgenti, 2020)", "paper": {"corpus_id": 225541919, "title": "Studi Komparatif Program Visual Dinamis untuk Pembelajaran Algoritma dan Pemograman Berorientasi Objek", "year": 2020, "venue": "", "authors": [{"name": "Kursehi Falgenti", "authorId": "9178885"}], "n_citations": 2}, "snippets": ["Visual programming (PV) is a tool to facilitate learning programming. The concept of learning to use PV visualizes the work processes of algorithms and programming."], "score": 0.9658203125}, {"id": "(Fayed, 2017)", "paper": {"corpus_id": 3949077, "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications", "year": 2017, "venue": "arXiv.org", "authors": [{"name": "M. S. Fayed", "authorId": "35131544"}], "n_citations": 3}, "snippets": ["Learning computer programming has been always challenging. Since the sixties of the last century, many researchers developed Visual Programming Languages (VPLs) to help in this regard."], "score": 0.9482421875}, {"id": "(Chen et al., 2023)", "paper": {"corpus_id": 257145390, "title": "Computational Thinking Training and Deep Learning Evaluation Model Construction Based on Scratch Modular Programming Course", "year": 2023, "venue": "Computational Intelligence and Neuroscience", "authors": [{"name": "Xiaoli Chen", "authorId": "2157262938"}, {"name": "XiaoMing Wang", "authorId": "2209867633"}], "n_citations": 5}, "snippets": ["Visual programming tools lead learners to contact the code language in the way of module splicing, which can make learners accept learning programming psychologically. Its main teaching function is to weaken the writing of programming code, emphasize the application of CT knowledge and methods, and enhance the learner's motivation (Zheng et al., 2021). Visual programming tools can describe and execute problems in real situations in a modular programming language according to the problemsolving plan (Xiang et al., 2021)."], "score": 0.96044921875}, {"id": "(Zheng et al., 2021)", "paper": {"corpus_id": 235749050, "title": "Improving Visual Reasoning Through Semantic Representation", "year": 2021, "venue": "IEEE Access", "authors": [{"name": "Wenfeng Zheng", "authorId": "51452833"}, {"name": "Xiangjun Liu", "authorId": "2144226207"}, {"name": "X. Ni", "authorId": "2121973028"}, {"name": "Lirong Yin", "authorId": "143931711"}, {"name": "Bo Yang", "authorId": "143787142"}], "n_citations": 111}, "snippets": ["In visual reasoning, the achievement of deep learning significantly improved the accuracy of results. Image features are primarily used as input to get answers. However, the image features are too redundant to learn accurate characterizations within a limited complexity and time. While in the process of human reasoning, abstract description of an image is usually to avoid irrelevant details. Inspired by this, a higher-level representation named semantic representation is introduced. In this paper, a detailed visual reasoning model is proposed. This new model contains an image understanding model based on semantic representation, feature extraction and process model refined with watershed and u-distance method, a feature vector learning model using pyramidal pooling and residual network, and a question understanding model combining problem embedding coding method and machine translation decoding method. The feature vector could better represent the whole image instead of overly focused on specific characteristics. The model using semantic representation as input verifies that more accurate results can be obtained by introducing a high-level semantic representation. The result also shows that it is feasible and effective to introduce high-level and abstract forms of knowledge representation into deep learning tasks. This study lays a theoretical and experimental foundation for introducing different levels of knowledge representation into deep learning in the future."], "score": 0.0}, {"id": "(Xiang et al., 2021)", "paper": {"corpus_id": 237732833, "title": "GeoPS: An interactive visual computing tool for thermodynamic modelling of phase equilibria", "year": 2021, "venue": "Journal of Metamorphic Geology", "authors": [{"name": "Hua Xiang", "authorId": "2064888120"}, {"name": "J. Connolly", "authorId": "145109359"}], "n_citations": 134}, "snippets": ["The availability of thermodynamic data for geologically relevant phases has made practical the calculation of stable phase relations throughout the mantle and crust of terrestrial planets. GeoPS (http://www.geops.org) is a program designed for this purpose in which both input and output are done through an intuitive graphical user interface. GeoPS provides a wide range of phase equilibrium calculations based on a novel Gibbs energy minimization algorithm. The algorithm provides for exceptionally robust and computationally efficient solution to the phase equilibrium problem by successive alternation between a linear programming step to identify stable phase compositions and a non\u2010linear programming step to refine the compositions estimated during the linear programming. Applications include calculation of various types of phase diagrams and path\u2010dependent phase fractionation. By combining an easy\u2010to\u2010use graphical user interface with a robust and efficient solver, GeoPS makes phase equilibrium modelling accessible to researchers and students with minimal training and provides a powerful tool for understanding natural phase relations and for planning experimental work."], "score": 0.0}], "table": null}, {"title": "Applications and Use Cases", "tldr": "Visual programming is applied across multiple domains including education, game development, software application development, Internet of Things, and AI task synthesis. Its accessibility makes it particularly valuable for novice programmers and domain experts without coding experience. (12 sources)", "text": "\nVisual programming has found applications in diverse fields, leveraging its intuitive approach to programming:\n\n1. **Education and Learning** - Visual programming environments serve as effective tools for teaching programming concepts to children and novice programmers, emphasizing semantics over syntax and promoting program comprehension through two-dimensional representations <Paper corpusId=\"19038821\" paperTitle=\"(Sukumar et al., 2017)\" isShortName></Paper>. These environments have been widely used in educational contexts since the 1980s and 1990s <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper>.\n\n2. **Game Development** - Visual programming provides advantages in developing game applications, offering a more accessible approach for students and people without prior coding experience <Paper corpusId=\"63194770\" paperTitle=\"(Gunawan et al., 2016)\" isShortName></Paper>. Game engines have increasingly incorporated visual programming to enable rapid development cycles and separation of game concepts from assets <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper> <Paper corpusId=\"158715\" paperTitle=\"(Andrade, 2015)\" isShortName></Paper>.\n\n3. **Application Development** - In application development, visual programming enables a \"bottom-up\" approach where developers first create a user interface, then configure the properties of interface objects, and finally write code to handle events <Paper corpusId=\"186749406\" paperTitle=\"(Dermawan et al., 2019)\" isShortName></Paper>. This approach follows the principle of \"what you see is what you get,\" allowing developers to see the final result at any time during development <Paper corpusId=\"243857547\" paperTitle=\"(Zhu et al., 2021)\" isShortName></Paper>.\n\n4. **Internet of Things (IoT)** - Visual programming has become essential for IoT application development, with numerous languages developed specifically for this domain. These languages are categorized into open-source and proprietary platforms, each with different programming environments, licensing models, and platform support <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper> <Paper corpusId=\"30037917\" paperTitle=\"(Ray, 2017)\" isShortName></Paper>.\n\n5. **Data Processing and Creative Applications** - Visual programming interfaces with node-graph editors allow users to design data processing pipelines through configuring nodes and connecting them with edges. This approach accelerates experimentation and exploration in creative applications, making advanced technology more accessible to beginners <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>.\n\n6. **AI and Computer Vision** - Recent advances in visual programming have enabled the integration of neural symbols or Python modules for AI task synthesis and execution. Systems like Visprog and ViperGPT use code-generation models to compose vision-and-language models into subroutines, allowing for complex visual tasks without task-specific training <Paper corpusId=\"277634411\" paperTitle=\"(Gao et al., 2025)\" isShortName></Paper> <Paper corpusId=\"253734854\" paperTitle=\"(Gupta et al., 2022)\" isShortName></Paper> <Paper corpusId=\"257505358\" paperTitle=\"(Sur'is et al., 2023)\" isShortName></Paper> <Paper corpusId=\"258212542\" paperTitle=\"(Lu et al., 2023)\" isShortName></Paper>.\n\n7. **Specialized Domains** - Beyond the contexts mentioned above, visual programming has found applications in specialized domains where domain experts may have limited programming experience but need to create custom solutions <Paper corpusId=\"19038821\" paperTitle=\"(Sukumar et al., 2017)\" isShortName></Paper>.", "citations": [{"id": "(Sukumar et al., 2017)", "paper": {"corpus_id": 19038821, "title": "Design Space of Programming Tools on Mobile Touchscreen Devices", "year": 2017, "venue": "arXiv.org", "authors": [{"name": "P. Sukumar", "authorId": "2207677"}, {"name": "Ronald A. Metoyer", "authorId": "1809549"}], "n_citations": 0}, "snippets": ["Visual Programming (VP) languages enable programming by means of interacting with graphical elements, such as blocks, symbols, and arrows, rather than text. They are known, in general, to promote program comprehension by representing content in two-dimensions (text is considered onedimensional) and by emphasizing the underlying semantics rather than the syntax (Myers, 1990)[53]. The contexts where VP is used mostly include learning environments (for both children and novice programmers) and specialized domains (Myers, 1990)[41]."], "score": 0.953125}, {"id": "(McDaid et al., 2020)", "paper": {"corpus_id": 221802417, "title": "A Visual Language for Composable Inductive Programming", "year": 2020, "venue": "arXiv.org", "authors": [{"name": "Edward McDaid", "authorId": "1420120235"}, {"name": "S. McDaid", "authorId": "4697495"}], "n_citations": 4}, "snippets": ["Visual representations of programs have co-existed with software for most of its history. Flowcharts were widely used for specification and documentation purposes by the time that high level languages were introduced in the 1950s. Interactive creation of programs as diagrams was introduced by Sutherland in the 1960s as one of the first applications of the enabling graphical display and input technologies [8]. \n\nVisual programming became more widespread in the 1980s and 1990s with the introduction of graphical workstations and personal computers (Myers, 1990). There are now many visual programming languages (Johnston et al., 2004)11,(Maloney et al., 2010). Many of which are aimed at education or niche domains (Bockermann, 2014)(Ray, 2017)(Andrade, 2015)16,(Gulwani et al., 2015)."], "score": 0.9736328125}, {"id": "(Gunawan et al., 2016)", "paper": {"corpus_id": 63194770, "title": "PEMANFAATAN PEMROGRAMAN VISUAL SEBAGAI ALTERNATIF PEMBUATAN MEDIA BELAJAR BERBASIS GAME DAN ANIMASI", "year": 2016, "venue": "", "authors": [{"name": "Dedi Gunawan", "authorId": "1885335036"}, {"name": "Fatah Yasin Al Irsyadi", "authorId": "70024582"}], "n_citations": 5}, "snippets": ["Visual programming is the one programming technique in computer Science which aims to give easy understanding in writing code program. The main users of visual programming are students and people who have no experiences in making computer code and lack of computer programming language.Visual programming gives advantages to develop any kind of application software such as game and application related to education."], "score": 0.95068359375}, {"id": "(Andrade, 2015)", "paper": {"corpus_id": 158715, "title": "Game engines: a survey", "year": 2015, "venue": "EAI Endorsed Trans. Serious Games", "authors": [{"name": "A. Andrade", "authorId": "146007426"}], "n_citations": 34}, "snippets": ["Due to hardware limitations at the origin of the video game industry, each new game was generally coded from the ground up. Years later, from the evolution of hardware and the need for quick game development cycles, spawned the concept of game engine. A game engine is a reusable software layer allowing the separation of common game concepts from the game assets (levels, graphics, etc.). This paper surveys fourteen different game engines relevant today, ranging from the industry-level to the newcomer-friendlier ones."], "score": 0.0}, {"id": "(Dermawan et al., 2019)", "paper": {"corpus_id": 186749406, "title": "Microsoft Visual Basic 6.0 Software to Develop Mathematics Teaching Materials", "year": 2019, "venue": "Journal of Physics: Conference Series", "authors": [{"name": "O. Dermawan", "authorId": "84008749"}, {"name": "Defriyanto", "authorId": "108395174"}, {"name": "Junaidah", "authorId": "2145724414"}, {"name": "S. M. Ayu", "authorId": "2073137966"}, {"name": "Busmayaril", "authorId": "146321436"}, {"name": "Meisuri", "authorId": "2248504509"}, {"name": "M.J Muhtari", "authorId": "2177074572"}], "n_citations": 2}, "snippets": ["In Visual programming, application development starts with the formation of a user interface, then arranges the properties of the objects used in the user interface, and then the program code is written to handle events. The application development phase is known as application development with the Bottom Up approach."], "score": 0.982421875}, {"id": "(Zhu et al., 2021)", "paper": {"corpus_id": 243857547, "title": "The Design of Parameter Modeling Software Applicable for Turbine Control Systems of Power Units Operated at Deep Shaving States", "year": 2021, "venue": "Journal of Physics: Conference Series", "authors": [{"name": "L. Zhu", "authorId": "46813111"}, {"name": "Paiyou Si", "authorId": "2000943401"}, {"name": "S. Liu", "authorId": "2121296025"}, {"name": "Chang Xie", "authorId": "48927417"}, {"name": "Teng Zhang", "authorId": "2110105326"}, {"name": "Yuou Hu", "authorId": "3864387"}, {"name": "Xiaozhi Qiu", "authorId": "152424545"}], "n_citations": 6}, "snippets": ["Visualized programming, also known as visualized program designing, aims at visualizing the programming based on the principle of \"what you see is what you get\", that is, to see the final result at any time, and to synchronize the programming with the result."], "score": 0.9501953125}, {"id": "(Ray, 2017)", "paper": {"corpus_id": 30037917, "title": "A Survey on Visual Programming Languages in Internet of Things", "year": 2017, "venue": "Scientific Programming", "authors": [{"name": "P. Ray", "authorId": "2352513"}], "n_citations": 60}, "snippets": ["Visual programming has transformed the art of programming in recent years. Several organizations are in race to develop novel ideas to run visual programming in multiple domains with Internet of Things. IoT, being the most emerging area of computing, needs substantial contribution from the visual programming paradigm for its technological propagation. This paper surveys visual programming languages being served for application development, especially in Internet of Things field. 13 such languages are visited from several popular research-electronic databases (e.g., IEEE Xplore, Science Direct, Springer Link, Google Scholar, Web of Science, and Postscapes) and compared under four key attributes such as programming environment, license, project repository, and platform supports. Grouped into two segments, open source and proprietary platform, these visual languages pertain few crucial challenges that have been elaborated in this literature. The main goal of this paper is to present existing VPLs per their parametric proforma to enable naive developers and researchers in the field of IoT to choose appropriate variant of VPL for particular type of application. It is also worth validating the usability and adaptability of VPLs that is essential for selection of beneficiary in terms of IoT."], "score": 0.0}, {"id": "(Zhou et al., 2023)", "paper": {"corpus_id": 276961580, "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs", "year": 2023, "venue": "International Conference on Human Factors in Computing Systems", "authors": [{"name": "Zhongyi Zhou", "authorId": "2261898099"}, {"name": "Jing Jin", "authorId": "2214751677"}, {"name": "Vrushank Phadnis", "authorId": "95798184"}, {"name": "Xiuxiu Yuan", "authorId": "29436685"}, {"name": "Jun Jiang", "authorId": "2261902264"}, {"name": "Xun Qian", "authorId": "2274943688"}, {"name": "Kristen Wright", "authorId": "2261902483"}, {"name": "Mark Sherwood", "authorId": "2261902982"}, {"name": "Jason Mayes", "authorId": "2261904117"}, {"name": "Jingtao Zhou", "authorId": "2261943879"}, {"name": "Yiyi Huang", "authorId": "2275032507"}, {"name": "Zheng Xu", "authorId": "2275017028"}, {"name": "Yinda Zhang", "authorId": "2274975067"}, {"name": "Johnny Lee", "authorId": "2274929798"}, {"name": "Alex Olwal", "authorId": "2292510931"}, {"name": "David Kim", "authorId": "2274972576"}, {"name": "Ram Iyengar", "authorId": "2214753154"}, {"name": "Na Li", "authorId": "2262397661"}, {"name": "Ruofei Du", "authorId": "2350823722"}], "n_citations": 1}, "snippets": ["Visual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace.\n\nA visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners."], "score": 0.9638671875}, {"id": "(Gao et al., 2025)", "paper": {"corpus_id": 277634411, "title": "Benchmarking Multimodal CoT Reward Model Stepwise by Visual Program", "year": 2025, "venue": "arXiv.org", "authors": [{"name": "Minghe Gao", "authorId": "2211467299"}, {"name": "Xuqi Liu", "authorId": "2354514403"}, {"name": "Zhongqi Yue", "authorId": "2334476426"}, {"name": "Yang Wu", "authorId": "2331539012"}, {"name": "Shuang Chen", "authorId": "2297146759"}, {"name": "Juncheng Li", "authorId": "2261788275"}, {"name": "Siliang Tang", "authorId": "2276402838"}, {"name": "Fei Wu", "authorId": "2289700887"}, {"name": "Tat-Seng Chua", "authorId": "2351809900"}, {"name": "Yueting Zhuang", "authorId": "2253660817"}], "n_citations": 5}, "snippets": ["Visual Programming (Gupta et al., 2022)(Sur'is et al., 2023) is an emerging field that utilizes neural symbols or Python modules for task synthe-sis and execution. Its advantage lies in the ability to call visual modules through code, with the reasoning logic of the program explicitly presented in the form of code (Lu et al., 2023)."], "score": 0.953125}, {"id": "(Gupta et al., 2022)", "paper": {"corpus_id": 253734854, "title": "Visual Programming: Compositional visual reasoning without training", "year": 2022, "venue": "Computer Vision and Pattern Recognition", "authors": [{"name": "Tanmay Gupta", "authorId": "1911972"}, {"name": "Aniruddha Kembhavi", "authorId": "2684226"}], "n_citations": 439}, "snippets": ["We present Visprog, a neuro-symbolic approach to solving complex and compositional visual tasks given natural language instructions. Visprog avoids the need for any task-specific training. Instead, it uses the incontext learning ability of large language models to generate python-like modular programs, which are then executed to get both the solution and a comprehensive and interpretable rationale. Each line of the generated program may invoke one of several off-the-shelf computer vision models, image processing subroutines, or python functions to produce intermediate outputs that may be consumed by subsequent parts of the program. We demonstrate the flexibility of VIsPROG on 4 diverse tasks - compositional visual question answering, zero-shot reasoning on image pairs, factual knowledge object tagging, and language-guided image editing. We believe neuro-symbolic approaches like Visprog are an exciting avenue to easily and effectively expand the scope of AI systems to serve the long tail of complex tasks that people may wish to perform."], "score": 0.0}, {"id": "(Sur'is et al., 2023)", "paper": {"corpus_id": 257505358, "title": "ViperGPT: Visual Inference via Python Execution for Reasoning", "year": 2023, "venue": "IEEE International Conference on Computer Vision", "authors": [{"name": "D'idac Sur'is", "authorId": "35552695"}, {"name": "Sachit Menon", "authorId": "46245898"}, {"name": "Carl Vondrick", "authorId": "1856025"}], "n_citations": 466}, "snippets": ["Answering visual queries is a complex task that requires both visual processing and reasoning. End-to-end models, the dominant approach for this task, do not explicitly differentiate between the two, limiting interpretability and generalization. Learning modular programs presents a promising alternative, but has proven challenging due to the difficulty of learning both the programs and modules simultaneously. We introduce ${\\color{green}{\\text{ViperGPT}}}$, a framework that leverages code-generation models to compose vision-and-language models into subroutines to produce a result for any query. ${\\color{green}{\\text{ViperGPT}}}$ utilizes a provided API to access the available modules, and composes them by generating Python code that is later executed. This simple approach requires no further training, and achieves state-of-the-art results across various complex visual tasks."], "score": 0.0}, {"id": "(Lu et al., 2023)", "paper": {"corpus_id": 258212542, "title": "Chameleon: Plug-and-Play Compositional Reasoning with Large Language Models", "year": 2023, "venue": "Neural Information Processing Systems", "authors": [{"name": "Pan Lu", "authorId": "2887562"}, {"name": "Baolin Peng", "authorId": "1780690"}, {"name": "Hao Cheng", "authorId": "47413820"}, {"name": "Michel Galley", "authorId": "1947267"}, {"name": "Kai-Wei Chang", "authorId": "2782886"}, {"name": "Y. Wu", "authorId": "39092098"}, {"name": "Song-Chun Zhu", "authorId": "145380991"}, {"name": "Jianfeng Gao", "authorId": "48441311"}], "n_citations": 324}, "snippets": ["Large language models (LLMs) have achieved remarkable progress in solving various natural language processing tasks due to emergent reasoning abilities. However, LLMs have inherent limitations as they are incapable of accessing up-to-date information (stored on the Web or in task-specific knowledge bases), using external tools, and performing precise mathematical and logical reasoning. In this paper, we present Chameleon, an AI system that mitigates these limitations by augmenting LLMs with plug-and-play modules for compositional reasoning. Chameleon synthesizes programs by composing various tools (e.g., LLMs, off-the-shelf vision models, web search engines, Python functions, and heuristic-based modules) for accomplishing complex reasoning tasks. At the heart of Chameleon is an LLM-based planner that assembles a sequence of tools to execute to generate the final response. We showcase the effectiveness of Chameleon on two multi-modal knowledge-intensive reasoning tasks: ScienceQA and TabMWP. Chameleon, powered by GPT-4, achieves an 86.54% overall accuracy on ScienceQA, improving the best published few-shot result by 11.37%. On TabMWP, GPT-4-powered Chameleon improves the accuracy by 17.0%, lifting the state of the art to 98.78%. Our analysis also shows that the GPT-4-powered planner exhibits more consistent and rational tool selection via inferring potential constraints from instructions, compared to a ChatGPT-powered planner. The project is available at https://chameleon-llm.github.io."], "score": 0.0}], "table": null}, {"title": "Historical Development", "tldr": "Visual programming has a long history dating back to the 1950s with flowcharts, followed by interactive diagram creation in the 1960s. The field gained significant momentum in the 1980s and 1990s with the advent of graphical workstations and personal computers, leading to widespread development of visual programming languages. (4 sources)", "text": "\nThe history of visual programming runs parallel to the development of software itself, with visual representations of programs being present from the early days of computing. In the 1950s, flowcharts were already widely used for program specification and documentation purposes, coinciding with the introduction of high-level programming languages <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper>. This early use of visual elements represented the first steps toward more accessible programming paradigms.\n\nA significant advancement came in the 1960s when Sutherland introduced interactive creation of programs as diagrams, representing one of the earliest applications of graphical display and input technologies <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper>. This innovation laid the groundwork for future visual programming environments by demonstrating the potential of interactive graphical interfaces for program creation.\n\nThe field of visual programming gained substantial momentum in the 1980s and 1990s, propelled by the widespread introduction of graphical workstations and personal computers <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper>. This technological advancement provided the necessary hardware capabilities to support more sophisticated visual programming environments. Since the sixties of the last century, researchers have been developing Visual Programming Languages (VPLs) specifically to address the challenges associated with learning computer programming <Paper corpusId=\"3949077\" paperTitle=\"(Fayed, 2017)\" isShortName></Paper>.\n\nThe proliferation of visual programming languages continued into the modern era, with many languages emerging for educational purposes and specialized domains <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper>. As hardware capabilities evolved, visual programming found new applications in areas such as game development, where the concept of game engines emerged to enable quicker development cycles and separation of game concepts from assets <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper> <Paper corpusId=\"158715\" paperTitle=\"(Andrade, 2015)\" isShortName></Paper>. In recent years, the Internet of Things (IoT) has become a significant domain for visual programming, with numerous languages developed specifically for IoT application development <Paper corpusId=\"221802417\" paperTitle=\"(McDaid et al., 2020)\" isShortName></Paper> <Paper corpusId=\"30037917\" paperTitle=\"(Ray, 2017)\" isShortName></Paper>.\n\nThroughout its historical development, visual programming has consistently aimed to make programming more accessible and intuitive, evolving from simple flowcharts to sophisticated interactive environments that support complex application development across multiple domains.", "citations": [{"id": "(McDaid et al., 2020)", "paper": {"corpus_id": 221802417, "title": "A Visual Language for Composable Inductive Programming", "year": 2020, "venue": "arXiv.org", "authors": [{"name": "Edward McDaid", "authorId": "1420120235"}, {"name": "S. McDaid", "authorId": "4697495"}], "n_citations": 4}, "snippets": ["Visual representations of programs have co-existed with software for most of its history. Flowcharts were widely used for specification and documentation purposes by the time that high level languages were introduced in the 1950s. Interactive creation of programs as diagrams was introduced by Sutherland in the 1960s as one of the first applications of the enabling graphical display and input technologies [8]. \n\nVisual programming became more widespread in the 1980s and 1990s with the introduction of graphical workstations and personal computers (Myers, 1990). There are now many visual programming languages (Johnston et al., 2004)11,(Maloney et al., 2010). Many of which are aimed at education or niche domains (Bockermann, 2014)(Ray, 2017)(Andrade, 2015)16,(Gulwani et al., 2015)."], "score": 0.9736328125}, {"id": "(Fayed, 2017)", "paper": {"corpus_id": 3949077, "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications", "year": 2017, "venue": "arXiv.org", "authors": [{"name": "M. S. Fayed", "authorId": "35131544"}], "n_citations": 3}, "snippets": ["Learning computer programming has been always challenging. Since the sixties of the last century, many researchers developed Visual Programming Languages (VPLs) to help in this regard."], "score": 0.9482421875}, {"id": "(Andrade, 2015)", "paper": {"corpus_id": 158715, "title": "Game engines: a survey", "year": 2015, "venue": "EAI Endorsed Trans. Serious Games", "authors": [{"name": "A. Andrade", "authorId": "146007426"}], "n_citations": 34}, "snippets": ["Due to hardware limitations at the origin of the video game industry, each new game was generally coded from the ground up. Years later, from the evolution of hardware and the need for quick game development cycles, spawned the concept of game engine. A game engine is a reusable software layer allowing the separation of common game concepts from the game assets (levels, graphics, etc.). This paper surveys fourteen different game engines relevant today, ranging from the industry-level to the newcomer-friendlier ones."], "score": 0.0}, {"id": "(Ray, 2017)", "paper": {"corpus_id": 30037917, "title": "A Survey on Visual Programming Languages in Internet of Things", "year": 2017, "venue": "Scientific Programming", "authors": [{"name": "P. Ray", "authorId": "2352513"}], "n_citations": 60}, "snippets": ["Visual programming has transformed the art of programming in recent years. Several organizations are in race to develop novel ideas to run visual programming in multiple domains with Internet of Things. IoT, being the most emerging area of computing, needs substantial contribution from the visual programming paradigm for its technological propagation. This paper surveys visual programming languages being served for application development, especially in Internet of Things field. 13 such languages are visited from several popular research-electronic databases (e.g., IEEE Xplore, Science Direct, Springer Link, Google Scholar, Web of Science, and Postscapes) and compared under four key attributes such as programming environment, license, project repository, and platform supports. Grouped into two segments, open source and proprietary platform, these visual languages pertain few crucial challenges that have been elaborated in this literature. The main goal of this paper is to present existing VPLs per their parametric proforma to enable naive developers and researchers in the field of IoT to choose appropriate variant of VPL for particular type of application. It is also worth validating the usability and adaptability of VPLs that is essential for selection of beneficiary in terms of IoT."], "score": 0.0}], "table": null}, {"title": "Technical Implementation", "tldr": "Visual programming systems are typically built around a code canvas where users can read and write programs by manipulating graphical elements. The implementation varies based on the visual representation chosen, with common architectures including boxes-and-arrows, interlocking puzzle pieces, and command-based models. (5 sources)", "text": "\nVisual programming environments, despite their diversity in visual representations, share common architectural components. At the center of most visual programming systems (VPS) is a code canvas where users can both read and write programs through direct manipulation of graphical elements <Paper corpusId=\"248524774\" paperTitle=\"(Hirzel, 2022)\" isShortName></Paper>. This canvas is complemented by a component palette from which users can drag elements onto the canvas and a configuration pane where these elements can be customized <Paper corpusId=\"248524774\" paperTitle=\"(Hirzel, 2022)\" isShortName></Paper>.\n\nThe technical implementation of visual programming languages often follows one of several established paradigms. In the boxes-and-arrows approach, similar to Business Process Modeling Notation (BPMN), boxes represent program entities or instructions while arrows depict the relationships or data flow between them <Paper corpusId=\"248524774\" paperTitle=\"(Hirzel, 2022)\" isShortName></Paper> <Paper corpusId=\"256827582\" paperTitle=\"(Wagner et al., 2023)\" isShortName></Paper>. Alternatively, interlocking puzzle pieces, as exemplified by Scratch, use the physical metaphor of puzzle pieces fitting together to represent how instructions connect and how data flows between them <Paper corpusId=\"248524774\" paperTitle=\"(Hirzel, 2022)\" isShortName></Paper>.\n\nSome visual programming systems employ a command-based model designed for distributed processing. This approach is particularly suited for modular systems like robot kits, where the visual programming environment coordinates tasks performed by connected modules. In this implementation, the central controlling entity issues commands to various modules that handle specific tasks independently, with some tasks simply executing and others returning results for decision-making <Paper corpusId=\"4793447\" paperTitle=\"(Vithana et al., 2017)\" isShortName></Paper>.\n\nMore specialized implementations exist for particular domains. DiaPlan, for example, is a visual rule-based language founded on graph transformation as its computational model, specifically designed for programming visual systems <Paper corpusId=\"58394\" paperTitle=\"(Hoffmann et al., 2000)\" isShortName></Paper>.\n\nThe design of visual programming systems aims to assist users in overcoming three key cognitive challenges: syntactic (creating well-formed programs), semantic (understanding program meaning), and pragmatic (comprehending program behavior in specific contexts) <Paper corpusId=\"256827582\" paperTitle=\"(Wagner et al., 2023)\" isShortName></Paper> <Paper corpusId=\"41867280\" paperTitle=\"(Repenning, 2017)\" isShortName></Paper>. By providing visual cues about how programming elements can be connected, these implementations help prevent users from creating invalid programs, thereby eliminating many common programming errors <Paper corpusId=\"256827582\" paperTitle=\"(Wagner et al., 2023)\" isShortName></Paper>.", "citations": [{"id": "(Hirzel, 2022)", "paper": {"corpus_id": 248524774, "title": "Low-Code Programming Models", "year": 2022, "venue": "Communications of the ACM", "authors": [{"name": "Martin Hirzel", "authorId": "1728836"}], "n_citations": 21}, "snippets": ["Visual programming languages let users write programs by directly manipulating their visual representation. There is a plethora of possible visual representations [8], often inspired by domain notation, such as electrical circuit diagrams. Two prominent domain-independent visual representations are boxes-and-arrows (e.g., BPMN (Ouyang et al., 2006)) or interlocking puzzle pieces (e.g., Scratch [30]). Here, boxes or puzzle pieces represent instructions in the program, and arrows between boxes or the interlock of pieces represent how data and control flows between instructions. Despite the diversity in visual languages, their programming environments tend to comprise similar building blocks, as depicted in Figure 2. The central building block is the code canvas, where the user can both read (red arrow from canvas to eye) and write (blue arrow from hand to canvas) the program. Writing the program also involves dragging components from the palette to the canvas and possibly configuring them in a separate configuration pane."], "score": 0.98193359375}, {"id": "(Wagner et al., 2023)", "paper": {"corpus_id": 256827582, "title": "ELEA - Build your own Evolutionary Algorithm in your Browser", "year": 2023, "venue": "GECCO Companion", "authors": [{"name": "Markus Wagner", "authorId": "2194782585"}, {"name": "Erik Kohlros", "authorId": "2205544441"}, {"name": "Gerome Quantmeyer", "authorId": "2205539993"}, {"name": "Timo K\u00f6tzing", "authorId": "1751539"}], "n_citations": 1}, "snippets": ["A visual programming system (VPS) [8] allows users to create programs by manipulating program elements graphically rather than specifying them textually. In a VPS, a user creates a program by arranging \"boxes and arrows\", where boxes represent entities and arrows represent relations.\n\nA VPS can assist programmers to overcome three cognitive challenges [6]: \n\n\u2022 Syntactic: arranging programming language components into well-formed programs. \u2022 Semantic: assisting users with the comprehension of the meaning of programs. \u2022 Pragmatic: bringing a program into a specific situation and understanding its behaviour."], "score": 0.96435546875}, {"id": "(Vithana et al., 2017)", "paper": {"corpus_id": 4793447, "title": "Extensible Visual Programming Model for Modular Systems Targeting Novices", "year": 2017, "venue": "British Computer Society Conference on Human-Computer Interaction", "authors": [{"name": "Yasura Vithana", "authorId": "9346844"}, {"name": "Hashini Senaratne", "authorId": "40894841"}], "n_citations": 0}, "snippets": ["The visual programming language in topic is a command based model and the processing of each of the command is expected to be done in a distributed manner. Since this model was developed targeting modular systems like robot kits, the main motive was to coordinate tasks done by the connected modules. These tasks can be standalone tasks which can be simply started and ignored and some other tasks in which the results are passed to decision making. For example, in the context of a robot kit, there can be a task which makes the robot turn right and also a task to measure the distance to an obstacle using a sensor. The visual programming model is developed to program the central controlling entity that can control all the other connected modules by issuing commands and analysing their results. The important point here is that due to this configuration, the output of the visual programming environment can be made extremely simple and uniform as the native executions of the tasks are offloaded to various modules which are built with all the necessary algorithms and other programming components."], "score": 0.97802734375}, {"id": "(Hoffmann et al., 2000)", "paper": {"corpus_id": 58394, "title": "Towards rule-based visual programming of generic visual systems", "year": 2000, "venue": "arXiv.org", "authors": [{"name": "Berthold Hoffmann", "authorId": "38400881"}, {"name": "M. Minas", "authorId": "1731543"}], "n_citations": 9}, "snippets": ["This paper illustrates how the diagram programming language DiaPlan can be used to program visual systems. DiaPlan is a visual rule-based language that is founded on the computational model of graph transformation."], "score": 0.94287109375}, {"id": "(Repenning, 2017)", "paper": {"corpus_id": 41867280, "title": "Moving Beyond Syntax: Lessons from 20 Years of Blocks Programing in AgentSheets", "year": 2017, "venue": "Journal of Visual Languages and Sentient Systems", "authors": [{"name": "A. Repenning", "authorId": "1782080"}], "n_citations": 50}, "snippets": ["The blocks programming community has been preoccupied with identifying syntactic obstacles that keep novices from learning to program. Unfortunately, this focus is now holding back research from systematically investigating various technological affordances that can make programming more accessible. Employing approaches from program analysis, program visualization, and real-time interfaces can push blocks programming beyond syntax towards the support of semantics and even pragmatics. Syntactic support could be compared to checking spelling and grammar in word processing. Spell checking is relatively simple to implement and immediately useful, but provides essentially no support to create meaningful text. Over the last 25 years, I have worked to empower students to create their own games, simulations, and robots. In this time I have explored, combined, and evaluated a number of programming paradigms. Every paradigm including data flow, programming by example, and programming through analogies brings its own set of affordances and obstacles. Twenty years ago, AgentSheets combined four key affordances of blocks programming, and since then has evolved into a highly accessible Computational Thinking Tool. This article describes the journey to overcome first syntactic, then semantic, and most recently pragmatic, obstacles in computer science education."], "score": 0.0}], "table": null}], "cost": 0.376197}}
