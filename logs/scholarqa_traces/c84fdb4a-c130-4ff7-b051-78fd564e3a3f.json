{
    "query": "Provide a general overview of visual programming, with a particular focus on its advantages and educational applications\u2014especially regarding its effectiveness for beginners and non-programmers.",
    "user_id": "lib_user",
    "task_id": "c84fdb4a-c130-4ff7-b051-78fd564e3a3f",
    "timestamp": "2025-06-23T23:44:03.446602",
    "n_retrieval": 256,
    "n_retrieved": 249,
    "n_candidates": 36,
    "n_rerank": 50,
    "opt_in": true,
    "total_cost": 0.5844960000000001,
    "decomposed_query": {
        "rewritten_query": "Overview of visual programming, focusing on advantages and educational applications for beginners and non-programmers.",
        "keyword_query": "visual programming advantages educational applications beginners non-programmers",
        "search_filters": {
            "fieldsOfStudy": "Computer Science,Education"
        },
        "cost": 0.009735,
        "model": "claude-3-7-sonnet-20250219"
    },
    "candidates": [
        {
            "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills",
            "venue": "International Education Studies",
            "year": 2024,
            "reference_count": 46,
            "citation_count": 0,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://doi.org/10.5539/ies.v17n5p68",
                "status": "GOLD",
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.5539/ies.v17n5p68?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.5539/ies.v17n5p68, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2128894602",
                    "name": "Tippawan Meepung"
                }
            ],
            "abstract": "This study explores the application of the Project-Based Learning with Gamification Model (PBLGM) through Visual Programming Language (VPL) to enhance digital competencies and problem-solving skills in learners. The PBLGM model integrates project-based learning and gamification techniques using Kodu Game Lab, aiming to develop essential 21st-century skills. The research involved designing, developing, and evaluating the PBLGM model. Participants included 30 undergraduate learners from Rajamangala University of Technology Tawan-Ok. The study\u2019s findings indicated significant improvements in digital competencies and problem-solving skills post-intervention. The consistency index values ranged between 0.40 and 1.00, with an average value of 0.84. The difficulty values ranged from 0.38 to 0.57, and the reliability value (KR-20) was 0.83. The model effectively enhanced digital competencies and problem-solving skills, as evidenced by improved test scores and positive expert evaluations. This study underscores the importance of integrating gamification and project-based learning in educational contexts to foster critical digital skills.",
            "corpus_id": 272639481,
            "sentences": [
                {
                    "corpus_id": "272639481",
                    "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills",
                    "text": "A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly. It begins with building the game world and creating characters or objects, followed by defining the game rules. The icon-based approach involves designing the 3D world and programming responses to game events. Kodu Game Lab is a visual programming language and development environment created by Microsoft, designed specifically for creating games (Choleva et al., 2022). It is aimed at children and beginners, providing an easy-to-use interface that allows users to create and customize their own games without requiring prior programming knowledge. Here are some key features and aspects of Kodu Game Lab. Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users. Users can build entire game worlds, create characters, and define their behaviors using the visual programming tools provided. This includes setting up rules, creating interactions, and defining objectives for the game. Kodu Game Lab features a 3D environment where users can design landscapes, add objects, and bring their games to life. The 3D aspect makes the games more engaging and visually appealing. Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Microsoft, 2018). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills.",
                    "score": 0.412436391085234,
                    "section_title": "Visual Programming Language (VPL)",
                    "char_start_offset": 9841,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 193
                        },
                        {
                            "start": 194,
                            "end": 324
                        },
                        {
                            "start": 325,
                            "end": 452
                        },
                        {
                            "start": 453,
                            "end": 584
                        },
                        {
                            "start": 585,
                            "end": 737
                        },
                        {
                            "start": 738,
                            "end": 849
                        },
                        {
                            "start": 850,
                            "end": 947
                        },
                        {
                            "start": 948,
                            "end": 1109
                        },
                        {
                            "start": 1110,
                            "end": 1288
                        },
                        {
                            "start": 1289,
                            "end": 1345
                        },
                        {
                            "start": 1346,
                            "end": 1456
                        },
                        {
                            "start": 1457,
                            "end": 1526
                        },
                        {
                            "start": 1527,
                            "end": 1653
                        },
                        {
                            "start": 1654,
                            "end": 1746
                        },
                        {
                            "start": 1747,
                            "end": 1865
                        },
                        {
                            "start": 1866,
                            "end": 1933
                        },
                        {
                            "start": 1934,
                            "end": 2054
                        },
                        {
                            "start": 2055,
                            "end": 2189
                        },
                        {
                            "start": 2190,
                            "end": 2352
                        },
                        {
                            "start": 2353,
                            "end": 2487
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 1086,
                            "end": 1108,
                            "matchedPaperCorpusId": "252953502"
                        },
                        {
                            "start": 2171,
                            "end": 2188,
                            "matchedPaperCorpusId": "237618637"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.97802734375
                }
            ],
            "relevance_judgement": 0.97802734375,
            "relevance_judgment_input_expanded": "# Title: PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills\n# Venue: International Education Studies\n# Authors: Tippawan Meepung\n## Abstract\nThis study explores the application of the Project-Based Learning with Gamification Model (PBLGM) through Visual Programming Language (VPL) to enhance digital competencies and problem-solving skills in learners. The PBLGM model integrates project-based learning and gamification techniques using Kodu Game Lab, aiming to develop essential 21st-century skills. The research involved designing, developing, and evaluating the PBLGM model. Participants included 30 undergraduate learners from Rajamangala University of Technology Tawan-Ok. The study\u2019s findings indicated significant improvements in digital competencies and problem-solving skills post-intervention. The consistency index values ranged between 0.40 and 1.00, with an average value of 0.84. The difficulty values ranged from 0.38 to 0.57, and the reliability value (KR-20) was 0.83. The model effectively enhanced digital competencies and problem-solving skills, as evidenced by improved test scores and positive expert evaluations. This study underscores the importance of integrating gamification and project-based learning in educational contexts to foster critical digital skills.\n## Visual Programming Language (VPL)\nA Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly. It begins with building the game world and creating characters or objects, followed by defining the game rules. The icon-based approach involves designing the 3D world and programming responses to game events. Kodu Game Lab is a visual programming language and development environment created by Microsoft, designed specifically for creating games (Choleva et al., 2022). It is aimed at children and beginners, providing an easy-to-use interface that allows users to create and customize their own games without requiring prior programming knowledge. Here are some key features and aspects of Kodu Game Lab. Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users. Users can build entire game worlds, create characters, and define their behaviors using the visual programming tools provided. This includes setting up rules, creating interactions, and defining objectives for the game. Kodu Game Lab features a 3D environment where users can design landscapes, add objects, and bring their games to life. The 3D aspect makes the games more engaging and visually appealing. Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Microsoft, 2018). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills.",
            "reference_string": "[272639481 | Meepung | 2024 | Citations: 0]"
        },
        {
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "venue": "IEEE Access",
            "year": 2021,
            "reference_count": 107,
            "citation_count": 39,
            "influential_citation_count": 2,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://ieeexplore.ieee.org/ielx7/6287639/9312710/09320477.pdf",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.1109/ACCESS.2021.3051043?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.1109/ACCESS.2021.3051043, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "1980707",
                    "name": "M. Kuhail"
                },
                {
                    "authorId": "153238394",
                    "name": "Shahbano Farooq"
                },
                {
                    "authorId": "3083161",
                    "name": "R. Hammad"
                },
                {
                    "authorId": "8357681",
                    "name": "Mohammed Bahja"
                }
            ],
            "abstract": "Recently many researches have explored the potential of visual programming in robotics, the Internet of Things (IoT), and education. However, there is a lack of studies that analyze the recent evidence-based visual programming approaches that are applied in several domains. This study presents a systematic review to understand, compare, and reflect on recent visual programming approaches using twelve dimensions: visual programming classification, interaction style, target users, domain, platform, empirical evaluation type, test participants\u2019 type, number of test participants, test participants\u2019 programming skills, evaluation methods, evaluation measures, and accessibility of visual programming tools. The results show that most of the selected articles discussed tools that target IoT and education, while other fields such as data science, robotics are emerging. Further, most tools use abstractions to hide implementation details and use similar interaction styles. The predominant platforms for the tools are web and mobile, while desktop-based tools are on the decline. Only a few tools were evaluated with a formal experiment, whilst the remaining ones were evaluated with evaluation studies or informal feedback. Most tools were evaluated with students with little to no programming skills. There is a lack of emphasis on usability principles in the design stage of the tools. Additionally, only one of the tools was evaluated for expressiveness. Other areas for exploration include supporting end users throughout the life cycle of applications created with the tools, studying the impact of tutorials on improving learnability, and exploring the potential of machine learning to improve debugging solutions developed with visual programming.",
            "corpus_id": 231725028,
            "sentences": [
                {
                    "corpus_id": "231725028",
                    "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
                    "text": "Visual programming is a subset of the end-user development field (EUD). Other subsets of EUD include End-user programming (EUP), which mainly focuses on enabling end users to create their own programs [12], while EUD tackles the entire software life cycle including maintainability, and extensibility. End-user Software Engineering (EUSE) is another related research area which focuses on the quality attributes of the software developed by end users including reusability, security, and verifiability [77]. \n\nVisual programming refers to approaches and methods that use two-dimensional graphical elements to allow nonprogrammer end-users to create, extend, and customize software applications [9]. Visual programming languages (VPLs) are described by programming constructs and rules which are visually depicted [13]. \n\nThere are two widely known taxonomies for visual programming languages: (1) Myers [1] classified visual programming languages by specification techniques. Certain categories in Myers' classification can be generalized into one category. As an example, data-flow graphs, directed graphs, and flowcharts can be considered diagrammatic VPLs. (2) Burnett and Baker [2], on the other hand, listed three broad subcategories under ''visual representations'' namely: diagrammatic languages, iconic languages, and languages based on static pictorial sequences. This classification, while highly useful, does not list the form-based VPLs mentioned in Myers' classification. \n\nCombining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages. All categories (or subcategories), based on visual program representation, presented in both [1] and [2] are assigned to a category under our new categorization. For instance, block-based languages represent jigsaw puzzle pieces in [1], while diagram-based languages cover diagrammatic languages in [2], data flow graphs and directed graphs in [1]. Further, we filtered out the subcategories in [1] which apply to textual programming languages. \n\nWe define the VPL categories as follows:",
                    "score": 0.36498851303176744,
                    "section_title": "II. BACKGROUND",
                    "char_start_offset": 5284,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 71
                        },
                        {
                            "start": 72,
                            "end": 301
                        },
                        {
                            "start": 302,
                            "end": 507
                        },
                        {
                            "start": 510,
                            "end": 698
                        },
                        {
                            "start": 699,
                            "end": 818
                        },
                        {
                            "start": 821,
                            "end": 975
                        },
                        {
                            "start": 976,
                            "end": 1057
                        },
                        {
                            "start": 1058,
                            "end": 1159
                        },
                        {
                            "start": 1160,
                            "end": 1372
                        },
                        {
                            "start": 1373,
                            "end": 1484
                        },
                        {
                            "start": 1487,
                            "end": 1693
                        },
                        {
                            "start": 1694,
                            "end": 1855
                        },
                        {
                            "start": 1856,
                            "end": 2042
                        },
                        {
                            "start": 2043,
                            "end": 2138
                        },
                        {
                            "start": 2141,
                            "end": 2181
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 502,
                            "end": 506,
                            "matchedPaperCorpusId": "15687689"
                        },
                        {
                            "start": 694,
                            "end": 697,
                            "matchedPaperCorpusId": "8272806"
                        },
                        {
                            "start": 813,
                            "end": 817,
                            "matchedPaperCorpusId": "41867280"
                        },
                        {
                            "start": 903,
                            "end": 906,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 1182,
                            "end": 1185,
                            "matchedPaperCorpusId": "1426814"
                        },
                        {
                            "start": 1531,
                            "end": 1534,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 1557,
                            "end": 1560,
                            "matchedPaperCorpusId": "1426814"
                        },
                        {
                            "start": 1787,
                            "end": 1790,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 1795,
                            "end": 1798,
                            "matchedPaperCorpusId": "1426814"
                        },
                        {
                            "start": 1926,
                            "end": 1929,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 1993,
                            "end": 1996,
                            "matchedPaperCorpusId": "1426814"
                        },
                        {
                            "start": 2038,
                            "end": 2041,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 2089,
                            "end": 2092,
                            "matchedPaperCorpusId": "7335020"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.96044921875
                },
                {
                    "corpus_id": "231725028",
                    "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
                    "text": "Diagrams have been utilized as communication and thinking tools across many domains [22]- [24]. Diagram-based visual programming languages, also known as diagrammatic or data flow languages, are characterized by connecting graphical objects ( e.g., boxes) by arrows, lines, or arcs that represent relations. To understand a diagram-based program, users traverse the diagram. Such a diagram uses different means of perceptual coding to represent the flow of the program. For example, flowcharts use connectedness and directionality to represent how a piece of information is related to one another, and how it flows from one to the other [25]. \n\nThis study will classify several visual programming tools according to the aforementioned VPL categories.",
                    "score": 0.3908534054751986,
                    "section_title": "II. BACKGROUND",
                    "char_start_offset": 9585,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 95
                        },
                        {
                            "start": 96,
                            "end": 307
                        },
                        {
                            "start": 308,
                            "end": 374
                        },
                        {
                            "start": 375,
                            "end": 469
                        },
                        {
                            "start": 470,
                            "end": 642
                        },
                        {
                            "start": 645,
                            "end": 750
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 84,
                            "end": 88,
                            "matchedPaperCorpusId": "74221"
                        },
                        {
                            "start": 90,
                            "end": 94,
                            "matchedPaperCorpusId": "143658620"
                        },
                        {
                            "start": 637,
                            "end": 641,
                            "matchedPaperCorpusId": "19780225"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.91748046875
                },
                {
                    "corpus_id": "231725028",
                    "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
                    "text": "Thereafter, the study explains the methodology of this systematic literature review including the research questions. Subsequently, the study presents the results of answering the research questions by examining the visual programming tools presented in the selected articles against 12 dimensions: classification of visual programming, interaction style, target users, domain, platform, empirical evidence, types of test participants, number of test participants, programming skills of test participants, evaluation methods, evaluation measures, and accessibility. Thereafter, challenges and future research directions are discussed. Finally, the key findings are presented in the conclusion.",
                    "score": 0.4227106823263234,
                    "section_title": "I. INTRODUCTION",
                    "char_start_offset": 4572,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 117
                        },
                        {
                            "start": 118,
                            "end": 565
                        },
                        {
                            "start": 566,
                            "end": 634
                        },
                        {
                            "start": 635,
                            "end": 693
                        }
                    ],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.91455078125
                },
                {
                    "corpus_id": "231725028",
                    "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
                    "text": "An increasing number of software applications are being written by end users without formal software development training. This inspired large technology companies such as Microsoft [91] and Amazon [90] to invest in low-code development environments empowering end users to create web and mobile applications. According to the 2019 Q1 Forrester report, the low-code market will witness an annual growth rate of 40%, with spending forecast to reach $21.2 billion by 2022 [102]. \n\nEnd-User Development (EUD) has emerged as a field that is concerned with tools and activities allowing end users \n\nThe associate editor coordinating the review of this manuscript and approving it for publication was Adnan Abid. \n\nwho are not professional software developers to write software applications [11]. This is promising as end users know their own domain and needs more than anyone else, and are often aware of specificities in their respective contexts. Further, as end users outnumber developers with professional software development training by a factor of 30-to-1, EUD enables a much larger pool of people to participate in software development [12]. \n\nA visual programming language (VPL), among other EUD techniques, allows end users to create a program by piecing together graphical elements rather than textually specifying them [9]. \n\nTraditionally, visual programming has been successfully used to help novices learn basics of programming by visualizing elements of a program. However, visual programming is increasingly being used by end users in various domains to create and tailor applications that are useful beyond the realm of education. For instance, VPLs are now being used in fields such as the Internet of Things (IoT) [3], [10], mobile application development [51], robotics [8], and Virtual/Augmented Reality [4]. \n\nA few review studies have been conducted recently aimed at analyzing and comparing different approaches to EUD including visual programming. Table 1 shows an overview of how these review studies compare with this study in several dimensions. The works found in [7], [26] and [29] analyzed a limited number of visual programming approaches and techniques since article retrieval mainly focused on EUD approaches in general as opposed to visual programming approaches.",
                    "score": 0.3523888519949548,
                    "section_title": "I. INTRODUCTION",
                    "char_start_offset": 18,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 122
                        },
                        {
                            "start": 123,
                            "end": 309
                        },
                        {
                            "start": 310,
                            "end": 476
                        },
                        {
                            "start": 479,
                            "end": 591
                        },
                        {
                            "start": 594,
                            "end": 706
                        },
                        {
                            "start": 709,
                            "end": 790
                        },
                        {
                            "start": 791,
                            "end": 943
                        },
                        {
                            "start": 944,
                            "end": 1144
                        },
                        {
                            "start": 1147,
                            "end": 1330
                        },
                        {
                            "start": 1333,
                            "end": 1475
                        },
                        {
                            "start": 1476,
                            "end": 1643
                        },
                        {
                            "start": 1644,
                            "end": 1825
                        },
                        {
                            "start": 1828,
                            "end": 1968
                        },
                        {
                            "start": 1969,
                            "end": 2069
                        },
                        {
                            "start": 2070,
                            "end": 2294
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 785,
                            "end": 789,
                            "matchedPaperCorpusId": "15559793"
                        },
                        {
                            "start": 1326,
                            "end": 1329,
                            "matchedPaperCorpusId": "8272806"
                        },
                        {
                            "start": 1729,
                            "end": 1732,
                            "matchedPaperCorpusId": "206841143"
                        },
                        {
                            "start": 1734,
                            "end": 1738,
                            "matchedPaperCorpusId": "30037917"
                        },
                        {
                            "start": 1771,
                            "end": 1775,
                            "matchedPaperCorpusId": "26243684"
                        },
                        {
                            "start": 1786,
                            "end": 1789,
                            "matchedPaperCorpusId": "219455753"
                        },
                        {
                            "start": 1821,
                            "end": 1824,
                            "matchedPaperCorpusId": "46851143"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.91455078125
                },
                {
                    "corpus_id": "231725028",
                    "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
                    "text": "The objective of this systematic literature review was to characterize and analyze the current evidence-based visual programming approaches, trends, interaction styles, and techniques. To achieve this objective, we examined 30 articles against 12 relevant dimensions. However, future researchers may develop an evaluation framework that can be used to compare visual programming tools. The research community has contributed such frameworks to be used to compare regular programming languages [84]. While the existing framework of cognitive dimensions of notations [66] can be used to compare tools in terms of their usability, a potentially new evaluation framework is needed to evaluate other quality attributes such as extensibility, security, testability, and portability.",
                    "score": 0.3579152567309107,
                    "section_title": "D. EVALUATION FRAMEWORK",
                    "char_start_offset": 64878,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 184
                        },
                        {
                            "start": 185,
                            "end": 267
                        },
                        {
                            "start": 268,
                            "end": 385
                        },
                        {
                            "start": 386,
                            "end": 498
                        },
                        {
                            "start": 499,
                            "end": 776
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 493,
                            "end": 497,
                            "matchedPaperCorpusId": "18678580"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.90869140625
                },
                {
                    "corpus_id": "231725028",
                    "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
                    "text": "This study characterized how various visual programming approaches empower end users to develop applications. The study analyzed 30 VPL tools proposed in the literature. To analyze the tools, the study examined how each tool fares across 12 dimensions: VPL classification, interaction style, target users, domain, platform, type of empirical evaluation, types of test participants, number of test participants, programming skills of test participants, evaluation methods, evaluation measures, and accessibility of visual programming tools. \n\nAll the tools the study surveyed were domain specific. The results show that the tools were proposed in various areas including IoT, education, robotics, and more, and targeted mostly general users as well as students and domain experts. \n\nDespite the difference of VPL approaches, most tools utilize high-level abstractions to hide implementation details, and use similar interaction styles such as direct manipulation (in the form of drag-drop) and menu selection. Some commonalities have been observed among tools of the same domain. For instance, tools that target IoT allow end users to access services using visual abstractions, while tools built for educational purposes mostly use a block-based approach, and use similar visual abstractions representing programming constructs. \n\nMost of the tools produced some empirical evidence that points to the success of their approaches with end users, though only a few of the tools conducted a formal experiment. Moreover, the test subjects were mostly students with little to no programming skills in a university setting as opposed to typical users in a real setting. To evaluate the tools, most authors used tasks or surveys. Further, most of the tools measured perceived usability using surveys, while fewer tools measures usability factors such as ease of learning and task efficiency using time completion and number of errors. \n\nThere are several challenges to be addressed by future tools. None of the tool authors explicitly mentioned the reliance of usability principles in designing the tools, though a few authors performed usability tests to evaluate the tools. Further, only one of the tools was evaluated the expressiveness of their tools. It is imperative for end users to understand the limits of the tools. Finally, 53.3% (16) of the tools were available publicly with some documentation. We strongly recommend that future tools are made available for end users as well as comprehensive documentation to ensure tool adoption and sustainability.",
                    "score": 0.3823975792711091,
                    "section_title": "X. CONCLUSION",
                    "char_start_offset": 70594,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 109
                        },
                        {
                            "start": 110,
                            "end": 169
                        },
                        {
                            "start": 170,
                            "end": 539
                        },
                        {
                            "start": 542,
                            "end": 596
                        },
                        {
                            "start": 597,
                            "end": 779
                        },
                        {
                            "start": 782,
                            "end": 1008
                        },
                        {
                            "start": 1009,
                            "end": 1078
                        },
                        {
                            "start": 1079,
                            "end": 1327
                        },
                        {
                            "start": 1330,
                            "end": 1505
                        },
                        {
                            "start": 1506,
                            "end": 1662
                        },
                        {
                            "start": 1663,
                            "end": 1721
                        },
                        {
                            "start": 1722,
                            "end": 1926
                        },
                        {
                            "start": 1929,
                            "end": 1990
                        },
                        {
                            "start": 1991,
                            "end": 2167
                        },
                        {
                            "start": 2168,
                            "end": 2247
                        },
                        {
                            "start": 2248,
                            "end": 2317
                        },
                        {
                            "start": 2318,
                            "end": 2399
                        },
                        {
                            "start": 2400,
                            "end": 2555
                        }
                    ],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.900390625
                }
            ],
            "relevance_judgement": 0.96044921875,
            "relevance_judgment_input_expanded": "# Title: Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review\n# Venue: IEEE Access\n# Authors: M. Kuhail, Shahbano Farooq, R. Hammad, Mohammed Bahja\n## Abstract\nRecently many researches have explored the potential of visual programming in robotics, the Internet of Things (IoT), and education. However, there is a lack of studies that analyze the recent evidence-based visual programming approaches that are applied in several domains. This study presents a systematic review to understand, compare, and reflect on recent visual programming approaches using twelve dimensions: visual programming classification, interaction style, target users, domain, platform, empirical evaluation type, test participants\u2019 type, number of test participants, test participants\u2019 programming skills, evaluation methods, evaluation measures, and accessibility of visual programming tools. The results show that most of the selected articles discussed tools that target IoT and education, while other fields such as data science, robotics are emerging. Further, most tools use abstractions to hide implementation details and use similar interaction styles. The predominant platforms for the tools are web and mobile, while desktop-based tools are on the decline. Only a few tools were evaluated with a formal experiment, whilst the remaining ones were evaluated with evaluation studies or informal feedback. Most tools were evaluated with students with little to no programming skills. There is a lack of emphasis on usability principles in the design stage of the tools. Additionally, only one of the tools was evaluated for expressiveness. Other areas for exploration include supporting end users throughout the life cycle of applications created with the tools, studying the impact of tutorials on improving learnability, and exploring the potential of machine learning to improve debugging solutions developed with visual programming.\n## I. INTRODUCTION\nAn increasing number of software applications are being written by end users without formal software development training. This inspired large technology companies such as Microsoft [91] and Amazon [90] to invest in low-code development environments empowering end users to create web and mobile applications. According to the 2019 Q1 Forrester report, the low-code market will witness an annual growth rate of 40%, with spending forecast to reach $21.2 billion by 2022 [102]. \n\nEnd-User Development (EUD) has emerged as a field that is concerned with tools and activities allowing end users \n\nThe associate editor coordinating the review of this manuscript and approving it for publication was Adnan Abid. \n\nwho are not professional software developers to write software applications [11]. This is promising as end users know their own domain and needs more than anyone else, and are often aware of specificities in their respective contexts. Further, as end users outnumber developers with professional software development training by a factor of 30-to-1, EUD enables a much larger pool of people to participate in software development [12]. \n\nA visual programming language (VPL), among other EUD techniques, allows end users to create a program by piecing together graphical elements rather than textually specifying them [9]. \n\nTraditionally, visual programming has been successfully used to help novices learn basics of programming by visualizing elements of a program. However, visual programming is increasingly being used by end users in various domains to create and tailor applications that are useful beyond the realm of education. For instance, VPLs are now being used in fields such as the Internet of Things (IoT) [3], [10], mobile application development [51], robotics [8], and Virtual/Augmented Reality [4]. \n\nA few review studies have been conducted recently aimed at analyzing and comparing different approaches to EUD including visual programming. Table 1 shows an overview of how these review studies compare with this study in several dimensions. The works found in [7], [26] and [29] analyzed a limited number of visual programming approaches and techniques since article retrieval mainly focused on EUD approaches in general as opposed to visual programming approaches.\n...\nThereafter, the study explains the methodology of this systematic literature review including the research questions. Subsequently, the study presents the results of answering the research questions by examining the visual programming tools presented in the selected articles against 12 dimensions: classification of visual programming, interaction style, target users, domain, platform, empirical evidence, types of test participants, number of test participants, programming skills of test participants, evaluation methods, evaluation measures, and accessibility. Thereafter, challenges and future research directions are discussed. Finally, the key findings are presented in the conclusion.\n\n## II. BACKGROUND\nVisual programming is a subset of the end-user development field (EUD). Other subsets of EUD include End-user programming (EUP), which mainly focuses on enabling end users to create their own programs [12], while EUD tackles the entire software life cycle including maintainability, and extensibility. End-user Software Engineering (EUSE) is another related research area which focuses on the quality attributes of the software developed by end users including reusability, security, and verifiability [77]. \n\nVisual programming refers to approaches and methods that use two-dimensional graphical elements to allow nonprogrammer end-users to create, extend, and customize software applications [9]. Visual programming languages (VPLs) are described by programming constructs and rules which are visually depicted [13]. \n\nThere are two widely known taxonomies for visual programming languages: (1) Myers [1] classified visual programming languages by specification techniques. Certain categories in Myers' classification can be generalized into one category. As an example, data-flow graphs, directed graphs, and flowcharts can be considered diagrammatic VPLs. (2) Burnett and Baker [2], on the other hand, listed three broad subcategories under ''visual representations'' namely: diagrammatic languages, iconic languages, and languages based on static pictorial sequences. This classification, while highly useful, does not list the form-based VPLs mentioned in Myers' classification. \n\nCombining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages. All categories (or subcategories), based on visual program representation, presented in both [1] and [2] are assigned to a category under our new categorization. For instance, block-based languages represent jigsaw puzzle pieces in [1], while diagram-based languages cover diagrammatic languages in [2], data flow graphs and directed graphs in [1]. Further, we filtered out the subcategories in [1] which apply to textual programming languages. \n\nWe define the VPL categories as follows:\n...\nDiagrams have been utilized as communication and thinking tools across many domains [22]- [24]. Diagram-based visual programming languages, also known as diagrammatic or data flow languages, are characterized by connecting graphical objects ( e.g., boxes) by arrows, lines, or arcs that represent relations. To understand a diagram-based program, users traverse the diagram. Such a diagram uses different means of perceptual coding to represent the flow of the program. For example, flowcharts use connectedness and directionality to represent how a piece of information is related to one another, and how it flows from one to the other [25]. \n\nThis study will classify several visual programming tools according to the aforementioned VPL categories.\n\n## D. EVALUATION FRAMEWORK\nThe objective of this systematic literature review was to characterize and analyze the current evidence-based visual programming approaches, trends, interaction styles, and techniques. To achieve this objective, we examined 30 articles against 12 relevant dimensions. However, future researchers may develop an evaluation framework that can be used to compare visual programming tools. The research community has contributed such frameworks to be used to compare regular programming languages [84]. While the existing framework of cognitive dimensions of notations [66] can be used to compare tools in terms of their usability, a potentially new evaluation framework is needed to evaluate other quality attributes such as extensibility, security, testability, and portability.\n\n## X. CONCLUSION\nThis study characterized how various visual programming approaches empower end users to develop applications. The study analyzed 30 VPL tools proposed in the literature. To analyze the tools, the study examined how each tool fares across 12 dimensions: VPL classification, interaction style, target users, domain, platform, type of empirical evaluation, types of test participants, number of test participants, programming skills of test participants, evaluation methods, evaluation measures, and accessibility of visual programming tools. \n\nAll the tools the study surveyed were domain specific. The results show that the tools were proposed in various areas including IoT, education, robotics, and more, and targeted mostly general users as well as students and domain experts. \n\nDespite the difference of VPL approaches, most tools utilize high-level abstractions to hide implementation details, and use similar interaction styles such as direct manipulation (in the form of drag-drop) and menu selection. Some commonalities have been observed among tools of the same domain. For instance, tools that target IoT allow end users to access services using visual abstractions, while tools built for educational purposes mostly use a block-based approach, and use similar visual abstractions representing programming constructs. \n\nMost of the tools produced some empirical evidence that points to the success of their approaches with end users, though only a few of the tools conducted a formal experiment. Moreover, the test subjects were mostly students with little to no programming skills in a university setting as opposed to typical users in a real setting. To evaluate the tools, most authors used tasks or surveys. Further, most of the tools measured perceived usability using surveys, while fewer tools measures usability factors such as ease of learning and task efficiency using time completion and number of errors. \n\nThere are several challenges to be addressed by future tools. None of the tool authors explicitly mentioned the reliance of usability principles in designing the tools, though a few authors performed usability tests to evaluate the tools. Further, only one of the tools was evaluated the expressiveness of their tools. It is imperative for end users to understand the limits of the tools. Finally, 53.3% (16) of the tools were available publicly with some documentation. We strongly recommend that future tools are made available for end users as well as comprehensive documentation to ensure tool adoption and sustainability.",
            "reference_string": "[231725028 | Kuhail et al. | 2021 | Citations: 39]"
        },
        {
            "title": "Facilitating K-12 Teachers in Creating Apps by Visual Programming and Project-based Learning",
            "venue": "International Journal of Emerging Technologies in Learning (iJET)",
            "year": 2020,
            "reference_count": 45,
            "citation_count": 40,
            "influential_citation_count": 3,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://online-journals.org/index.php/i-jet/article/download/11013/6333",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.3991/ijet.v15i01.11013?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.3991/ijet.v15i01.11013, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2111748",
                    "name": "Chiung-Fang Chiu"
                }
            ],
            "abstract": "The use of apps in education has become popular in recent years with the development of technology. How to prepare K-12 teachers in creating apps for students learning is worth our attention. This paper presents how to ap-ply visual programming and project-based learning to facilitate K-12 teachers in creating apps. Seven K-12 teachers with less computer background partic-ipated in this study. Data source including (1) K-12 teachers\u2019 project codes, (2) K-12 teachers\u2019 questionnaire, (3) K-12 teachers\u2019 interviews, and (4) ques-tionnaire giving to K-12 students were collected and analyzed. The results reveal that K-12 teachers applied many programming concepts in the coding implementation in these projects. Most students gave positive feedback to these K-12 teachers\u2019 app projects. Furthermore, K-12 teachers were also very positive toward the creation of apps by visual programming and project implementation, which was reflected through K-12 teachers\u2019 questionnaire surveys and interview results. The above findings provide a practicable ap-proach for future teaching to K-12 teachers or novice programmers on app programming.",
            "corpus_id": 212726996,
            "sentences": [
                {
                    "corpus_id": "212726996",
                    "title": "Facilitating K-12 Teachers in Creating Apps by Visual Programming and Project-based Learning",
                    "text": "Traditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming [9]- [10]. Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions. Study by [15] indicated that students who used the visual interface for programming spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface for programming. Saito, Washizaki, and Fukazawa also compared the learning effects of text-based and visual-based programming and found that visual-based programming induces a larger change in attitude toward programming [16]. Therefore, research results suggest that visual-based programming is advantageous in a programming implementation environment for novice programmers. \n\nNumerous studies have shown the benefits and feasibility of visual programming environments such as Scratch (scratch. mit.edu), Alice (www.alice.org), and Kodu (www.kodugamelab.com). Since they are easy to use and understand, visual programming environments have been used as lead-in courses for more advanced computer science courses. For example, research [17]- [18] taught Scratch in a CS0 course to improve the retention rate of at-risk majors and to stimulate interest and positive attitudes toward computer science. Scratch and Kodu were also used to teach important concepts of computer science for students [19]- [21]. Furthermore, research by Werner, Denner, Campe, and Kawamoto also pointed out that visual programming environment is helpful in the development of learners' computational thinking skills [22].",
                    "score": 0.4227106823263234,
                    "section_title": "Visual programming environment",
                    "char_start_offset": 5363,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 157
                        },
                        {
                            "start": 158,
                            "end": 329
                        },
                        {
                            "start": 330,
                            "end": 417
                        },
                        {
                            "start": 418,
                            "end": 627
                        },
                        {
                            "start": 628,
                            "end": 766
                        },
                        {
                            "start": 767,
                            "end": 953
                        },
                        {
                            "start": 954,
                            "end": 1190
                        },
                        {
                            "start": 1191,
                            "end": 1400
                        },
                        {
                            "start": 1401,
                            "end": 1550
                        },
                        {
                            "start": 1553,
                            "end": 1670
                        },
                        {
                            "start": 1671,
                            "end": 1680
                        },
                        {
                            "start": 1681,
                            "end": 1703
                        },
                        {
                            "start": 1704,
                            "end": 1735
                        },
                        {
                            "start": 1736,
                            "end": 1888
                        },
                        {
                            "start": 1889,
                            "end": 2074
                        },
                        {
                            "start": 2075,
                            "end": 2179
                        },
                        {
                            "start": 2180,
                            "end": 2372
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 319,
                            "end": 322,
                            "matchedPaperCorpusId": "33572463"
                        },
                        {
                            "start": 324,
                            "end": 328,
                            "matchedPaperCorpusId": "2965215"
                        },
                        {
                            "start": 963,
                            "end": 967,
                            "matchedPaperCorpusId": "16554511"
                        },
                        {
                            "start": 1395,
                            "end": 1399,
                            "matchedPaperCorpusId": "38535646"
                        },
                        {
                            "start": 1911,
                            "end": 1915,
                            "matchedPaperCorpusId": "59837822"
                        },
                        {
                            "start": 1917,
                            "end": 1921,
                            "matchedPaperCorpusId": "22652302"
                        },
                        {
                            "start": 2168,
                            "end": 2172,
                            "matchedPaperCorpusId": "16831477"
                        },
                        {
                            "start": 2174,
                            "end": 2178,
                            "matchedPaperCorpusId": "3344110"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9560546875
                }
            ],
            "relevance_judgement": 0.9560546875,
            "relevance_judgment_input_expanded": "# Title: Facilitating K-12 Teachers in Creating Apps by Visual Programming and Project-based Learning\n# Venue: International Journal of Emerging Technologies in Learning (iJET)\n# Authors: Chiung-Fang Chiu\n## Abstract\nThe use of apps in education has become popular in recent years with the development of technology. How to prepare K-12 teachers in creating apps for students learning is worth our attention. This paper presents how to ap-ply visual programming and project-based learning to facilitate K-12 teachers in creating apps. Seven K-12 teachers with less computer background partic-ipated in this study. Data source including (1) K-12 teachers\u2019 project codes, (2) K-12 teachers\u2019 questionnaire, (3) K-12 teachers\u2019 interviews, and (4) ques-tionnaire giving to K-12 students were collected and analyzed. The results reveal that K-12 teachers applied many programming concepts in the coding implementation in these projects. Most students gave positive feedback to these K-12 teachers\u2019 app projects. Furthermore, K-12 teachers were also very positive toward the creation of apps by visual programming and project implementation, which was reflected through K-12 teachers\u2019 questionnaire surveys and interview results. The above findings provide a practicable ap-proach for future teaching to K-12 teachers or novice programmers on app programming.\n## Visual programming environment\nTraditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming [9]- [10]. Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions. Study by [15] indicated that students who used the visual interface for programming spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface for programming. Saito, Washizaki, and Fukazawa also compared the learning effects of text-based and visual-based programming and found that visual-based programming induces a larger change in attitude toward programming [16]. Therefore, research results suggest that visual-based programming is advantageous in a programming implementation environment for novice programmers. \n\nNumerous studies have shown the benefits and feasibility of visual programming environments such as Scratch (scratch. mit.edu), Alice (www.alice.org), and Kodu (www.kodugamelab.com). Since they are easy to use and understand, visual programming environments have been used as lead-in courses for more advanced computer science courses. For example, research [17]- [18] taught Scratch in a CS0 course to improve the retention rate of at-risk majors and to stimulate interest and positive attitudes toward computer science. Scratch and Kodu were also used to teach important concepts of computer science for students [19]- [21]. Furthermore, research by Werner, Denner, Campe, and Kawamoto also pointed out that visual programming environment is helpful in the development of learners' computational thinking skills [22].",
            "reference_string": "[212726996 | Chiu | 2020 | Citations: 40]"
        },
        {
            "title": "Hybrid Visual Programming Language Environment for Programming Training",
            "venue": "TEM Journal",
            "year": 2021,
            "reference_count": 10,
            "citation_count": 2,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "http://www.temjournal.com/content/102/TEMJournalMay2021_981_986.pdf",
                "status": "GOLD",
                "license": "CCBYNCND",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.18421/TEM102-63?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.18421/TEM102-63, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2666781",
                    "name": "R. Daskalov"
                },
                {
                    "authorId": "94696738",
                    "name": "G. Pashev"
                },
                {
                    "authorId": "2299512",
                    "name": "Silvia N. Gaftandzhieva"
                }
            ],
            "abstract": "The paper presents an approach to learning and an environment for working with a hybrid visual - text programming language with a special emphasis on the training for future programmers at an early stage. An overview of other visual programming environments and languages is made and the advantages of the hybrid visual - text approach offered in this article are highlighted. Emphasis is placed on the practical implementation of a proprietary environment for the development of sample programs in the author's hybrid visual programming language. An example of the use of the environment is presented and perspectives for its development are formulated.",
            "corpus_id": 236336244,
            "sentences": [
                {
                    "corpus_id": "236336244",
                    "title": "Hybrid Visual Programming Language Environment for Programming Training",
                    "text": "The paper presents an approach to learning and an environment for working with a hybrid visual - text programming language with a special emphasis on the training for future programmers at an early stage. An overview of other visual programming environments and languages is made and the advantages of the hybrid visual - text approach offered in this article are highlighted. Emphasis is placed on the practical implementation of a proprietary environment for the development of sample programs in the author's hybrid visual programming language. An example of the use of the environment is presented and perspectives for its development are formulated.",
                    "score": 0.48051836594576036,
                    "section_title": "abstract",
                    "char_start_offset": 0,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9521484375
                },
                {
                    "corpus_id": "236336244",
                    "title": "Hybrid Visual Programming Language Environment for Programming Training",
                    "text": "In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists. No approach is specially adapted to the initial training of future programmers. Weintrop and Wilensky [6] review earliest found study for Hybrid Visual Programming Languages as mentioned in [7], which also reviews several other attempts for Hybrid approach, such as [8] and [9]. These Hybrid approaches, however, are very bound to specific well-known text programming languages and do not provide more language independent approaches.",
                    "score": 0.45331342949483555,
                    "section_title": "Introduction",
                    "char_start_offset": 15,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 207
                        },
                        {
                            "start": 208,
                            "end": 361
                        },
                        {
                            "start": 364,
                            "end": 544
                        },
                        {
                            "start": 547,
                            "end": 574
                        },
                        {
                            "start": 575,
                            "end": 691
                        },
                        {
                            "start": 692,
                            "end": 798
                        },
                        {
                            "start": 799,
                            "end": 980
                        },
                        {
                            "start": 981,
                            "end": 1017
                        },
                        {
                            "start": 1018,
                            "end": 1036
                        },
                        {
                            "start": 1037,
                            "end": 1148
                        },
                        {
                            "start": 1149,
                            "end": 1245
                        },
                        {
                            "start": 1246,
                            "end": 1350
                        },
                        {
                            "start": 1353,
                            "end": 1556
                        },
                        {
                            "start": 1559,
                            "end": 1648
                        },
                        {
                            "start": 1649,
                            "end": 1728
                        },
                        {
                            "start": 1729,
                            "end": 1927
                        },
                        {
                            "start": 1928,
                            "end": 2083
                        }
                    ],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.92236328125
                }
            ],
            "relevance_judgement": 0.9521484375,
            "relevance_judgment_input_expanded": "# Title: Hybrid Visual Programming Language Environment for Programming Training\n# Venue: TEM Journal\n# Authors: R. Daskalov, G. Pashev, Silvia N. Gaftandzhieva\n## Abstract\nThe paper presents an approach to learning and an environment for working with a hybrid visual - text programming language with a special emphasis on the training for future programmers at an early stage. An overview of other visual programming environments and languages is made and the advantages of the hybrid visual - text approach offered in this article are highlighted. Emphasis is placed on the practical implementation of a proprietary environment for the development of sample programs in the author's hybrid visual programming language. An example of the use of the environment is presented and perspectives for its development are formulated.\n## Introduction\nIn computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists. No approach is specially adapted to the initial training of future programmers. Weintrop and Wilensky [6] review earliest found study for Hybrid Visual Programming Languages as mentioned in [7], which also reviews several other attempts for Hybrid approach, such as [8] and [9]. These Hybrid approaches, however, are very bound to specific well-known text programming languages and do not provide more language independent approaches.",
            "reference_string": "[236336244 | Daskalov et al. | 2021 | Citations: 2]"
        },
        {
            "title": "Primary School Pupils\u2019 Attitudes toward Learning Programming through Visual Interactive Environments",
            "venue": "",
            "year": 2016,
            "reference_count": 19,
            "citation_count": 24,
            "influential_citation_count": 2,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "http://www.sciedupress.com/journal/index.php/wje/article/download/10152/6310",
                "status": "GOLD",
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.5430/WJE.V6N5P20?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.5430/WJE.V6N5P20, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2521176",
                    "name": "K. Asad"
                },
                {
                    "authorId": "71281932",
                    "name": "M. Tibi"
                },
                {
                    "authorId": "2772208",
                    "name": "J. Raiyn"
                }
            ],
            "abstract": "New generations are using and playing with mobile and computer applications extensively. These applications arethe outcomes of programming work that involves skills, such as computational and algorithmic thinking. Learningprogramming is not easy for students children. In recent years, academic institutions like theMassachusetts Institute of Technology (MIT) and hi-tech companies, such as Google and Khan Academy, haveintroduced online environments to facilitate the teaching and learning of programming. Most of these programmingenvironments are web-based, and interactive and are supported with visual multimedia features. Therefore, they havebecome easy to use, very attractive and helpful for teaching children how to program and to develop theiralgorithmic and computational thinking skills. The proposed presentation will describe research that examined theteaching of a course to primary school children based on three on-line interactive environments: \"Plastelina\" for logicgames, \u201cCode with Anna and Elsa\u201d via the Hour of Code project block-oriented programming environment, forblock programming and \"Turtle Academy\" for textual programming in the Logo language. The current researchincluded the development, implementation and evaluation of the course at an elementary school. In addition, it wasaimed at investigating the pupils' attitudes toward the learning of computer programming, both before and afterparticipation in the course. The results revealed that the pupils' attitudes towards programming remained positivealso also after the participation in the course. It was also found that programming improved children's problemsolving skills.",
            "corpus_id": 63111506,
            "sentences": [
                {
                    "corpus_id": "63111506",
                    "title": "Primary School Pupils\u2019 Attitudes toward Learning Programming through Visual Interactive Environments",
                    "text": "This section gives an overview of the use of visual tools in education. Rodger et al. (2009) introduced the integration of the Alice 3D into middle school and designed lessons in math, science, languages arts, social studies, and technology. Alice is an innovative 3D visual programming environment with which users can create interactive games, animations, and videos. It is a free teaching tool designed to create object-oriented programming. Ben-Ari (2012) introduced Scratch as a visual programming interactive medium in order to support the development of computational thinking skills. Wilson et al., (2009) introduced games-based learning, such as Scratch, and games-based construction into primary education to engage children at the primary level in developing computer programming skills. With Scratch, users can program interactive stories, games, and animations, which helps young people learn to think creatively. Stolee and Fristoe (2011) used Kodu Game Lab to introduce children to programming at an early age. Kodu is a 3D visual programming platform that can be used to teach creativity and problem solving, as well as programming. Ioannidou (2011) used games to support and develop computational thinking skills and to promote and increase opportunities for computer science education in the regular curriculum. Hero et.al. (2015) used the visual programming platform, MIT App, to increase interest and skills in computational practices. The visual programming platform, MIT App, enables users to create and design Android apps such as games, and more, and it can be used in various fields. MIT's App Inventor platform is used to learn how to program and create mobile apps. The materials available through the MIT App Inventor platform are suitable for teaching courses for middle school, high school, and college. Peluso and Sprechini (2012) used Alice to make a statement about the attitudes of high school student toward computer science. The students expressed their satisfaction with the use of Alice visual programming. The most common programming concepts gained from visual programming environments like Alice are loops (iteration), conditional statements that support problem solving, logic, reasoning and systematic thinking. We conclude that the development of educational visual programming environments like Alice, Scratch, Kodu, and Greenfoot, support the development of algorithmic thinking, and are effective for introducing primary school children to visual programming skills and concepts.",
                    "score": 0.3509754580961078,
                    "section_title": "Related Research",
                    "char_start_offset": 1761,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 71
                        },
                        {
                            "start": 72,
                            "end": 241
                        },
                        {
                            "start": 242,
                            "end": 369
                        },
                        {
                            "start": 370,
                            "end": 444
                        },
                        {
                            "start": 445,
                            "end": 591
                        },
                        {
                            "start": 592,
                            "end": 798
                        },
                        {
                            "start": 799,
                            "end": 926
                        },
                        {
                            "start": 927,
                            "end": 1025
                        },
                        {
                            "start": 1026,
                            "end": 1148
                        },
                        {
                            "start": 1149,
                            "end": 1329
                        },
                        {
                            "start": 1330,
                            "end": 1455
                        },
                        {
                            "start": 1456,
                            "end": 1608
                        },
                        {
                            "start": 1609,
                            "end": 1692
                        },
                        {
                            "start": 1693,
                            "end": 1833
                        },
                        {
                            "start": 1834,
                            "end": 1960
                        },
                        {
                            "start": 1961,
                            "end": 2044
                        },
                        {
                            "start": 2045,
                            "end": 2254
                        },
                        {
                            "start": 2255,
                            "end": 2526
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 592,
                            "end": 613,
                            "matchedPaperCorpusId": "61671687"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.94873046875
                }
            ],
            "relevance_judgement": 0.94873046875,
            "relevance_judgment_input_expanded": "# Title: Primary School Pupils\u2019 Attitudes toward Learning Programming through Visual Interactive Environments\n# Venue: \n# Authors: K. Asad, M. Tibi, J. Raiyn\n## Abstract\nNew generations are using and playing with mobile and computer applications extensively. These applications arethe outcomes of programming work that involves skills, such as computational and algorithmic thinking. Learningprogramming is not easy for students children. In recent years, academic institutions like theMassachusetts Institute of Technology (MIT) and hi-tech companies, such as Google and Khan Academy, haveintroduced online environments to facilitate the teaching and learning of programming. Most of these programmingenvironments are web-based, and interactive and are supported with visual multimedia features. Therefore, they havebecome easy to use, very attractive and helpful for teaching children how to program and to develop theiralgorithmic and computational thinking skills. The proposed presentation will describe research that examined theteaching of a course to primary school children based on three on-line interactive environments: \"Plastelina\" for logicgames, \u201cCode with Anna and Elsa\u201d via the Hour of Code project block-oriented programming environment, forblock programming and \"Turtle Academy\" for textual programming in the Logo language. The current researchincluded the development, implementation and evaluation of the course at an elementary school. In addition, it wasaimed at investigating the pupils' attitudes toward the learning of computer programming, both before and afterparticipation in the course. The results revealed that the pupils' attitudes towards programming remained positivealso also after the participation in the course. It was also found that programming improved children's problemsolving skills.\n## Related Research\nThis section gives an overview of the use of visual tools in education. Rodger et al. (2009) introduced the integration of the Alice 3D into middle school and designed lessons in math, science, languages arts, social studies, and technology. Alice is an innovative 3D visual programming environment with which users can create interactive games, animations, and videos. It is a free teaching tool designed to create object-oriented programming. Ben-Ari (2012) introduced Scratch as a visual programming interactive medium in order to support the development of computational thinking skills. Wilson et al., (2009) introduced games-based learning, such as Scratch, and games-based construction into primary education to engage children at the primary level in developing computer programming skills. With Scratch, users can program interactive stories, games, and animations, which helps young people learn to think creatively. Stolee and Fristoe (2011) used Kodu Game Lab to introduce children to programming at an early age. Kodu is a 3D visual programming platform that can be used to teach creativity and problem solving, as well as programming. Ioannidou (2011) used games to support and develop computational thinking skills and to promote and increase opportunities for computer science education in the regular curriculum. Hero et.al. (2015) used the visual programming platform, MIT App, to increase interest and skills in computational practices. The visual programming platform, MIT App, enables users to create and design Android apps such as games, and more, and it can be used in various fields. MIT's App Inventor platform is used to learn how to program and create mobile apps. The materials available through the MIT App Inventor platform are suitable for teaching courses for middle school, high school, and college. Peluso and Sprechini (2012) used Alice to make a statement about the attitudes of high school student toward computer science. The students expressed their satisfaction with the use of Alice visual programming. The most common programming concepts gained from visual programming environments like Alice are loops (iteration), conditional statements that support problem solving, logic, reasoning and systematic thinking. We conclude that the development of educational visual programming environments like Alice, Scratch, Kodu, and Greenfoot, support the development of algorithmic thinking, and are effective for introducing primary school children to visual programming skills and concepts.",
            "reference_string": "[63111506 | Asad et al. | 2016 | Citations: 24]"
        },
        {
            "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers",
            "venue": "Education sciences",
            "year": 2019,
            "reference_count": 50,
            "citation_count": 23,
            "influential_citation_count": 2,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://www.mdpi.com/2227-7102/9/3/181/pdf?version=1563177761",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.3390/EDUCSCI9030181?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.3390/EDUCSCI9030181, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2157028104",
                    "name": "Piedade Jo\u00e3o"
                },
                {
                    "authorId": "72582337",
                    "name": "Dorotea Nuno"
                },
                {
                    "authorId": "2157024771",
                    "name": "Sampaio Ferrentini F\u00e1bio"
                },
                {
                    "authorId": "144370033",
                    "name": "P. ana"
                }
            ],
            "abstract": "In the last few years, it has been pointed out that teaching programming is a strong strategy to develop pupils\u2019 competences in computational thinking (CT). In the Portuguese context, the curriculum changes in 2018 made programming and CT compulsory for every pupil in primary and secondary education. Nowadays, there is an information and communication technology (ICT) subject, taught by a computer science teacher in each school grade. In Portugal, to become a computer science teacher in primary and secondary education, it is compulsory to have a master\u2019s degree in computer science education. This article reports on a pedagogical activity developed with student-teachers of a Master in Teaching Informatics at the University of Lisbon. Within the activities of the master\u2019s program, we developed a cross-analysis of the core characteristics of 26 block-based and visual programming applications (apps) used to teach computational thinking and programming in school classes. In order to organize the analysis, a framework with several dimensions was developed and used by student-teachers to register the characteristics of each app. The product of this work is a comparative matrix mapping the core characteristics of each of the 26 apps that student-teachers used to select the most appropriate one for teaching programming and computational thinking according to each grade, age group and other characteristics.",
            "corpus_id": 199002134,
            "sentences": [
                {
                    "corpus_id": "199002134",
                    "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers",
                    "text": "The visual programming environment (VPE) and block-based programming environment have been referred in many research studies as important tools to learn programming and to solve many problems taught in primary schools. In fact, visual programming with blocks is a great support in introducing programming and saves pupils from the difficulties of traditionally complex text-based languages [27,36]. \n\nIn 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs. In this paper, we understand VPE to be a block-based or visual text-based or hybrid (block + text) programming environment, where the focus is on the core characteristics of each environment in order to improve the pupils\u00b4learning. \n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39]. \n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes. \n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41].",
                    "score": 0.47108735754461806,
                    "section_title": "Visual and Block-based Programming Environment",
                    "char_start_offset": 12132,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 218
                        },
                        {
                            "start": 219,
                            "end": 398
                        },
                        {
                            "start": 401,
                            "end": 547
                        },
                        {
                            "start": 548,
                            "end": 674
                        },
                        {
                            "start": 675,
                            "end": 679
                        },
                        {
                            "start": 680,
                            "end": 973
                        },
                        {
                            "start": 974,
                            "end": 1205
                        },
                        {
                            "start": 1208,
                            "end": 1409
                        },
                        {
                            "start": 1410,
                            "end": 1624
                        },
                        {
                            "start": 1625,
                            "end": 1871
                        },
                        {
                            "start": 1874,
                            "end": 2034
                        },
                        {
                            "start": 2035,
                            "end": 2150
                        },
                        {
                            "start": 2153,
                            "end": 2335
                        },
                        {
                            "start": 2336,
                            "end": 2430
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 394,
                            "end": 397,
                            "matchedPaperCorpusId": "17459721"
                        },
                        {
                            "start": 416,
                            "end": 420,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 1404,
                            "end": 1408,
                            "matchedPaperCorpusId": "59528289"
                        },
                        {
                            "start": 1619,
                            "end": 1623,
                            "matchedPaperCorpusId": "11994747"
                        },
                        {
                            "start": 1866,
                            "end": 1870,
                            "matchedPaperCorpusId": "51750550"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.947265625
                }
            ],
            "relevance_judgement": 0.947265625,
            "relevance_judgment_input_expanded": "# Title: A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers\n# Venue: Education sciences\n# Authors: Piedade Jo\u00e3o, Dorotea Nuno, Sampaio Ferrentini F\u00e1bio, P. ana\n## Abstract\nIn the last few years, it has been pointed out that teaching programming is a strong strategy to develop pupils\u2019 competences in computational thinking (CT). In the Portuguese context, the curriculum changes in 2018 made programming and CT compulsory for every pupil in primary and secondary education. Nowadays, there is an information and communication technology (ICT) subject, taught by a computer science teacher in each school grade. In Portugal, to become a computer science teacher in primary and secondary education, it is compulsory to have a master\u2019s degree in computer science education. This article reports on a pedagogical activity developed with student-teachers of a Master in Teaching Informatics at the University of Lisbon. Within the activities of the master\u2019s program, we developed a cross-analysis of the core characteristics of 26 block-based and visual programming applications (apps) used to teach computational thinking and programming in school classes. In order to organize the analysis, a framework with several dimensions was developed and used by student-teachers to register the characteristics of each app. The product of this work is a comparative matrix mapping the core characteristics of each of the 26 apps that student-teachers used to select the most appropriate one for teaching programming and computational thinking according to each grade, age group and other characteristics.\n## Visual and Block-based Programming Environment\nThe visual programming environment (VPE) and block-based programming environment have been referred in many research studies as important tools to learn programming and to solve many problems taught in primary schools. In fact, visual programming with blocks is a great support in introducing programming and saves pupils from the difficulties of traditionally complex text-based languages [27,36]. \n\nIn 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs. In this paper, we understand VPE to be a block-based or visual text-based or hybrid (block + text) programming environment, where the focus is on the core characteristics of each environment in order to improve the pupils\u00b4learning. \n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39]. \n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes. \n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41].",
            "reference_string": "[199002134 | Joao et al. | 2019 | Citations: 23]"
        },
        {
            "title": "Using Visual Programming Games to Study Novice Programmers",
            "venue": "Int. J. Serious Games",
            "year": 2023,
            "reference_count": 42,
            "citation_count": 6,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://journal.seriousgamessociety.org/index.php/IJSG/article/download/577/498",
                "status": "GOLD",
                "license": "CCBYNCND",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.17083/ijsg.v10i2.577?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.17083/ijsg.v10i2.577, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "39722092",
                    "name": "Christian DeLozier"
                },
                {
                    "authorId": "38203562",
                    "name": "James Shey"
                }
            ],
            "abstract": "Enabling programmers to write correct and efficient parallel code remains an important challenge, and the prevalence of on-chip accelerators exacerbates this challenge. Novice programmers, especially those in disciplines outside of Computer Science and Computer Engineering, need to be able to write code that exploits parallelism and heterogeneity, but the frameworks for writing parallel and heterogeneous programs expect expert knowledge and experience. More effort must be put into understanding how novice programmers solve parallel problems. Unfortunately, novice programmers are difficult to study because they are, by definition, novices. We have designed a visual programming language and game-based framework for studying how novice programmers solve parallel problems. This tool was used to conduct an initial study on 95 undergraduate students with little to no prior programming experience. 71% of all volunteer participants completed the study in 48 minutes on average. This study demonstrated that novice programmers could solve parallel problems, and this framework can be used to conduct more thorough studies of how novice programmers approach parallel code.",
            "corpus_id": 259335765,
            "sentences": [
                {
                    "corpus_id": "259335765",
                    "title": "Using Visual Programming Games to Study Novice Programmers",
                    "text": "In this paper, we have demonstrated the use of visual programming languages and serious games as a framework for studying novice programmers' abilities to use complex programming features. This is a novel use of serious games that could be applied to research on new programming languages and methodologies. This work fills a gap in the limited usability studies performed on new programming languages and methodologies by demonstrating the effectiveness of using visual programming languages and serious games to perform usability studies using novice programmers. This approach can be applied to research on new programming languages and methodologies. \n\nSeveral parts of this work can be generalized to other studies in programming education and research. First, the use of Blockly and serious games to represent complex programming language concepts can be used to analyze future work that proposes new programming languages and methodologies. Second, the analysis performed in the results section can be used by researchers to analyze and compare programming languages and methodologies, specifically as they apply to novice programmers. Finally, the insights learned from performing this study can be used to improve future studies on programming languages and methodologies using visual programming languages and serious games. \n\nThis work provides a framework for additional studies. The ability to understand how novice programmers approach a complex problem can guide how different parallel frameworks can be implemented to appeal to novice programmers. Additionally, the ability to understand how novice programmers think can lead to breakthroughs in teaching parallel concepts. The framework presented here can be expanded upon to different implementations to include locks, mutexes, and semaphores and each can be investigated for its ease of implementation. We plan to conduct a more thorough study of how well novice programmers can understand existing parallel programming paradigms and use this framework to conduct comparative studies of parallel programming methodologies. \n\nFrom the initial study we conducted using this framework, we can conclude that novice programmers can solve complex programming problems using a visual programming language paired with a serious game. Participants in the study were largely novices in both programming and parallel programming, but they were able to solve parallel programming problems using the visual programming language. Participants with more prior experience in programming took less attempts to solve these problems, but those with less prior experience were still able to produce a working solution. We hope that this framework can be applied to other programming languages, concepts, and methodologies to evaluate the usability of features using novice programmers.",
                    "score": 0.3579152567309107,
                    "section_title": "Future Work and Conclusions",
                    "char_start_offset": 43866,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 188
                        },
                        {
                            "start": 189,
                            "end": 307
                        },
                        {
                            "start": 308,
                            "end": 565
                        },
                        {
                            "start": 566,
                            "end": 654
                        },
                        {
                            "start": 657,
                            "end": 758
                        },
                        {
                            "start": 759,
                            "end": 947
                        },
                        {
                            "start": 948,
                            "end": 1142
                        },
                        {
                            "start": 1143,
                            "end": 1334
                        },
                        {
                            "start": 1337,
                            "end": 1391
                        },
                        {
                            "start": 1392,
                            "end": 1563
                        },
                        {
                            "start": 1564,
                            "end": 1689
                        },
                        {
                            "start": 1690,
                            "end": 1871
                        },
                        {
                            "start": 1872,
                            "end": 2091
                        },
                        {
                            "start": 2094,
                            "end": 2294
                        },
                        {
                            "start": 2295,
                            "end": 2484
                        },
                        {
                            "start": 2485,
                            "end": 2667
                        },
                        {
                            "start": 2668,
                            "end": 2834
                        }
                    ],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.947265625
                },
                {
                    "corpus_id": "259335765",
                    "title": "Using Visual Programming Games to Study Novice Programmers",
                    "text": "Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13]. \n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]. There are many options, but popular ones include code.org, Scratch, and Alice. In [6], Scratch was introduced to preschool educators and evaluated basic computational and logical thinking. All educators saw the direct benefits and 85.7% said it should be taught to preschool students. Continuing this idea, [16] concludes that the early introduction of computational and logical thinking into the kindergarten curriculum helps with cognitive thinking. Comparing the effectiveness of block-based programming to conventional text-based programming, [8] evaluated high-school students learning under different modalities.",
                    "score": 0.3441653753236377,
                    "section_title": "Visual Programming",
                    "char_start_offset": 4631,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 76
                        },
                        {
                            "start": 77,
                            "end": 187
                        },
                        {
                            "start": 188,
                            "end": 278
                        },
                        {
                            "start": 279,
                            "end": 425
                        },
                        {
                            "start": 426,
                            "end": 548
                        },
                        {
                            "start": 549,
                            "end": 696
                        },
                        {
                            "start": 697,
                            "end": 788
                        },
                        {
                            "start": 789,
                            "end": 1016
                        },
                        {
                            "start": 1019,
                            "end": 1094
                        },
                        {
                            "start": 1095,
                            "end": 1231
                        },
                        {
                            "start": 1232,
                            "end": 1323
                        },
                        {
                            "start": 1324,
                            "end": 1441
                        },
                        {
                            "start": 1442,
                            "end": 1583
                        },
                        {
                            "start": 1584,
                            "end": 1737
                        },
                        {
                            "start": 1738,
                            "end": 1796
                        },
                        {
                            "start": 1797,
                            "end": 1816
                        },
                        {
                            "start": 1817,
                            "end": 1926
                        },
                        {
                            "start": 1927,
                            "end": 2022
                        },
                        {
                            "start": 2023,
                            "end": 2189
                        },
                        {
                            "start": 2190,
                            "end": 2356
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 145,
                            "end": 148,
                            "matchedPaperCorpusId": "253196672"
                        },
                        {
                            "start": 148,
                            "end": 150,
                            "matchedPaperCorpusId": "235383033"
                        },
                        {
                            "start": 167,
                            "end": 170,
                            "matchedPaperCorpusId": "10976181"
                        },
                        {
                            "start": 183,
                            "end": 186,
                            "matchedPaperCorpusId": "35735491"
                        },
                        {
                            "start": 783,
                            "end": 787,
                            "matchedPaperCorpusId": "51750550"
                        },
                        {
                            "start": 1089,
                            "end": 1093,
                            "matchedPaperCorpusId": "199002134"
                        },
                        {
                            "start": 1226,
                            "end": 1230,
                            "matchedPaperCorpusId": "199002134"
                        },
                        {
                            "start": 1436,
                            "end": 1440,
                            "matchedPaperCorpusId": "198986538"
                        },
                        {
                            "start": 1578,
                            "end": 1582,
                            "matchedPaperCorpusId": "199002134"
                        },
                        {
                            "start": 1820,
                            "end": 1823,
                            "matchedPaperCorpusId": "253196672"
                        },
                        {
                            "start": 2045,
                            "end": 2049,
                            "matchedPaperCorpusId": "239681487"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9443359375
                }
            ],
            "relevance_judgement": 0.947265625,
            "relevance_judgment_input_expanded": "# Title: Using Visual Programming Games to Study Novice Programmers\n# Venue: Int. J. Serious Games\n# Authors: Christian DeLozier, James Shey\n## Abstract\nEnabling programmers to write correct and efficient parallel code remains an important challenge, and the prevalence of on-chip accelerators exacerbates this challenge. Novice programmers, especially those in disciplines outside of Computer Science and Computer Engineering, need to be able to write code that exploits parallelism and heterogeneity, but the frameworks for writing parallel and heterogeneous programs expect expert knowledge and experience. More effort must be put into understanding how novice programmers solve parallel problems. Unfortunately, novice programmers are difficult to study because they are, by definition, novices. We have designed a visual programming language and game-based framework for studying how novice programmers solve parallel problems. This tool was used to conduct an initial study on 95 undergraduate students with little to no prior programming experience. 71% of all volunteer participants completed the study in 48 minutes on average. This study demonstrated that novice programmers could solve parallel problems, and this framework can be used to conduct more thorough studies of how novice programmers approach parallel code.\n## Visual Programming\nVisual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13]. \n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]. There are many options, but popular ones include code.org, Scratch, and Alice. In [6], Scratch was introduced to preschool educators and evaluated basic computational and logical thinking. All educators saw the direct benefits and 85.7% said it should be taught to preschool students. Continuing this idea, [16] concludes that the early introduction of computational and logical thinking into the kindergarten curriculum helps with cognitive thinking. Comparing the effectiveness of block-based programming to conventional text-based programming, [8] evaluated high-school students learning under different modalities.\n\n## Future Work and Conclusions\nIn this paper, we have demonstrated the use of visual programming languages and serious games as a framework for studying novice programmers' abilities to use complex programming features. This is a novel use of serious games that could be applied to research on new programming languages and methodologies. This work fills a gap in the limited usability studies performed on new programming languages and methodologies by demonstrating the effectiveness of using visual programming languages and serious games to perform usability studies using novice programmers. This approach can be applied to research on new programming languages and methodologies. \n\nSeveral parts of this work can be generalized to other studies in programming education and research. First, the use of Blockly and serious games to represent complex programming language concepts can be used to analyze future work that proposes new programming languages and methodologies. Second, the analysis performed in the results section can be used by researchers to analyze and compare programming languages and methodologies, specifically as they apply to novice programmers. Finally, the insights learned from performing this study can be used to improve future studies on programming languages and methodologies using visual programming languages and serious games. \n\nThis work provides a framework for additional studies. The ability to understand how novice programmers approach a complex problem can guide how different parallel frameworks can be implemented to appeal to novice programmers. Additionally, the ability to understand how novice programmers think can lead to breakthroughs in teaching parallel concepts. The framework presented here can be expanded upon to different implementations to include locks, mutexes, and semaphores and each can be investigated for its ease of implementation. We plan to conduct a more thorough study of how well novice programmers can understand existing parallel programming paradigms and use this framework to conduct comparative studies of parallel programming methodologies. \n\nFrom the initial study we conducted using this framework, we can conclude that novice programmers can solve complex programming problems using a visual programming language paired with a serious game. Participants in the study were largely novices in both programming and parallel programming, but they were able to solve parallel programming problems using the visual programming language. Participants with more prior experience in programming took less attempts to solve these problems, but those with less prior experience were still able to produce a working solution. We hope that this framework can be applied to other programming languages, concepts, and methodologies to evaluate the usability of features using novice programmers.",
            "reference_string": "[259335765 | DeLozier et al. | 2023 | Citations: 6]"
        },
        {
            "title": "Reflections on Using Robots and Visual Programming Environments for Project-Based Teaching",
            "venue": "",
            "year": 2014,
            "reference_count": 10,
            "citation_count": 8,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://doi.org/10.5755/j01.eee.20.1.6169",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.5755/J01.EEE.20.1.6169?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.5755/J01.EEE.20.1.6169, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "3102760",
                    "name": "Ignas Plauska"
                },
                {
                    "authorId": "69972564",
                    "name": "R. Lukas"
                },
                {
                    "authorId": null,
                    "name": "Robertas Dama\u0161evi\u010dius"
                }
            ],
            "abstract": "Visual programming languages provide a more natural approach to specifying software/hardware systems with complex behaviour such as robots. They are especially important in education because they do not require formal knowledge of programming language syntax and are attractive to users. We present an analysis and comparison of two visual programming environments, Lego NXT-G and Microsoft Visual Programming Language, based on the cognitive and usability requirements, evaluate their application in robotics-based Computer Science education, identify main problems and propose solutions for using visual programming languages in the Internet-of-Things domain. DOI: http://dx.doi.org/10.5755/j01.eee.20.1.6169",
            "corpus_id": 60941791,
            "sentences": [
                {
                    "corpus_id": "60941791",
                    "title": "Reflections on Using Robots and Visual Programming Environments for Project-Based Teaching",
                    "text": "Visual programming is a method to specify a program in a two (or more) dimensional fashion [4], whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification [6]. \n\nThe Cognitive Dimensions introduced by Green and Petre [7] provide a framework for assessment of a programming system as follows: Closeness of mapping (closeness of programming structures to problem domain), Consistency (similar semantics are expressed in similar forms to allow inference), Error-proneness (possibility of making mistakes because of poor notational design), Hard mental operations (thought processes required to formulate an expression made difficult by the notation), Hidden Dependencies (important relationships between entities are not visible), Progressive evaluation (ability to execute the program partially, before all of it is put together), Role-expressiveness (purpose and role of each component is easily inferred), Secondary Other comparison criteria have been formulated by Howard [8]: Intended audience, Paradigm, Ease of use, Visual representation, Reusability, Data structures and types, Effective use of screen area, Effective use of colours, Clarity of graphical symbols, Interactive capabilities. \n\nNext we analyse a subset of visual languages used in educational setting for teaching robot programming.",
                    "score": 0.41045944639441756,
                    "section_title": "body",
                    "char_start_offset": 1,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 235
                        },
                        {
                            "start": 236,
                            "end": 403
                        },
                        {
                            "start": 404,
                            "end": 673
                        },
                        {
                            "start": 674,
                            "end": 953
                        },
                        {
                            "start": 956,
                            "end": 1988
                        },
                        {
                            "start": 1991,
                            "end": 2095
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 91,
                            "end": 94,
                            "matchedPaperCorpusId": "12628167"
                        },
                        {
                            "start": 949,
                            "end": 952,
                            "matchedPaperCorpusId": "220866115"
                        },
                        {
                            "start": 1011,
                            "end": 1014,
                            "matchedPaperCorpusId": "11750514"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9453125
                }
            ],
            "relevance_judgement": 0.9453125,
            "relevance_judgment_input_expanded": "# Title: Reflections on Using Robots and Visual Programming Environments for Project-Based Teaching\n# Venue: \n# Authors: Ignas Plauska, R. Lukas, Robertas Dama\u0161evi\u010dius\n## Abstract\nVisual programming languages provide a more natural approach to specifying software/hardware systems with complex behaviour such as robots. They are especially important in education because they do not require formal knowledge of programming language syntax and are attractive to users. We present an analysis and comparison of two visual programming environments, Lego NXT-G and Microsoft Visual Programming Language, based on the cognitive and usability requirements, evaluate their application in robotics-based Computer Science education, identify main problems and propose solutions for using visual programming languages in the Internet-of-Things domain. DOI: http://dx.doi.org/10.5755/j01.eee.20.1.6169\n## body\nVisual programming is a method to specify a program in a two (or more) dimensional fashion [4], whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification [6]. \n\nThe Cognitive Dimensions introduced by Green and Petre [7] provide a framework for assessment of a programming system as follows: Closeness of mapping (closeness of programming structures to problem domain), Consistency (similar semantics are expressed in similar forms to allow inference), Error-proneness (possibility of making mistakes because of poor notational design), Hard mental operations (thought processes required to formulate an expression made difficult by the notation), Hidden Dependencies (important relationships between entities are not visible), Progressive evaluation (ability to execute the program partially, before all of it is put together), Role-expressiveness (purpose and role of each component is easily inferred), Secondary Other comparison criteria have been formulated by Howard [8]: Intended audience, Paradigm, Ease of use, Visual representation, Reusability, Data structures and types, Effective use of screen area, Effective use of colours, Clarity of graphical symbols, Interactive capabilities. \n\nNext we analyse a subset of visual languages used in educational setting for teaching robot programming.",
            "reference_string": "[60941791 | Plauska et al. | 2014 | Citations: 8]"
        },
        {
            "title": "Development of application software without programming",
            "venue": "IOP Conference Series: Materials Science and Engineering",
            "year": 2019,
            "reference_count": 18,
            "citation_count": 0,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://doi.org/10.1088/1757-899x/477/1/012058",
                "status": "GOLD",
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.1088/1757-899X/477/1/012058?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.1088/1757-899X/477/1/012058, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "30811658",
                    "name": "J. Hamzabegovi\u0107"
                }
            ],
            "abstract": "End-user programming is an increasingly popular discipline of software engineering. In order to design a development environment that allows programming by non-programmers, it is desirable to understand their mental model. Most languages designed for end-users are based on visual interaction techniques such as programming with graphically presented rules and agents. Visual techniques allow direct manipulation in the environment in such a way that users grasp and pull visual components to match the application, as well as to select specific actions on certain events. Due to its omnipresence in operating systems, desktop and mobile applications, direct manipulation is an interaction technique which non-programmers are familiar with, and therefore highly desirable in application development environments by end-users or non-programmers. In this paper we present a review of the features and the functionality of the development environment that would allow the end-users logopedists to develop their therapeutic software without writing programming code and without any programming knowledge.",
            "corpus_id": 86787308,
            "sentences": [
                {
                    "corpus_id": "86787308",
                    "title": "Development of application software without programming",
                    "text": "In computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun. \n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages.",
                    "score": 0.4396506628741437,
                    "section_title": "Visual programming",
                    "char_start_offset": 13785,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 189
                        },
                        {
                            "start": 190,
                            "end": 345
                        },
                        {
                            "start": 346,
                            "end": 493
                        },
                        {
                            "start": 494,
                            "end": 798
                        },
                        {
                            "start": 801,
                            "end": 918
                        },
                        {
                            "start": 919,
                            "end": 1090
                        },
                        {
                            "start": 1091,
                            "end": 1125
                        },
                        {
                            "start": 1126,
                            "end": 1258
                        },
                        {
                            "start": 1259,
                            "end": 1408
                        },
                        {
                            "start": 1409,
                            "end": 1522
                        },
                        {
                            "start": 1523,
                            "end": 1615
                        }
                    ],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.94091796875
                }
            ],
            "relevance_judgement": 0.94091796875,
            "relevance_judgment_input_expanded": "# Title: Development of application software without programming\n# Venue: IOP Conference Series: Materials Science and Engineering\n# Authors: J. Hamzabegovi\u0107\n## Abstract\nEnd-user programming is an increasingly popular discipline of software engineering. In order to design a development environment that allows programming by non-programmers, it is desirable to understand their mental model. Most languages designed for end-users are based on visual interaction techniques such as programming with graphically presented rules and agents. Visual techniques allow direct manipulation in the environment in such a way that users grasp and pull visual components to match the application, as well as to select specific actions on certain events. Due to its omnipresence in operating systems, desktop and mobile applications, direct manipulation is an interaction technique which non-programmers are familiar with, and therefore highly desirable in application development environments by end-users or non-programmers. In this paper we present a review of the features and the functionality of the development environment that would allow the end-users logopedists to develop their therapeutic software without writing programming code and without any programming knowledge.\n## Visual programming\nIn computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun. \n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages.",
            "reference_string": "[86787308 | Hamzabegovic | 2019 | Citations: 0]"
        },
        {
            "title": "Design Space of Programming Tools on Mobile Touchscreen Devices",
            "venue": "arXiv.org",
            "year": 2017,
            "reference_count": 61,
            "citation_count": 0,
            "influential_citation_count": 0,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": null,
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://arxiv.org/abs/1708.05805, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2207677",
                    "name": "P. Sukumar"
                },
                {
                    "authorId": "1809549",
                    "name": "Ronald A. Metoyer"
                }
            ],
            "abstract": "While mobile touchscreen devices are ubiquitous and present opportunities for novel applications, they have seen little adoption as tools for computer programming. In this literature survey, we bring together the diverse research work on programming-related tasks supported by mobile touchscreen devices to explore the design space for applying them to programming situations. We used the Grounded theory approach to identify themes and classify previous work. We present these themes and how each paper contributes to the theme, and we outline the remaining challenges in and opportunities for using mobile touchscreen devices in programming applications.",
            "corpus_id": 19038821,
            "sentences": [
                {
                    "corpus_id": "19038821",
                    "title": "Design Space of Programming Tools on Mobile Touchscreen Devices",
                    "text": "Visual Programming (VP) languages enable programming by means of interacting with graphical elements, such as blocks, symbols, and arrows, rather than text. They are known, in general, to promote program comprehension by representing content in two-dimensions (text is considered onedimensional) and by emphasizing the underlying semantics rather than the syntax [40,53]. The contexts where VP is used mostly include learning environments (for both children and novice programmers) and specialized domains [40,41]. \n\nVP languages are a somewhat natural fit for use on touchscreen devices because they inherently leverage their interaction style and make minimal or no use of the keyboard [21,29]. Aspects of VP can be observed even in the syntaxenforcing implementations of TouchDevelop [58] and the syntax-directed keyboard extension [1]. Therefore, incorporating VP concepts in the implementations of even conventional programming languages on touchscreen devices can be useful in advancing their usability.",
                    "score": 0.3685763966626367,
                    "section_title": "VP concepts",
                    "char_start_offset": 21548,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 156
                        },
                        {
                            "start": 157,
                            "end": 371
                        },
                        {
                            "start": 372,
                            "end": 514
                        },
                        {
                            "start": 517,
                            "end": 696
                        },
                        {
                            "start": 697,
                            "end": 839
                        },
                        {
                            "start": 840,
                            "end": 1009
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 363,
                            "end": 367,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 506,
                            "end": 510,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 688,
                            "end": 692,
                            "matchedPaperCorpusId": "64789544"
                        },
                        {
                            "start": 787,
                            "end": 791,
                            "matchedPaperCorpusId": "14819227"
                        },
                        {
                            "start": 835,
                            "end": 838,
                            "matchedPaperCorpusId": "14326365"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.94091796875
                }
            ],
            "relevance_judgement": 0.94091796875,
            "relevance_judgment_input_expanded": "# Title: Design Space of Programming Tools on Mobile Touchscreen Devices\n# Venue: arXiv.org\n# Authors: P. Sukumar, Ronald A. Metoyer\n## Abstract\nWhile mobile touchscreen devices are ubiquitous and present opportunities for novel applications, they have seen little adoption as tools for computer programming. In this literature survey, we bring together the diverse research work on programming-related tasks supported by mobile touchscreen devices to explore the design space for applying them to programming situations. We used the Grounded theory approach to identify themes and classify previous work. We present these themes and how each paper contributes to the theme, and we outline the remaining challenges in and opportunities for using mobile touchscreen devices in programming applications.\n## VP concepts\nVisual Programming (VP) languages enable programming by means of interacting with graphical elements, such as blocks, symbols, and arrows, rather than text. They are known, in general, to promote program comprehension by representing content in two-dimensions (text is considered onedimensional) and by emphasizing the underlying semantics rather than the syntax [40,53]. The contexts where VP is used mostly include learning environments (for both children and novice programmers) and specialized domains [40,41]. \n\nVP languages are a somewhat natural fit for use on touchscreen devices because they inherently leverage their interaction style and make minimal or no use of the keyboard [21,29]. Aspects of VP can be observed even in the syntaxenforcing implementations of TouchDevelop [58] and the syntax-directed keyboard extension [1]. Therefore, incorporating VP concepts in the implementations of even conventional programming languages on touchscreen devices can be useful in advancing their usability.",
            "reference_string": "[19038821 | Sukumar et al. | 2017 | Citations: 0]"
        },
        {
            "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games",
            "venue": "Indian Journal of Science and Technology",
            "year": 2021,
            "reference_count": 32,
            "citation_count": 2,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://doi.org/10.17485/ijst/v14i17.431",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.17485/IJST/V14I17.431?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.17485/IJST/V14I17.431, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "9207310",
                    "name": "Kawther A. Aldhlan"
                },
                {
                    "authorId": "2836785",
                    "name": "Hamad Alreshidi"
                }
            ],
            "abstract": "Objectives: To employ the Scratch program for designing electronic educational games in raising technological awareness and visual programing skills to deal with electronic fatal games for first-grade secondary students in Hail- Saudi Arabia. Method: To achieve the goal, the researchers utilize the experimental methods by using one of the educational games programs (Scratch) to develop technological awareness of electronic games for first-grade secondary school students in Hail, Saudi Arabia. Whereas, the research problem was explained in the high number of suicides among adolescents due to the use of fatal games. Besides, an observation method was used where a scale of technological awareness values and a visual programming skills card were prepared to be acquired by students through the program. An exploratory sample of (38) students in the first grade of Ha\u2019il secondary school was selected. The experimental group consisted of a random sample of (48) students in the first grade of Al-Mas secondary school. The research tools were applied before and after the experimental group to determine the significance of the differences. Findings: The results clearly show that there is a statistically significant difference at the level of (0,01) between the average scores of the research sample students in the post and pre-measurement of the technological awareness scale in favor of the research group in the post-measurement and there is a statistically significant difference at the level of (0,01) between the average scores of the research sample students in the post and pre-measurement of the scorecard for the skill performance in visual programming for the research group in the post-measurement. Application: The research concludes with the importance of employing electronic educational games and the interaction between the values of technological awareness and visual programming to deal with electronic fatal games for first-grade secondary students in Ha\u2019il- Saudi Arabia. \nKeywords: Educational E-Games; Technological Awareness; Visual Programming; Fatal Games; Scratch program",
            "corpus_id": 236566925,
            "sentences": [
                {
                    "corpus_id": "236566925",
                    "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games",
                    "text": "Visual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI). \n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations. \n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts ...) and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer. \n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc. \n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions.",
                    "score": 0.3832814172581209,
                    "section_title": "Visual programming:",
                    "char_start_offset": 28669,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 149
                        },
                        {
                            "start": 150,
                            "end": 360
                        },
                        {
                            "start": 363,
                            "end": 692
                        },
                        {
                            "start": 695,
                            "end": 896
                        },
                        {
                            "start": 897,
                            "end": 978
                        },
                        {
                            "start": 979,
                            "end": 1158
                        },
                        {
                            "start": 1161,
                            "end": 1286
                        },
                        {
                            "start": 1287,
                            "end": 1305
                        },
                        {
                            "start": 1308,
                            "end": 1490
                        },
                        {
                            "start": 1491,
                            "end": 1701
                        }
                    ],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.939453125
                }
            ],
            "relevance_judgement": 0.939453125,
            "relevance_judgment_input_expanded": "# Title: Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games\n# Venue: Indian Journal of Science and Technology\n# Authors: Kawther A. Aldhlan, Hamad Alreshidi\n## Abstract\nObjectives: To employ the Scratch program for designing electronic educational games in raising technological awareness and visual programing skills to deal with electronic fatal games for first-grade secondary students in Hail- Saudi Arabia. Method: To achieve the goal, the researchers utilize the experimental methods by using one of the educational games programs (Scratch) to develop technological awareness of electronic games for first-grade secondary school students in Hail, Saudi Arabia. Whereas, the research problem was explained in the high number of suicides among adolescents due to the use of fatal games. Besides, an observation method was used where a scale of technological awareness values and a visual programming skills card were prepared to be acquired by students through the program. An exploratory sample of (38) students in the first grade of Ha\u2019il secondary school was selected. The experimental group consisted of a random sample of (48) students in the first grade of Al-Mas secondary school. The research tools were applied before and after the experimental group to determine the significance of the differences. Findings: The results clearly show that there is a statistically significant difference at the level of (0,01) between the average scores of the research sample students in the post and pre-measurement of the technological awareness scale in favor of the research group in the post-measurement and there is a statistically significant difference at the level of (0,01) between the average scores of the research sample students in the post and pre-measurement of the scorecard for the skill performance in visual programming for the research group in the post-measurement. Application: The research concludes with the importance of employing electronic educational games and the interaction between the values of technological awareness and visual programming to deal with electronic fatal games for first-grade secondary students in Ha\u2019il- Saudi Arabia. \nKeywords: Educational E-Games; Technological Awareness; Visual Programming; Fatal Games; Scratch program\n## Visual programming:\nVisual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI). \n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations. \n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts ...) and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer. \n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc. \n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions.",
            "reference_string": "[236566925 | Aldhlan et al. | 2021 | Citations: 2]"
        },
        {
            "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models",
            "venue": "International Conference on Human Factors in Computing Systems",
            "year": 2023,
            "reference_count": 51,
            "citation_count": 18,
            "influential_citation_count": 2,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://dl.acm.org/doi/pdf/10.1145/3613904.3641920",
                "status": "HYBRID",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://arxiv.org/abs/2310.08574, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2106412318",
                    "name": "David Chuan-En Lin"
                },
                {
                    "authorId": "3111790",
                    "name": "Nikolas Martelaro"
                }
            ],
            "abstract": "Recent advancements in AI foundation models have made it possible for them to be utilized off-the-shelf for creative tasks, including ideating design concepts or generating visual prototypes. However, integrating these models into the creative process can be challenging as they often exist as standalone applications tailored to specific tasks. To address this challenge, we introduce Jigsaw, a prototype system that employs puzzle pieces as metaphors to represent foundation models. Jigsaw allows designers to combine different foundation model capabilities across various modalities by assembling compatible puzzle pieces. To inform the design of Jigsaw, we interviewed ten designers and distilled design goals. In a user study, we showed that Jigsaw enhanced designers\u2019 understanding of available foundation model capabilities, provided guidance on combining capabilities across different modalities and tasks, and served as a canvas to support design exploration, prototyping, and documentation.",
            "corpus_id": 269747039,
            "sentences": [
                {
                    "corpus_id": "269747039",
                    "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models",
                    "text": "Visual programming interfaces (VPIs) have been extensively studied as tools to aid users in designing and implementing systems through graphical elements rather than text-based code [31].A key benefit of VPIs is their lower entry barrier for novice programmers [45].There are primarily two main paradigms for VPIs.The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph.Pioneering work in this area includes Prograph [17] and LabVIEW [27].The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together.Notable works in this area include Scratch [35] and Blockly [19].Many commercial creative applications have adopted VPIs, including game engines such as Unity [11], CAD tools such as Grasshopper [9], and multimedia development tools such as Max/MSP [12].\n\nVPI concepts have been applied to machine learning applications.For example, Teachable Machine [15] uses a visual interface to help students learn to train a machine learning model.ML Blocks [46] assists developers in training, evaluating, and exporting machine learning model architectures.Very recently, researchers in both academia and industry have worked on VPIs that support the creation of AI workflows through the combination of pre-trained models.Several works have investigated node-based interfaces for building Large Language Model (LLM) pipelines, including PromptChainer [48], FlowiseAI [2], and Langflow [3].Most closely related to our work are Rapsai by Du et al. [18] and ComfyUI [1].Both tools provide a node-based interface for machine learning researchers and enthusiasts to build multimedia machine learning pipelines.These tools are catered more toward users with at least some background knowledge in AI programming, giving users the flexibility to customize the tools through programming at the expense of exposing more technical elements to the user.\n\nOur work builds upon prior and concurrent VPI tools and research.However, we made several design choices for our tool to help better support non-technical designers (Table 1).First, our tool leverages a block-based VPI paradigm, which has been shown to be effective in supporting novice programming learners [35].",
                    "score": 0.3745341611864952,
                    "section_title": "Visual Programming Interfaces",
                    "char_start_offset": 6517,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 187
                        },
                        {
                            "start": 187,
                            "end": 266
                        },
                        {
                            "start": 266,
                            "end": 314
                        },
                        {
                            "start": 314,
                            "end": 455
                        },
                        {
                            "start": 455,
                            "end": 524
                        },
                        {
                            "start": 524,
                            "end": 666
                        },
                        {
                            "start": 666,
                            "end": 731
                        },
                        {
                            "start": 731,
                            "end": 920
                        },
                        {
                            "start": 922,
                            "end": 986
                        },
                        {
                            "start": 986,
                            "end": 1103
                        },
                        {
                            "start": 1103,
                            "end": 1213
                        },
                        {
                            "start": 1213,
                            "end": 1378
                        },
                        {
                            "start": 1378,
                            "end": 1545
                        },
                        {
                            "start": 1545,
                            "end": 1623
                        },
                        {
                            "start": 1623,
                            "end": 1761
                        },
                        {
                            "start": 1761,
                            "end": 1997
                        },
                        {
                            "start": 1999,
                            "end": 2064
                        },
                        {
                            "start": 2064,
                            "end": 2174
                        },
                        {
                            "start": 2174,
                            "end": 2312
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 182,
                            "end": 186,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 261,
                            "end": 265,
                            "matchedPaperCorpusId": "18983760"
                        },
                        {
                            "start": 502,
                            "end": 506,
                            "matchedPaperCorpusId": "9693598"
                        },
                        {
                            "start": 1017,
                            "end": 1021,
                            "matchedPaperCorpusId": "218482766"
                        },
                        {
                            "start": 1113,
                            "end": 1117,
                            "matchedPaperCorpusId": "251662411"
                        },
                        {
                            "start": 1507,
                            "end": 1511,
                            "matchedPaperCorpusId": "247447133"
                        },
                        {
                            "start": 1602,
                            "end": 1606,
                            "matchedPaperCorpusId": "258216977"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9384765625
                }
            ],
            "relevance_judgement": 0.9384765625,
            "relevance_judgment_input_expanded": "# Title: Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models\n# Venue: International Conference on Human Factors in Computing Systems\n# Authors: David Chuan-En Lin, Nikolas Martelaro\n## Abstract\nRecent advancements in AI foundation models have made it possible for them to be utilized off-the-shelf for creative tasks, including ideating design concepts or generating visual prototypes. However, integrating these models into the creative process can be challenging as they often exist as standalone applications tailored to specific tasks. To address this challenge, we introduce Jigsaw, a prototype system that employs puzzle pieces as metaphors to represent foundation models. Jigsaw allows designers to combine different foundation model capabilities across various modalities by assembling compatible puzzle pieces. To inform the design of Jigsaw, we interviewed ten designers and distilled design goals. In a user study, we showed that Jigsaw enhanced designers\u2019 understanding of available foundation model capabilities, provided guidance on combining capabilities across different modalities and tasks, and served as a canvas to support design exploration, prototyping, and documentation.\n## Visual Programming Interfaces\nVisual programming interfaces (VPIs) have been extensively studied as tools to aid users in designing and implementing systems through graphical elements rather than text-based code [31].A key benefit of VPIs is their lower entry barrier for novice programmers [45].There are primarily two main paradigms for VPIs.The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph.Pioneering work in this area includes Prograph [17] and LabVIEW [27].The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together.Notable works in this area include Scratch [35] and Blockly [19].Many commercial creative applications have adopted VPIs, including game engines such as Unity [11], CAD tools such as Grasshopper [9], and multimedia development tools such as Max/MSP [12].\n\nVPI concepts have been applied to machine learning applications.For example, Teachable Machine [15] uses a visual interface to help students learn to train a machine learning model.ML Blocks [46] assists developers in training, evaluating, and exporting machine learning model architectures.Very recently, researchers in both academia and industry have worked on VPIs that support the creation of AI workflows through the combination of pre-trained models.Several works have investigated node-based interfaces for building Large Language Model (LLM) pipelines, including PromptChainer [48], FlowiseAI [2], and Langflow [3].Most closely related to our work are Rapsai by Du et al. [18] and ComfyUI [1].Both tools provide a node-based interface for machine learning researchers and enthusiasts to build multimedia machine learning pipelines.These tools are catered more toward users with at least some background knowledge in AI programming, giving users the flexibility to customize the tools through programming at the expense of exposing more technical elements to the user.\n\nOur work builds upon prior and concurrent VPI tools and research.However, we made several design choices for our tool to help better support non-technical designers (Table 1).First, our tool leverages a block-based VPI paradigm, which has been shown to be effective in supporting novice programming learners [35].",
            "reference_string": "[269747039 | Lin et al. | 2023 | Citations: 18]"
        },
        {
            "title": "Application of Visual Programming in Program Design Course",
            "venue": "DEStech Transactions on Social Science Education and Human Science",
            "year": 2019,
            "reference_count": 2,
            "citation_count": 1,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://doi.org/10.12783/dtssehs/eiem2018/26901",
                "status": "GOLD",
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.12783/DTSSEHS/EIEM2018/26901?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.12783/DTSSEHS/EIEM2018/26901, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2114140303",
                    "name": "Xiaojun Bai"
                },
                {
                    "authorId": "2801842",
                    "name": "Baili Liu"
                }
            ],
            "abstract": "According to the problems in teaching of computer programming course, brought visual programming tools to assist teaching, introduced the advantages of visual programming, and made use of it in algorithm design, coding and modular design. Practice shows that by introducing of visual programming, it helps the students to improve their interesting, and develop the ability of logic thinking as well as programming. Introduction Computer programming is a basic course for college students of science and engineering majors, it aims to guide students to understand the ideas and methods of programming, and to master a language to solve problems by programming [1] . In recent years, with the propose and development of computational thinking [2] , it is becoming a trend to solve problems in various fields by means of computational methods and tools, thus it becomes more and more important of this course. But in teaching practice, it is quite difficult to reach the objects of this course. Firstly, it needs great efforts on coding and debugging of programs, but Students are often afraid of tedious syntax of the language, and finally lost confidence for programming when meet program errors again and again. Secondly, the procedure of programming is indeed a procedure of logical thinking, but for many fresh students, the ability of logical thinking is still weak, there is some difficulty for them to understand the logic of programs, so we need a gradual training method for logical thinking. Thirdly, the flow diagram that been used for expressing the algorithm, but for it cannot be executed, there has no way to verify the result of the algorithm, we need stronger tools to express algorithms and verify them. In recent years, a lot of visual programming tools came into being, for example, Scratch [3] , Blockly [4] , Snap [5] and so on. By introducing of visual programming tools in computer programming course, the problems mentioned above can be solved effectively. First, for that the core of computational thinking is the ideas rather than the language syntax, by using of visual tools will simplify programming, thus students will focus on the program logic rather than the language syntax, it will help to overcome the fear of programming and cultivate there interesting. Second, visual program help to express the logic of algorithm clearly, thus it helps to train logical thinking through visual programming, lastly, by modeling with visual programming tools, it is easy to execute the algorithm immediately, thus convenient to verify the algorithm. The Usage of Visual Programming in Teaching Practice The author have practiced visual programming in three stage. First for algorithm design, made use of visual program to take place of flow diagram, intuitively introduce the logic of algorithms and verify them immediately. Second for coding, combined with the syntax and control flow of a programming language, transform the visual program into codes of the corresponding language. Third for modular design, create program modules by means of customized block, thus understand the ideas of decomposition and modular design for complex system. Next we will illustrate on the three topics. Make Use of Visual Programming in Algorithm Design Algorithm is the soul of program, and also be the key for developing computational Thinking and logical thinking. For American students, they usually begun visual programming in primary and secondary school, so that the logical thinking had been developed, but for Chinese students, they always lacking this ability. At the beginning of the course, we propose to use the simplest and most",
            "corpus_id": 68068900,
            "sentences": [
                {
                    "corpus_id": "68068900",
                    "title": "Application of Visual Programming in Program Design Course",
                    "text": "According to the problems in teaching of computer programming course, brought visual programming tools to assist teaching, introduced the advantages of visual programming, and made use of it in algorithm design, coding and modular design. Practice shows that by introducing of visual programming, it helps the students to improve their interesting, and develop the ability of logic thinking as well as programming. Introduction Computer programming is a basic course for college students of science and engineering majors, it aims to guide students to understand the ideas and methods of programming, and to master a language to solve problems by programming [1] . In recent years, with the propose and development of computational thinking [2] , it is becoming a trend to solve problems in various fields by means of computational methods and tools, thus it becomes more and more important of this course. But in teaching practice, it is quite difficult to reach the objects of this course. Firstly, it needs great efforts on coding and debugging of programs, but Students are often afraid of tedious syntax of the language, and finally lost confidence for programming when meet program errors again and again. Secondly, the procedure of programming is indeed a procedure of logical thinking, but for many fresh students, the ability of logical thinking is still weak, there is some difficulty for them to understand the logic of programs, so we need a gradual training method for logical thinking. Thirdly, the flow diagram that been used for expressing the algorithm, but for it cannot be executed, there has no way to verify the result of the algorithm, we need stronger tools to express algorithms and verify them. In recent years, a lot of visual programming tools came into being, for example, Scratch [3] , Blockly [4] , Snap [5] and so on. By introducing of visual programming tools in computer programming course, the problems mentioned above can be solved effectively. First, for that the core of computational thinking is the ideas rather than the language syntax, by using of visual tools will simplify programming, thus students will focus on the program logic rather than the language syntax, it will help to overcome the fear of programming and cultivate there interesting. Second, visual program help to express the logic of algorithm clearly, thus it helps to train logical thinking through visual programming, lastly, by modeling with visual programming tools, it is easy to execute the algorithm immediately, thus convenient to verify the algorithm.",
                    "score": 0.4024982055363106,
                    "section_title": "abstract",
                    "char_start_offset": 0,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9365234375
                }
            ],
            "relevance_judgement": 0.9365234375,
            "relevance_judgment_input_expanded": "# Title: Application of Visual Programming in Program Design Course\n# Venue: DEStech Transactions on Social Science Education and Human Science\n# Authors: Xiaojun Bai, Baili Liu\n## Abstract\nAccording to the problems in teaching of computer programming course, brought visual programming tools to assist teaching, introduced the advantages of visual programming, and made use of it in algorithm design, coding and modular design. Practice shows that by introducing of visual programming, it helps the students to improve their interesting, and develop the ability of logic thinking as well as programming. Introduction Computer programming is a basic course for college students of science and engineering majors, it aims to guide students to understand the ideas and methods of programming, and to master a language to solve problems by programming [1] . In recent years, with the propose and development of computational thinking [2] , it is becoming a trend to solve problems in various fields by means of computational methods and tools, thus it becomes more and more important of this course. But in teaching practice, it is quite difficult to reach the objects of this course. Firstly, it needs great efforts on coding and debugging of programs, but Students are often afraid of tedious syntax of the language, and finally lost confidence for programming when meet program errors again and again. Secondly, the procedure of programming is indeed a procedure of logical thinking, but for many fresh students, the ability of logical thinking is still weak, there is some difficulty for them to understand the logic of programs, so we need a gradual training method for logical thinking. Thirdly, the flow diagram that been used for expressing the algorithm, but for it cannot be executed, there has no way to verify the result of the algorithm, we need stronger tools to express algorithms and verify them. In recent years, a lot of visual programming tools came into being, for example, Scratch [3] , Blockly [4] , Snap [5] and so on. By introducing of visual programming tools in computer programming course, the problems mentioned above can be solved effectively. First, for that the core of computational thinking is the ideas rather than the language syntax, by using of visual tools will simplify programming, thus students will focus on the program logic rather than the language syntax, it will help to overcome the fear of programming and cultivate there interesting. Second, visual program help to express the logic of algorithm clearly, thus it helps to train logical thinking through visual programming, lastly, by modeling with visual programming tools, it is easy to execute the algorithm immediately, thus convenient to verify the algorithm. The Usage of Visual Programming in Teaching Practice The author have practiced visual programming in three stage. First for algorithm design, made use of visual program to take place of flow diagram, intuitively introduce the logic of algorithms and verify them immediately. Second for coding, combined with the syntax and control flow of a programming language, transform the visual program into codes of the corresponding language. Third for modular design, create program modules by means of customized block, thus understand the ideas of decomposition and modular design for complex system. Next we will illustrate on the three topics. Make Use of Visual Programming in Algorithm Design Algorithm is the soul of program, and also be the key for developing computational Thinking and logical thinking. For American students, they usually begun visual programming in primary and secondary school, so that the logical thinking had been developed, but for Chinese students, they always lacking this ability. At the beginning of the course, we propose to use the simplest and most\n",
            "reference_string": "[68068900 | Bai et al. | 2019 | Citations: 1]"
        },
        {
            "title": "Automated code development based on genetic programming in graphical programming language: A pilot study",
            "venue": "PLoS ONE",
            "year": 2024,
            "reference_count": 31,
            "citation_count": 1,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://journals.plos.org/plosone/article/file?id=10.1371/journal.pone.0299456&type=printable",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://pmc.ncbi.nlm.nih.gov/articles/PMC10919872, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "100971028",
                    "name": "Pavel Kodytek"
                },
                {
                    "authorId": "1910708525",
                    "name": "Alexandra Bodzas"
                },
                {
                    "authorId": "2290253497",
                    "name": "Jan Zidek"
                }
            ],
            "abstract": "Continual technological advances associated with the recent automation revolution have tremendously increased the impact of computer technology in the industry. Software development and testing are time-consuming processes, and the current market faces a lack of specialized experts. Introducing automation to this field could, therefore, improve software engineers\u2019 common workflow and decrease the time to market. Even though many code-generating algorithms have been proposed in textual-based programming languages, to the best of the authors\u2019 knowledge, none of the studies deals with the implementation of such algorithms in graphical programming environments, especially LabVIEW. Due to this fact, the main goal of this study is to conduct a proof-of-concept for a requirement-based automated code-developing system within the graphical programming environment LabVIEW. The proposed framework was evaluated on four basic benchmark problems, encompassing a string model, a numeric model, a boolean model and a mixed-type problem model, which covers fundamental programming scenarios. In all tested cases, the algorithm demonstrated an ability to create satisfying functional and errorless solutions that met all user-defined requirements. Even though the generated programs were burdened with redundant objects and were much more complex compared to programmer-developed codes, this fact has no effect on the code\u2019s execution speed or accuracy. Based on the achieved results, we can conclude that this pilot study not only proved the feasibility and viability of the proposed concept, but also showed promising results in solving linear and binary programming tasks. Furthermore, the results revealed that with further research, this poorly explored field could become a powerful tool not only for application developers but also for non-programmers and low-skilled users.",
            "corpus_id": 268272915,
            "sentences": [
                {
                    "corpus_id": "268272915",
                    "title": "Automated code development based on genetic programming in graphical programming language: A pilot study",
                    "text": "Graphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements. Since graphical programming does not require a strong understanding of the language and its syntax, these languages are often designed to make programming more intuitive and accessible to non-programmers. \n\nAutomated code development in LabVIEW or any other graphical programming environment is inspired by reversing a standard software development model. This engineering design process can be perceived as a methodical series of steps that allow programmers to create functional products and processes [1]. This process can be highly repetitive, and certain stages often require multiple iterations before proceeding to the next step. Since requirements-based testing and validation, also known as test-driven development, is a common and essential part of software development [2] and a standard procedure for programmers who must verify the code's functionality, by reversing this process, we can automatically generate code instead of developing programs or unit testing frameworks. In this reverse scenario, we can automatically create programs based on the predefined input requirements, and by backpropagating the input-output differences, we can modify the generated code until all requirements are satisfied. By transforming this task into a fully automated process, we can therefore fundamentally reshape the development principles for basic programs, and instead of employing human experts for code development and test report validation, we can utilize computers to generate programs and evaluate test reports. \n\nAutomated code generation in textual-based environments has been used in the software industry for decades [3], and especially in recent years, many novel program generation approaches have been proposed and evaluated on common benchmark problems [4]. These approaches to code generation employ various techniques, including artificial intelligence, machine learning, or genetic evolution methods, to repair or generate efficient and error-free codes. A significant research direction in this field involves the use of machine learning, especially neural network models.",
                    "score": 0.3488628985507747,
                    "section_title": "Introduction",
                    "char_start_offset": 15,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 227
                        },
                        {
                            "start": 228,
                            "end": 507
                        },
                        {
                            "start": 508,
                            "end": 712
                        },
                        {
                            "start": 715,
                            "end": 863
                        },
                        {
                            "start": 864,
                            "end": 1016
                        },
                        {
                            "start": 1017,
                            "end": 1144
                        },
                        {
                            "start": 1145,
                            "end": 1495
                        },
                        {
                            "start": 1496,
                            "end": 1726
                        },
                        {
                            "start": 1727,
                            "end": 2031
                        },
                        {
                            "start": 2034,
                            "end": 2285
                        },
                        {
                            "start": 2286,
                            "end": 2485
                        },
                        {
                            "start": 2486,
                            "end": 2604
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 1012,
                            "end": 1015,
                            "matchedPaperCorpusId": "225556207"
                        },
                        {
                            "start": 1288,
                            "end": 1291,
                            "matchedPaperCorpusId": "220647375"
                        },
                        {
                            "start": 2141,
                            "end": 2144,
                            "matchedPaperCorpusId": "3111613"
                        },
                        {
                            "start": 2281,
                            "end": 2284,
                            "matchedPaperCorpusId": "257038678"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.93603515625
                }
            ],
            "relevance_judgement": 0.93603515625,
            "relevance_judgment_input_expanded": "# Title: Automated code development based on genetic programming in graphical programming language: A pilot study\n# Venue: PLoS ONE\n# Authors: Pavel Kodytek, Alexandra Bodzas, Jan Zidek\n## Abstract\nContinual technological advances associated with the recent automation revolution have tremendously increased the impact of computer technology in the industry. Software development and testing are time-consuming processes, and the current market faces a lack of specialized experts. Introducing automation to this field could, therefore, improve software engineers\u2019 common workflow and decrease the time to market. Even though many code-generating algorithms have been proposed in textual-based programming languages, to the best of the authors\u2019 knowledge, none of the studies deals with the implementation of such algorithms in graphical programming environments, especially LabVIEW. Due to this fact, the main goal of this study is to conduct a proof-of-concept for a requirement-based automated code-developing system within the graphical programming environment LabVIEW. The proposed framework was evaluated on four basic benchmark problems, encompassing a string model, a numeric model, a boolean model and a mixed-type problem model, which covers fundamental programming scenarios. In all tested cases, the algorithm demonstrated an ability to create satisfying functional and errorless solutions that met all user-defined requirements. Even though the generated programs were burdened with redundant objects and were much more complex compared to programmer-developed codes, this fact has no effect on the code\u2019s execution speed or accuracy. Based on the achieved results, we can conclude that this pilot study not only proved the feasibility and viability of the proposed concept, but also showed promising results in solving linear and binary programming tasks. Furthermore, the results revealed that with further research, this poorly explored field could become a powerful tool not only for application developers but also for non-programmers and low-skilled users.\n## Introduction\nGraphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements. Since graphical programming does not require a strong understanding of the language and its syntax, these languages are often designed to make programming more intuitive and accessible to non-programmers. \n\nAutomated code development in LabVIEW or any other graphical programming environment is inspired by reversing a standard software development model. This engineering design process can be perceived as a methodical series of steps that allow programmers to create functional products and processes [1]. This process can be highly repetitive, and certain stages often require multiple iterations before proceeding to the next step. Since requirements-based testing and validation, also known as test-driven development, is a common and essential part of software development [2] and a standard procedure for programmers who must verify the code's functionality, by reversing this process, we can automatically generate code instead of developing programs or unit testing frameworks. In this reverse scenario, we can automatically create programs based on the predefined input requirements, and by backpropagating the input-output differences, we can modify the generated code until all requirements are satisfied. By transforming this task into a fully automated process, we can therefore fundamentally reshape the development principles for basic programs, and instead of employing human experts for code development and test report validation, we can utilize computers to generate programs and evaluate test reports. \n\nAutomated code generation in textual-based environments has been used in the software industry for decades [3], and especially in recent years, many novel program generation approaches have been proposed and evaluated on common benchmark problems [4]. These approaches to code generation employ various techniques, including artificial intelligence, machine learning, or genetic evolution methods, to repair or generate efficient and error-free codes. A significant research direction in this field involves the use of machine learning, especially neural network models.",
            "reference_string": "[268272915 | Kodytek et al. | 2024 | Citations: 1]"
        },
        {
            "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications",
            "venue": "arXiv.org",
            "year": 2020,
            "reference_count": 19,
            "citation_count": 5,
            "influential_citation_count": 0,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": null,
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://arxiv.org/abs/2011.13706, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2069724711",
                    "name": "Mustafa Karaca"
                },
                {
                    "authorId": "2272032",
                    "name": "U\u011fur Yayan"
                }
            ],
            "abstract": "Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments. In this study, Robot Operating System (ROS) compatible web based visual programming system has been developed for evarobot. ROS provides libraries and tools to help software developers create robot applications. It provides hardware abstraction, device drivers, libraries, visualizers, message-passing, package management, and more. Blockly has been used as VPL for the study and to generate / use blocks (commucation, sensing etc.). Some applications were generated like teleoperation, SLAM and wander etc. In this system, communication between server and client is supported by rosbridge package. Web page connected to ROS which runs on server using roslibjs library. Rosbridge provides a JSON API to ROS functionality for non-ROS programs.",
            "corpus_id": 227209010,
            "sentences": [
                {
                    "corpus_id": "227209010",
                    "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications",
                    "text": "People have to learn several information in the field of robotics because of growing technological productivity and developments in this area. We observe robotics works increasing in the market from day to day. Robots can do jobs like a human or they can do more. Nowadays robots have been playing an active role in many sectors therefore, robotic works are increasing day by day because of there is a need for qualified personnel in these sectors. Very few people know about robot programming, algorithm logic and follow projects on the subject. Learning programming from books or articles is very difficult and challenging. It can be done easier by visual perception. Therefore, roboticbased training becomes important. Robotics education and work in schools with supervisorship of assistant teacher is very interesting and extremely effective learning method for students. Visual Programming Languages (VPLs) are very good options for people who have no experience with text-based programming. \n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers.",
                    "score": 0.39230231840814234,
                    "section_title": "Introduction",
                    "char_start_offset": 15,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 142
                        },
                        {
                            "start": 143,
                            "end": 210
                        },
                        {
                            "start": 211,
                            "end": 263
                        },
                        {
                            "start": 264,
                            "end": 448
                        },
                        {
                            "start": 449,
                            "end": 546
                        },
                        {
                            "start": 547,
                            "end": 625
                        },
                        {
                            "start": 626,
                            "end": 669
                        },
                        {
                            "start": 670,
                            "end": 721
                        },
                        {
                            "start": 722,
                            "end": 875
                        },
                        {
                            "start": 876,
                            "end": 996
                        },
                        {
                            "start": 999,
                            "end": 1240
                        },
                        {
                            "start": 1241,
                            "end": 1396
                        },
                        {
                            "start": 1397,
                            "end": 1639
                        },
                        {
                            "start": 1640,
                            "end": 1705
                        },
                        {
                            "start": 1706,
                            "end": 1802
                        },
                        {
                            "start": 1803,
                            "end": 1921
                        },
                        {
                            "start": 1922,
                            "end": 2021
                        },
                        {
                            "start": 2022,
                            "end": 2073
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 1236,
                            "end": 1239,
                            "matchedPaperCorpusId": "8272806"
                        },
                        {
                            "start": 1468,
                            "end": 1471,
                            "matchedPaperCorpusId": "62509261"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.93505859375
                },
                {
                    "corpus_id": "227209010",
                    "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications",
                    "text": "Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments. In this study, Robot Operating System (ROS) compatible web based visual programming system has been developed for evarobot. ROS provides libraries and tools to help software developers create robot applications. It provides hardware abstraction, device drivers, libraries, visualizers, message-passing, package management, and more. Blockly has been used as VPL for the study and to generate / use blocks (commucation, sensing etc.). Some applications were generated like teleoperation, SLAM and wander etc. In this system, communication between server and client is supported by rosbridge package. Web page connected to ROS which runs on server using roslibjs library. Rosbridge provides a JSON API to ROS functionality for non-ROS programs.",
                    "score": 0.35331484944901953,
                    "section_title": "abstract",
                    "char_start_offset": 0,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9306640625
                }
            ],
            "relevance_judgement": 0.93505859375,
            "relevance_judgment_input_expanded": "# Title: ROS Based Visual Programming Tool for Mobile Robot Education and Applications\n# Venue: arXiv.org\n# Authors: Mustafa Karaca, U\u011fur Yayan\n## Abstract\nVisual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments. In this study, Robot Operating System (ROS) compatible web based visual programming system has been developed for evarobot. ROS provides libraries and tools to help software developers create robot applications. It provides hardware abstraction, device drivers, libraries, visualizers, message-passing, package management, and more. Blockly has been used as VPL for the study and to generate / use blocks (commucation, sensing etc.). Some applications were generated like teleoperation, SLAM and wander etc. In this system, communication between server and client is supported by rosbridge package. Web page connected to ROS which runs on server using roslibjs library. Rosbridge provides a JSON API to ROS functionality for non-ROS programs.\n## Introduction\nPeople have to learn several information in the field of robotics because of growing technological productivity and developments in this area. We observe robotics works increasing in the market from day to day. Robots can do jobs like a human or they can do more. Nowadays robots have been playing an active role in many sectors therefore, robotic works are increasing day by day because of there is a need for qualified personnel in these sectors. Very few people know about robot programming, algorithm logic and follow projects on the subject. Learning programming from books or articles is very difficult and challenging. It can be done easier by visual perception. Therefore, roboticbased training becomes important. Robotics education and work in schools with supervisorship of assistant teacher is very interesting and extremely effective learning method for students. Visual Programming Languages (VPLs) are very good options for people who have no experience with text-based programming. \n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers.",
            "reference_string": "[227209010 | Karaca et al. | 2020 | Citations: 5]"
        },
        {
            "title": "A Comprehensive Survey and Analysis of Diverse Visual Programming Languages",
            "venue": "VFAST Transactions on Software Engineering",
            "year": 2022,
            "reference_count": 32,
            "citation_count": 4,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://vfast.org/journals/index.php/VTSE/article/download/1009/912",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.21015/vtse.v10i2.1009?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.21015/vtse.v10i2.1009, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2279473623",
                    "name": "Muhammad Idrees"
                },
                {
                    "authorId": "2279479809",
                    "name": "Faisal Aslam"
                }
            ],
            "abstract": "Visual Programming Languages (VPLs) provide ease of programming by reducing the need of manually typing code for programming. Although the existence of VPLs is almost as old as textual programming languages but they have not become a mainstream technology for developing professional programs. However, the recent introduction of web-based VPLs, such as Scratch and Snap, has reinvigorated the usefulness of VPLs. Today, there exist dozens of VPLs having diverse characteristics. However, a comprehensive analysis of these diverse visual programming languages has never been conducted. Such an analysis is required for identifying the strengths and weaknesses of VPLs, as well as to choose the most suitable VPS for the task in hand. To that end, this study has performed a comprehensive search of a large number of 40 VPLs and analyzed and compared these VPLS based on 14 characteristics.",
            "corpus_id": 266989835,
            "sentences": [
                {
                    "corpus_id": "266989835",
                    "title": "A Comprehensive Survey and Analysis of Diverse Visual Programming Languages",
                    "text": "Visual Programming Languages (VPLs) provide ease of programming by reducing the need of manually typing code for programming. Although the existence of VPLs is almost as old as textual programming languages but they have not become a mainstream technology for developing professional programs. However, the recent introduction of web-based VPLs, such as Scratch and Snap, has reinvigorated the usefulness of VPLs. Today, there exist dozens of VPLs having diverse characteristics. However, a comprehensive analysis of these diverse visual programming languages has never been conducted. Such an analysis is required for identifying the strengths and weaknesses of VPLs, as well as to choose the most suitable VPS for the task in hand. To that end, this study has performed a comprehensive search of a large number of 40 VPLs and analyzed and compared these VPLS based on 14 characteristics.",
                    "score": 0.3475544306000783,
                    "section_title": "abstract",
                    "char_start_offset": 0,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.93505859375
                }
            ],
            "relevance_judgement": 0.93505859375,
            "relevance_judgment_input_expanded": "# Title: A Comprehensive Survey and Analysis of Diverse Visual Programming Languages\n# Venue: VFAST Transactions on Software Engineering\n# Authors: Muhammad Idrees, Faisal Aslam\n## Abstract\nVisual Programming Languages (VPLs) provide ease of programming by reducing the need of manually typing code for programming. Although the existence of VPLs is almost as old as textual programming languages but they have not become a mainstream technology for developing professional programs. However, the recent introduction of web-based VPLs, such as Scratch and Snap, has reinvigorated the usefulness of VPLs. Today, there exist dozens of VPLs having diverse characteristics. However, a comprehensive analysis of these diverse visual programming languages has never been conducted. Such an analysis is required for identifying the strengths and weaknesses of VPLs, as well as to choose the most suitable VPS for the task in hand. To that end, this study has performed a comprehensive search of a large number of 40 VPLs and analyzed and compared these VPLS based on 14 characteristics.\n",
            "reference_string": "[266989835 | Idrees et al. | 2022 | Citations: 4]"
        },
        {
            "title": "Educational Robotics in Primary School: Measuring the Development of Computational Thinking Skills with the Bebras Tasks",
            "venue": "Informatics",
            "year": 2019,
            "reference_count": 37,
            "citation_count": 64,
            "influential_citation_count": 2,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://www.mdpi.com/2227-9709/6/4/43/pdf?version=1571563291",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.3390/informatics6040043?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.3390/informatics6040043, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "1985775",
                    "name": "G. Chiazzese"
                },
                {
                    "authorId": "33520169",
                    "name": "M. Arrigo"
                },
                {
                    "authorId": "3344445",
                    "name": "Antonella Chifari"
                },
                {
                    "authorId": "1770175",
                    "name": "Violetta Lonati"
                },
                {
                    "authorId": "26632478",
                    "name": "Crispino Tosto"
                }
            ],
            "abstract": "Research has shown that educational robotics can be an effective tool to increase students\u2019 acquisition of knowledge in the subjects of science, technology, engineering, and mathematics and promote, at the same time, a progression in the development of computational thinking (CT) skills in K\u201312 (kindergarten to 12th grade) education. Within this research field, the present study first sought to assess the effect of a robotics laboratory on the acquisition of CT-related skills in primary school children. The study also aimed to compare the magnitude of the effect of the laboratory across third- and fourth-grade students. For the purpose of the study, a quasi-experimental post-test-only design was adopted, and a group of 51 students, from third- and fourth-grade classrooms, participating in the robotics laboratories, were compared to a control group of 32 students from classrooms of the same grades. A set of Bebras tasks was selected as an overall measure of CT skills and was administered to children in both the intervention and control groups. Overall, the results showed that programming robotics artefacts may exert a positive impact on students\u2019 learning of computational thinking skills. Moreover, the effect of the intervention was found to be greater among third-grade children.",
            "corpus_id": 208615635,
            "sentences": [
                {
                    "corpus_id": "208615635",
                    "title": "Educational Robotics in Primary School: Measuring the Development of Computational Thinking Skills with the Bebras Tasks",
                    "text": "Block programming is based on drag and drop of consecutive visual tiles on the editing area to compose different instructions; first of all, it facilitates the learning of programming skills because of a reduction in the cognitive load potentially required for textual programming [8,9]. Moreover, Kelleher, and Pausch [10] recognize further advantages in the use of visual programming for novice learners. Indeed, the visual block-based instruction is built using icons that facilitate students' recognition of its function, such as commands, conditions, and loops. Accordingly, visual programming allows students to focus their attention more on the logic and structures involved in programming tasks than in challenges related to writing code. Specifically, Lego \u00ae Education WeDo [11] is a programmable building system that was originally designed to foster children's learning in STEM disciplines and early development of computational thinking skills, through the implementation of a robotics artefact able to perform programmed actions. \n\nComputational thinking (CT) was first conceptualized as a set of cognitive processes that allow people to solve problems, design systems, and model human behavior by relying on concepts pertaining to computer science [12]. Later, the author [13] specified that CT refers to those thought processes whereby solutions to problems are designed to be implemented by an information-processing agent. In order to transfer the theoretical definition of CT to teaching and learning issues in K-12 education, the International Society for Technology in Education (ISTE) and the Computer Science Teachers Association (CSTA) have recently proposed an operational definition that can be profitably applied for educational purposes [14]. According to this definition, CT is basically a problem-solving process involving several cognitive skills, such as logically organizing and analyzing data, creating abstract representations of data through the use of models or simulations, designing solutions in terms of ordered steps (algorithmic thinking), and, most importantly, generalizing the acquired problem-solving skills to a wide range of problematic situations.",
                    "score": 0.34855273228194605,
                    "section_title": "Introduction",
                    "char_start_offset": 2313,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 287
                        },
                        {
                            "start": 288,
                            "end": 406
                        },
                        {
                            "start": 407,
                            "end": 566
                        },
                        {
                            "start": 567,
                            "end": 746
                        },
                        {
                            "start": 747,
                            "end": 1042
                        },
                        {
                            "start": 1045,
                            "end": 1267
                        },
                        {
                            "start": 1268,
                            "end": 1439
                        },
                        {
                            "start": 1440,
                            "end": 1769
                        },
                        {
                            "start": 1770,
                            "end": 2195
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 281,
                            "end": 284,
                            "matchedPaperCorpusId": "207226901"
                        },
                        {
                            "start": 284,
                            "end": 286,
                            "matchedPaperCorpusId": "10976181"
                        },
                        {
                            "start": 319,
                            "end": 323,
                            "matchedPaperCorpusId": "9916677"
                        },
                        {
                            "start": 1262,
                            "end": 1266,
                            "matchedPaperCorpusId": "41391768"
                        },
                        {
                            "start": 1286,
                            "end": 1290,
                            "matchedPaperCorpusId": "41391768"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9326171875
                }
            ],
            "relevance_judgement": 0.9326171875,
            "relevance_judgment_input_expanded": "# Title: Educational Robotics in Primary School: Measuring the Development of Computational Thinking Skills with the Bebras Tasks\n# Venue: Informatics\n# Authors: G. Chiazzese, M. Arrigo, Antonella Chifari, Violetta Lonati, Crispino Tosto\n## Abstract\nResearch has shown that educational robotics can be an effective tool to increase students\u2019 acquisition of knowledge in the subjects of science, technology, engineering, and mathematics and promote, at the same time, a progression in the development of computational thinking (CT) skills in K\u201312 (kindergarten to 12th grade) education. Within this research field, the present study first sought to assess the effect of a robotics laboratory on the acquisition of CT-related skills in primary school children. The study also aimed to compare the magnitude of the effect of the laboratory across third- and fourth-grade students. For the purpose of the study, a quasi-experimental post-test-only design was adopted, and a group of 51 students, from third- and fourth-grade classrooms, participating in the robotics laboratories, were compared to a control group of 32 students from classrooms of the same grades. A set of Bebras tasks was selected as an overall measure of CT skills and was administered to children in both the intervention and control groups. Overall, the results showed that programming robotics artefacts may exert a positive impact on students\u2019 learning of computational thinking skills. Moreover, the effect of the intervention was found to be greater among third-grade children.\n## Introduction\nBlock programming is based on drag and drop of consecutive visual tiles on the editing area to compose different instructions; first of all, it facilitates the learning of programming skills because of a reduction in the cognitive load potentially required for textual programming [8,9]. Moreover, Kelleher, and Pausch [10] recognize further advantages in the use of visual programming for novice learners. Indeed, the visual block-based instruction is built using icons that facilitate students' recognition of its function, such as commands, conditions, and loops. Accordingly, visual programming allows students to focus their attention more on the logic and structures involved in programming tasks than in challenges related to writing code. Specifically, Lego \u00ae Education WeDo [11] is a programmable building system that was originally designed to foster children's learning in STEM disciplines and early development of computational thinking skills, through the implementation of a robotics artefact able to perform programmed actions. \n\nComputational thinking (CT) was first conceptualized as a set of cognitive processes that allow people to solve problems, design systems, and model human behavior by relying on concepts pertaining to computer science [12]. Later, the author [13] specified that CT refers to those thought processes whereby solutions to problems are designed to be implemented by an information-processing agent. In order to transfer the theoretical definition of CT to teaching and learning issues in K-12 education, the International Society for Technology in Education (ISTE) and the Computer Science Teachers Association (CSTA) have recently proposed an operational definition that can be profitably applied for educational purposes [14]. According to this definition, CT is basically a problem-solving process involving several cognitive skills, such as logically organizing and analyzing data, creating abstract representations of data through the use of models or simulations, designing solutions in terms of ordered steps (algorithmic thinking), and, most importantly, generalizing the acquired problem-solving skills to a wide range of problematic situations.",
            "reference_string": "[208615635 | Chiazzese et al. | 2019 | Citations: 64]"
        },
        {
            "title": "Visual definition of procedures for automatic virtual scene generation",
            "venue": "arXiv.org",
            "year": 2012,
            "reference_count": 38,
            "citation_count": 1,
            "influential_citation_count": 0,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": null,
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://arxiv.org/abs/1202.2868, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "3352207",
                    "name": "Dra\u017een Lu\u010danin"
                }
            ],
            "abstract": "With more and more digital media, especially in the field of virtual reality where detailed and convincing scenes are much required, procedural scene generation is a big helping tool for artists. A problem is that defining scene descriptions through these procedures usually requires a knowledge in formal language grammars, programming theory and manually editing textual files using a strict syntax, making it less intuitive to use. Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task. \nIn this thesis, an approach of using a VPL for defining procedures that automatically generate virtual scenes is presented. The methods required to build a VPL are presented, including a novel method of generating readable code in a structured programming language. Also, the methods for achieving basic principles of VPLs will be shown -- suitable visual presentation of information and guiding the programmer in the right direction using constraints. On the other hand, procedural generation methods are presented in the context of visual programming -- adapting the application programming interface (API) of these methods to better serve the user. The main focus will be on the methods for urban modeling, such as building, city layout and details generation with random number generation used to create non-deterministic scenes.",
            "corpus_id": 11795228,
            "sentences": [
                {
                    "corpus_id": "11795228",
                    "title": "Visual definition of procedures for automatic virtual scene generation",
                    "text": "With more and more digital media, especially in the field of virtual reality where detailed and convincing scenes are much required, procedural scene generation is a big helping tool for artists. A problem is that defining scene descriptions through these procedures usually requires a knowledge in formal language grammars, programming theory and manually editing textual files using a strict syntax, making it less intuitive to use. Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task. \nIn this thesis, an approach of using a VPL for defining procedures that automatically generate virtual scenes is presented. The methods required to build a VPL are presented, including a novel method of generating readable code in a structured programming language. Also, the methods for achieving basic principles of VPLs will be shown -- suitable visual presentation of information and guiding the programmer in the right direction using constraints. On the other hand, procedural generation methods are presented in the context of visual programming -- adapting the application programming interface (API) of these methods to better serve the user. The main focus will be on the methods for urban modeling, such as building, city layout and details generation with random number generation used to create non-deterministic scenes.",
                    "score": 0.39089032709292404,
                    "section_title": "abstract",
                    "char_start_offset": 0,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9287109375
                },
                {
                    "corpus_id": "11795228",
                    "title": "Visual definition of procedures for automatic virtual scene generation",
                    "text": "With more and more digital media, especially in the field of virtual reality where detailed and convincing scenes are much required, procedural scene generation is a big helping tool for artists. A problem is that defining scene descriptions through these procedures usually requires a knowledge in formal language grammars, programming theory and manually editing textual files using a strict syntax, making it less intuitive to use.\n\nLuckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task.\n\nIn this thesis, an approach of using a VPL for defining procedures that automatically generate virtual scenes is presented. The methods required to build a VPL are presented, including a novel method of generating readable code in a structured programming language. Also, the methods for achieving basic principles of VPLs will be shownsuitable visual presentation of information and guiding the programmer in the right direction using constraints. On the other hand, procedural generation methods are presented in the context of visual programming -adapting the application programming interface (API) of these methods to better serve the user. The main focus will be on the methods for urban modeling, such as building, city layout and details generation with random number generation used to create non-deterministic scenes.\n\nThese methods are demonstrated on an example of vIDE, a VPL based on the Eclipse IDE. The design of vIDE with respect to the Eclipse Graphical Modeling Framework (GMF) is described. The concept of a flowchart graphical notation is examined, its mapping to an algorithm data structure and the final conversion to a textual program (for example in the scripting language Python). The procedural generation functionality is encapsulated in a C ++ library libprocedural, which uses Ogre as a graphical engine.\n\nTo make the interface between vIDE and libprocedural intuitive, high-level Python bindings were created.\n\nIndex terms -procedural scene generation, Visual programming, VPL, flowchart, programming language, GOTO, WHILE, vIDE, Eclipse, GMF, OCL, libprocedural, Ogre, C ++ , Python",
                    "score": 0.3658630631991789,
                    "section_title": "Abstract",
                    "char_start_offset": 73345,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9072265625
                }
            ],
            "relevance_judgement": 0.9287109375,
            "relevance_judgment_input_expanded": "# Title: Visual definition of procedures for automatic virtual scene generation\n# Venue: arXiv.org\n# Authors: Dra\u017een Lu\u010danin\n## Abstract\nWith more and more digital media, especially in the field of virtual reality where detailed and convincing scenes are much required, procedural scene generation is a big helping tool for artists. A problem is that defining scene descriptions through these procedures usually requires a knowledge in formal language grammars, programming theory and manually editing textual files using a strict syntax, making it less intuitive to use. Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task. \nIn this thesis, an approach of using a VPL for defining procedures that automatically generate virtual scenes is presented. The methods required to build a VPL are presented, including a novel method of generating readable code in a structured programming language. Also, the methods for achieving basic principles of VPLs will be shown -- suitable visual presentation of information and guiding the programmer in the right direction using constraints. On the other hand, procedural generation methods are presented in the context of visual programming -- adapting the application programming interface (API) of these methods to better serve the user. The main focus will be on the methods for urban modeling, such as building, city layout and details generation with random number generation used to create non-deterministic scenes.\n## Abstract\nWith more and more digital media, especially in the field of virtual reality where detailed and convincing scenes are much required, procedural scene generation is a big helping tool for artists. A problem is that defining scene descriptions through these procedures usually requires a knowledge in formal language grammars, programming theory and manually editing textual files using a strict syntax, making it less intuitive to use.\n\nLuckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task.\n\nIn this thesis, an approach of using a VPL for defining procedures that automatically generate virtual scenes is presented. The methods required to build a VPL are presented, including a novel method of generating readable code in a structured programming language. Also, the methods for achieving basic principles of VPLs will be shownsuitable visual presentation of information and guiding the programmer in the right direction using constraints. On the other hand, procedural generation methods are presented in the context of visual programming -adapting the application programming interface (API) of these methods to better serve the user. The main focus will be on the methods for urban modeling, such as building, city layout and details generation with random number generation used to create non-deterministic scenes.\n\nThese methods are demonstrated on an example of vIDE, a VPL based on the Eclipse IDE. The design of vIDE with respect to the Eclipse Graphical Modeling Framework (GMF) is described. The concept of a flowchart graphical notation is examined, its mapping to an algorithm data structure and the final conversion to a textual program (for example in the scripting language Python). The procedural generation functionality is encapsulated in a C ++ library libprocedural, which uses Ogre as a graphical engine.\n\nTo make the interface between vIDE and libprocedural intuitive, high-level Python bindings were created.\n\nIndex terms -procedural scene generation, Visual programming, VPL, flowchart, programming language, GOTO, WHILE, vIDE, Eclipse, GMF, OCL, libprocedural, Ogre, C ++ , Python",
            "reference_string": "[11795228 | Lucanin | 2012 | Citations: 1]"
        },
        {
            "title": "State of the Software Development Life-Cycle for the Internet-of-Things",
            "venue": "arXiv.org",
            "year": 2018,
            "reference_count": 105,
            "citation_count": 14,
            "influential_citation_count": 0,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": null,
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://arxiv.org/abs/1811.04159, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "145745979",
                    "name": "Jo\u00e3o Pedro Dias"
                },
                {
                    "authorId": "144027277",
                    "name": "H. Ferreira"
                }
            ],
            "abstract": "Software has a longstanding association with a state of crisis considering its success rate. The explosion of Internet-connected devices, Internet-of-Things, adds to the complexity of software systems. The particular characteristics of these systems, such as being large-scale and its heterogeneity, pose increasingly new challenges. In this paper, we first briefly introduce the IoT paradigm and the current state of art of software development. Then, we delve into the particularities of developing software for IoT systems and systems of systems, given an overview of what are the current methodologies and tools for design, develop and test such systems. The findings are discussed, revealing open issues and research directions, and reveal that the nowadays IoT software development practices are still lagging behind of what are the current best practices.",
            "corpus_id": 53282492,
            "sentences": [
                {
                    "corpus_id": "53282492",
                    "title": "State of the Software Development Life-Cycle for the Internet-of-Things",
                    "text": "Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007]. \n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as: \n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device. \n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002]. \n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017]. \n\nAlthough several domains of applications already take advantage of the use of VPLs, the emerging field of Internetof-Things (IoT) is still lingering far behind other sectors. \n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003]. The application of domain-specific visual programming languages to solve the need of abstraction from the low-level and heterogeneous devices that usually make a part in the IoT connected world can already be observed. We can consider, as an example, how graphical-based programming languages are already widely used for programming low-level devices such as Programmed Logic Controllers (PLCs) in high-production manufacturing systems [Younis and Frey 2003]. \n\nThe goal of this section is to review the landscape of visual programming environments (viz.",
                    "score": 0.4180328117224905,
                    "section_title": "Visual Programming for IoT",
                    "char_start_offset": 44329,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 179
                        },
                        {
                            "start": 180,
                            "end": 398
                        },
                        {
                            "start": 399,
                            "end": 615
                        },
                        {
                            "start": 618,
                            "end": 748
                        },
                        {
                            "start": 749,
                            "end": 768
                        },
                        {
                            "start": 771,
                            "end": 1013
                        },
                        {
                            "start": 1016,
                            "end": 1205
                        },
                        {
                            "start": 1206,
                            "end": 1221
                        },
                        {
                            "start": 1224,
                            "end": 1336
                        },
                        {
                            "start": 1337,
                            "end": 1503
                        },
                        {
                            "start": 1506,
                            "end": 1680
                        },
                        {
                            "start": 1683,
                            "end": 1912
                        },
                        {
                            "start": 1913,
                            "end": 2131
                        },
                        {
                            "start": 2132,
                            "end": 2372
                        },
                        {
                            "start": 2375,
                            "end": 2467
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 752,
                            "end": 763,
                            "matchedPaperCorpusId": "48762803"
                        },
                        {
                            "start": 1209,
                            "end": 1220,
                            "matchedPaperCorpusId": "48762803"
                        },
                        {
                            "start": 1493,
                            "end": 1502,
                            "matchedPaperCorpusId": "30037917"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.927734375
                }
            ],
            "relevance_judgement": 0.927734375,
            "relevance_judgment_input_expanded": "# Title: State of the Software Development Life-Cycle for the Internet-of-Things\n# Venue: arXiv.org\n# Authors: Jo\u00e3o Pedro Dias, H. Ferreira\n## Abstract\nSoftware has a longstanding association with a state of crisis considering its success rate. The explosion of Internet-connected devices, Internet-of-Things, adds to the complexity of software systems. The particular characteristics of these systems, such as being large-scale and its heterogeneity, pose increasingly new challenges. In this paper, we first briefly introduce the IoT paradigm and the current state of art of software development. Then, we delve into the particularities of developing software for IoT systems and systems of systems, given an overview of what are the current methodologies and tools for design, develop and test such systems. The findings are discussed, revealing open issues and research directions, and reveal that the nowadays IoT software development practices are still lagging behind of what are the current best practices.\n## Visual Programming for IoT\nDiagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007]. \n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as: \n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device. \n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002]. \n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017]. \n\nAlthough several domains of applications already take advantage of the use of VPLs, the emerging field of Internetof-Things (IoT) is still lingering far behind other sectors. \n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003]. The application of domain-specific visual programming languages to solve the need of abstraction from the low-level and heterogeneous devices that usually make a part in the IoT connected world can already be observed. We can consider, as an example, how graphical-based programming languages are already widely used for programming low-level devices such as Programmed Logic Controllers (PLCs) in high-production manufacturing systems [Younis and Frey 2003]. \n\nThe goal of this section is to review the landscape of visual programming environments (viz.",
            "reference_string": "[53282492 | Dias et al. | 2018 | Citations: 14]"
        },
        {
            "title": "A visual programming language for novices",
            "venue": "",
            "year": 1990,
            "reference_count": 13,
            "citation_count": 28,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://figshare.com/articles/journal_contribution/A_visual_programming_language_for_novices/6602870/1/files/12092918.pdf",
                "status": "GREEN",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.21236/ada218940?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.21236/ada218940, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "143925072",
                    "name": "Jeffrey Bonar"
                },
                {
                    "authorId": "2074295",
                    "name": "Blaise W. Liffick"
                }
            ],
            "abstract": "Abstract : We present BridgeTalk, a new approach to visual languages for novice programmers. The design of BridgeTalk is based on data about how novices learn to program. BridgeTalk allows novices to program with programming plans -- frame-like objects that capture essential program components like keep a running total and iterate down a data structure. Novices are focused on the interactions between plans, not on the implementation details for a particular plan. Beginning with plans as a basis for a novice programming language, we were forced to develop a programming formalism that can deal with multiple levels of detail, merged plan implementations, and interrelationships between plans. The actual visual presentation for the language is based on six design, implement, test with students, and redesign cycles. Keywords: Visual languages; Novice programming; Programming education; programming cognition.",
            "corpus_id": 60833664,
            "sentences": [
                {
                    "corpus_id": "60833664",
                    "title": "A visual programming language for novices",
                    "text": "There are two basic reasons to turn to a visual language in a programming language for novices.\n\nFirst, a visual language provides the flexibility and expressiveness needed for a novice language to express a large vocabulary of programming plans. In our experience, a linear textual version of a plan-based programming language is quite unwieldy. Second, from a point of view of novice cognitive capability, a visual language is less likely to tax a novice's working memory. We discuss each of these points in detail.",
                    "score": 0.3544289123930477,
                    "section_title": "How Can Visual Languages Help Novices",
                    "char_start_offset": 16488,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.927734375
                },
                {
                    "corpus_id": "60833664",
                    "title": "A visual programming language for novices",
                    "text": "Abstract : We present BridgeTalk, a new approach to visual languages for novice programmers. The design of BridgeTalk is based on data about how novices learn to program. BridgeTalk allows novices to program with programming plans -- frame-like objects that capture essential program components like keep a running total and iterate down a data structure. Novices are focused on the interactions between plans, not on the implementation details for a particular plan. Beginning with plans as a basis for a novice programming language, we were forced to develop a programming formalism that can deal with multiple levels of detail, merged plan implementations, and interrelationships between plans. The actual visual presentation for the language is based on six design, implement, test with students, and redesign cycles. Keywords: Visual languages; Novice programming; Programming education; programming cognition.",
                    "score": 0.3908534054751986,
                    "section_title": "abstract",
                    "char_start_offset": 0,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9052734375
                }
            ],
            "relevance_judgement": 0.927734375,
            "relevance_judgment_input_expanded": "# Title: A visual programming language for novices\n# Venue: \n# Authors: Jeffrey Bonar, Blaise W. Liffick\n## Abstract\nAbstract : We present BridgeTalk, a new approach to visual languages for novice programmers. The design of BridgeTalk is based on data about how novices learn to program. BridgeTalk allows novices to program with programming plans -- frame-like objects that capture essential program components like keep a running total and iterate down a data structure. Novices are focused on the interactions between plans, not on the implementation details for a particular plan. Beginning with plans as a basis for a novice programming language, we were forced to develop a programming formalism that can deal with multiple levels of detail, merged plan implementations, and interrelationships between plans. The actual visual presentation for the language is based on six design, implement, test with students, and redesign cycles. Keywords: Visual languages; Novice programming; Programming education; programming cognition.\n## How Can Visual Languages Help Novices\nThere are two basic reasons to turn to a visual language in a programming language for novices.\n\nFirst, a visual language provides the flexibility and expressiveness needed for a novice language to express a large vocabulary of programming plans. In our experience, a linear textual version of a plan-based programming language is quite unwieldy. Second, from a point of view of novice cognitive capability, a visual language is less likely to tax a novice's working memory. We discuss each of these points in detail.",
            "reference_string": "[60833664 | Bonar et al. | 1990 | Citations: 28]"
        },
        {
            "title": "An Evaluation of Open Digital Gaming Platforms for Developing Computational Thinking Skills",
            "venue": "",
            "year": 2018,
            "reference_count": 17,
            "citation_count": 15,
            "influential_citation_count": 1,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://www.intechopen.com/citation-pdf-url/57340",
                "status": "HYBRID",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.5772/INTECHOPEN.71339?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.5772/INTECHOPEN.71339, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "38948497",
                    "name": "A. Egu\u00edluz"
                },
                {
                    "authorId": "2476416",
                    "name": "P. Garaizar"
                },
                {
                    "authorId": "3070661",
                    "name": "M. Guenaga"
                }
            ],
            "abstract": "Due to business needs and the growing importance of technology in society, in recent years, the concept of computational thinking has emerged, especially focused on its inclusion in compulsory education as a relevant complement, transversal to traditional subjects. In parallel, various initiatives have developed interactive digital tools for learners to meet this type of thinking through a series of activities commonly framed as games. In this chapter, we evaluate many of the existing free access platforms to propose pedagogical, design, and content approaches with which they can be compared.",
            "corpus_id": 62816171,
            "sentences": [
                {
                    "corpus_id": "62816171",
                    "title": "An Evaluation of Open Digital Gaming Platforms for Developing Computational Thinking Skills",
                    "text": "It is also important that all these tools seek to avoid novice programmers having to confront the complexity of text-based computer coding and to improve the learnability [7]. There are several ways to address this problem such as narrative tools, flow-model tools, or specialized output realizations [8]; in this chapter, we focus on the most common tools, which are those that use the block-based visual programming. These tools employ user interfaces based on visual blocks that are moved and placed constructively as an assembly game, usually with the visual abstraction of a puzzle with its pieces and fitting ways. These blocks work as an abstraction of programming components: sentences, data, control structures, procedures, and so on. Consequently, they considerably limit the prior knowledge required to program and reinforce the program structure, eliminating the possibility of syntax errors and focusing only on the logic that exists in the activity that is to be undertaken. \n\nIn this chapter, we review a number of existing platforms with features mentioned above. There are articles which discuss some of them [9][10][11]; our intention is to propose an objective analysis, reviewing their possibilities from different perspectives. From a pedagogical point of view, we study different dimensions that can affect the learning process in or out of class (such as the richness of the proposed interaction, the time that can be invested, and the depth of the exploration). From the point of view of the game, the fun and engagement generated. From a CT point of view, we will analyze what concepts involved in CT each platform covers and to what extent. Finally, we will analyze the degree of adaptation to the personal characteristics of programming learners, their skills, and knowledge. We will consider, among others, aspects such as feedback and interaction, registration possibilities, and learning design.",
                    "score": 0.3475544306000783,
                    "section_title": "Introduction",
                    "char_start_offset": 2152,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 175
                        },
                        {
                            "start": 176,
                            "end": 418
                        },
                        {
                            "start": 419,
                            "end": 620
                        },
                        {
                            "start": 621,
                            "end": 743
                        },
                        {
                            "start": 744,
                            "end": 988
                        },
                        {
                            "start": 991,
                            "end": 1079
                        },
                        {
                            "start": 1080,
                            "end": 1248
                        },
                        {
                            "start": 1249,
                            "end": 1485
                        },
                        {
                            "start": 1486,
                            "end": 1555
                        },
                        {
                            "start": 1556,
                            "end": 1666
                        },
                        {
                            "start": 1667,
                            "end": 1802
                        },
                        {
                            "start": 1803,
                            "end": 1925
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 301,
                            "end": 304,
                            "matchedPaperCorpusId": "8394893"
                        },
                        {
                            "start": 1129,
                            "end": 1133,
                            "matchedPaperCorpusId": "17824361"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.927734375
                }
            ],
            "relevance_judgement": 0.927734375,
            "relevance_judgment_input_expanded": "# Title: An Evaluation of Open Digital Gaming Platforms for Developing Computational Thinking Skills\n# Venue: \n# Authors: A. Egu\u00edluz, P. Garaizar, M. Guenaga\n## Abstract\nDue to business needs and the growing importance of technology in society, in recent years, the concept of computational thinking has emerged, especially focused on its inclusion in compulsory education as a relevant complement, transversal to traditional subjects. In parallel, various initiatives have developed interactive digital tools for learners to meet this type of thinking through a series of activities commonly framed as games. In this chapter, we evaluate many of the existing free access platforms to propose pedagogical, design, and content approaches with which they can be compared.\n## Introduction\nIt is also important that all these tools seek to avoid novice programmers having to confront the complexity of text-based computer coding and to improve the learnability [7]. There are several ways to address this problem such as narrative tools, flow-model tools, or specialized output realizations [8]; in this chapter, we focus on the most common tools, which are those that use the block-based visual programming. These tools employ user interfaces based on visual blocks that are moved and placed constructively as an assembly game, usually with the visual abstraction of a puzzle with its pieces and fitting ways. These blocks work as an abstraction of programming components: sentences, data, control structures, procedures, and so on. Consequently, they considerably limit the prior knowledge required to program and reinforce the program structure, eliminating the possibility of syntax errors and focusing only on the logic that exists in the activity that is to be undertaken. \n\nIn this chapter, we review a number of existing platforms with features mentioned above. There are articles which discuss some of them [9][10][11]; our intention is to propose an objective analysis, reviewing their possibilities from different perspectives. From a pedagogical point of view, we study different dimensions that can affect the learning process in or out of class (such as the richness of the proposed interaction, the time that can be invested, and the depth of the exploration). From the point of view of the game, the fun and engagement generated. From a CT point of view, we will analyze what concepts involved in CT each platform covers and to what extent. Finally, we will analyze the degree of adaptation to the personal characteristics of programming learners, their skills, and knowledge. We will consider, among others, aspects such as feedback and interaction, registration possibilities, and learning design.",
            "reference_string": "[62816171 | Eguiluz et al. | 2018 | Citations: 15]"
        },
        {
            "title": "Programming Experience Requirements for Future Visual Development Environments",
            "venue": "International Conference on Computer Supported Education",
            "year": 2022,
            "reference_count": 23,
            "citation_count": 1,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://doi.org/10.5220/0011082500003182",
                "status": "HYBRID",
                "license": "CCBYNCND",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.5220/0011082500003182?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.5220/0011082500003182, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "1685511",
                    "name": "Anthony Savidis"
                }
            ],
            "abstract": ": Visual programming is widely adopted for teaching purposes, considered as an appropriate starting base before introducing learners to typical programming languages. However, the progress in such tools is very slow and limited compared to standard programming environments. Moreover, there is no systematic classification regarding the most important requirements to improve the support of visual programming tasks. In this context, we introduce programming experience as the context-specific notion of user-experience for the programming domain. Then, we identify three groups of requirements relating to language, interaction and tools, and elaborate with specific requirements per group. In this analysis, we study related examples from current tools in various domains, while we propose scenarios inspired from source-based programming environments.",
            "corpus_id": 248510289,
            "sentences": [
                {
                    "corpus_id": "248510289",
                    "title": "Programming Experience Requirements for Future Visual Development Environments",
                    "text": "The notion of visual programming concerns methods to define programs in a multi-dimensional fashion (Myers, 1990). The latter is not linked to the underlying program representation, but concerns the interactive visual means through which a program is created, refined and managed. Hence, text-based code is considered as one-dimension method and is therefore not treated as visual programming. \n\nWhile visual programming adoption ranges from rapid application development, interactive software configurations, and system administration, it became popular for educational purposes, in particular for teaching programming skills. In this framework, Scratch (Maloney et al., 2010), a block-based tool and Lego Mindstorms\u2122 (Vallance et al., 2009) are amongst the most well-known visual tools in learning contexts. Historically, visual programing systems have been deployed to introduce students in the programming universe before being enabled to manage and master professional source-based programming languages. In this context, their scope is generally considered to be restricted in the early stages of acquiring programming skills. But today, there are visual tools for professional development purposes, ranging from business process, Internet of Things, 3d graphics and robotics, meaning their scope is not merely restricted to learning activities. Also, such tools support an important activity in the development lifecycle that is not always substituted by text-based counterparts, thus retaining a distinct and critical role. In this sense, for certain development skills, professional programmers may still have to learn using visual tools before switching (if they ever do) to the most powerful programminglanguage basis. This interplay between visual tools for leaning, with typical professional programming environments, is depicted under Figure 1. \n\nIn an educational context, emphasis is put on blending user experience (Law et al., 2009) with learning experience (Tawfik et al., 2021) to optimally support programming tasks. We define this combination as programming experience (see Figure 2) to better highlight and contextualise the importance of the programming task. In this context, we carried out a systematic analysis briefed in this paper, resulting in key design requirements linking to programming experience, with a summary provided under Figure 3.",
                    "score": 0.38704866882156796,
                    "section_title": "INTRODUCTION",
                    "char_start_offset": 15,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 114
                        },
                        {
                            "start": 115,
                            "end": 280
                        },
                        {
                            "start": 281,
                            "end": 393
                        },
                        {
                            "start": 396,
                            "end": 627
                        },
                        {
                            "start": 628,
                            "end": 809
                        },
                        {
                            "start": 810,
                            "end": 1009
                        },
                        {
                            "start": 1010,
                            "end": 1132
                        },
                        {
                            "start": 1133,
                            "end": 1351
                        },
                        {
                            "start": 1352,
                            "end": 1531
                        },
                        {
                            "start": 1532,
                            "end": 1729
                        },
                        {
                            "start": 1730,
                            "end": 1858
                        },
                        {
                            "start": 1861,
                            "end": 2037
                        },
                        {
                            "start": 2038,
                            "end": 2183
                        },
                        {
                            "start": 2184,
                            "end": 2372
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 100,
                            "end": 112,
                            "matchedPaperCorpusId": "7335020"
                        },
                        {
                            "start": 655,
                            "end": 677,
                            "matchedPaperCorpusId": "9744698"
                        },
                        {
                            "start": 719,
                            "end": 742,
                            "matchedPaperCorpusId": "208013563"
                        },
                        {
                            "start": 1932,
                            "end": 1950,
                            "matchedPaperCorpusId": "10465690"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9267578125
                },
                {
                    "corpus_id": "248510289",
                    "title": "Programming Experience Requirements for Future Visual Development Environments",
                    "text": "Visual programming systems are currently the primary instruments for the early teaching of basic programming skills, while they are increasingly deployed in various domains for rapid development by non-professional programmers. Compared to tools for professional programming, there are many functionality layers and features that can be introduced to improve the programming experience and better support the overall learning process. \n\nIn this paper, we presented a brief but systematic account of key design requirements for future visual development systems, relying on the new notion of programming experience, while having a primary learning orientation. Overall, we believe that such requirements can be more effectively addressed separately, by cooperating tools, within open and extensible future visual development environments.",
                    "score": 0.5198702344252093,
                    "section_title": "CONCLUSIONS",
                    "char_start_offset": 20782,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 227
                        },
                        {
                            "start": 228,
                            "end": 434
                        },
                        {
                            "start": 437,
                            "end": 659
                        },
                        {
                            "start": 660,
                            "end": 837
                        }
                    ],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.92431640625
                },
                {
                    "corpus_id": "248510289",
                    "title": "Programming Experience Requirements for Future Visual Development Environments",
                    "text": "Being learning tools, visual programming systems strike for a balance between programming facilities and ease-of-use. Thus, more advanced programming techniques may be left out, restricting deployment to small-scale projects. In this context, optional programming features may be provided targeted to more advanced learners as listed below: \n\n\u2022 Scopes may be defined by visual grouping, with local variables being geometrically contained. \u2022 Modules allow split programs into multiple units and reuse them in one or more projects. \u2022 Hybrid code enables contrast the visual code and its respective textual form altogether, enabling mixed editing, while keeping both views fully-synced and well-formed. \u2022 Source code that complements visual code, helpful for implementing complex modules, and also for supporting the cooperation of learners with experienced programmers.",
                    "score": 0.4268795056642635,
                    "section_title": "Extra Optional Elements",
                    "char_start_offset": 11413,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 117
                        },
                        {
                            "start": 118,
                            "end": 225
                        },
                        {
                            "start": 226,
                            "end": 340
                        },
                        {
                            "start": 343,
                            "end": 438
                        },
                        {
                            "start": 439,
                            "end": 529
                        },
                        {
                            "start": 530,
                            "end": 699
                        },
                        {
                            "start": 700,
                            "end": 867
                        }
                    ],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.92236328125
                }
            ],
            "relevance_judgement": 0.9267578125,
            "relevance_judgment_input_expanded": "# Title: Programming Experience Requirements for Future Visual Development Environments\n# Venue: International Conference on Computer Supported Education\n# Authors: Anthony Savidis\n## Abstract\n: Visual programming is widely adopted for teaching purposes, considered as an appropriate starting base before introducing learners to typical programming languages. However, the progress in such tools is very slow and limited compared to standard programming environments. Moreover, there is no systematic classification regarding the most important requirements to improve the support of visual programming tasks. In this context, we introduce programming experience as the context-specific notion of user-experience for the programming domain. Then, we identify three groups of requirements relating to language, interaction and tools, and elaborate with specific requirements per group. In this analysis, we study related examples from current tools in various domains, while we propose scenarios inspired from source-based programming environments.\n## INTRODUCTION\nThe notion of visual programming concerns methods to define programs in a multi-dimensional fashion (Myers, 1990). The latter is not linked to the underlying program representation, but concerns the interactive visual means through which a program is created, refined and managed. Hence, text-based code is considered as one-dimension method and is therefore not treated as visual programming. \n\nWhile visual programming adoption ranges from rapid application development, interactive software configurations, and system administration, it became popular for educational purposes, in particular for teaching programming skills. In this framework, Scratch (Maloney et al., 2010), a block-based tool and Lego Mindstorms\u2122 (Vallance et al., 2009) are amongst the most well-known visual tools in learning contexts. Historically, visual programing systems have been deployed to introduce students in the programming universe before being enabled to manage and master professional source-based programming languages. In this context, their scope is generally considered to be restricted in the early stages of acquiring programming skills. But today, there are visual tools for professional development purposes, ranging from business process, Internet of Things, 3d graphics and robotics, meaning their scope is not merely restricted to learning activities. Also, such tools support an important activity in the development lifecycle that is not always substituted by text-based counterparts, thus retaining a distinct and critical role. In this sense, for certain development skills, professional programmers may still have to learn using visual tools before switching (if they ever do) to the most powerful programminglanguage basis. This interplay between visual tools for leaning, with typical professional programming environments, is depicted under Figure 1. \n\nIn an educational context, emphasis is put on blending user experience (Law et al., 2009) with learning experience (Tawfik et al., 2021) to optimally support programming tasks. We define this combination as programming experience (see Figure 2) to better highlight and contextualise the importance of the programming task. In this context, we carried out a systematic analysis briefed in this paper, resulting in key design requirements linking to programming experience, with a summary provided under Figure 3.\n\n## Extra Optional Elements\nBeing learning tools, visual programming systems strike for a balance between programming facilities and ease-of-use. Thus, more advanced programming techniques may be left out, restricting deployment to small-scale projects. In this context, optional programming features may be provided targeted to more advanced learners as listed below: \n\n\u2022 Scopes may be defined by visual grouping, with local variables being geometrically contained. \u2022 Modules allow split programs into multiple units and reuse them in one or more projects. \u2022 Hybrid code enables contrast the visual code and its respective textual form altogether, enabling mixed editing, while keeping both views fully-synced and well-formed. \u2022 Source code that complements visual code, helpful for implementing complex modules, and also for supporting the cooperation of learners with experienced programmers.\n\n## CONCLUSIONS\nVisual programming systems are currently the primary instruments for the early teaching of basic programming skills, while they are increasingly deployed in various domains for rapid development by non-professional programmers. Compared to tools for professional programming, there are many functionality layers and features that can be introduced to improve the programming experience and better support the overall learning process. \n\nIn this paper, we presented a brief but systematic account of key design requirements for future visual development systems, relying on the new notion of programming experience, while having a primary learning orientation. Overall, we believe that such requirements can be more effectively addressed separately, by cooperating tools, within open and extensible future visual development environments.",
            "reference_string": "[248510289 | Savidis | 2022 | Citations: 1]"
        },
        {
            "title": "A Study on the Suitability of Visual Languages for Non-Expert Robot Programmers",
            "venue": "IEEE Access",
            "year": 2019,
            "reference_count": 38,
            "citation_count": 22,
            "influential_citation_count": 3,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://ieeexplore.ieee.org/ielx7/6287639/8600701/08629035.pdf",
                "status": "GOLD",
                "license": "CCBYNCND",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.1109/ACCESS.2019.2895913?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.1109/ACCESS.2019.2895913, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "70644982",
                    "name": "Jos\u00e9 Mar\u00eda Rodr\u00edguez Corral"
                },
                {
                    "authorId": "1409150721",
                    "name": "Iv\u00e1n Ruiz-Rube"
                },
                {
                    "authorId": "1410550855",
                    "name": "Ant\u00f3n Civit Balcells"
                },
                {
                    "authorId": "1410550098",
                    "name": "Jos\u00e9 Miguel Mota-Mac\u00edas"
                },
                {
                    "authorId": "1410538136",
                    "name": "Arturo Morgado-Est\u00e9vez"
                },
                {
                    "authorId": "1779677",
                    "name": "J. Dodero"
                }
            ],
            "abstract": "A visual programming language allows users and developers to create programs by manipulating program elements graphically. Several studies have shown the benefits of visual languages for learning purposes and their applicability to robot programming. However, at present, there are not enough comparative studies on the suitability of textual and visual languages for this purpose. In this paper, we study if, as with a textual language, the use of a visual language could also be suitable in the context of robot programming and, if so, what the main advantages of using a visual language would be. For our experiments, we selected a sample of 60 individuals among students with adequate knowledge of procedural programming, that was divided into three groups. For the first group of 20 students, a learning scenario based on a textual object-oriented language was used for programming a specific commercial robotic ball with sensing, wireless communication, and output capabilities, whereas for the second and the third group, two learning scenarios based on visual languages were used for programming the robot. After taking a course for programming the robot in the corresponding learning scenario, each group was evaluated by completing three programming exercises related to the robot features (i.e. motion, lighting, and collision detection). Our results show that the students that worked with visual languages perceived a higher clarity level in their understanding of the course exposition, and a higher enjoyment level in the use of the programming environment. Moreover, they also achieved an overall better mark.",
            "corpus_id": 61809687,
            "sentences": [
                {
                    "corpus_id": "61809687",
                    "title": "A Study on the Suitability of Visual Languages for Non-Expert Robot Programmers",
                    "text": "A visual programming language allows users and developers to create programs by manipulating program elements graphically. Several studies have shown the benefits of visual languages for learning purposes and their applicability to robot programming. However, at present, there are not enough comparative studies on the suitability of textual and visual languages for this purpose. In this paper, we study if, as with a textual language, the use of a visual language could also be suitable in the context of robot programming and, if so, what the main advantages of using a visual language would be. For our experiments, we selected a sample of 60 individuals among students with adequate knowledge of procedural programming, that was divided into three groups. For the first group of 20 students, a learning scenario based on a textual object-oriented language was used for programming a specific commercial robotic ball with sensing, wireless communication, and output capabilities, whereas for the second and the third group, two learning scenarios based on visual languages were used for programming the robot. After taking a course for programming the robot in the corresponding learning scenario, each group was evaluated by completing three programming exercises related to the robot features (i.e. motion, lighting, and collision detection). Our results show that the students that worked with visual languages perceived a higher clarity level in their understanding of the course exposition, and a higher enjoyment level in the use of the programming environment. Moreover, they also achieved an overall better mark.",
                    "score": 0.3685763966626367,
                    "section_title": "abstract",
                    "char_start_offset": 0,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.923828125
                }
            ],
            "relevance_judgement": 0.923828125,
            "relevance_judgment_input_expanded": "# Title: A Study on the Suitability of Visual Languages for Non-Expert Robot Programmers\n# Venue: IEEE Access\n# Authors: Jos\u00e9 Mar\u00eda Rodr\u00edguez Corral, Iv\u00e1n Ruiz-Rube, Ant\u00f3n Civit Balcells, Jos\u00e9 Miguel Mota-Mac\u00edas, Arturo Morgado-Est\u00e9vez, J. Dodero\n## Abstract\nA visual programming language allows users and developers to create programs by manipulating program elements graphically. Several studies have shown the benefits of visual languages for learning purposes and their applicability to robot programming. However, at present, there are not enough comparative studies on the suitability of textual and visual languages for this purpose. In this paper, we study if, as with a textual language, the use of a visual language could also be suitable in the context of robot programming and, if so, what the main advantages of using a visual language would be. For our experiments, we selected a sample of 60 individuals among students with adequate knowledge of procedural programming, that was divided into three groups. For the first group of 20 students, a learning scenario based on a textual object-oriented language was used for programming a specific commercial robotic ball with sensing, wireless communication, and output capabilities, whereas for the second and the third group, two learning scenarios based on visual languages were used for programming the robot. After taking a course for programming the robot in the corresponding learning scenario, each group was evaluated by completing three programming exercises related to the robot features (i.e. motion, lighting, and collision detection). Our results show that the students that worked with visual languages perceived a higher clarity level in their understanding of the course exposition, and a higher enjoyment level in the use of the programming environment. Moreover, they also achieved an overall better mark.\n",
            "reference_string": "[61809687 | Corral et al. | 2019 | Citations: 22]"
        },
        {
            "title": "Game Engine Wizardry for Programming Mischief",
            "venue": "PAINT@SPLASH",
            "year": 2023,
            "reference_count": 33,
            "citation_count": 4,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://dl.acm.org/doi/pdf/10.1145/3623504.3623570",
                "status": "HYBRID",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.1145/3623504.3623570?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.1145/3623504.3623570, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2163321",
                    "name": "Riemer van Rozen"
                }
            ],
            "abstract": "Programming grants individuals the capability to design, create, and bring ideas to life. To improve their skills, programmers require powerful languages and programming environments for understanding the impact of gradual code changes. We investigate how modern game engine technology can be leveraged for creating visual input and feedback mechanisms that drive exploratory and live programming. In this paper, we report experiences on creating a visual programming environment for Machinations, a domain-specific language for game design. We share initial findings on how to automate the development of graph- and tree- based editors in Godot, an open source game engine. Our results show that today\u2019s game engine technology provides a solid foundation for future programming language research.",
            "corpus_id": 264307073,
            "sentences": [
                {
                    "corpus_id": "264307073",
                    "title": "Game Engine Wizardry for Programming Mischief",
                    "text": "Visual programming environments have the potential to make programming more accessible to programmers of all backgrounds and skill levels. For instance, Domain-Specific Languages (DSLs) have been shown to help non-programmers raise their productivity, and improve the quality of their work [26]. DSLs offer specific abstractions and notations that provide increased expressiveness over particular problem domains, e.g., banking, digital forensics and game design. \n\nLanguage workbenches and meta-programming languages provide techniques and approaches that support rapid prototyping of DSLs [9], especially compilers and interpreters, e.g., based on Visual Studio Code and the Language Server Protocol (LSP). However, generic language technology often has limited support for visual programming environments, e.g., projectional editors [30], block-based editors [20], or web interfaces [31]. Language engineers require tools and techniques to speed up and simplify the development of visual programming environments that are user friendly, aesthetically pleasing, and easy to deploy, maintain and extend. \n\nGame engines are collections of software libraries, toolkits and cross-compilers that have been especially designed for developing portable visual applications, games in particular. These engines represent the state of the art in 2D and 3D frameworks for creating visual simulations, Heads-Up Displays (HUDs) and immersive interactive experiences. \n\nTo date, only a limited number of authors have explored using game engines for creating DSLs [19,27,34]. We see a research opportunity to bridge the gap between the technological spaces of game engine technology and Programming Language (PL) research, language workbenches in particular. \n\nWe hypothesize that game engines are well-suited for the automated development of interactive programming environments, especially visual DSLs. In particular, we aim to learn how game engines can be used for creating visual input and feedback mechanisms that support exploratory programming, live programming and creative tinkering. \n\nTo shed light on this matter, we conduct a feasibility analysis and carry out a pilot study. First, we create a concise overview of a limited number of well-known game engines in Section 2. We assess strengths, weaknesses, opportunities and threats.",
                    "score": 0.4065954769365496,
                    "section_title": "Introduction",
                    "char_start_offset": 15,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 138
                        },
                        {
                            "start": 139,
                            "end": 295
                        },
                        {
                            "start": 296,
                            "end": 463
                        },
                        {
                            "start": 466,
                            "end": 708
                        },
                        {
                            "start": 709,
                            "end": 891
                        },
                        {
                            "start": 892,
                            "end": 1104
                        },
                        {
                            "start": 1107,
                            "end": 1288
                        },
                        {
                            "start": 1289,
                            "end": 1454
                        },
                        {
                            "start": 1457,
                            "end": 1561
                        },
                        {
                            "start": 1562,
                            "end": 1744
                        },
                        {
                            "start": 1747,
                            "end": 1890
                        },
                        {
                            "start": 1891,
                            "end": 2079
                        },
                        {
                            "start": 2082,
                            "end": 2174
                        },
                        {
                            "start": 2175,
                            "end": 2331
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 290,
                            "end": 294,
                            "matchedPaperCorpusId": "264769167"
                        },
                        {
                            "start": 591,
                            "end": 594,
                            "matchedPaperCorpusId": "5234848"
                        },
                        {
                            "start": 836,
                            "end": 840,
                            "matchedPaperCorpusId": "7129564"
                        },
                        {
                            "start": 862,
                            "end": 866,
                            "matchedPaperCorpusId": "243867310"
                        },
                        {
                            "start": 886,
                            "end": 890,
                            "matchedPaperCorpusId": "254126377"
                        },
                        {
                            "start": 1550,
                            "end": 1554,
                            "matchedPaperCorpusId": "27875923"
                        },
                        {
                            "start": 1557,
                            "end": 1560,
                            "matchedPaperCorpusId": "6365940"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9169921875
                }
            ],
            "relevance_judgement": 0.9169921875,
            "relevance_judgment_input_expanded": "# Title: Game Engine Wizardry for Programming Mischief\n# Venue: PAINT@SPLASH\n# Authors: Riemer van Rozen\n## Abstract\nProgramming grants individuals the capability to design, create, and bring ideas to life. To improve their skills, programmers require powerful languages and programming environments for understanding the impact of gradual code changes. We investigate how modern game engine technology can be leveraged for creating visual input and feedback mechanisms that drive exploratory and live programming. In this paper, we report experiences on creating a visual programming environment for Machinations, a domain-specific language for game design. We share initial findings on how to automate the development of graph- and tree- based editors in Godot, an open source game engine. Our results show that today\u2019s game engine technology provides a solid foundation for future programming language research.\n## Introduction\nVisual programming environments have the potential to make programming more accessible to programmers of all backgrounds and skill levels. For instance, Domain-Specific Languages (DSLs) have been shown to help non-programmers raise their productivity, and improve the quality of their work [26]. DSLs offer specific abstractions and notations that provide increased expressiveness over particular problem domains, e.g., banking, digital forensics and game design. \n\nLanguage workbenches and meta-programming languages provide techniques and approaches that support rapid prototyping of DSLs [9], especially compilers and interpreters, e.g., based on Visual Studio Code and the Language Server Protocol (LSP). However, generic language technology often has limited support for visual programming environments, e.g., projectional editors [30], block-based editors [20], or web interfaces [31]. Language engineers require tools and techniques to speed up and simplify the development of visual programming environments that are user friendly, aesthetically pleasing, and easy to deploy, maintain and extend. \n\nGame engines are collections of software libraries, toolkits and cross-compilers that have been especially designed for developing portable visual applications, games in particular. These engines represent the state of the art in 2D and 3D frameworks for creating visual simulations, Heads-Up Displays (HUDs) and immersive interactive experiences. \n\nTo date, only a limited number of authors have explored using game engines for creating DSLs [19,27,34]. We see a research opportunity to bridge the gap between the technological spaces of game engine technology and Programming Language (PL) research, language workbenches in particular. \n\nWe hypothesize that game engines are well-suited for the automated development of interactive programming environments, especially visual DSLs. In particular, we aim to learn how game engines can be used for creating visual input and feedback mechanisms that support exploratory programming, live programming and creative tinkering. \n\nTo shed light on this matter, we conduct a feasibility analysis and carry out a pilot study. First, we create a concise overview of a limited number of well-known game engines in Section 2. We assess strengths, weaknesses, opportunities and threats.",
            "reference_string": "[264307073 | Rozen | 2023 | Citations: 4]"
        },
        {
            "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications",
            "venue": "arXiv.org",
            "year": 2017,
            "reference_count": 72,
            "citation_count": 3,
            "influential_citation_count": 0,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": null,
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://arxiv.org/abs/1712.10281, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "35131544",
                    "name": "M. S. Fayed"
                }
            ],
            "abstract": "Learning computer programming has been always challenging. Since the sixties of the last century, many researchers developed Visual Programming Languages (VPLs) to help in this regard. In this thesis, ten VPLs were specifically selected, studied, experimented with, and evaluated. A total of fifteen metrics were used to evaluate the tools. Comparisons, classification, and gap analysis were then presented. A list of requirements for a general-purpose VPL and a guide to help the novice programmer choose the right tool were generated and finally the PWCT (Programming Without Coding Technology, a novel general-purpose visual programming language) is developed and presented. PWCT has been launched as a Sourceforge project, which currently has more than 230,000 downloads for the language and more than 19,500,000 downloads for samples, tutorials and movies. Many business applications and projects are developed using PWCT, Also we developed the Supernova programming language and the Ring programming language using PWCT to prove that it can be used for advanced and large projects. Feedback from developers and results from the studies indicate that PWCT is a very appealing, competitive, and powerful language.",
            "corpus_id": 3949077,
            "sentences": [
                {
                    "corpus_id": "3949077",
                    "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications",
                    "text": "The objectives of this research subject are:\n\n1. Creating a Framework for creating visual programming languages to help us in creating the visual programming language components faster. The framework must contains the designers and domain-specific language to quickly create the visual programming language components. The implementation of each component should be done in little minutes to ensure the high-level of productivity. 2. Designing a General-Purpose visual programming language to make programming easier to understand for audiences other than programmers and to help expert programmers to quickly create programs and applications in less time. 3. Implementing the General-Purpose visual programming language through an information system that support programs and applications creation and manipulation, to reduce errors and to help users program faster. 4. Evaluating the system in developing business applications and comparing this to using other traditional programming languages that are text based.",
                    "score": 0.3614349632155474,
                    "section_title": "Research Objectives",
                    "char_start_offset": 11043,
                    "sentence_offsets": [],
                    "ref_mentions": [
                        {
                            "start": 657,
                            "end": 658,
                            "matchedPaperCorpusId": "62213603"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.91259765625
                },
                {
                    "corpus_id": "3949077",
                    "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications",
                    "text": "Learning computer programming has been always challenging. Since the sixties of the last century, many researchers developed Visual Programming Languages (VPLs) to help in this regard. In this thesis, ten VPLs were specifically selected, studied, experimented with, and evaluated. A total of fifteen metrics were used to evaluate the tools. Comparisons, classification, and gap analysis were then presented. A list of requirements for a general-purpose VPL and a guide to help the novice programmer choose the right tool were generated and finally the PWCT (Programming Without Coding Technology, a novel general-purpose visual programming language) is developed and presented. PWCT has been launched as a Sourceforge project, which currently has more than 230,000 downloads for the language and more than 19,500,000 downloads for samples, tutorials and movies. Many business applications and projects are developed using PWCT, Also we developed the Supernova programming language and the Ring programming language using PWCT to prove that it can be used for advanced and large projects. Feedback from developers and results from the studies indicate that PWCT is a very appealing, competitive, and powerful language.",
                    "score": 0.37955109953353117,
                    "section_title": "abstract",
                    "char_start_offset": 0,
                    "sentence_offsets": [],
                    "ref_mentions": [],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.90771484375
                }
            ],
            "relevance_judgement": 0.91259765625,
            "relevance_judgment_input_expanded": "# Title: General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications\n# Venue: arXiv.org\n# Authors: M. S. Fayed\n## Abstract\nLearning computer programming has been always challenging. Since the sixties of the last century, many researchers developed Visual Programming Languages (VPLs) to help in this regard. In this thesis, ten VPLs were specifically selected, studied, experimented with, and evaluated. A total of fifteen metrics were used to evaluate the tools. Comparisons, classification, and gap analysis were then presented. A list of requirements for a general-purpose VPL and a guide to help the novice programmer choose the right tool were generated and finally the PWCT (Programming Without Coding Technology, a novel general-purpose visual programming language) is developed and presented. PWCT has been launched as a Sourceforge project, which currently has more than 230,000 downloads for the language and more than 19,500,000 downloads for samples, tutorials and movies. Many business applications and projects are developed using PWCT, Also we developed the Supernova programming language and the Ring programming language using PWCT to prove that it can be used for advanced and large projects. Feedback from developers and results from the studies indicate that PWCT is a very appealing, competitive, and powerful language.\n## Research Objectives\nThe objectives of this research subject are:\n\n1. Creating a Framework for creating visual programming languages to help us in creating the visual programming language components faster. The framework must contains the designers and domain-specific language to quickly create the visual programming language components. The implementation of each component should be done in little minutes to ensure the high-level of productivity. 2. Designing a General-Purpose visual programming language to make programming easier to understand for audiences other than programmers and to help expert programmers to quickly create programs and applications in less time. 3. Implementing the General-Purpose visual programming language through an information system that support programs and applications creation and manipulation, to reduce errors and to help users program faster. 4. Evaluating the system in developing business applications and comparing this to using other traditional programming languages that are text based.",
            "reference_string": "[3949077 | Fayed | 2017 | Citations: 3]"
        },
        {
            "title": "Mirror, Mirror, on The Wall, How Do We Measure What Our Students do in Scratch Programming?",
            "venue": "International Journal of Academic Research in Progressive Education and Development",
            "year": 2024,
            "reference_count": 15,
            "citation_count": 0,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://hrmars.com/papers_submitted/21678/mirror-mirror-on-the-wall-how-do-we-measure-what-our-students-do-in-scratch-programming.pdf",
                "status": "HYBRID",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.6007/ijarped/v13-i3/21678?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.6007/ijarped/v13-i3/21678, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2270269430",
                    "name": "Goh Kok Ming"
                },
                {
                    "authorId": "2306843847",
                    "name": "Anuthra Sirisena"
                },
                {
                    "authorId": "2235731262",
                    "name": "Dayang Rafidah Syariff M. Fuad"
                },
                {
                    "authorId": "2086538793",
                    "name": "J. Juharyanto"
                }
            ],
            "abstract": "This study presents an evaluation framework that aims to enhance the assessment of computational thinking (CT) skills and coding proficiency in students using Scratch programming. The framework takes inspiration from previous research and goes beyond traditional block-counting methods. Instead, it thoroughly analyzes Scratch projects, examining the types of blocks used and how they interact within the program. By incorporating established CT concepts and indicators of project complexity, the framework provides educators with a comprehensive approach to evaluating student projects. While implementing the framework may pose challenges in terms of manual assessment and scalability, it holds promise in fostering the development of vital CT skills in students and preparing them for success in an increasingly digital world. Further refinement and validation of the framework are necessary to ensure its effectiveness and applicability in diverse educational settings.",
            "corpus_id": 270526114,
            "sentences": [
                {
                    "corpus_id": "270526114",
                    "title": "Mirror, Mirror, on The Wall, How Do We Measure What Our Students do in Scratch Programming?",
                    "text": "Scratch is a visual programming language primarily designed for education. It uses a blockbased system, allowing users to create applications by combining visual components such as images, sounds, and videos with scripted functionalities. The logic of these applications is defined by assembling pre-defined blocks, similar to building with Lego bricks (Ford (Jr.), 2014; Stewart & Baek, 2023). Each block represents a specific command or action, guiding the application through various tasks. Additionally, Scratch provides a wide range of media resources, including graphics and sound effects, as well as features for designing personalized graphical and audio elements (Ford (Jr.), 2014). It offers a comprehensive environment that empowers users of all ages (Stewart & Baek, 2023). The intuitive visual programming language removes barriers, allowing beginners to easily dive into application development and receive immediate feedback on their creations (Ford (Jr.), 2014). This fosters a hands-on learning experience that helps users grasp fundamental programming concepts (Rose et al., 2017). \n\nBeyond being a programming language, Scratch is also a valuable pedagogical tool when integrated into different subject areas and learning environments (Stewart & Baek, 2023;Voinohovska & Doncheva, 2021;Resnick & Rusk, 2020). According to the study by Silva et al. (2022), integrating Scratch into mathematics education enhances the teaching and learning process. This approach promotes a more meaningful, creative, and playful learning experience, as reported by four Mathematics undergraduate students from a Federal Public Institution in the Midwest. In a pilot project conducted by Naz et al (2017), the effectiveness of Scratch programming in K-12 classrooms was investigated. The project aimed to support nineteen K-12 teachers from middle and high schools with no prior programming experience. \n\nThe teachers received training in a \"hybrid format\" that combined face-to-face and online training. Pre-and post-assessments revealed a significant improvement in students' performance when utilizing Scratch programming. Furthermore, Bahar's (2021) study explored the integration of Scratch, a visual programming language, into language teaching for children. The study aimed to assess its impact on language development and cognitive skills, as well as identify benefits and challenges from the perspectives of students and teachers.",
                    "score": 0.49093709452790507,
                    "section_title": "Literature Review Scratch Programming",
                    "char_start_offset": 3884,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 74
                        },
                        {
                            "start": 75,
                            "end": 238
                        },
                        {
                            "start": 239,
                            "end": 394
                        },
                        {
                            "start": 395,
                            "end": 493
                        },
                        {
                            "start": 494,
                            "end": 691
                        },
                        {
                            "start": 692,
                            "end": 785
                        },
                        {
                            "start": 786,
                            "end": 978
                        },
                        {
                            "start": 979,
                            "end": 1099
                        },
                        {
                            "start": 1102,
                            "end": 1327
                        },
                        {
                            "start": 1328,
                            "end": 1465
                        },
                        {
                            "start": 1466,
                            "end": 1655
                        },
                        {
                            "start": 1656,
                            "end": 1783
                        },
                        {
                            "start": 1784,
                            "end": 1902
                        },
                        {
                            "start": 1905,
                            "end": 2004
                        },
                        {
                            "start": 2005,
                            "end": 2125
                        },
                        {
                            "start": 2126,
                            "end": 2264
                        },
                        {
                            "start": 2265,
                            "end": 2439
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 1276,
                            "end": 1305,
                            "matchedPaperCorpusId": "233772013"
                        },
                        {
                            "start": 1354,
                            "end": 1373,
                            "matchedPaperCorpusId": "253005339"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.912109375
                }
            ],
            "relevance_judgement": 0.912109375,
            "relevance_judgment_input_expanded": "# Title: Mirror, Mirror, on The Wall, How Do We Measure What Our Students do in Scratch Programming?\n# Venue: International Journal of Academic Research in Progressive Education and Development\n# Authors: Goh Kok Ming, Anuthra Sirisena, Dayang Rafidah Syariff M. Fuad, J. Juharyanto\n## Abstract\nThis study presents an evaluation framework that aims to enhance the assessment of computational thinking (CT) skills and coding proficiency in students using Scratch programming. The framework takes inspiration from previous research and goes beyond traditional block-counting methods. Instead, it thoroughly analyzes Scratch projects, examining the types of blocks used and how they interact within the program. By incorporating established CT concepts and indicators of project complexity, the framework provides educators with a comprehensive approach to evaluating student projects. While implementing the framework may pose challenges in terms of manual assessment and scalability, it holds promise in fostering the development of vital CT skills in students and preparing them for success in an increasingly digital world. Further refinement and validation of the framework are necessary to ensure its effectiveness and applicability in diverse educational settings.\n## Literature Review Scratch Programming\nScratch is a visual programming language primarily designed for education. It uses a blockbased system, allowing users to create applications by combining visual components such as images, sounds, and videos with scripted functionalities. The logic of these applications is defined by assembling pre-defined blocks, similar to building with Lego bricks (Ford (Jr.), 2014; Stewart & Baek, 2023). Each block represents a specific command or action, guiding the application through various tasks. Additionally, Scratch provides a wide range of media resources, including graphics and sound effects, as well as features for designing personalized graphical and audio elements (Ford (Jr.), 2014). It offers a comprehensive environment that empowers users of all ages (Stewart & Baek, 2023). The intuitive visual programming language removes barriers, allowing beginners to easily dive into application development and receive immediate feedback on their creations (Ford (Jr.), 2014). This fosters a hands-on learning experience that helps users grasp fundamental programming concepts (Rose et al., 2017). \n\nBeyond being a programming language, Scratch is also a valuable pedagogical tool when integrated into different subject areas and learning environments (Stewart & Baek, 2023;Voinohovska & Doncheva, 2021;Resnick & Rusk, 2020). According to the study by Silva et al. (2022), integrating Scratch into mathematics education enhances the teaching and learning process. This approach promotes a more meaningful, creative, and playful learning experience, as reported by four Mathematics undergraduate students from a Federal Public Institution in the Midwest. In a pilot project conducted by Naz et al (2017), the effectiveness of Scratch programming in K-12 classrooms was investigated. The project aimed to support nineteen K-12 teachers from middle and high schools with no prior programming experience. \n\nThe teachers received training in a \"hybrid format\" that combined face-to-face and online training. Pre-and post-assessments revealed a significant improvement in students' performance when utilizing Scratch programming. Furthermore, Bahar's (2021) study explored the integration of Scratch, a visual programming language, into language teaching for children. The study aimed to assess its impact on language development and cognitive skills, as well as identify benefits and challenges from the perspectives of students and teachers.",
            "reference_string": "[270526114 | Ming et al. | 2024 | Citations: 0]"
        },
        {
            "title": "Collaborative Coding in a Robotic Visual Language",
            "venue": "International Conference on Computer Supported Education",
            "year": 2021,
            "reference_count": 14,
            "citation_count": 1,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://doi.org/10.5220/0010455501510156",
                "status": "HYBRID",
                "license": "CCBYNCND",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.5220/0010455501510156?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.5220/0010455501510156, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2106215024",
                    "name": "Farah Yasser Dawoud"
                },
                {
                    "authorId": "143859112",
                    "name": "A. Adel"
                },
                {
                    "authorId": "2730794",
                    "name": "Nada Sharaf"
                }
            ],
            "abstract": ": This paper presents a platform, that is a block-based visual programming environment. Students can collab-oratively interact using a \ufb02exible and versatile de\ufb01nition of visual programming code and interface created using Google Blockly, JavaScript, and Firebase. The web application is designed to allow students to program the Lego Mindstorms EV3. An experiment was conducted to investigate the effect of real-time collaboration on students working on the block-based visual programming web application.",
            "corpus_id": 235234208,
            "sentences": [
                {
                    "corpus_id": "235234208",
                    "title": "Collaborative Coding in a Robotic Visual Language",
                    "text": "Visual Programming reduces the need to write lond textual programs. Program thus have multiple dimensions not only the text (Burnett and McIntyre, 1995). The idea is that with visual constructs, it could have a better learning curve and be more appealing. \n\nFor example, with a robotic visual programming language, users can program the robot without writing a textual code and without significant knowledge of any programming language. Examples include Make Block1 and Open Roberta2 for programming different hardware systems using blocks. \n\nVisual programming languages have different several classes including block-based, diagrammatic, and iconic visual languages (Myers, 1990).",
                    "score": 0.3544289123930477,
                    "section_title": "VISUAL PROGRAMMING",
                    "char_start_offset": 2075,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 67
                        },
                        {
                            "start": 68,
                            "end": 153
                        },
                        {
                            "start": 154,
                            "end": 255
                        },
                        {
                            "start": 258,
                            "end": 436
                        },
                        {
                            "start": 437,
                            "end": 540
                        },
                        {
                            "start": 543,
                            "end": 682
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 124,
                            "end": 152,
                            "matchedPaperCorpusId": "14994189"
                        },
                        {
                            "start": 668,
                            "end": 681,
                            "matchedPaperCorpusId": "7335020"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.90966796875
                }
            ],
            "relevance_judgement": 0.90966796875,
            "relevance_judgment_input_expanded": "# Title: Collaborative Coding in a Robotic Visual Language\n# Venue: International Conference on Computer Supported Education\n# Authors: Farah Yasser Dawoud, A. Adel, Nada Sharaf\n## Abstract\n: This paper presents a platform, that is a block-based visual programming environment. Students can collab-oratively interact using a \ufb02exible and versatile de\ufb01nition of visual programming code and interface created using Google Blockly, JavaScript, and Firebase. The web application is designed to allow students to program the Lego Mindstorms EV3. An experiment was conducted to investigate the effect of real-time collaboration on students working on the block-based visual programming web application.\n## VISUAL PROGRAMMING\nVisual Programming reduces the need to write lond textual programs. Program thus have multiple dimensions not only the text (Burnett and McIntyre, 1995). The idea is that with visual constructs, it could have a better learning curve and be more appealing. \n\nFor example, with a robotic visual programming language, users can program the robot without writing a textual code and without significant knowledge of any programming language. Examples include Make Block1 and Open Roberta2 for programming different hardware systems using blocks. \n\nVisual programming languages have different several classes including block-based, diagrammatic, and iconic visual languages (Myers, 1990).",
            "reference_string": "[235234208 | Dawoud et al. | 2021 | Citations: 1]"
        },
        {
            "title": "Identifying middle school students\u2019 challenges in computational thinking-based science learning",
            "venue": "Research and Practice in Technology Enhanced Learning",
            "year": 2016,
            "reference_count": 71,
            "citation_count": 110,
            "influential_citation_count": 9,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://telrp.springeropen.com/track/pdf/10.1186/s41039-016-0036-2",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://pmc.ncbi.nlm.nih.gov/articles/PMC6302855, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2843915",
                    "name": "Satabdi Basu"
                },
                {
                    "authorId": "145800351",
                    "name": "Gautam Biswas"
                },
                {
                    "authorId": "35019130",
                    "name": "P. Sengupta"
                },
                {
                    "authorId": "2813127",
                    "name": "A. Dickes"
                },
                {
                    "authorId": "1732269",
                    "name": "J. Kinnebrew"
                },
                {
                    "authorId": "34995102",
                    "name": "Douglas B. Clark"
                }
            ],
            "abstract": "Computational thinking (CT) parallels the core practices of science, technology, engineering, and mathematics (STEM) education and is believed to effectively support students\u2019 learning of science and math concepts. However, despite the synergies between CT and STEM education, integrating the two to support synergistic learning remains an important challenge. Relatively, little is known about how a student\u2019s conceptual understanding develops in such learning environments and the difficulties they face when learning with such integrated curricula. In this paper, we present a research study with CTSiM (Computational Thinking in Simulation and Modeling)\u2014computational thinking-based learning environment for K-12 science, where students build and simulate computational models to study and gain an understanding of science processes. We investigate a set of core challenges (both computational and science domain related) that middle school students face when working with CTSiM, how these challenges evolve across different modeling activities, and the kinds of support provided by human observers that help students overcome these challenges. We identify four broad categories and 14 subcategories of challenges and show that the human-provided scaffolds help reduce the number of challenges students face over time. Finally, we discuss our plans to modify the CTSiM interfaces and embed scaffolding tools into CTSiM to help students overcome their various programming, modeling, and science-related challenges and thus gain a deeper understanding of the science concepts.",
            "corpus_id": 32610688,
            "sentences": [
                {
                    "corpus_id": "32610688",
                    "title": "Identifying middle school students\u2019 challenges in computational thinking-based science learning",
                    "text": "In a visual programming (VP) environment, students construct programs using graphical objects and a drag-and-drop interface, thus making the programming more intuitive and accessible to the novice programmer (Kelleher and Pausch 2005). Visual constructs significantly reduce issues with program syntax and understanding textual structures making it easier for students to focus on the semantic meaning of the constructs (Soloway 1993). For example, visual interfaces make it easier to interpret and use flow of control constructs, such as loops and conditionals (Parsons and Haden 2007a, b). \n\nCTSiM provides a library of visual constructs that students can choose from and arrange spatially to generate their computational models. If students try to drag and drop a programming construct incorrectly, the system disallows the action and indicates the error by explicitly displaying an \"x\" sign. Therefore, CTSiM eliminates the possibility of generating programs (that is, models) with syntax errors. Examples of other agent-based VP environments include AgentSheets (Repenning 1993), StarLogo TNG (Klopfer et al. 2005), Scratch (Maloney et al. 2004), ViMAP (Sengupta et al., 2015), and Alice (Conway 1997). They have been used successfully in teaching children CT through game design, storytelling, and modeling activities.",
                    "score": 0.36498851303176744,
                    "section_title": "The advantages of visual programming",
                    "char_start_offset": 11363,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 235
                        },
                        {
                            "start": 236,
                            "end": 435
                        },
                        {
                            "start": 436,
                            "end": 591
                        },
                        {
                            "start": 594,
                            "end": 731
                        },
                        {
                            "start": 732,
                            "end": 895
                        },
                        {
                            "start": 896,
                            "end": 1000
                        },
                        {
                            "start": 1001,
                            "end": 1207
                        },
                        {
                            "start": 1208,
                            "end": 1324
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 208,
                            "end": 234,
                            "matchedPaperCorpusId": "9916677"
                        },
                        {
                            "start": 420,
                            "end": 434,
                            "matchedPaperCorpusId": "15270981"
                        },
                        {
                            "start": 1067,
                            "end": 1083,
                            "matchedPaperCorpusId": "3187251"
                        },
                        {
                            "start": 1098,
                            "end": 1119,
                            "matchedPaperCorpusId": "54120970"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.90869140625
                }
            ],
            "relevance_judgement": 0.90869140625,
            "relevance_judgment_input_expanded": "# Title: Identifying middle school students\u2019 challenges in computational thinking-based science learning\n# Venue: Research and Practice in Technology Enhanced Learning\n# Authors: Satabdi Basu, Gautam Biswas, P. Sengupta, A. Dickes, J. Kinnebrew, Douglas B. Clark\n## Abstract\nComputational thinking (CT) parallels the core practices of science, technology, engineering, and mathematics (STEM) education and is believed to effectively support students\u2019 learning of science and math concepts. However, despite the synergies between CT and STEM education, integrating the two to support synergistic learning remains an important challenge. Relatively, little is known about how a student\u2019s conceptual understanding develops in such learning environments and the difficulties they face when learning with such integrated curricula. In this paper, we present a research study with CTSiM (Computational Thinking in Simulation and Modeling)\u2014computational thinking-based learning environment for K-12 science, where students build and simulate computational models to study and gain an understanding of science processes. We investigate a set of core challenges (both computational and science domain related) that middle school students face when working with CTSiM, how these challenges evolve across different modeling activities, and the kinds of support provided by human observers that help students overcome these challenges. We identify four broad categories and 14 subcategories of challenges and show that the human-provided scaffolds help reduce the number of challenges students face over time. Finally, we discuss our plans to modify the CTSiM interfaces and embed scaffolding tools into CTSiM to help students overcome their various programming, modeling, and science-related challenges and thus gain a deeper understanding of the science concepts.\n## The advantages of visual programming\nIn a visual programming (VP) environment, students construct programs using graphical objects and a drag-and-drop interface, thus making the programming more intuitive and accessible to the novice programmer (Kelleher and Pausch 2005). Visual constructs significantly reduce issues with program syntax and understanding textual structures making it easier for students to focus on the semantic meaning of the constructs (Soloway 1993). For example, visual interfaces make it easier to interpret and use flow of control constructs, such as loops and conditionals (Parsons and Haden 2007a, b). \n\nCTSiM provides a library of visual constructs that students can choose from and arrange spatially to generate their computational models. If students try to drag and drop a programming construct incorrectly, the system disallows the action and indicates the error by explicitly displaying an \"x\" sign. Therefore, CTSiM eliminates the possibility of generating programs (that is, models) with syntax errors. Examples of other agent-based VP environments include AgentSheets (Repenning 1993), StarLogo TNG (Klopfer et al. 2005), Scratch (Maloney et al. 2004), ViMAP (Sengupta et al., 2015), and Alice (Conway 1997). They have been used successfully in teaching children CT through game design, storytelling, and modeling activities.",
            "reference_string": "[32610688 | Basu et al. | 2016 | Citations: 110]"
        },
        {
            "title": "Visual Low-Code Language for Orchestrating Large-Scale Distributed Computing",
            "venue": "Journal of Grid Computing",
            "year": 2023,
            "reference_count": 72,
            "citation_count": 1,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://link.springer.com/content/pdf/10.1007/s10723-023-09666-x.pdf",
                "status": "HYBRID",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.1007/s10723-023-09666-x?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.1007/s10723-023-09666-x, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "1856819",
                    "name": "Kamil Rybi\u0144ski"
                },
                {
                    "authorId": "3073900",
                    "name": "M. Smialek"
                },
                {
                    "authorId": "2868722",
                    "name": "A. Sostaks"
                },
                {
                    "authorId": "152329569",
                    "name": "Krzysztof Marek"
                },
                {
                    "authorId": "79552271",
                    "name": "Rados\u0142aw Roszczyk"
                },
                {
                    "authorId": "50728919",
                    "name": "Marek Wdowiak"
                }
            ],
            "abstract": "Distributed, large-scale computing is typically performed using textual general-purpose programming languages. This requires significant programming skills associated with the parallelisation and distribution of computations. In this paper, we present a visual (graphical) programming language called the Computation Application Language (CAL) to raise abstraction in distributed computing. CAL programs define computation workflows by visualising data flowing between computation units. The goal is to reduce the amount of traditional code needed and thus facilitate development even by non-professional programmers. The language follows the low-code paradigm, i.e. its implementation (the editor and the runtime system) is available online. We formalise the language by defining its syntax using a metamodel and specifying its semantics using a two-step approach. We define a translation of CAL into an intermediate language which is then defined using an operational approach. This formalisation was used to develop a programming and execution environment. The environment orchestrates computations by interpreting the intermediate language and managing the instantiation of computation modules using data tokens. We also present an explanatory case-study example that shows a practical application of the language.",
            "corpus_id": 259318509,
            "sentences": [
                {
                    "corpus_id": "259318509",
                    "title": "Visual Low-Code Language for Orchestrating Large-Scale Distributed Computing",
                    "text": "Over many years, textual general-purpose programming languages have dominated software development. Such languages have multiple advantages, allowing programmers to develop solutions for different domains in the same language. At the same time, programming in contemporary programming languages like Java, Python or C# still necessitates significant professional skills. Especially challenging is the construction of time-efficient computation software that uses parallel and distributed processing. Considering that experienced programmers are scarce on the market, the need for new programming approaches is constantly growing. These approaches should reduce complexity by raising the level of abstraction and removing unwanted technology-related issues. This way, they would be accessible to non-professional programmers or even to domain experts. \n\nThis tendency to reduce the complexity of programming and raise the abstraction at which programming constructs are formulated led to the emergence of the low-code approach [1]. Low-code solutions are predominantly based on creating visual, model-based languages [2] with the aim of making them more understandable and accessible. It can be argued that such a solution should be easier to use by inexperienced programmers and raises the productivity of programming [3]. For this reason, the usage of visual programming languages is recently gaining popularity in engineering, and education [4,5]. This can be observed especially in the field of distributed computing, such as IoT [6], which shares multiple similarities with more powerful distributed Large-Scale Computing platforms. \n\nTypically, low-code systems are used to develop web-based business applications. However, recently it has been observed that the low-code paradigm can be easily applied to solve complex computation problems (using, e.g. Artificial Intelligence modules) [7]. This can be achieved by wrapping certain fragments of computation logic into computation units. These units can then be (re-)used when constructing computation applications at a significantly higher level of abstraction. This would lead to the emergence of a graphical (visual) programming language that would allow for expressing orchestrations (or choreographies [8]) of many computation units. \n\nThe main challenge for such a visual language would be dealing with typical computation parallelisation issues. Prominently, these issues pertain to High-Performance Computing (HPC) systems [9].",
                    "score": 0.348781854681473,
                    "section_title": "Introduction",
                    "char_start_offset": 768,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 99
                        },
                        {
                            "start": 100,
                            "end": 226
                        },
                        {
                            "start": 227,
                            "end": 370
                        },
                        {
                            "start": 371,
                            "end": 499
                        },
                        {
                            "start": 500,
                            "end": 629
                        },
                        {
                            "start": 630,
                            "end": 756
                        },
                        {
                            "start": 757,
                            "end": 850
                        },
                        {
                            "start": 853,
                            "end": 1030
                        },
                        {
                            "start": 1031,
                            "end": 1183
                        },
                        {
                            "start": 1184,
                            "end": 1322
                        },
                        {
                            "start": 1323,
                            "end": 1449
                        },
                        {
                            "start": 1450,
                            "end": 1636
                        },
                        {
                            "start": 1639,
                            "end": 1719
                        },
                        {
                            "start": 1720,
                            "end": 1858
                        },
                        {
                            "start": 1859,
                            "end": 1896
                        },
                        {
                            "start": 1897,
                            "end": 1992
                        },
                        {
                            "start": 1993,
                            "end": 2117
                        },
                        {
                            "start": 2118,
                            "end": 2293
                        },
                        {
                            "start": 2296,
                            "end": 2407
                        },
                        {
                            "start": 2408,
                            "end": 2490
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 1318,
                            "end": 1321,
                            "matchedPaperCorpusId": "254101606"
                        },
                        {
                            "start": 1443,
                            "end": 1446,
                            "matchedPaperCorpusId": "4039308"
                        },
                        {
                            "start": 1446,
                            "end": 1448,
                            "matchedPaperCorpusId": "231725028"
                        },
                        {
                            "start": 1533,
                            "end": 1536,
                            "matchedPaperCorpusId": "235414359"
                        },
                        {
                            "start": 1892,
                            "end": 1895,
                            "matchedPaperCorpusId": "254930853"
                        },
                        {
                            "start": 2262,
                            "end": 2265,
                            "matchedPaperCorpusId": "206447037"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.9052734375
                }
            ],
            "relevance_judgement": 0.9052734375,
            "relevance_judgment_input_expanded": "# Title: Visual Low-Code Language for Orchestrating Large-Scale Distributed Computing\n# Venue: Journal of Grid Computing\n# Authors: Kamil Rybi\u0144ski, M. Smialek, A. Sostaks, Krzysztof Marek, Rados\u0142aw Roszczyk, Marek Wdowiak\n## Abstract\nDistributed, large-scale computing is typically performed using textual general-purpose programming languages. This requires significant programming skills associated with the parallelisation and distribution of computations. In this paper, we present a visual (graphical) programming language called the Computation Application Language (CAL) to raise abstraction in distributed computing. CAL programs define computation workflows by visualising data flowing between computation units. The goal is to reduce the amount of traditional code needed and thus facilitate development even by non-professional programmers. The language follows the low-code paradigm, i.e. its implementation (the editor and the runtime system) is available online. We formalise the language by defining its syntax using a metamodel and specifying its semantics using a two-step approach. We define a translation of CAL into an intermediate language which is then defined using an operational approach. This formalisation was used to develop a programming and execution environment. The environment orchestrates computations by interpreting the intermediate language and managing the instantiation of computation modules using data tokens. We also present an explanatory case-study example that shows a practical application of the language.\n## Introduction\nOver many years, textual general-purpose programming languages have dominated software development. Such languages have multiple advantages, allowing programmers to develop solutions for different domains in the same language. At the same time, programming in contemporary programming languages like Java, Python or C# still necessitates significant professional skills. Especially challenging is the construction of time-efficient computation software that uses parallel and distributed processing. Considering that experienced programmers are scarce on the market, the need for new programming approaches is constantly growing. These approaches should reduce complexity by raising the level of abstraction and removing unwanted technology-related issues. This way, they would be accessible to non-professional programmers or even to domain experts. \n\nThis tendency to reduce the complexity of programming and raise the abstraction at which programming constructs are formulated led to the emergence of the low-code approach [1]. Low-code solutions are predominantly based on creating visual, model-based languages [2] with the aim of making them more understandable and accessible. It can be argued that such a solution should be easier to use by inexperienced programmers and raises the productivity of programming [3]. For this reason, the usage of visual programming languages is recently gaining popularity in engineering, and education [4,5]. This can be observed especially in the field of distributed computing, such as IoT [6], which shares multiple similarities with more powerful distributed Large-Scale Computing platforms. \n\nTypically, low-code systems are used to develop web-based business applications. However, recently it has been observed that the low-code paradigm can be easily applied to solve complex computation problems (using, e.g. Artificial Intelligence modules) [7]. This can be achieved by wrapping certain fragments of computation logic into computation units. These units can then be (re-)used when constructing computation applications at a significantly higher level of abstraction. This would lead to the emergence of a graphical (visual) programming language that would allow for expressing orchestrations (or choreographies [8]) of many computation units. \n\nThe main challenge for such a visual language would be dealing with typical computation parallelisation issues. Prominently, these issues pertain to High-Performance Computing (HPC) systems [9].",
            "reference_string": "[259318509 | Rybinski et al. | 2023 | Citations: 1]"
        },
        {
            "title": "Computational Thinking Training and Deep Learning Evaluation Model Construction Based on Scratch Modular Programming Course",
            "venue": "Computational Intelligence and Neuroscience",
            "year": 2023,
            "reference_count": 32,
            "citation_count": 5,
            "influential_citation_count": 1,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://downloads.hindawi.com/journals/cin/2023/3760957.pdf",
                "status": "HYBRID",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://pmc.ncbi.nlm.nih.gov/articles/PMC9977527, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2157262938",
                    "name": "Xiaoli Chen"
                },
                {
                    "authorId": "2209867633",
                    "name": "XiaoMing Wang"
                }
            ],
            "abstract": "To improve the algorithmic dimension, critical thinking, and problem-solving ability of computational thinking (CT) in students' programming courses, first, a programming teaching model is constructed based on the scratch modular programming course. Secondly, the design process of the teaching model and the problem-solving model of visual programming are studied. Finally, a deep learning (DL) evaluation model is constructed, and the effectiveness of the designed teaching model is analyzed and evaluated. The T-test result of paired samples of CT is t\u2009=\u2009\u22122.08, P\u2009<\u20090.05. There are significant differences in the results of the two tests, and the designed teaching model can cause changes in students' CT abilities. The results reveal that the effectiveness of the teaching model based on scratch modular programming has been verified on the basis of experiments. The post-test values of the dimensions of algorithmic thinking, critical thinking, collaborative thinking, and problem-solving thinking are all higher than the pretest values, and there are individual differences. The P values are all less than 0.05, which testifies that the CT training of the designed teaching model has the algorithm dimension, critical thinking, collaborative thinking, and problem-solving ability of students' CT. The post-test values of cognitive load are all lower than the pretest values, indicating that the model has a certain positive effect on reducing cognitive load, and there is a significant difference between the pretest and post-test. In the dimension of creative thinking, the P value is 0.218, and there is no obvious difference in the dimensions of creativity and self-efficacy. It can be found from the DL evaluation that the average value of the DL knowledge and skills dimensions is greater than 3.5, and college students can reach a certain standard level in terms of knowledge and skills. The mean value of the process and method dimensions is about 3.1, and the mean value of the emotional attitudes and values is 2.77. The process and method, as well as emotional attitude and values, need to be strengthened. The DL level of college students is relatively low, and it is necessary to improve their DL level from the perspective of knowledge and skills, processes and methods, emotional attitudes and values. This research makes up for the shortcomings of traditional programming and design software to a certain extent. It has a certain reference value for researchers and teachers to carry out programming teaching practice.",
            "corpus_id": 257145390,
            "sentences": [
                {
                    "corpus_id": "257145390",
                    "title": "Computational Thinking Training and Deep Learning Evaluation Model Construction Based on Scratch Modular Programming Course",
                    "text": "Visual programming tools lead learners to contact the code language in the way of module splicing, which can make learners accept learning programming psychologically. Its main teaching function is to weaken the writing of programming code, emphasize the application of CT knowledge and methods, and enhance the learner's motivation [23]. Visual programming tools can describe and execute problems in real situations in a modular programming language according to the problemsolving plan [24]. Figure 4 reveals the visual programming problem-solving model. \n\nAs shown in Figure 4, a plan is formed through CT and methods, and a visual programming platform program is built according to the plan. After the platform is debugged, the solution to the problem is obtained and mapped to the real situation. Trough the real situation, questions can be raised and fed back to the CTmethods. Te real situation can further extract the elements in the real situation, such as people, things, things and rules. Finally, the problem is solved.",
                    "score": 0.3832814172581209,
                    "section_title": "Visual Programming Problem-Solving Model.",
                    "char_start_offset": 9036,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 167
                        },
                        {
                            "start": 168,
                            "end": 338
                        },
                        {
                            "start": 339,
                            "end": 493
                        },
                        {
                            "start": 494,
                            "end": 556
                        },
                        {
                            "start": 559,
                            "end": 695
                        },
                        {
                            "start": 696,
                            "end": 801
                        },
                        {
                            "start": 802,
                            "end": 883
                        },
                        {
                            "start": 884,
                            "end": 999
                        },
                        {
                            "start": 1000,
                            "end": 1031
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 333,
                            "end": 337,
                            "matchedPaperCorpusId": "235749050"
                        },
                        {
                            "start": 488,
                            "end": 492,
                            "matchedPaperCorpusId": "237732833"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.90478515625
                }
            ],
            "relevance_judgement": 0.90478515625,
            "relevance_judgment_input_expanded": "# Title: Computational Thinking Training and Deep Learning Evaluation Model Construction Based on Scratch Modular Programming Course\n# Venue: Computational Intelligence and Neuroscience\n# Authors: Xiaoli Chen, XiaoMing Wang\n## Abstract\nTo improve the algorithmic dimension, critical thinking, and problem-solving ability of computational thinking (CT) in students' programming courses, first, a programming teaching model is constructed based on the scratch modular programming course. Secondly, the design process of the teaching model and the problem-solving model of visual programming are studied. Finally, a deep learning (DL) evaluation model is constructed, and the effectiveness of the designed teaching model is analyzed and evaluated. The T-test result of paired samples of CT is t\u2009=\u2009\u22122.08, P\u2009<\u20090.05. There are significant differences in the results of the two tests, and the designed teaching model can cause changes in students' CT abilities. The results reveal that the effectiveness of the teaching model based on scratch modular programming has been verified on the basis of experiments. The post-test values of the dimensions of algorithmic thinking, critical thinking, collaborative thinking, and problem-solving thinking are all higher than the pretest values, and there are individual differences. The P values are all less than 0.05, which testifies that the CT training of the designed teaching model has the algorithm dimension, critical thinking, collaborative thinking, and problem-solving ability of students' CT. The post-test values of cognitive load are all lower than the pretest values, indicating that the model has a certain positive effect on reducing cognitive load, and there is a significant difference between the pretest and post-test. In the dimension of creative thinking, the P value is 0.218, and there is no obvious difference in the dimensions of creativity and self-efficacy. It can be found from the DL evaluation that the average value of the DL knowledge and skills dimensions is greater than 3.5, and college students can reach a certain standard level in terms of knowledge and skills. The mean value of the process and method dimensions is about 3.1, and the mean value of the emotional attitudes and values is 2.77. The process and method, as well as emotional attitude and values, need to be strengthened. The DL level of college students is relatively low, and it is necessary to improve their DL level from the perspective of knowledge and skills, processes and methods, emotional attitudes and values. This research makes up for the shortcomings of traditional programming and design software to a certain extent. It has a certain reference value for researchers and teachers to carry out programming teaching practice.\n## Visual Programming Problem-Solving Model.\nVisual programming tools lead learners to contact the code language in the way of module splicing, which can make learners accept learning programming psychologically. Its main teaching function is to weaken the writing of programming code, emphasize the application of CT knowledge and methods, and enhance the learner's motivation [23]. Visual programming tools can describe and execute problems in real situations in a modular programming language according to the problemsolving plan [24]. Figure 4 reveals the visual programming problem-solving model. \n\nAs shown in Figure 4, a plan is formed through CT and methods, and a visual programming platform program is built according to the plan. After the platform is debugged, the solution to the problem is obtained and mapped to the real situation. Trough the real situation, questions can be raised and fed back to the CTmethods. Te real situation can further extract the elements in the real situation, such as people, things, things and rules. Finally, the problem is solved.",
            "reference_string": "[257145390 | Chen et al. | 2023 | Citations: 5]"
        },
        {
            "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs",
            "venue": "International Conference on Human Factors in Computing Systems",
            "year": 2023,
            "reference_count": 103,
            "citation_count": 1,
            "influential_citation_count": 0,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": null,
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://arxiv.org/abs/2312.09672, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2261898099",
                    "name": "Zhongyi Zhou"
                },
                {
                    "authorId": "2214751677",
                    "name": "Jing Jin"
                },
                {
                    "authorId": "95798184",
                    "name": "Vrushank Phadnis"
                },
                {
                    "authorId": "29436685",
                    "name": "Xiuxiu Yuan"
                },
                {
                    "authorId": "2261902264",
                    "name": "Jun Jiang"
                },
                {
                    "authorId": "2274943688",
                    "name": "Xun Qian"
                },
                {
                    "authorId": "2261902483",
                    "name": "Kristen Wright"
                },
                {
                    "authorId": "2261902982",
                    "name": "Mark Sherwood"
                },
                {
                    "authorId": "2261904117",
                    "name": "Jason Mayes"
                },
                {
                    "authorId": "2261943879",
                    "name": "Jingtao Zhou"
                },
                {
                    "authorId": "2275032507",
                    "name": "Yiyi Huang"
                },
                {
                    "authorId": "2275017028",
                    "name": "Zheng Xu"
                },
                {
                    "authorId": "2274975067",
                    "name": "Yinda Zhang"
                },
                {
                    "authorId": "2274929798",
                    "name": "Johnny Lee"
                },
                {
                    "authorId": "2292510931",
                    "name": "Alex Olwal"
                },
                {
                    "authorId": "2274972576",
                    "name": "David Kim"
                },
                {
                    "authorId": "2214753154",
                    "name": "Ram Iyengar"
                },
                {
                    "authorId": "2262397661",
                    "name": "Na Li"
                },
                {
                    "authorId": "2350823722",
                    "name": "Ruofei Du"
                }
            ],
            "abstract": "Visual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace. In this paper, we introduce InstructPipe, an AI assistant for prototyping machine learning (ML) pipelines with text instructions. We contribute two large language model (LLM) modules and a code interpreter as part of our framework. The LLM modules generate pseudocode for a target pipeline, and the interpreter renders the pipeline in the node-graph editor for further human-AI collaboration. Both technical and user evaluation (N=16) shows that InstructPipe empowers users to streamline their ML pipeline workflow, reduce their learning curve, and leverage open-ended commands to spark innovative ideas.",
            "corpus_id": 276961580,
            "sentences": [
                {
                    "corpus_id": "276961580",
                    "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs",
                    "text": "A computer program defines the operation of computer systems. However, \"the program given to a computer for solving a problem need not be in a written format\" [73]. This future-looking statement, dating back to the 1960s, inspired several generations of researchers to design and build visual programming systems. Today, visual programming systems (e.g., LabView [39], Unity Graph Editor [76], PromptChainer [84], ComfyUI [13] and Visual Blocks [18]) typically feature a node graph editor, providing users with a visual workspace to \"write\" their program using \"building blocks\" [28,68,89]. Recent work further explored the application of visual programming in education [9,35,40], XR creativity support [88,91,93], and robotics [14,30,31]. For example, Zhang et al. [93] connected the visual programming tool to the concept of teaching by demonstration [44,49,99], allowing users to rapidly customize AR effects in video creation. FlowMatic [91] extended traditional visual programming interfaces into 3D virtual environments, providing users with immersive authoring experiences. \n\nAdvancements in AI have introduced many repositories of advanced ML models [33,66], and an increasing number of researchers are exploring AI chains [41,86]. This progress has motivated HCI researchers to design and build a range of visual programming interfaces to support the AI development process [13,43,84]. For example, ChainForge is a web-based platform for developers to explore various LLM-related configuration and designs in a wide range of applications [4]. Visual Blocks enables creation and interaction of advanced ML pipelines that can leverage state-of-the-art computer vision and computer graphics models in the browser [18]. \n\nThis work contributes the technical system, implementation and evaluation of a novel AI assistant that enables the use of text-based instructions in visual programming of ML pipelines. Compared to typical workflows in which people manually build their pipelines, InstructPipe has the potential to accelerate ML pipeline prototyping in visual programming.",
                    "score": 0.3685763966626367,
                    "section_title": "Related Work 2.1 Visual Programming",
                    "char_start_offset": 6886,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 61
                        },
                        {
                            "start": 62,
                            "end": 164
                        },
                        {
                            "start": 165,
                            "end": 313
                        },
                        {
                            "start": 314,
                            "end": 590
                        },
                        {
                            "start": 591,
                            "end": 740
                        },
                        {
                            "start": 741,
                            "end": 931
                        },
                        {
                            "start": 932,
                            "end": 1081
                        },
                        {
                            "start": 1084,
                            "end": 1240
                        },
                        {
                            "start": 1241,
                            "end": 1395
                        },
                        {
                            "start": 1396,
                            "end": 1552
                        },
                        {
                            "start": 1553,
                            "end": 1725
                        },
                        {
                            "start": 1728,
                            "end": 1912
                        },
                        {
                            "start": 1913,
                            "end": 2082
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 408,
                            "end": 412,
                            "matchedPaperCorpusId": "247447133"
                        },
                        {
                            "start": 445,
                            "end": 449,
                            "matchedPaperCorpusId": "258216977"
                        },
                        {
                            "start": 579,
                            "end": 583,
                            "matchedPaperCorpusId": "1529669"
                        },
                        {
                            "start": 583,
                            "end": 586,
                            "matchedPaperCorpusId": "259376453"
                        },
                        {
                            "start": 586,
                            "end": 589,
                            "matchedPaperCorpusId": "269753286"
                        },
                        {
                            "start": 671,
                            "end": 674,
                            "matchedPaperCorpusId": "267523023"
                        },
                        {
                            "start": 674,
                            "end": 677,
                            "matchedPaperCorpusId": "258217657"
                        },
                        {
                            "start": 677,
                            "end": 680,
                            "matchedPaperCorpusId": "220885043"
                        },
                        {
                            "start": 704,
                            "end": 708,
                            "matchedPaperCorpusId": "269717820"
                        },
                        {
                            "start": 708,
                            "end": 711,
                            "matchedPaperCorpusId": "222799772"
                        },
                        {
                            "start": 711,
                            "end": 714,
                            "matchedPaperCorpusId": "264350354"
                        },
                        {
                            "start": 729,
                            "end": 733,
                            "matchedPaperCorpusId": "16198810"
                        },
                        {
                            "start": 733,
                            "end": 736,
                            "matchedPaperCorpusId": "207237260"
                        },
                        {
                            "start": 736,
                            "end": 739,
                            "matchedPaperCorpusId": "23415794"
                        },
                        {
                            "start": 767,
                            "end": 771,
                            "matchedPaperCorpusId": "264350354"
                        },
                        {
                            "start": 854,
                            "end": 858,
                            "matchedPaperCorpusId": "1504689"
                        },
                        {
                            "start": 858,
                            "end": 861,
                            "matchedPaperCorpusId": "12628167"
                        },
                        {
                            "start": 861,
                            "end": 864,
                            "matchedPaperCorpusId": "251252905"
                        },
                        {
                            "start": 942,
                            "end": 946,
                            "matchedPaperCorpusId": "222799772"
                        },
                        {
                            "start": 1163,
                            "end": 1166,
                            "matchedPaperCorpusId": "257833781"
                        },
                        {
                            "start": 1236,
                            "end": 1239,
                            "matchedPaperCorpusId": "238353829"
                        },
                        {
                            "start": 1391,
                            "end": 1394,
                            "matchedPaperCorpusId": "247447133"
                        },
                        {
                            "start": 1548,
                            "end": 1551,
                            "matchedPaperCorpusId": "262044762"
                        },
                        {
                            "start": 1720,
                            "end": 1724,
                            "matchedPaperCorpusId": "258216977"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.90380859375
                },
                {
                    "corpus_id": "276961580",
                    "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs",
                    "text": "A visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners. Advances in machine learning (ML) further stimulate growing interest in visual programming. Open-source ML hubs (e.g., TF-Hub [1], PyTorch-Hub [57], and Hugging Face [83]) contribute large numbers of encapsulated modules that accelerate AI project development and experimentation, and such libraries provide important resources for an ML-based visual programming platform. Recent advancements in large language models (LLMs) [3,8,77] and findings on Chain-of-Thought [81] have further stimulated community-wide interest in visual programming [4,19,84,86], suggesting further potential in the interactive exploration of AI chains. \n\nDespite the development of visual programming platforms in various domains, we observed that existing systems share one similar characteristic: users usually initiate a creative process in the workspace \"from scratch\". This implies that users need to 1) select nodes, 2) ideate the pipeline structure, and finally, 3) connect nodes within a completely empty workspace. As was also highlighted in existing literature in programming tools [92,95], such processes can easily overwhelm users, especially those who are unfamiliar with a particular visual programming platform. Providing pipeline templates may reduce on-boarding efforts [9,21], but the templates inherently lack flexibility and are not easily adaptable to users' specific needs. Similar issues also arise when users write programs using text-based editors (there exist many built-in functions in a particular programming language and multiple variables in a program), but advances in LLM assistants show that such challenges can be effectively reduced. For example, GitHub Copilot [23] enables users to generate code by simply describing users' requirements in natural language.",
                    "score": 0.35619923442544343,
                    "section_title": "Introduction",
                    "char_start_offset": 1548,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 123
                        },
                        {
                            "start": 124,
                            "end": 291
                        },
                        {
                            "start": 292,
                            "end": 497
                        },
                        {
                            "start": 498,
                            "end": 589
                        },
                        {
                            "start": 590,
                            "end": 870
                        },
                        {
                            "start": 871,
                            "end": 1127
                        },
                        {
                            "start": 1130,
                            "end": 1348
                        },
                        {
                            "start": 1349,
                            "end": 1498
                        },
                        {
                            "start": 1499,
                            "end": 1701
                        },
                        {
                            "start": 1702,
                            "end": 1870
                        },
                        {
                            "start": 1871,
                            "end": 2144
                        },
                        {
                            "start": 2145,
                            "end": 2270
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 641,
                            "end": 645,
                            "matchedPaperCorpusId": "202786778"
                        },
                        {
                            "start": 926,
                            "end": 928,
                            "matchedPaperCorpusId": "218971783"
                        },
                        {
                            "start": 928,
                            "end": 931,
                            "matchedPaperCorpusId": "13756489"
                        },
                        {
                            "start": 1040,
                            "end": 1043,
                            "matchedPaperCorpusId": "262044762"
                        },
                        {
                            "start": 1043,
                            "end": 1046,
                            "matchedPaperCorpusId": "264514979"
                        },
                        {
                            "start": 1046,
                            "end": 1049,
                            "matchedPaperCorpusId": "247447133"
                        },
                        {
                            "start": 1049,
                            "end": 1052,
                            "matchedPaperCorpusId": "238353829"
                        },
                        {
                            "start": 1567,
                            "end": 1571,
                            "matchedPaperCorpusId": "271903516"
                        },
                        {
                            "start": 1762,
                            "end": 1765,
                            "matchedPaperCorpusId": "267523023"
                        },
                        {
                            "start": 1765,
                            "end": 1768,
                            "matchedPaperCorpusId": "2452365"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.88818359375
                }
            ],
            "relevance_judgement": 0.90380859375,
            "relevance_judgment_input_expanded": "# Title: InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs\n# Venue: International Conference on Human Factors in Computing Systems\n# Authors: Zhongyi Zhou, Jing Jin, Vrushank Phadnis, Xiuxiu Yuan, Jun Jiang, Xun Qian, Kristen Wright, Mark Sherwood, Jason Mayes, Jingtao Zhou, Yiyi Huang, Zheng Xu, Yinda Zhang, Johnny Lee, Alex Olwal, David Kim, Ram Iyengar, Na Li, Ruofei Du\n## Abstract\nVisual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace. In this paper, we introduce InstructPipe, an AI assistant for prototyping machine learning (ML) pipelines with text instructions. We contribute two large language model (LLM) modules and a code interpreter as part of our framework. The LLM modules generate pseudocode for a target pipeline, and the interpreter renders the pipeline in the node-graph editor for further human-AI collaboration. Both technical and user evaluation (N=16) shows that InstructPipe empowers users to streamline their ML pipeline workflow, reduce their learning curve, and leverage open-ended commands to spark innovative ideas.\n## Introduction\nA visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners. Advances in machine learning (ML) further stimulate growing interest in visual programming. Open-source ML hubs (e.g., TF-Hub [1], PyTorch-Hub [57], and Hugging Face [83]) contribute large numbers of encapsulated modules that accelerate AI project development and experimentation, and such libraries provide important resources for an ML-based visual programming platform. Recent advancements in large language models (LLMs) [3,8,77] and findings on Chain-of-Thought [81] have further stimulated community-wide interest in visual programming [4,19,84,86], suggesting further potential in the interactive exploration of AI chains. \n\nDespite the development of visual programming platforms in various domains, we observed that existing systems share one similar characteristic: users usually initiate a creative process in the workspace \"from scratch\". This implies that users need to 1) select nodes, 2) ideate the pipeline structure, and finally, 3) connect nodes within a completely empty workspace. As was also highlighted in existing literature in programming tools [92,95], such processes can easily overwhelm users, especially those who are unfamiliar with a particular visual programming platform. Providing pipeline templates may reduce on-boarding efforts [9,21], but the templates inherently lack flexibility and are not easily adaptable to users' specific needs. Similar issues also arise when users write programs using text-based editors (there exist many built-in functions in a particular programming language and multiple variables in a program), but advances in LLM assistants show that such challenges can be effectively reduced. For example, GitHub Copilot [23] enables users to generate code by simply describing users' requirements in natural language.\n\n## Related Work 2.1 Visual Programming\nA computer program defines the operation of computer systems. However, \"the program given to a computer for solving a problem need not be in a written format\" [73]. This future-looking statement, dating back to the 1960s, inspired several generations of researchers to design and build visual programming systems. Today, visual programming systems (e.g., LabView [39], Unity Graph Editor [76], PromptChainer [84], ComfyUI [13] and Visual Blocks [18]) typically feature a node graph editor, providing users with a visual workspace to \"write\" their program using \"building blocks\" [28,68,89]. Recent work further explored the application of visual programming in education [9,35,40], XR creativity support [88,91,93], and robotics [14,30,31]. For example, Zhang et al. [93] connected the visual programming tool to the concept of teaching by demonstration [44,49,99], allowing users to rapidly customize AR effects in video creation. FlowMatic [91] extended traditional visual programming interfaces into 3D virtual environments, providing users with immersive authoring experiences. \n\nAdvancements in AI have introduced many repositories of advanced ML models [33,66], and an increasing number of researchers are exploring AI chains [41,86]. This progress has motivated HCI researchers to design and build a range of visual programming interfaces to support the AI development process [13,43,84]. For example, ChainForge is a web-based platform for developers to explore various LLM-related configuration and designs in a wide range of applications [4]. Visual Blocks enables creation and interaction of advanced ML pipelines that can leverage state-of-the-art computer vision and computer graphics models in the browser [18]. \n\nThis work contributes the technical system, implementation and evaluation of a novel AI assistant that enables the use of text-based instructions in visual programming of ML pipelines. Compared to typical workflows in which people manually build their pipelines, InstructPipe has the potential to accelerate ML pipeline prototyping in visual programming.",
            "reference_string": "[276961580 | Zhou et al. | 2023 | Citations: 1]"
        },
        {
            "title": "Core competencies of K-12 computer science education from the perspectives of college faculties and K-12 teachers",
            "venue": "International Journal of Computer Science Education in Schools",
            "year": 2023,
            "reference_count": 57,
            "citation_count": 3,
            "influential_citation_count": 1,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://ijcses.org/index.php/ijcses/article/download/161/115",
                "status": "HYBRID",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.21585/ijcses.v6i2.161?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.21585/ijcses.v6i2.161, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2260904421",
                    "name": "Meina Zhu"
                },
                {
                    "authorId": "2119129129",
                    "name": "Cheng Wang"
                }
            ],
            "abstract": "Given the increasing needs of employees with computational skills, understanding the core competencies of K-12 computer science (CS) education is vital. This phenomenological research aims to identify critical factors of CS education in K-12 schools from the perspectives and visions of CS faculties in higher education and teachers in K-12 schools. This study adopted a phenomenological research design. The researchers conducted a semi-structured interview with 13 CS faculties and K-12 CS teachers in Michigan and analyzed the data using thematic analysis. The findings indicated that: (1) the core competencies for K-12 CS education include problem-solving through computational thinking, math background, and foundational programming skills, and (2) what is essential is not the programming languages taught in K-12 schools but computational thinking, which enables the learners to easily transfer from one language environment to another. The findings provide important implications for K-12 CS education regarding the core competencies and programming languages to be taught.",
            "corpus_id": 264371146,
            "sentences": [
                {
                    "corpus_id": "264371146",
                    "title": "Core competencies of K-12 computer science education from the perspectives of college faculties and K-12 teachers",
                    "text": "Some of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace. Thus, novice CS learners can focus on the computational concepts and logic without being bothered by the syntax (Bau et al., 2017;Kelleher & Pausch, 2005). Some research argues that visual programming languages might be more appropriate for novice learners as they are easier to learn (Bau et al., 2017;Chen et al., 2020;Malan & Leitner, 2007). For example, Chen et al. (2020) analyzed data from 10,000 undergraduate students who enrolled in CS courses and found that students whose first programming language was visual performed better than did students whose first programming language was textual when the programming languages were first introduced in K-12 stages. Moreover, the visual languages and environments provide scaffolds and enable knowledge transfer. Research indicates that visual programming languages are used in K-12 CT education. For example, Hsu et al. (2018) and Lockwood and Mooney (2017) find that many schools have utilized visual programming languages to teach CT skills. Other studies indicate that using visual programming languages to teach students CT skills is effective in elementary education (The Horizon Report, 2017). Application of visual program languages in K-12 CS education is found to significantly improve students' understanding of computational concepts and computation practices (Saez-Lopez et al., 2016), logical thinking skills (Lindh and Holgersson 2007), and problem-solving skills in general (Chou 2018). \n\nGiven the mixed opinions of introducing visual or textual programming languages in K-12 CS education, Xu et al. (2019) conduct a meta-analysis on the block-based versus textual programming on student learning outcomes by reviewing 13 publications. They find a small effect size in favor of block-based programming languages on cognitive learning outcomes and suggest more research on the effectiveness of using block-based programming languages for novice learners in the future. \n\nTo sum up, the epistemology of K-12 CS education, including its necessity, its core competencies as well as programming languages that should be taught in its implementation, still need to be clarified.",
                    "score": 0.3579152567309107,
                    "section_title": "Programming Languages in CS Education",
                    "char_start_offset": 8102,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 195
                        },
                        {
                            "start": 196,
                            "end": 351
                        },
                        {
                            "start": 352,
                            "end": 540
                        },
                        {
                            "start": 541,
                            "end": 865
                        },
                        {
                            "start": 866,
                            "end": 962
                        },
                        {
                            "start": 963,
                            "end": 1046
                        },
                        {
                            "start": 1047,
                            "end": 1194
                        },
                        {
                            "start": 1195,
                            "end": 1350
                        },
                        {
                            "start": 1351,
                            "end": 1652
                        },
                        {
                            "start": 1655,
                            "end": 1902
                        },
                        {
                            "start": 1903,
                            "end": 2134
                        },
                        {
                            "start": 2137,
                            "end": 2339
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 326,
                            "end": 350,
                            "matchedPaperCorpusId": "9916677"
                        },
                        {
                            "start": 517,
                            "end": 539,
                            "matchedPaperCorpusId": "982597"
                        },
                        {
                            "start": 1060,
                            "end": 1077,
                            "matchedPaperCorpusId": "52813623"
                        },
                        {
                            "start": 1522,
                            "end": 1547,
                            "matchedPaperCorpusId": "27633066"
                        },
                        {
                            "start": 1573,
                            "end": 1600,
                            "matchedPaperCorpusId": "31042634"
                        },
                        {
                            "start": 1640,
                            "end": 1651,
                            "matchedPaperCorpusId": "55683453"
                        },
                        {
                            "start": 1757,
                            "end": 1773,
                            "matchedPaperCorpusId": "67914194"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.89697265625
                }
            ],
            "relevance_judgement": 0.89697265625,
            "relevance_judgment_input_expanded": "# Title: Core competencies of K-12 computer science education from the perspectives of college faculties and K-12 teachers\n# Venue: International Journal of Computer Science Education in Schools\n# Authors: Meina Zhu, Cheng Wang\n## Abstract\nGiven the increasing needs of employees with computational skills, understanding the core competencies of K-12 computer science (CS) education is vital. This phenomenological research aims to identify critical factors of CS education in K-12 schools from the perspectives and visions of CS faculties in higher education and teachers in K-12 schools. This study adopted a phenomenological research design. The researchers conducted a semi-structured interview with 13 CS faculties and K-12 CS teachers in Michigan and analyzed the data using thematic analysis. The findings indicated that: (1) the core competencies for K-12 CS education include problem-solving through computational thinking, math background, and foundational programming skills, and (2) what is essential is not the programming languages taught in K-12 schools but computational thinking, which enables the learners to easily transfer from one language environment to another. The findings provide important implications for K-12 CS education regarding the core competencies and programming languages to be taught.\n## Programming Languages in CS Education\nSome of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace. Thus, novice CS learners can focus on the computational concepts and logic without being bothered by the syntax (Bau et al., 2017;Kelleher & Pausch, 2005). Some research argues that visual programming languages might be more appropriate for novice learners as they are easier to learn (Bau et al., 2017;Chen et al., 2020;Malan & Leitner, 2007). For example, Chen et al. (2020) analyzed data from 10,000 undergraduate students who enrolled in CS courses and found that students whose first programming language was visual performed better than did students whose first programming language was textual when the programming languages were first introduced in K-12 stages. Moreover, the visual languages and environments provide scaffolds and enable knowledge transfer. Research indicates that visual programming languages are used in K-12 CT education. For example, Hsu et al. (2018) and Lockwood and Mooney (2017) find that many schools have utilized visual programming languages to teach CT skills. Other studies indicate that using visual programming languages to teach students CT skills is effective in elementary education (The Horizon Report, 2017). Application of visual program languages in K-12 CS education is found to significantly improve students' understanding of computational concepts and computation practices (Saez-Lopez et al., 2016), logical thinking skills (Lindh and Holgersson 2007), and problem-solving skills in general (Chou 2018). \n\nGiven the mixed opinions of introducing visual or textual programming languages in K-12 CS education, Xu et al. (2019) conduct a meta-analysis on the block-based versus textual programming on student learning outcomes by reviewing 13 publications. They find a small effect size in favor of block-based programming languages on cognitive learning outcomes and suggest more research on the effectiveness of using block-based programming languages for novice learners in the future. \n\nTo sum up, the epistemology of K-12 CS education, including its necessity, its core competencies as well as programming languages that should be taught in its implementation, still need to be clarified.",
            "reference_string": "[264371146 | Zhu et al. | 2023 | Citations: 3]"
        },
        {
            "title": "Toward improving student motivation and performance in introductory programming learning by Scratch: The role of achievement emotions",
            "venue": "Science in progress",
            "year": 2023,
            "reference_count": 51,
            "citation_count": 5,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://journals.sagepub.com/doi/pdf/10.1177/00368504231205985",
                "status": "GOLD",
                "license": "CCBYNC",
                "disclaimer": "Notice: Paper or abstract available at https://pmc.ncbi.nlm.nih.gov/articles/PMC10600874, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "133986052",
                    "name": "Fu-Hsiang Wen"
                },
                {
                    "authorId": "31324477",
                    "name": "Tienhua Wu"
                },
                {
                    "authorId": "2072747383",
                    "name": "W. Hsu"
                }
            ],
            "abstract": "This study investigated the differences in programming novices\u2019 intrinsic motivation and performance within a Scratch-based programming learning environment using a pretest\u2013posttest intervention design. Specifically, this study aimed to examine what and how achievement emotions were aroused to impact learners\u2019 academic success during Scratch implementation processes by employing regression analyses. One hundred and seventy-two undergraduates (Mage\u2009=\u200920.44, SDage\u2009=\u20091.09, 55.8% female) were voluntarily recruited to participate in a Scratch-based instruction workshop during a 6-week period. The workshop was structured with regard to preparation, Scratch-based programming learning and projects, and assessment activities and questionnaire implemented both before the instructional period and after the workshop. The results suggested that the Scratch-based intervention significantly increased students\u2019 overall motivation and examination performance. Concerning achievement emotions, the outcome emotion of hopelessness first negatively predicted students\u2019 motivation and performance. Anxiety then replaced hopelessness as a negative predictor, while enjoyment was the strongest predictor of motives and performance. Taking eight emotions together, the arousal of activity and outcome emotions within visual programming environments facilitated students\u2019 emotion dynamics that impacted motivation and performance. The discussion and contributions concerning the mechanism behind the effectiveness of visualization and the emotion-performance relationship are presented herein.",
            "corpus_id": 264168616,
            "sentences": [
                {
                    "corpus_id": "264168616",
                    "title": "Toward improving student motivation and performance in introductory programming learning by Scratch: The role of achievement emotions",
                    "text": "Scratch is a visual programming language developed by the Media Lab of Massachusetts Institute of Technology. 1,23 Although Scratch was initially developed for children, it is often employed regardless of age, background, or interests and has become one of the most commonly used VPE tools. 4,13 In contrast to traditional textual languages, Scratch enables students to learn algorithms and programming logic with a simple interface and drag-and-drop structure without focusing on syntax, which renders the process more attractive by designing important and unique content 8 and supports a more intuitive and engaging experience. 24 Specifically, Scratch provides an interactive media-rich environment for learners to create animated stories and games, leading to creativity and programming skill development in an exciting, fun way. 4,8,24 he advantages of Scratch for programming novices are evidential. Many researchers have identified positive results in learning, including programming knowledge and achievement, 8,23,25 computational thinking skills, 23,25 a positive attitude toward programming, 4,6,13,23 and learning motivation. 8 Scherer et al. 22 meta-analyzed previous studies and found that interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code. The authors also suggested that Scratch accommodates different projects, allowing for different interests and learning styles that may positively influence learners' attitudes, resulting in better performance. Scratch shows its potential benefits of making computer programming accessible and appealing to students for academic success.",
                    "score": 0.45732318312132936,
                    "section_title": "Scratch programming",
                    "char_start_offset": 3201,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 114
                        },
                        {
                            "start": 115,
                            "end": 295
                        },
                        {
                            "start": 296,
                            "end": 632
                        },
                        {
                            "start": 633,
                            "end": 840
                        },
                        {
                            "start": 841,
                            "end": 905
                        },
                        {
                            "start": 906,
                            "end": 1139
                        },
                        {
                            "start": 1140,
                            "end": 1410
                        },
                        {
                            "start": 1411,
                            "end": 1620
                        },
                        {
                            "start": 1621,
                            "end": 1747
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 110,
                            "end": 112,
                            "matchedPaperCorpusId": "56686833"
                        },
                        {
                            "start": 112,
                            "end": 114,
                            "matchedPaperCorpusId": "63450913"
                        },
                        {
                            "start": 291,
                            "end": 293,
                            "matchedPaperCorpusId": "7007858"
                        },
                        {
                            "start": 293,
                            "end": 295,
                            "matchedPaperCorpusId": "20505878"
                        },
                        {
                            "start": 573,
                            "end": 574,
                            "matchedPaperCorpusId": "46157729"
                        },
                        {
                            "start": 630,
                            "end": 632,
                            "matchedPaperCorpusId": "133502863"
                        },
                        {
                            "start": 834,
                            "end": 836,
                            "matchedPaperCorpusId": "7007858"
                        },
                        {
                            "start": 836,
                            "end": 838,
                            "matchedPaperCorpusId": "46157729"
                        },
                        {
                            "start": 838,
                            "end": 840,
                            "matchedPaperCorpusId": "133502863"
                        },
                        {
                            "start": 1018,
                            "end": 1020,
                            "matchedPaperCorpusId": "46157729"
                        },
                        {
                            "start": 1020,
                            "end": 1023,
                            "matchedPaperCorpusId": "63450913"
                        },
                        {
                            "start": 1023,
                            "end": 1025,
                            "matchedPaperCorpusId": "253075433"
                        },
                        {
                            "start": 1057,
                            "end": 1060,
                            "matchedPaperCorpusId": "63450913"
                        },
                        {
                            "start": 1060,
                            "end": 1062,
                            "matchedPaperCorpusId": "253075433"
                        },
                        {
                            "start": 1103,
                            "end": 1105,
                            "matchedPaperCorpusId": "7007858"
                        },
                        {
                            "start": 1105,
                            "end": 1107,
                            "matchedPaperCorpusId": "59528289"
                        },
                        {
                            "start": 1107,
                            "end": 1110,
                            "matchedPaperCorpusId": "20505878"
                        },
                        {
                            "start": 1110,
                            "end": 1112,
                            "matchedPaperCorpusId": "63450913"
                        },
                        {
                            "start": 1138,
                            "end": 1139,
                            "matchedPaperCorpusId": "46157729"
                        },
                        {
                            "start": 1155,
                            "end": 1157,
                            "matchedPaperCorpusId": "216204126"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.89306640625
                }
            ],
            "relevance_judgement": 0.89306640625,
            "relevance_judgment_input_expanded": "# Title: Toward improving student motivation and performance in introductory programming learning by Scratch: The role of achievement emotions\n# Venue: Science in progress\n# Authors: Fu-Hsiang Wen, Tienhua Wu, W. Hsu\n## Abstract\nThis study investigated the differences in programming novices\u2019 intrinsic motivation and performance within a Scratch-based programming learning environment using a pretest\u2013posttest intervention design. Specifically, this study aimed to examine what and how achievement emotions were aroused to impact learners\u2019 academic success during Scratch implementation processes by employing regression analyses. One hundred and seventy-two undergraduates (Mage\u2009=\u200920.44, SDage\u2009=\u20091.09, 55.8% female) were voluntarily recruited to participate in a Scratch-based instruction workshop during a 6-week period. The workshop was structured with regard to preparation, Scratch-based programming learning and projects, and assessment activities and questionnaire implemented both before the instructional period and after the workshop. The results suggested that the Scratch-based intervention significantly increased students\u2019 overall motivation and examination performance. Concerning achievement emotions, the outcome emotion of hopelessness first negatively predicted students\u2019 motivation and performance. Anxiety then replaced hopelessness as a negative predictor, while enjoyment was the strongest predictor of motives and performance. Taking eight emotions together, the arousal of activity and outcome emotions within visual programming environments facilitated students\u2019 emotion dynamics that impacted motivation and performance. The discussion and contributions concerning the mechanism behind the effectiveness of visualization and the emotion-performance relationship are presented herein.\n## Scratch programming\nScratch is a visual programming language developed by the Media Lab of Massachusetts Institute of Technology. 1,23 Although Scratch was initially developed for children, it is often employed regardless of age, background, or interests and has become one of the most commonly used VPE tools. 4,13 In contrast to traditional textual languages, Scratch enables students to learn algorithms and programming logic with a simple interface and drag-and-drop structure without focusing on syntax, which renders the process more attractive by designing important and unique content 8 and supports a more intuitive and engaging experience. 24 Specifically, Scratch provides an interactive media-rich environment for learners to create animated stories and games, leading to creativity and programming skill development in an exciting, fun way. 4,8,24 he advantages of Scratch for programming novices are evidential. Many researchers have identified positive results in learning, including programming knowledge and achievement, 8,23,25 computational thinking skills, 23,25 a positive attitude toward programming, 4,6,13,23 and learning motivation. 8 Scherer et al. 22 meta-analyzed previous studies and found that interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code. The authors also suggested that Scratch accommodates different projects, allowing for different interests and learning styles that may positively influence learners' attitudes, resulting in better performance. Scratch shows its potential benefits of making computer programming accessible and appealing to students for academic success.",
            "reference_string": "[264168616 | Wen et al. | 2023 | Citations: 5]"
        },
        {
            "title": "Research on the Impacts of Cognitive Style and Computational Thinking on College Students in a Visual Artificial Intelligence Course",
            "venue": "Frontiers in Psychology",
            "year": 2022,
            "reference_count": 44,
            "citation_count": 8,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://www.frontiersin.org/articles/10.3389/fpsyg.2022.864416/pdf",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://pmc.ncbi.nlm.nih.gov/articles/PMC9178524, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2270159",
                    "name": "Chi-Jane Wang"
                },
                {
                    "authorId": "1753583551",
                    "name": "Hua-Xu Zhong"
                },
                {
                    "authorId": "3154987",
                    "name": "Po-Sheng Chiu"
                },
                {
                    "authorId": "144336191",
                    "name": "Jui-Hung Chang"
                },
                {
                    "authorId": "2153093796",
                    "name": "Pei-Hsuan Wu"
                }
            ],
            "abstract": "Visual programming language is a crucial part of learning programming. On this basis, it is essential to use visual programming to lower the learning threshold for students to learn about artificial intelligence (AI) to meet current demands in higher education. Therefore, a 3-h AI course with an RGB-to-HSL learning task was implemented; the results of which were used to analyze university students from two different disciplines. Valid data were collected for 65 students (55 men, 10 women) in the Science (Sci)-student group and 39 students (20 men, 19 women) in the Humanities (Hum)-student group. Independent sample t-tests were conducted to analyze the difference between cognitive styles and computational thinking. No significant differences in either cognitive style or computational thinking ability were found after the AI course, indicating that taking visual AI courses lowers the learning threshold for students and makes it possible for them to take more difficult AI courses, which in turn effectively helping them acquire AI knowledge, which is crucial for cultivating talent in the field of AI.",
            "corpus_id": 249048171,
            "sentences": [
                {
                    "corpus_id": "249048171",
                    "title": "Research on the Impacts of Cognitive Style and Computational Thinking on College Students in a Visual Artificial Intelligence Course",
                    "text": "Visual programming plays an important role in programming education to promote students' understanding of programming and to maximize their engagement in problem-solving (Mladenovi\u0107 et al., 2021). Visual programming provides a programming interface that helps students learn programming concepts and processes (Lye and Koh, 2014;Chao, 2016;Essel et al., 2017;Mladenovi\u0107 et al., 2018;Scherer et al., 2020). In particular, Hu et al. (2021) indicated that visual programming can improve student's academic performance with a small to medium significant overall mean effect size in this area. A visual programming environment allows students to focus on developing and designing programs (Mladenovi\u0107 et al., 2018;Topalli and Cagiltay, 2018), so they become more motivated to solve programming problems without grammar constraints. Visual programming has major learning benefits for students, including an intuitive programming interface and reduced difficulties related to programming (Lye and Koh, 2014;Essel et al., 2017;Mladenovi\u0107 et al., 2018;Lindberg et al., 2019). Considering the need to effectively develop AI talents at the university level, it is necessary to consider the learning benefits provided by a visual programming learning environment. It helps university students quickly learn about AI and helps them gain a better understanding of AI.",
                    "score": 0.4310919816026011,
                    "section_title": "LITERATURE REVIEW Visual Programming Learning Environment",
                    "char_start_offset": 6770,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 196
                        },
                        {
                            "start": 197,
                            "end": 405
                        },
                        {
                            "start": 406,
                            "end": 588
                        },
                        {
                            "start": 589,
                            "end": 826
                        },
                        {
                            "start": 827,
                            "end": 1066
                        },
                        {
                            "start": 1067,
                            "end": 1251
                        },
                        {
                            "start": 1252,
                            "end": 1353
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 170,
                            "end": 195,
                            "matchedPaperCorpusId": "225393741"
                        },
                        {
                            "start": 310,
                            "end": 329,
                            "matchedPaperCorpusId": "11994747"
                        },
                        {
                            "start": 329,
                            "end": 340,
                            "matchedPaperCorpusId": "206930744"
                        },
                        {
                            "start": 340,
                            "end": 359,
                            "matchedPaperCorpusId": "157063390"
                        },
                        {
                            "start": 359,
                            "end": 383,
                            "matchedPaperCorpusId": "22570972"
                        },
                        {
                            "start": 383,
                            "end": 404,
                            "matchedPaperCorpusId": "216204126"
                        },
                        {
                            "start": 421,
                            "end": 437,
                            "matchedPaperCorpusId": "225492990"
                        },
                        {
                            "start": 684,
                            "end": 709,
                            "matchedPaperCorpusId": "22570972"
                        },
                        {
                            "start": 709,
                            "end": 736,
                            "matchedPaperCorpusId": "4012511"
                        },
                        {
                            "start": 981,
                            "end": 1000,
                            "matchedPaperCorpusId": "11994747"
                        },
                        {
                            "start": 1000,
                            "end": 1019,
                            "matchedPaperCorpusId": "157063390"
                        },
                        {
                            "start": 1019,
                            "end": 1043,
                            "matchedPaperCorpusId": "22570972"
                        },
                        {
                            "start": 1043,
                            "end": 1065,
                            "matchedPaperCorpusId": "69960068"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.89208984375
                }
            ],
            "relevance_judgement": 0.89208984375,
            "relevance_judgment_input_expanded": "# Title: Research on the Impacts of Cognitive Style and Computational Thinking on College Students in a Visual Artificial Intelligence Course\n# Venue: Frontiers in Psychology\n# Authors: Chi-Jane Wang, Hua-Xu Zhong, Po-Sheng Chiu, Jui-Hung Chang, Pei-Hsuan Wu\n## Abstract\nVisual programming language is a crucial part of learning programming. On this basis, it is essential to use visual programming to lower the learning threshold for students to learn about artificial intelligence (AI) to meet current demands in higher education. Therefore, a 3-h AI course with an RGB-to-HSL learning task was implemented; the results of which were used to analyze university students from two different disciplines. Valid data were collected for 65 students (55 men, 10 women) in the Science (Sci)-student group and 39 students (20 men, 19 women) in the Humanities (Hum)-student group. Independent sample t-tests were conducted to analyze the difference between cognitive styles and computational thinking. No significant differences in either cognitive style or computational thinking ability were found after the AI course, indicating that taking visual AI courses lowers the learning threshold for students and makes it possible for them to take more difficult AI courses, which in turn effectively helping them acquire AI knowledge, which is crucial for cultivating talent in the field of AI.\n## LITERATURE REVIEW Visual Programming Learning Environment\nVisual programming plays an important role in programming education to promote students' understanding of programming and to maximize their engagement in problem-solving (Mladenovi\u0107 et al., 2021). Visual programming provides a programming interface that helps students learn programming concepts and processes (Lye and Koh, 2014;Chao, 2016;Essel et al., 2017;Mladenovi\u0107 et al., 2018;Scherer et al., 2020). In particular, Hu et al. (2021) indicated that visual programming can improve student's academic performance with a small to medium significant overall mean effect size in this area. A visual programming environment allows students to focus on developing and designing programs (Mladenovi\u0107 et al., 2018;Topalli and Cagiltay, 2018), so they become more motivated to solve programming problems without grammar constraints. Visual programming has major learning benefits for students, including an intuitive programming interface and reduced difficulties related to programming (Lye and Koh, 2014;Essel et al., 2017;Mladenovi\u0107 et al., 2018;Lindberg et al., 2019). Considering the need to effectively develop AI talents at the university level, it is necessary to consider the learning benefits provided by a visual programming learning environment. It helps university students quickly learn about AI and helps them gain a better understanding of AI.",
            "reference_string": "[249048171 | Wang et al. | 2022 | Citations: 8]"
        },
        {
            "title": "Designing activities and tools to support university students' creative and collaborative exploration of physical computing",
            "venue": "Networked Learning Conference",
            "year": 2024,
            "reference_count": 24,
            "citation_count": 0,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://journals.aau.dk/index.php/nlc/article/download/8636/6917",
                "status": "HYBRID",
                "license": "CCBYNCND",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.54337/nlc.v12.8636?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.54337/nlc.v12.8636, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "151119319",
                    "name": "Melissa Kaivo"
                },
                {
                    "authorId": "1710284",
                    "name": "David Cuartielles"
                },
                {
                    "authorId": "3167385",
                    "name": "Daniel Spikol"
                }
            ],
            "abstract": "Today\u2019s digital world requires students to gain skills in collaborative problem solving and digital literacy. One approach is to teach people how to design computational artefacts that require both electronics and programming. Physical computing platforms offer an endless amount of possible opportunities for people to design and develop technological artefacts. However, many times students are overwhelmed when trying to learn both software and hardware simultaneously. The students struggle to be innovative and creative in their projects. Also, they focus on mastering the tool and following instructions for existing projects rather than being able to creatively explore the tool and understand the process of designing and developing new artefacts. For that reason, we aimed to answer the question: What type of tools and activities can be developed to support university students creative exploration of physical computing? Programming and electronics are fundamental design disciplines in today's digital world, and therefore they should be taught through design activities rather than limiting education to textbook readings and laboratory exercises. \nWe introduce our process of designing activities combined with a supportive tool to ease these challenges. The activities and tools were developed iteratively in three phases with a series of workshops with 126 students and teachers. The tool consists of a set of paper cards that provide necessary details (hints) about the electronics and software and help provide structure for the students to conceptualise how their artefact interacts. We additionally, introduced a learning Jigsaw pattern (orchestration script) for the later intervention that enabled individual students in the groups to focus on design, hardware, or software. For evaluation, we used the Creativity Support Index (CSI), which is a psychometric survey designed to assess the support of the creative process. The instrument investigates collaboration, efforts worth the result, exploration, immersion, enjoyment, and expressiveness. The results between the phases showed improvement with the use of the refined versions of the cards and orchestration of the learning activity. This study has demonstrated that design activities can provide a more accessible approach for the introduction of physical computing to students from various majors. Moreover, learning physical computing through design activities allows the learner to develop computational and design thinking skills for collaboratively solving problems.",
            "corpus_id": 248387201,
            "sentences": [
                {
                    "corpus_id": "248387201",
                    "title": "Designing activities and tools to support university students' creative and collaborative exploration of physical computing",
                    "text": "Sentance and Csizmadia (2017) observed that in schools, programming is perceived to be the most challenging aspect of computer science: students have problems with connecting the theoretical concepts to the practical applications and thinking computationally, as well as breaking problems into smaller pieces was perceived difficult. Visual programming tools have been developed to help with these challenges and aim to make programming more accessible for non-technical students. However, the differences between visual programming and traditional text-based programming are considerably extensive. Visual programming languages simplify procedures and guide the user through the creation, for example, with blocks that snap together or use colour-coding. Vihavainen, Paksula and Luukkainen (2011) noticed that a common problem when teaching text-based programming languages is that the focus is too much on learning specific syntax or semantics rather than understanding the process. When students understand the process of coding, they can construct more meaningful programs. Also, Przybylla & Romeike (2014) assert that physical computing encourages learners to use their imagination and creativity, focusing more on ideas, not on technical limitation. Physical computing takes a hands-on approach to understand computational thinking, building tangible artefacts to visualise the abstract programming concepts. \n\nProgramming and electronics are fundamental design disciplines, and therefore they should be taught through design activities rather than limiting education to textbook readings and \"cookbook\" laboratory exercises (Buechley, Eisenberg, & Elumeze, 2007). Even if the outcome does not turn out to be as hoped, students can revise their ideas and create a new version. Iversen and colleagues (2016) argue that design-based activities with tangible digital artefacts provide learners with competencies that reach beyond STEM (Science, Technology, Engineering, and Mathematics) skills. New digital tools, such as 3D printers, laser cutters, and construction kits should expand the forms of learning in classrooms enabling children to learn through the processes of constructing and thinking rather than disabling their thinking by letting them merely carry out ready planned projects. As a matter of fact, design thinking, and computational thinking are both tools for problem-solving (Bowler, 2014). \n\nLearning through design argues that students construct their knowledge by designing and creating meaningful projects and that learning is the most effective when pupils are engaged in creating a tangible artefact .",
                    "score": 0.3721991141151649,
                    "section_title": "Background",
                    "char_start_offset": 2990,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 333
                        },
                        {
                            "start": 334,
                            "end": 480
                        },
                        {
                            "start": 481,
                            "end": 599
                        },
                        {
                            "start": 600,
                            "end": 755
                        },
                        {
                            "start": 756,
                            "end": 984
                        },
                        {
                            "start": 985,
                            "end": 1077
                        },
                        {
                            "start": 1078,
                            "end": 1255
                        },
                        {
                            "start": 1256,
                            "end": 1414
                        },
                        {
                            "start": 1417,
                            "end": 1670
                        },
                        {
                            "start": 1671,
                            "end": 1782
                        },
                        {
                            "start": 1783,
                            "end": 1997
                        },
                        {
                            "start": 1998,
                            "end": 2296
                        },
                        {
                            "start": 2297,
                            "end": 2412
                        },
                        {
                            "start": 2415,
                            "end": 2629
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 756,
                            "end": 797,
                            "matchedPaperCorpusId": "3016237"
                        },
                        {
                            "start": 1084,
                            "end": 1110,
                            "matchedPaperCorpusId": "6485878"
                        },
                        {
                            "start": 1631,
                            "end": 1669,
                            "matchedPaperCorpusId": "18437979"
                        },
                        {
                            "start": 2397,
                            "end": 2411,
                            "matchedPaperCorpusId": "143257820"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.89111328125
                }
            ],
            "relevance_judgement": 0.89111328125,
            "relevance_judgment_input_expanded": "# Title: Designing activities and tools to support university students' creative and collaborative exploration of physical computing\n# Venue: Networked Learning Conference\n# Authors: Melissa Kaivo, David Cuartielles, Daniel Spikol\n## Abstract\nToday\u2019s digital world requires students to gain skills in collaborative problem solving and digital literacy. One approach is to teach people how to design computational artefacts that require both electronics and programming. Physical computing platforms offer an endless amount of possible opportunities for people to design and develop technological artefacts. However, many times students are overwhelmed when trying to learn both software and hardware simultaneously. The students struggle to be innovative and creative in their projects. Also, they focus on mastering the tool and following instructions for existing projects rather than being able to creatively explore the tool and understand the process of designing and developing new artefacts. For that reason, we aimed to answer the question: What type of tools and activities can be developed to support university students creative exploration of physical computing? Programming and electronics are fundamental design disciplines in today's digital world, and therefore they should be taught through design activities rather than limiting education to textbook readings and laboratory exercises. \nWe introduce our process of designing activities combined with a supportive tool to ease these challenges. The activities and tools were developed iteratively in three phases with a series of workshops with 126 students and teachers. The tool consists of a set of paper cards that provide necessary details (hints) about the electronics and software and help provide structure for the students to conceptualise how their artefact interacts. We additionally, introduced a learning Jigsaw pattern (orchestration script) for the later intervention that enabled individual students in the groups to focus on design, hardware, or software. For evaluation, we used the Creativity Support Index (CSI), which is a psychometric survey designed to assess the support of the creative process. The instrument investigates collaboration, efforts worth the result, exploration, immersion, enjoyment, and expressiveness. The results between the phases showed improvement with the use of the refined versions of the cards and orchestration of the learning activity. This study has demonstrated that design activities can provide a more accessible approach for the introduction of physical computing to students from various majors. Moreover, learning physical computing through design activities allows the learner to develop computational and design thinking skills for collaboratively solving problems.\n## Background\nSentance and Csizmadia (2017) observed that in schools, programming is perceived to be the most challenging aspect of computer science: students have problems with connecting the theoretical concepts to the practical applications and thinking computationally, as well as breaking problems into smaller pieces was perceived difficult. Visual programming tools have been developed to help with these challenges and aim to make programming more accessible for non-technical students. However, the differences between visual programming and traditional text-based programming are considerably extensive. Visual programming languages simplify procedures and guide the user through the creation, for example, with blocks that snap together or use colour-coding. Vihavainen, Paksula and Luukkainen (2011) noticed that a common problem when teaching text-based programming languages is that the focus is too much on learning specific syntax or semantics rather than understanding the process. When students understand the process of coding, they can construct more meaningful programs. Also, Przybylla & Romeike (2014) assert that physical computing encourages learners to use their imagination and creativity, focusing more on ideas, not on technical limitation. Physical computing takes a hands-on approach to understand computational thinking, building tangible artefacts to visualise the abstract programming concepts. \n\nProgramming and electronics are fundamental design disciplines, and therefore they should be taught through design activities rather than limiting education to textbook readings and \"cookbook\" laboratory exercises (Buechley, Eisenberg, & Elumeze, 2007). Even if the outcome does not turn out to be as hoped, students can revise their ideas and create a new version. Iversen and colleagues (2016) argue that design-based activities with tangible digital artefacts provide learners with competencies that reach beyond STEM (Science, Technology, Engineering, and Mathematics) skills. New digital tools, such as 3D printers, laser cutters, and construction kits should expand the forms of learning in classrooms enabling children to learn through the processes of constructing and thinking rather than disabling their thinking by letting them merely carry out ready planned projects. As a matter of fact, design thinking, and computational thinking are both tools for problem-solving (Bowler, 2014). \n\nLearning through design argues that students construct their knowledge by designing and creating meaningful projects and that learning is the most effective when pupils are engaged in creating a tangible artefact .",
            "reference_string": "[248387201 | Kaivo et al. | 2024 | Citations: 0]"
        },
        {
            "title": "Effect of GameMaker on Student Attitudes and Perceptions of Instructors",
            "venue": "",
            "year": 2015,
            "reference_count": 31,
            "citation_count": 3,
            "influential_citation_count": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "http://www.mecs-press.org/ijmecs/ijmecs-v7-n9/IJMECS-V7-N9-1.pdf",
                "status": "GOLD",
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.5815/IJMECS.2015.09.01?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.5815/IJMECS.2015.09.01, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "38066480",
                    "name": "M. Doman"
                },
                {
                    "authorId": "46430396",
                    "name": "M. Sleigh"
                },
                {
                    "authorId": "48828482",
                    "name": "C. Garrison"
                }
            ],
            "abstract": "Computational thinking including the ability to think critically and solve problems provides benefits for every career path. A positive attitude toward computer science can increase the possibility of students selecting courses that increase computational thinking or pursuing computer science (CS) as a major. This research examined the effect of using GameMaker on the attitudes of students toward computer science (CS) and CS instructors in an introductory CS course. The research consisted of an initial study and a two year longitudinal study. The data was collected using student surveys, qualitative student perceptions, and anonymous teaching evaluations. We hypothesized that students who used GameMaker in their class would show improved attitudes toward CS and would evaluate the instructor more favorably. Our research provides evidence that the incorporation of GameMaker into computer science courses may improve students\u201f short-term attitudes toward computer science and both long-term and shortterm perceptions of the class instructor.",
            "corpus_id": 55310713,
            "sentences": [
                {
                    "corpus_id": "55310713",
                    "title": "Effect of GameMaker on Student Attitudes and Perceptions of Instructors",
                    "text": "We employed the application tool GameMaker\u00ae, a program designed by Yoyo Games, ltd. GameMaker allows entry-level computing or non-programming students to quickly build simple video games and provides seasoned programmers the tools to build sophisticated games. GameMaker is implemented as a visual programming environment (VPE), using a graphical interface requiring drag-and-drop techniques to insert programming logic and concepts. Research has shown VPEs are successful interventions to introduce programming to new students [4]. GameMaker, in particular, has been successfully utilized to teach programming concepts to children, adolescents, adults, and senior citizens [5,6]. This tool may be especially useful in engaging both genders, as women show a preference for computer games with a creative, versus solely destructive, component [7].",
                    "score": 0.40471771059769446,
                    "section_title": "I. INTRODUCTION",
                    "char_start_offset": 2681,
                    "sentence_offsets": [
                        {
                            "start": 0,
                            "end": 83
                        },
                        {
                            "start": 84,
                            "end": 260
                        },
                        {
                            "start": 261,
                            "end": 433
                        },
                        {
                            "start": 434,
                            "end": 532
                        },
                        {
                            "start": 533,
                            "end": 680
                        },
                        {
                            "start": 681,
                            "end": 846
                        }
                    ],
                    "ref_mentions": [
                        {
                            "start": 528,
                            "end": 531,
                            "matchedPaperCorpusId": "54038126"
                        },
                        {
                            "start": 674,
                            "end": 677,
                            "matchedPaperCorpusId": "1600632"
                        },
                        {
                            "start": 677,
                            "end": 679,
                            "matchedPaperCorpusId": "6574895"
                        },
                        {
                            "start": 842,
                            "end": 845,
                            "matchedPaperCorpusId": "199610"
                        }
                    ],
                    "pdf_hash": "",
                    "stype": "vespa",
                    "rerank_score": 0.888671875
                }
            ],
            "relevance_judgement": 0.888671875,
            "relevance_judgment_input_expanded": "# Title: Effect of GameMaker on Student Attitudes and Perceptions of Instructors\n# Venue: \n# Authors: M. Doman, M. Sleigh, C. Garrison\n## Abstract\nComputational thinking including the ability to think critically and solve problems provides benefits for every career path. A positive attitude toward computer science can increase the possibility of students selecting courses that increase computational thinking or pursuing computer science (CS) as a major. This research examined the effect of using GameMaker on the attitudes of students toward computer science (CS) and CS instructors in an introductory CS course. The research consisted of an initial study and a two year longitudinal study. The data was collected using student surveys, qualitative student perceptions, and anonymous teaching evaluations. We hypothesized that students who used GameMaker in their class would show improved attitudes toward CS and would evaluate the instructor more favorably. Our research provides evidence that the incorporation of GameMaker into computer science courses may improve students\u201f short-term attitudes toward computer science and both long-term and shortterm perceptions of the class instructor.\n## I. INTRODUCTION\nWe employed the application tool GameMaker\u00ae, a program designed by Yoyo Games, ltd. GameMaker allows entry-level computing or non-programming students to quickly build simple video games and provides seasoned programmers the tools to build sophisticated games. GameMaker is implemented as a visual programming environment (VPE), using a graphical interface requiring drag-and-drop techniques to insert programming logic and concepts. Research has shown VPEs are successful interventions to introduce programming to new students [4]. GameMaker, in particular, has been successfully utilized to teach programming concepts to children, adolescents, adults, and senior citizens [5,6]. This tool may be especially useful in engaging both genders, as women show a preference for computer games with a creative, versus solely destructive, component [7].",
            "reference_string": "[55310713 | Doman et al. | 2015 | Citations: 3]"
        }
    ],
    "retrieved": [
        {
            "corpus_id": "225541919",
            "title": "Studi Komparatif Program Visual Dinamis untuk Pembelajaran Algoritma dan Pemograman Berorientasi Objek",
            "text": "As beginners, many first-year students have difficulty understanding object-oriented programming material. To help students learn algorithmic and object-oriented programming material researchers have developed visual programming (PV). Visual programming is a tool to facilitate learning programming. The concept of learning to use PV visualizes the work processes of algorithms and programming. This research aims to compare three dynamic PV tools for object-oriented learning programming that are the most studied. To determine the PV to be compared, a survey was conducted in an online journal database, such as IEEE explore, ACM, and several well-known online publishers. From the survey results, three dynamic PVs were chosen, most widely discussed, namely Jeliot 3, Ville and Jive. All three tools are installed and studied. Comparison results show that each dynamic PV has advantages on certain characteristics. The instructor can choose visual programming by considering the advantages of each PV.",
            "score": 0.5517695797829554,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8759765625
        },
        {
            "corpus_id": "248510289",
            "title": "Programming Experience Requirements for Future Visual Development Environments",
            "text": "Visual programming systems are currently the primary instruments for the early teaching of basic programming skills, while they are increasingly deployed in various domains for rapid development by non-professional programmers. Compared to tools for professional programming, there are many functionality layers and features that can be introduced to improve the programming experience and better support the overall learning process. \n\nIn this paper, we presented a brief but systematic account of key design requirements for future visual development systems, relying on the new notion of programming experience, while having a primary learning orientation. Overall, we believe that such requirements can be more effectively addressed separately, by cooperating tools, within open and extensible future visual development environments.",
            "score": 0.5198702344252093,
            "section_title": "CONCLUSIONS",
            "char_start_offset": 20782,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 227
                },
                {
                    "start": 228,
                    "end": 434
                },
                {
                    "start": 437,
                    "end": 659
                },
                {
                    "start": 660,
                    "end": 837
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.92431640625
        },
        {
            "corpus_id": "51714945",
            "title": "Use of visual programming in the university education by means of free software",
            "text": "The term visual programming has started to be used in Informatics so far, however, there are different views on its meaning. The separation of visual programming from development tools of interfaces provides not only the certainty for this technology, but also opens the systems of modeling and programming in the education unknown to a wide range. The use of visual programming which is based on the free software provides the new perspective algorithmic culture formation of future professionals of non-computer specialists. A wide application of visual programming in the educational process is the perspective direction of the cognitive activity intensification, laying the foundations of the algorithmic competence. Visual simulation systems which are related to the creation of the unified means of any software, when are used in training activities allow not only to create models, determining the nature, categories and connections, but also to perform the experimental calculation of the model's conduct for parametric input data, identify behaviour of the system. Therefore the detection problem of the free software that supports visual programming is relevant and for its solution the general features of such systems and ways of their use have been analyzed. These results suggest the significant potential use of visual programming technologies in the educational activities and that there exist the free software which implements this technology and only enhances its value. Visual programming is an advanced technology, but also has directions and prospects. Although it has not got a large scale in programming yet but it has the experience in the educational application. The results of the visual programming use in the algorithmic culture formation are undeniable, and thus the further use with improvement techniques will allow to develop the future students' algorithmic competence.",
            "score": 0.5077236462238893,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.841796875
        },
        {
            "corpus_id": "270526114",
            "title": "Mirror, Mirror, on The Wall, How Do We Measure What Our Students do in Scratch Programming?",
            "text": "Scratch is a visual programming language primarily designed for education. It uses a blockbased system, allowing users to create applications by combining visual components such as images, sounds, and videos with scripted functionalities. The logic of these applications is defined by assembling pre-defined blocks, similar to building with Lego bricks (Ford (Jr.), 2014; Stewart & Baek, 2023). Each block represents a specific command or action, guiding the application through various tasks. Additionally, Scratch provides a wide range of media resources, including graphics and sound effects, as well as features for designing personalized graphical and audio elements (Ford (Jr.), 2014). It offers a comprehensive environment that empowers users of all ages (Stewart & Baek, 2023). The intuitive visual programming language removes barriers, allowing beginners to easily dive into application development and receive immediate feedback on their creations (Ford (Jr.), 2014). This fosters a hands-on learning experience that helps users grasp fundamental programming concepts (Rose et al., 2017). \n\nBeyond being a programming language, Scratch is also a valuable pedagogical tool when integrated into different subject areas and learning environments (Stewart & Baek, 2023;Voinohovska & Doncheva, 2021;Resnick & Rusk, 2020). According to the study by Silva et al. (2022), integrating Scratch into mathematics education enhances the teaching and learning process. This approach promotes a more meaningful, creative, and playful learning experience, as reported by four Mathematics undergraduate students from a Federal Public Institution in the Midwest. In a pilot project conducted by Naz et al (2017), the effectiveness of Scratch programming in K-12 classrooms was investigated. The project aimed to support nineteen K-12 teachers from middle and high schools with no prior programming experience. \n\nThe teachers received training in a \"hybrid format\" that combined face-to-face and online training. Pre-and post-assessments revealed a significant improvement in students' performance when utilizing Scratch programming. Furthermore, Bahar's (2021) study explored the integration of Scratch, a visual programming language, into language teaching for children. The study aimed to assess its impact on language development and cognitive skills, as well as identify benefits and challenges from the perspectives of students and teachers.",
            "score": 0.49093709452790507,
            "section_title": "Literature Review Scratch Programming",
            "char_start_offset": 3884,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 74
                },
                {
                    "start": 75,
                    "end": 238
                },
                {
                    "start": 239,
                    "end": 394
                },
                {
                    "start": 395,
                    "end": 493
                },
                {
                    "start": 494,
                    "end": 691
                },
                {
                    "start": 692,
                    "end": 785
                },
                {
                    "start": 786,
                    "end": 978
                },
                {
                    "start": 979,
                    "end": 1099
                },
                {
                    "start": 1102,
                    "end": 1327
                },
                {
                    "start": 1328,
                    "end": 1465
                },
                {
                    "start": 1466,
                    "end": 1655
                },
                {
                    "start": 1656,
                    "end": 1783
                },
                {
                    "start": 1784,
                    "end": 1902
                },
                {
                    "start": 1905,
                    "end": 2004
                },
                {
                    "start": 2005,
                    "end": 2125
                },
                {
                    "start": 2126,
                    "end": 2264
                },
                {
                    "start": 2265,
                    "end": 2439
                }
            ],
            "ref_mentions": [
                {
                    "start": 1276,
                    "end": 1305,
                    "matchedPaperCorpusId": "233772013"
                },
                {
                    "start": 1354,
                    "end": 1373,
                    "matchedPaperCorpusId": "253005339"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.912109375
        },
        {
            "corpus_id": "214242759",
            "title": "Decision Support System of Employee Performance Evaluation",
            "text": "The word \"visual\" refers to the method used to create a graphical user interface (GUI). The word \"Basic\" refers to the BASIC (Beginners All-Purpose Symbolic Instruction Code) language, a language used by many programmers compared to other languages in computer history. Microsoft Visual Basic (often abbreviated as VB) is a programming language that offers an Integrated Development Environment (IDE) that contains commands that can be understood by computers to carry out tasks. The task can be run if there is a response from the user. The response is in the form of certain events. For example selecting a button, menu and so on. Visual Basic has become the most popular Visual programming language and is easy for the beginners to learn. Although it is often underestimated by programmers who are familiar with other high-level languages,Visual Basic is able to dominate the Visual programming. Microsoft Visual Basic is a visual programming application that has a quite popular and easy to learn.",
            "score": 0.48949848482399766,
            "section_title": "Definition of Visual Basic 6.0",
            "char_start_offset": 6482,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 87
                },
                {
                    "start": 88,
                    "end": 269
                },
                {
                    "start": 270,
                    "end": 479
                },
                {
                    "start": 480,
                    "end": 537
                },
                {
                    "start": 538,
                    "end": 584
                },
                {
                    "start": 585,
                    "end": 632
                },
                {
                    "start": 633,
                    "end": 741
                },
                {
                    "start": 742,
                    "end": 898
                },
                {
                    "start": 899,
                    "end": 1001
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8125
        },
        {
            "corpus_id": "199002134",
            "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers",
            "text": "The pedagogical activity was designed to be implemented for four weeks and aimed to involve the students in the analysis of visual programming environments (VPE's). For that purpose, an analytic framework was created by the teachers and 26 VPEs were selected. The selection of VPEs was decided taking into account the programming typology (block-based, text-based or both), the programming concepts that can be taught, the possibility of mobile and tangible objects programming, and the adaptation to the different age groups of pupils (preschool, k1 to k12). The VPE's list was generated by using the Google search engine with a set of query terms like \"block-based programming apps\", \"block coding apps\", \"coding apps for kids\", \"visual programming apps\", \"coding game apps\" and \"coding apps for beginners\". We selected the most popular VPEs presented in the first five pages searched. In addition, we selected some VPEs included in the \"Hour of Code\" initiative and some of the most popular for educational purposes like Scratch, Alice, App Inventor and Snap! VPEs were randomly distributed among the students using a randomizing online application. In the pedagogical activity, student-teachers could choose to work in groups or individually. They worked in five groups of two elements and three students opted to work individually. However, during the activities, one group of two students left the class. As a consequence, the authors decided to carry out the analysis of the three environments that would be the responsibility of these students (Alice, Snap! and Pencil Code). This decision was based on the fact that these three VPE\u00b4s are widely used to introduce programming to pupils. \n\nEach group was responsible for the analysis of four VPEs, two students analysed two VPEs each, and one student analysed three VPEs. The framework was made available to the students using an online Google spreadsheet, which allowed them to have access to peer analysis. \n\nAt the end of the activity, each group presented and discussed the main characteristics and functionalities to the classmates and the matrix of analysis was validated by the teachers.",
            "score": 0.4813445312919307,
            "section_title": "Procedures",
            "char_start_offset": 19984,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 164
                },
                {
                    "start": 165,
                    "end": 259
                },
                {
                    "start": 260,
                    "end": 559
                },
                {
                    "start": 560,
                    "end": 809
                },
                {
                    "start": 810,
                    "end": 887
                },
                {
                    "start": 888,
                    "end": 1062
                },
                {
                    "start": 1063,
                    "end": 1152
                },
                {
                    "start": 1153,
                    "end": 1246
                },
                {
                    "start": 1247,
                    "end": 1336
                },
                {
                    "start": 1337,
                    "end": 1410
                },
                {
                    "start": 1411,
                    "end": 1583
                },
                {
                    "start": 1584,
                    "end": 1694
                },
                {
                    "start": 1697,
                    "end": 1828
                },
                {
                    "start": 1829,
                    "end": 1965
                },
                {
                    "start": 1968,
                    "end": 2151
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7021484375
        },
        {
            "corpus_id": "13395203",
            "title": "Visualizing Computer Programming in a Computer-based Simulated Environment",
            "text": "This paper investigated the challenges presented by computer programming (sequential/traditional, concurrent and parallel) for novice programmers and developers. The researcher involved Higher Education in Computer Science students learning programming at multiple levels, as they could well represent beginning programmers, who would struggle in successfully achieving a running program due to the complexity of this theoretical process, which has no similar real-life representation. The paper explored the difficulties faced by students in understanding this challenging, yet fundamental, subject of all Computer Science/Computing degree programmes, and focused on the advantages of visualization techniques to facilitate the learning of computer programming, with recommendations on effective computer-based simulated platforms to achieve this visualization. The paper recommended the application of virtual world technologies, such as \u2018Second Life\u2019, to achieve the visualization required to facilitate the understanding and learning of computer programming. The paper demonstrated extensive evidence on the advantages of these technologies to achieve program visualization, and how they facilitated enhanced learning of the programming process. The paper also addressed the benefits of collaboration and experimentation, which are ideal for learning computer programming, and how these aspects are strongly supported in virtual worlds.",
            "score": 0.48051836594576036,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.57861328125
        },
        {
            "corpus_id": "236336244",
            "title": "Hybrid Visual Programming Language Environment for Programming Training",
            "text": "The paper presents an approach to learning and an environment for working with a hybrid visual - text programming language with a special emphasis on the training for future programmers at an early stage. An overview of other visual programming environments and languages is made and the advantages of the hybrid visual - text approach offered in this article are highlighted. Emphasis is placed on the practical implementation of a proprietary environment for the development of sample programs in the author's hybrid visual programming language. An example of the use of the environment is presented and perspectives for its development are formulated.",
            "score": 0.48051836594576036,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9521484375
        },
        {
            "corpus_id": "69964488",
            "title": "Towards a visual guide for communicating uncertainty in Visual Analytics",
            "text": "Especially in the domain of computer science, a lot of effort has gone into simplifying complex processes into representations that can be understood by non-experts.A prominent example is the visualisation of algorithm mechanics into flow charts for computer programming classes [36].By replacing programming instructions with a visual representation that summarises long steps of code and highlights important decision components, researchers have reported an increase in confidence as well as a reduction of errors and task completion times for students [37], especially when these visualisations could be manipulated interactively [38].\n\nOn a more formal basis, such a transformation of sets of instructions into graphical modules or glyph-based notations is described by the field of visual languages in computing [39].With the help of various specification formalisms, visual languages translate complex processes into abstract depictions that can be understood by non-computer scientists and employed by these for otherwise hard-to accomplish tasks.\n\nUsing such a visual language and combining building blocks of graphical and textual elements, users can intuitively define behavioural requirements for algorithms [40] and have the process of probabilistic reasoning explained to them in an easy-to-understand manner [41].This way, non-experts may gain insight and understanding into an otherwise \"black box\" system [42].Beyond process explanation, visual languages are also used to conceptually design structures that have several layers of complexity and interactions that are difficult to keep in mind with every step of the design process.Here, the transformation into a symbolic representation hides unnecessary convolution from the design phase, allowing the user to focus while the computer automatically ensures adherence to constructional constraints [43].\n\nIn a more casual context, visual languages are used to support laymen with the creation of games.By simplifying game mechanics into a set of graphical, interconnected building blocks that form a library of actions and meanings, non-programmers, such as educators outside the field of computing, can build computer games themselves and focus on content creation and story line, rather than on the acquisition of programming skills [44,45].The power of visual representation for describing complex coherences is even being employed to support managers in understanding organisational structures and optimising workflows [46].",
            "score": 0.47926414349494095,
            "section_title": "Visual languages and visualisation toolkits",
            "char_start_offset": 15198,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 165
                },
                {
                    "start": 165,
                    "end": 284
                },
                {
                    "start": 284,
                    "end": 639
                },
                {
                    "start": 641,
                    "end": 823
                },
                {
                    "start": 823,
                    "end": 1055
                },
                {
                    "start": 1057,
                    "end": 1328
                },
                {
                    "start": 1328,
                    "end": 1427
                },
                {
                    "start": 1427,
                    "end": 1649
                },
                {
                    "start": 1649,
                    "end": 1871
                },
                {
                    "start": 1873,
                    "end": 1970
                },
                {
                    "start": 1970,
                    "end": 2311
                },
                {
                    "start": 2311,
                    "end": 2496
                }
            ],
            "ref_mentions": [
                {
                    "start": 279,
                    "end": 283,
                    "matchedPaperCorpusId": "15456703"
                },
                {
                    "start": 556,
                    "end": 560,
                    "matchedPaperCorpusId": "17872192"
                },
                {
                    "start": 634,
                    "end": 638,
                    "matchedPaperCorpusId": "1494033"
                },
                {
                    "start": 1220,
                    "end": 1224,
                    "matchedPaperCorpusId": "36096796"
                },
                {
                    "start": 1323,
                    "end": 1327,
                    "matchedPaperCorpusId": "13958559"
                },
                {
                    "start": 1866,
                    "end": 1870,
                    "matchedPaperCorpusId": "195709707"
                },
                {
                    "start": 2303,
                    "end": 2307,
                    "matchedPaperCorpusId": "268428958"
                },
                {
                    "start": 2307,
                    "end": 2310,
                    "matchedPaperCorpusId": "9645139"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8642578125
        },
        {
            "corpus_id": "226375733",
            "title": "Teaching basic of programming with the elements of Scratch - evaluation of VBA programming course for logistics students",
            "text": "Digital nations have become dependent on computer applications. One of the most important part of literacy in today's word are the basics of computer applications development and usage. Programming seems to be difficult to learn, therefore, several educational programming languages were developed, so that more people could develop the applications. Modern technologies mean that computer programming is not a skill reserved only for a small group of specialists. Programmers can become people of different ages and interests. The article addresses the problem of basic programming courses for non-computer science students. Its aim is to present the role of visual programming languages in encouraging university students to create algorithms and start programming. The research allows to conclude that Scratch makes introduction to programming more enjoyable, helps to concentrate on the problem and the business process. The comparative analysis showed also differences between groups of students.",
            "score": 0.47616934694034735,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.449951171875
        },
        {
            "corpus_id": "199002134",
            "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers",
            "text": "The visual programming environment (VPE) and block-based programming environment have been referred in many research studies as important tools to learn programming and to solve many problems taught in primary schools. In fact, visual programming with blocks is a great support in introducing programming and saves pupils from the difficulties of traditionally complex text-based languages [27,36]. \n\nIn 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs. In this paper, we understand VPE to be a block-based or visual text-based or hybrid (block + text) programming environment, where the focus is on the core characteristics of each environment in order to improve the pupils\u00b4learning. \n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39]. \n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes. \n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41].",
            "score": 0.47108735754461806,
            "section_title": "Visual and Block-based Programming Environment",
            "char_start_offset": 12132,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 218
                },
                {
                    "start": 219,
                    "end": 398
                },
                {
                    "start": 401,
                    "end": 547
                },
                {
                    "start": 548,
                    "end": 674
                },
                {
                    "start": 675,
                    "end": 679
                },
                {
                    "start": 680,
                    "end": 973
                },
                {
                    "start": 974,
                    "end": 1205
                },
                {
                    "start": 1208,
                    "end": 1409
                },
                {
                    "start": 1410,
                    "end": 1624
                },
                {
                    "start": 1625,
                    "end": 1871
                },
                {
                    "start": 1874,
                    "end": 2034
                },
                {
                    "start": 2035,
                    "end": 2150
                },
                {
                    "start": 2153,
                    "end": 2335
                },
                {
                    "start": 2336,
                    "end": 2430
                }
            ],
            "ref_mentions": [
                {
                    "start": 394,
                    "end": 397,
                    "matchedPaperCorpusId": "17459721"
                },
                {
                    "start": 416,
                    "end": 420,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 1404,
                    "end": 1408,
                    "matchedPaperCorpusId": "59528289"
                },
                {
                    "start": 1619,
                    "end": 1623,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 1866,
                    "end": 1870,
                    "matchedPaperCorpusId": "51750550"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.947265625
        },
        {
            "corpus_id": "15385453",
            "title": "Predictive modelling for HCI problems in novice program editors",
            "text": "Programming education is highly topical, and there are several actively-developed novice programming tools that have been widely used, and cited in the literature. These range from child-user \"block\" building systems (like Scratch) to Greenfoota Java game-based development tool used in schools -to \"pure\" visual programming systems, based on flow-chart-style diagrams (such as Lego Mindstorms). There are other systems that sit between the above, such as Alice, StarLogo TNG, and numerous other variations on the \"block\" metaphor. \n\nThere are also \"mainstream\" programming languages that are judged to be the simplest of their kind, used to teach beginners (such as Python, Java, or variants of Basic). All of these systems look, superficially, very differentthey range from toy-like graphics, to monospace text, to complex flow diagrams and lines. However, there are interactions that are common to several of the differently-styled editor types, and there are also systems that look similar, but behave very differently in terms of interaction design. In this paper, we extend previous cognitive modelling work to four new programming systems (McKay 2012). The initial goal of that study was to compare several \"benchmark\" systems to a new editor in development, as part of the design process. Results of the previous paper, which highlighted differences in some visually-similar visual languages, and feedback we received, suggested that there may be other systems that could be approached in this way. This short paper reports on a second series of models, discusses their strengths and weaknesses, and compares them to each other, and to the systems in the first set. We acknowledge, for the record, that viscosity, through task time, is only one of the issues in novice programming systems. A system with low viscosity would not necessarily meet the other (educational) requirements for beginner systems, but observations suggest that excessively viscous interactions may still be problematic for some types of novice user.",
            "score": 0.4587801003788111,
            "section_title": "INTRODUCTION",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 163
                },
                {
                    "start": 164,
                    "end": 395
                },
                {
                    "start": 396,
                    "end": 531
                },
                {
                    "start": 534,
                    "end": 703
                },
                {
                    "start": 704,
                    "end": 849
                },
                {
                    "start": 850,
                    "end": 1054
                },
                {
                    "start": 1055,
                    "end": 1159
                },
                {
                    "start": 1160,
                    "end": 1296
                },
                {
                    "start": 1297,
                    "end": 1506
                },
                {
                    "start": 1507,
                    "end": 1673
                },
                {
                    "start": 1674,
                    "end": 1797
                },
                {
                    "start": 1798,
                    "end": 2030
                }
            ],
            "ref_mentions": [
                {
                    "start": 1146,
                    "end": 1158,
                    "matchedPaperCorpusId": "4505341"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.67529296875
        },
        {
            "corpus_id": "264168616",
            "title": "Toward improving student motivation and performance in introductory programming learning by Scratch: The role of achievement emotions",
            "text": "Scratch is a visual programming language developed by the Media Lab of Massachusetts Institute of Technology. 1,23 Although Scratch was initially developed for children, it is often employed regardless of age, background, or interests and has become one of the most commonly used VPE tools. 4,13 In contrast to traditional textual languages, Scratch enables students to learn algorithms and programming logic with a simple interface and drag-and-drop structure without focusing on syntax, which renders the process more attractive by designing important and unique content 8 and supports a more intuitive and engaging experience. 24 Specifically, Scratch provides an interactive media-rich environment for learners to create animated stories and games, leading to creativity and programming skill development in an exciting, fun way. 4,8,24 he advantages of Scratch for programming novices are evidential. Many researchers have identified positive results in learning, including programming knowledge and achievement, 8,23,25 computational thinking skills, 23,25 a positive attitude toward programming, 4,6,13,23 and learning motivation. 8 Scherer et al. 22 meta-analyzed previous studies and found that interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code. The authors also suggested that Scratch accommodates different projects, allowing for different interests and learning styles that may positively influence learners' attitudes, resulting in better performance. Scratch shows its potential benefits of making computer programming accessible and appealing to students for academic success.",
            "score": 0.45732318312132936,
            "section_title": "Scratch programming",
            "char_start_offset": 3201,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 114
                },
                {
                    "start": 115,
                    "end": 295
                },
                {
                    "start": 296,
                    "end": 632
                },
                {
                    "start": 633,
                    "end": 840
                },
                {
                    "start": 841,
                    "end": 905
                },
                {
                    "start": 906,
                    "end": 1139
                },
                {
                    "start": 1140,
                    "end": 1410
                },
                {
                    "start": 1411,
                    "end": 1620
                },
                {
                    "start": 1621,
                    "end": 1747
                }
            ],
            "ref_mentions": [
                {
                    "start": 110,
                    "end": 112,
                    "matchedPaperCorpusId": "56686833"
                },
                {
                    "start": 112,
                    "end": 114,
                    "matchedPaperCorpusId": "63450913"
                },
                {
                    "start": 291,
                    "end": 293,
                    "matchedPaperCorpusId": "7007858"
                },
                {
                    "start": 293,
                    "end": 295,
                    "matchedPaperCorpusId": "20505878"
                },
                {
                    "start": 573,
                    "end": 574,
                    "matchedPaperCorpusId": "46157729"
                },
                {
                    "start": 630,
                    "end": 632,
                    "matchedPaperCorpusId": "133502863"
                },
                {
                    "start": 834,
                    "end": 836,
                    "matchedPaperCorpusId": "7007858"
                },
                {
                    "start": 836,
                    "end": 838,
                    "matchedPaperCorpusId": "46157729"
                },
                {
                    "start": 838,
                    "end": 840,
                    "matchedPaperCorpusId": "133502863"
                },
                {
                    "start": 1018,
                    "end": 1020,
                    "matchedPaperCorpusId": "46157729"
                },
                {
                    "start": 1020,
                    "end": 1023,
                    "matchedPaperCorpusId": "63450913"
                },
                {
                    "start": 1023,
                    "end": 1025,
                    "matchedPaperCorpusId": "253075433"
                },
                {
                    "start": 1057,
                    "end": 1060,
                    "matchedPaperCorpusId": "63450913"
                },
                {
                    "start": 1060,
                    "end": 1062,
                    "matchedPaperCorpusId": "253075433"
                },
                {
                    "start": 1103,
                    "end": 1105,
                    "matchedPaperCorpusId": "7007858"
                },
                {
                    "start": 1105,
                    "end": 1107,
                    "matchedPaperCorpusId": "59528289"
                },
                {
                    "start": 1107,
                    "end": 1110,
                    "matchedPaperCorpusId": "20505878"
                },
                {
                    "start": 1110,
                    "end": 1112,
                    "matchedPaperCorpusId": "63450913"
                },
                {
                    "start": 1138,
                    "end": 1139,
                    "matchedPaperCorpusId": "46157729"
                },
                {
                    "start": 1155,
                    "end": 1157,
                    "matchedPaperCorpusId": "216204126"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.89306640625
        },
        {
            "corpus_id": "236336244",
            "title": "Hybrid Visual Programming Language Environment for Programming Training",
            "text": "In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists. No approach is specially adapted to the initial training of future programmers. Weintrop and Wilensky [6] review earliest found study for Hybrid Visual Programming Languages as mentioned in [7], which also reviews several other attempts for Hybrid approach, such as [8] and [9]. These Hybrid approaches, however, are very bound to specific well-known text programming languages and do not provide more language independent approaches.",
            "score": 0.45331342949483555,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 207
                },
                {
                    "start": 208,
                    "end": 361
                },
                {
                    "start": 364,
                    "end": 544
                },
                {
                    "start": 547,
                    "end": 574
                },
                {
                    "start": 575,
                    "end": 691
                },
                {
                    "start": 692,
                    "end": 798
                },
                {
                    "start": 799,
                    "end": 980
                },
                {
                    "start": 981,
                    "end": 1017
                },
                {
                    "start": 1018,
                    "end": 1036
                },
                {
                    "start": 1037,
                    "end": 1148
                },
                {
                    "start": 1149,
                    "end": 1245
                },
                {
                    "start": 1246,
                    "end": 1350
                },
                {
                    "start": 1353,
                    "end": 1556
                },
                {
                    "start": 1559,
                    "end": 1648
                },
                {
                    "start": 1649,
                    "end": 1728
                },
                {
                    "start": 1729,
                    "end": 1927
                },
                {
                    "start": 1928,
                    "end": 2083
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.92236328125
        },
        {
            "corpus_id": "4039308",
            "title": "Visual and textual programming languages: a systematic review of the literature",
            "text": "Throughout this review, we have discussed the benefits of learning a Visual Programming Language and whether or not the First Programming Language choice has profound effect on student performance and interest. It is clear that the most important thing educators can do is make their course interesting, and ensure it covers all the important elements needed to truly \"know\" programming. If a student of any age enjoys what they are doing, there is a better chance that they are going to understand it and continue studying it. \n\nIt has been demonstrated through the answers to the research questions that the actual choice of what tools to use does not matter, within reason. The use of a Visual Programming Lan will in most cases, be very helpful to a student. It may not be something to pursue for a longitudinal time frame, but as an introduction to CS, it is clearly beneficial and will generally lead to higher retention of knowledge and interest. \n\nWe present this paper in the hope that educators at all levels and in all institution types will examine the options available to them when they are teaching programming. This review may go some way to informing their decisions around the first programming language to use and the benefits of both text-based and visual-based programming languages.",
            "score": 0.45283379289724596,
            "section_title": "Discussion",
            "char_start_offset": 49087,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 210
                },
                {
                    "start": 211,
                    "end": 387
                },
                {
                    "start": 388,
                    "end": 527
                },
                {
                    "start": 530,
                    "end": 676
                },
                {
                    "start": 677,
                    "end": 762
                },
                {
                    "start": 763,
                    "end": 953
                },
                {
                    "start": 956,
                    "end": 1126
                },
                {
                    "start": 1127,
                    "end": 1304
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.86083984375
        },
        {
            "corpus_id": "234855740",
            "title": "A Study of the Impact of Arduino and Visual Programming In Self-Efficacy, Motivation, Computational Thinking and 5th Grade Students\u2019 Perceptions on Electricity",
            "text": "Through the international bibliography it has been made clear that students, although very familiar with technology, avoid learning programming because it is considered incredibly challenging (Korkmaz & Altun, 2014;Papadakis, Kalogiannakis, Zaranis, & Orfanakis, 2016;Resnick et al., 2009). Lately however, visual programming languages, such as Scratch, have fuelled the interest in teaching programming at Primary School, as they engage students in creating digital products, in a way that expresses their ideas and makes them creators instead of consumers of technology (Lye & Koh, 2014;Weese, 2017). Moreover, these languages promote the grasp of computational concepts and problem-solving strategies, as they reduce the redundant syntax of traditional programming language and, as a consequence, the cognitive load. As a result, even beginners have the ability not only to learn programming but also to acquire CT skills (Lye & Koh, 2014;Rees et al., 2016;Sengupta et al., 2013;Weese, 2017). In fact, Sengupta et al. (2015) argued that the students who were taught Sciences using visual programming exhibited a much better learning performance compared to the rest of the students and deduced that embedding computers in Sciences at Primary School is very important, as in the long run it can lead to deeper understanding of scientific concepts. \n\nAccording to Sengupta et al. (2013) in order for a computer tool to be integrated in the teaching of Science Education in Primary Schools, is must have the following characteristics: it must be easy for beginners; learning activities must be integrated in the existing curriculum of Science Education; it must be easy to be used by teachers who don't have much experience in programming; and \"it should not impose arbitrary ceilings on the scope and levels of complexity for modelling and analysis by students over time\"(p. 362). \n\nIn accordance with the above mentioned is Scratch, a very popular visual programming language that was created in MIT.",
            "score": 0.4452516870984159,
            "section_title": "Visual Programming",
            "char_start_offset": 7780,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 290
                },
                {
                    "start": 291,
                    "end": 602
                },
                {
                    "start": 603,
                    "end": 819
                },
                {
                    "start": 820,
                    "end": 995
                },
                {
                    "start": 996,
                    "end": 1349
                },
                {
                    "start": 1352,
                    "end": 1875
                },
                {
                    "start": 1876,
                    "end": 1881
                },
                {
                    "start": 1884,
                    "end": 2002
                }
            ],
            "ref_mentions": [
                {
                    "start": 192,
                    "end": 215,
                    "matchedPaperCorpusId": "43831930"
                },
                {
                    "start": 215,
                    "end": 268,
                    "matchedPaperCorpusId": "63450913"
                },
                {
                    "start": 268,
                    "end": 289,
                    "matchedPaperCorpusId": "44396832"
                },
                {
                    "start": 572,
                    "end": 589,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 589,
                    "end": 601,
                    "matchedPaperCorpusId": "64638511"
                },
                {
                    "start": 925,
                    "end": 942,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 960,
                    "end": 982,
                    "matchedPaperCorpusId": "14084830"
                },
                {
                    "start": 982,
                    "end": 994,
                    "matchedPaperCorpusId": "64638511"
                },
                {
                    "start": 1005,
                    "end": 1027,
                    "matchedPaperCorpusId": "39752736"
                },
                {
                    "start": 1365,
                    "end": 1387,
                    "matchedPaperCorpusId": "14084830"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.67138671875
        },
        {
            "corpus_id": "231725028",
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "text": "Our study differs from the aforementioned reviews by focusing on the articles related to visual programming tools that represent several domains, closely examining the visual programming approaches with all its classifications, and identifying how such approaches are used to solve particular problems in several domains. Moreover, the study sheds light on commonalities and differences between tools of the same or different approaches or domains. Finally, the study discusses only the approaches that are backed up by empirical evidence. The details of the empirical evidence are thoroughly discussed in the study.",
            "score": 0.4439982908604859,
            "section_title": "B. VISUAL PROGRAMMING REVIEW STUDIES",
            "char_start_offset": 18048,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 321
                },
                {
                    "start": 322,
                    "end": 448
                },
                {
                    "start": 449,
                    "end": 539
                },
                {
                    "start": 540,
                    "end": 616
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.87939453125
        },
        {
            "corpus_id": "86787308",
            "title": "Development of application software without programming",
            "text": "In computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun. \n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages.",
            "score": 0.4396506628741437,
            "section_title": "Visual programming",
            "char_start_offset": 13785,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 189
                },
                {
                    "start": 190,
                    "end": 345
                },
                {
                    "start": 346,
                    "end": 493
                },
                {
                    "start": 494,
                    "end": 798
                },
                {
                    "start": 801,
                    "end": 918
                },
                {
                    "start": 919,
                    "end": 1090
                },
                {
                    "start": 1091,
                    "end": 1125
                },
                {
                    "start": 1126,
                    "end": 1258
                },
                {
                    "start": 1259,
                    "end": 1408
                },
                {
                    "start": 1409,
                    "end": 1522
                },
                {
                    "start": 1523,
                    "end": 1615
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.94091796875
        },
        {
            "corpus_id": "13395203",
            "title": "Visualizing Computer Programming in a Computer-based Simulated Environment",
            "text": "Particular emphasis was placed on instructions related to loops and functionsfor the Introduction to Programming course, and on classes and objectsfor the Object-Oriented Programming course. \n\nTo demonstrate the benefit obtained from these visualization scenarios, below is an example of a program instruction handled by this research, which was visualized within Second Life. Learners found this instruction extremely difficult to understand and to imagine how it works and what the potential execution outcomes are. They considered visualizing this instructions\" execution within Second Life very beneficial to their understanding of its function, structure and results. The advantages of visualizing programming instructions within the virtual platform were confirmed by students\" answers to the following question asked by the researcher to the learners at the end of a whole session explaining the \"For Loop\" in the physical classroom: \"Which of these two For-Loop scripts result in moving the object six steps towards the X-axis?\" \n\n(1) For (i=0; i<6; i++) llSetPos(llGetPos()+<i,0,0>); \n\n(2) For (i=0; i<6; i++) llSetPos(llGetPos()+<1,0,0>); Some students were confident of their answer, and some were not. Those who were not 100% confident were permitted by the researcher to provide a prediction based on their current/background understanding of programming. It was a surprise to both the researcher and learners that all the answers of confident learners were wrong, while around half of not fully confident learners gave the correct answer; however, they were unable to correctly justify it. This was then followed by using the virtual environment to visualize the execution of the above code. When the students worked on moving their \"Pok\u00e9mons\" in Second Life, they were able to view the difference in the number of steps moved by the object as a result of the execution of each script sample. Following this visualization, they were able to provide confident explanations on how each \"For Loop\" of the above works.",
            "score": 0.4396506628741437,
            "section_title": "C. Application of Virtual World Technologies in the Learning of Computer Programming",
            "char_start_offset": 22338,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 190
                },
                {
                    "start": 193,
                    "end": 376
                },
                {
                    "start": 377,
                    "end": 517
                },
                {
                    "start": 518,
                    "end": 672
                },
                {
                    "start": 673,
                    "end": 1036
                },
                {
                    "start": 1039,
                    "end": 1092
                },
                {
                    "start": 1095,
                    "end": 1213
                },
                {
                    "start": 1214,
                    "end": 1368
                },
                {
                    "start": 1369,
                    "end": 1603
                },
                {
                    "start": 1604,
                    "end": 1705
                },
                {
                    "start": 1706,
                    "end": 1906
                },
                {
                    "start": 1907,
                    "end": 2028
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.580078125
        },
        {
            "corpus_id": "256937356",
            "title": "Adopting distributed pair programming as an effective team learning activity: a systematic review",
            "text": "With VirtualDesk, students solved almost twice as many bugs as those who only used a screen sharing tool in a shorter period (Dominic et al., 2020). Moreover, Bravo et al. (2013) addressed the importance of a series of awareness support mechanisms provided by technologies in DPP scenarios, among which sharing selection is vital. It provokes a visual response from the non-selector, establishes a common understanding of referring to the selected objects, and eventually promotes interaction quality (Jermann & N\u00fcssli, 2012). Visual representations particularly benefit novice programmers when learning coding, for example, the comparison experiments by Kaplan and An (2005) showed that students with visual models produced better coding and debugging abilities than factual models. A visual execution notation in coding even strengthened beginners' competence in evaluating and solving recursive programming problems (Tung & Chang, 2001), which are the foundations for developing their CT skills.",
            "score": 0.43930815978633175,
            "section_title": "Theme 4: team environment",
            "char_start_offset": 44499,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 148
                },
                {
                    "start": 149,
                    "end": 330
                },
                {
                    "start": 331,
                    "end": 526
                },
                {
                    "start": 527,
                    "end": 783
                },
                {
                    "start": 784,
                    "end": 998
                }
            ],
            "ref_mentions": [
                {
                    "start": 125,
                    "end": 147,
                    "matchedPaperCorpusId": "226265857"
                },
                {
                    "start": 159,
                    "end": 178,
                    "matchedPaperCorpusId": "2185998"
                },
                {
                    "start": 501,
                    "end": 525,
                    "matchedPaperCorpusId": "6887645"
                },
                {
                    "start": 655,
                    "end": 675,
                    "matchedPaperCorpusId": "14441535"
                },
                {
                    "start": 919,
                    "end": 939,
                    "matchedPaperCorpusId": "14039424"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.5859375
        },
        {
            "corpus_id": "63194770",
            "title": "PEMANFAATAN PEMROGRAMAN VISUAL SEBAGAI ALTERNATIF PEMBUATAN MEDIA BELAJAR BERBASIS GAME DAN ANIMASI",
            "text": "Visual programming is the one programming technique in computer Science which aims to give easy understanding in writing code program. The main users of visual programming are students and people who have no experiences in making computer code and lack of computer programming language.Visual programming gives advantages to develop any kind of application software such as game and application related to education. This research was conducted to the teachers who teach Al-Quran for children learning in order to know the benefit of using visual programming in terms of creating an animation and game education.Several approach has been applied in this research. The first is surveying the knowledge in computer programming by using questioners. Following that, we provide a training of using visual programming and the last is conduction survey in order to know the progress of learning accuisiton.Based on the questioner\u2019s data,it can be found that visual programming is very useful to introduce computer programming for people who have limited computer background. The data shows that 60% respondent believe that the visual programming is easy to follow, while the rest says it is hard to do. Furthermore, some of the participants are able to create simple education game",
            "score": 0.4353487993929209,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.728515625
        },
        {
            "corpus_id": "86467718",
            "title": "Recommender Systems and Scratch: An Integrated Approach for Enhancing Computer Programming Learning",
            "text": "N OWADAYS, learning computer programming remains a challenging task. It generally comprises of hard skills related to problem solving (e.g., modeling, abstraction, logical thinking, and coding), which are difficult to teach or learn. To cope with such difficulties, several approaches have been suggested in the past, which include collaborative work [1], simulation tools [2], games [3], pair programming [4], and role games [5]. \n\nIn this context, visual programming languages (VPLs) have proven to be important tools for beginners with little or no experience in programming. This is the case among most children and high-school students. By mapping conventional programming concepts into visual metaphors, VPLs have significantly impacted the learning of computer programming [6]. Popular VPLs like Alice [7], RAPTOR [8] and Etoys [9] have been used at different educational stages. Scratch is perhaps the most widespread VPL today [10], [11]. Although it was initially conceived for children, few higher-education institutions have adopted it for introductory programming courses [12]- [14]. \n\nThis was the case with the Universidad Estatal de Milagro (UNEMI) in Ecuador, where Scratch was employed as a complementary tool to consolidate introductory courses on programming (CS1). The decision to use Scratch in UNEMI was based on the following two reasons: the reported success of Scratch in similar educational contexts; and the students low performance in CS1 since the beginning of the Computer Science Engineering program in 2003 (as the pass rate in UNEMI has historically been under 50%). Using Scratch over the last two semesters, the pass rate has not only increased, but it has also stabilized. Notwithstanding the positive experience, some issues regarding its utilization were observed. We found that certain students felt unmotivated with the assignments (exercises) suggested by the lecturer during the course. For instance, when high-performance students were faced with simple exercises or vice versa. A similar experience was reported by [15]. \n\nTo overcome this issue and exploit the benefits of Scratch, in this study we have presented a novel system called CARAMBA. It extends Scratch by including a recommender system for suggesting exercises (problem statements) to the student.",
            "score": 0.4347594689137332,
            "section_title": "I. INTRODUCTION",
            "char_start_offset": 18,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 68
                },
                {
                    "start": 69,
                    "end": 233
                },
                {
                    "start": 234,
                    "end": 430
                },
                {
                    "start": 433,
                    "end": 578
                },
                {
                    "start": 579,
                    "end": 641
                },
                {
                    "start": 642,
                    "end": 784
                },
                {
                    "start": 785,
                    "end": 886
                },
                {
                    "start": 887,
                    "end": 947
                },
                {
                    "start": 948,
                    "end": 1096
                },
                {
                    "start": 1099,
                    "end": 1285
                },
                {
                    "start": 1286,
                    "end": 1600
                },
                {
                    "start": 1601,
                    "end": 1709
                },
                {
                    "start": 1710,
                    "end": 1803
                },
                {
                    "start": 1804,
                    "end": 1929
                },
                {
                    "start": 1930,
                    "end": 2022
                },
                {
                    "start": 2023,
                    "end": 2065
                },
                {
                    "start": 2068,
                    "end": 2190
                },
                {
                    "start": 2191,
                    "end": 2305
                }
            ],
            "ref_mentions": [
                {
                    "start": 351,
                    "end": 354,
                    "matchedPaperCorpusId": "32482908"
                },
                {
                    "start": 373,
                    "end": 376,
                    "matchedPaperCorpusId": "9245127"
                },
                {
                    "start": 384,
                    "end": 387,
                    "matchedPaperCorpusId": "14729207"
                },
                {
                    "start": 406,
                    "end": 409,
                    "matchedPaperCorpusId": "25027755"
                },
                {
                    "start": 426,
                    "end": 429,
                    "matchedPaperCorpusId": "17257038"
                },
                {
                    "start": 780,
                    "end": 783,
                    "matchedPaperCorpusId": "27633066"
                },
                {
                    "start": 821,
                    "end": 824,
                    "matchedPaperCorpusId": "60460747"
                },
                {
                    "start": 835,
                    "end": 838,
                    "matchedPaperCorpusId": "10335820"
                },
                {
                    "start": 936,
                    "end": 940,
                    "matchedPaperCorpusId": "982597"
                },
                {
                    "start": 942,
                    "end": 946,
                    "matchedPaperCorpusId": "9744698"
                },
                {
                    "start": 1085,
                    "end": 1089,
                    "matchedPaperCorpusId": "32710110"
                },
                {
                    "start": 1091,
                    "end": 1095,
                    "matchedPaperCorpusId": "9691017"
                },
                {
                    "start": 2060,
                    "end": 2064,
                    "matchedPaperCorpusId": "61034415"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.84765625
        },
        {
            "corpus_id": "5015407",
            "title": "Teaching GUI-Programming Concepts to Prospective K12 ICT Teachers: MIT App Inventor as an Alternative to Text-Based Languages",
            "text": "These enable the developer to create programming expressions by combining through -drag and drop\u2016 or other GUI actions blocks that visually represent programming constructs, as opposed to using text to form expressions in the conventional -text-based\u2016 approach. \n\nAlthough the original purpose of this approach to programming has been to create easier and more practical means for the end-users to develop software applications (Mohamad et al., 2011) there have been researchers claiming that blocks-based visual languages may be used as educational tools in programming (Navarro-Prieto & Ca\u00f1as, 2001) and that they may be beneficial especially for novice students (Maloney, Resnick, Rusk, Silverman, & Eastmond, 2010). In fact, the programming blocks approach have been considered to be such a great way to simplify programming that, there even exists research that aims to teach programming concepts to young children by employing physically tangible blocks (Horn & Jacob, 2006;McNerney, 2004;Wang, Zhang, & Wang, 2011;Wyeth & Purchase, 2002). The main advantage to blocks-based visual programming is that textual syntax, which may largely differ from one programming language to the other, has been replaced with universal blocks that interact with each other only in meaningful ways, much like pieces of a puzzle, leaving less room for error. This enables novices to practice the semantics instead of syntax, lets them code in elements that display a higher-level fashion resembling pseudo-code, eliminates the need to -memorize\u2016 textual code constructs (which is especially the problem in students that do not have English as their mother tongue), while avoiding typing mistakes and type errors in general (Klassen, 2006). However, it should also be noted that blocks-based visual languages that have been used in education so far have mostly been prepared for a target audience of younger age levels in mind (Kelleher, Pausch, & Kiesler, 2007;Utting, Cooper, K\u00f6lling, Maloney, & Resnick, 2010). As such, the idea of using blocks-based visual languages to aid the education of adults in programming has not been encountered often in the literature, at least for a certain period.",
            "score": 0.4331095157024311,
            "section_title": "Introduction",
            "char_start_offset": 3816,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 261
                },
                {
                    "start": 264,
                    "end": 719
                },
                {
                    "start": 720,
                    "end": 1045
                },
                {
                    "start": 1046,
                    "end": 1346
                },
                {
                    "start": 1347,
                    "end": 1727
                },
                {
                    "start": 1728,
                    "end": 2000
                },
                {
                    "start": 2001,
                    "end": 2184
                }
            ],
            "ref_mentions": [
                {
                    "start": 428,
                    "end": 450,
                    "matchedPaperCorpusId": "5674825"
                },
                {
                    "start": 571,
                    "end": 601,
                    "matchedPaperCorpusId": "16771725"
                },
                {
                    "start": 665,
                    "end": 718,
                    "matchedPaperCorpusId": "9744698"
                },
                {
                    "start": 995,
                    "end": 1021,
                    "matchedPaperCorpusId": "565775"
                },
                {
                    "start": 1021,
                    "end": 1044,
                    "matchedPaperCorpusId": "59857513"
                },
                {
                    "start": 1711,
                    "end": 1726,
                    "matchedPaperCorpusId": "5181040"
                },
                {
                    "start": 1914,
                    "end": 1949,
                    "matchedPaperCorpusId": "3910027"
                },
                {
                    "start": 1949,
                    "end": 1999,
                    "matchedPaperCorpusId": "17911112"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7802734375
        },
        {
            "corpus_id": "249048171",
            "title": "Research on the Impacts of Cognitive Style and Computational Thinking on College Students in a Visual Artificial Intelligence Course",
            "text": "Visual programming plays an important role in programming education to promote students' understanding of programming and to maximize their engagement in problem-solving (Mladenovi\u0107 et al., 2021). Visual programming provides a programming interface that helps students learn programming concepts and processes (Lye and Koh, 2014;Chao, 2016;Essel et al., 2017;Mladenovi\u0107 et al., 2018;Scherer et al., 2020). In particular, Hu et al. (2021) indicated that visual programming can improve student's academic performance with a small to medium significant overall mean effect size in this area. A visual programming environment allows students to focus on developing and designing programs (Mladenovi\u0107 et al., 2018;Topalli and Cagiltay, 2018), so they become more motivated to solve programming problems without grammar constraints. Visual programming has major learning benefits for students, including an intuitive programming interface and reduced difficulties related to programming (Lye and Koh, 2014;Essel et al., 2017;Mladenovi\u0107 et al., 2018;Lindberg et al., 2019). Considering the need to effectively develop AI talents at the university level, it is necessary to consider the learning benefits provided by a visual programming learning environment. It helps university students quickly learn about AI and helps them gain a better understanding of AI.",
            "score": 0.4310919816026011,
            "section_title": "LITERATURE REVIEW Visual Programming Learning Environment",
            "char_start_offset": 6770,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 196
                },
                {
                    "start": 197,
                    "end": 405
                },
                {
                    "start": 406,
                    "end": 588
                },
                {
                    "start": 589,
                    "end": 826
                },
                {
                    "start": 827,
                    "end": 1066
                },
                {
                    "start": 1067,
                    "end": 1251
                },
                {
                    "start": 1252,
                    "end": 1353
                }
            ],
            "ref_mentions": [
                {
                    "start": 170,
                    "end": 195,
                    "matchedPaperCorpusId": "225393741"
                },
                {
                    "start": 310,
                    "end": 329,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 329,
                    "end": 340,
                    "matchedPaperCorpusId": "206930744"
                },
                {
                    "start": 340,
                    "end": 359,
                    "matchedPaperCorpusId": "157063390"
                },
                {
                    "start": 359,
                    "end": 383,
                    "matchedPaperCorpusId": "22570972"
                },
                {
                    "start": 383,
                    "end": 404,
                    "matchedPaperCorpusId": "216204126"
                },
                {
                    "start": 421,
                    "end": 437,
                    "matchedPaperCorpusId": "225492990"
                },
                {
                    "start": 684,
                    "end": 709,
                    "matchedPaperCorpusId": "22570972"
                },
                {
                    "start": 709,
                    "end": 736,
                    "matchedPaperCorpusId": "4012511"
                },
                {
                    "start": 981,
                    "end": 1000,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 1000,
                    "end": 1019,
                    "matchedPaperCorpusId": "157063390"
                },
                {
                    "start": 1019,
                    "end": 1043,
                    "matchedPaperCorpusId": "22570972"
                },
                {
                    "start": 1043,
                    "end": 1065,
                    "matchedPaperCorpusId": "69960068"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.89208984375
        },
        {
            "corpus_id": "251936144",
            "title": "VMetaFlow: A Meta-Framework for Integrating Visualizations in Coordinated View Applications",
            "text": "Traditionally, a program is generated from a structured 244 sequence of words with a syntactical meaning. Alternatively, 245 visual programs use graphics and two-dimensional layouts as 246 part of the program specification [24]. This approach is easier 247 to understand and work with, as it resembles the human men-248 tal representation of problems. Unlike the one-dimensional 249 textual way, visual programming uses higher-level descrip-250 tions of the program functionality. Users without program-251 ming skills find this approach more accessible [25].",
            "score": 0.4310919816026011,
            "section_title": "C. VISUAL PROGRAMMING 243",
            "char_start_offset": 7940,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 105
                },
                {
                    "start": 106,
                    "end": 228
                },
                {
                    "start": 229,
                    "end": 351
                },
                {
                    "start": 352,
                    "end": 480
                },
                {
                    "start": 481,
                    "end": 559
                }
            ],
            "ref_mentions": [
                {
                    "start": 223,
                    "end": 227,
                    "matchedPaperCorpusId": "1351280"
                },
                {
                    "start": 554,
                    "end": 558,
                    "matchedPaperCorpusId": "7335020"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8447265625
        },
        {
            "corpus_id": "53082351",
            "title": "Acknowledging iJOE 2017 Reviewers",
            "text": "Although IT is a prominent major for undergraduate students nowadays, some IT students experience difficulties for learning IT materials, especially algorithm [8,9] and programming [10,11]. They feel that learning such materials is not a trivial task since most concepts are abstract and require high logical thinking for further understanding. Consequently, to handle such issue, several educational tools for learning both algorithm and programming materials are developed. They are referred as Algorithm Visualization (AV) and Program Visualization (PV) tools respectively. On the one hand, AV tools are focused on providing a brief concept of how standard algorithms work without discussing the implementation [12]. It usually relies on interactive visual and animation in order to keep the user's attention. VisuAlgo [12] and AP-ASD1 [13] are two examples which fall into this category. On the other hand, PV tools are focused on visualizing and animating program aspects based on its runtime execution [14]. It usually displays all information stored on a program in a debug-like manner. Jeliot 3 [15], JIVE [16], VILLE [17], and PythonTutor [18] are several examples which fall into this category. \n\nPythonTutor is a PV tool that is initially aimed at assisting students to learn programming with Python [18]. Unlike other PV tools, PythonTutor is designed as a web-based application with responsive UI. It can be accessed from anywhere as long as the students are connected to the internet. In addition, it can also be used on various machines such as personal computer, laptop, tab, or smartphone. \n\nBased on the fact that several PV tools have been evaluated on real programming courses to measure their effectiveness comprehensively [19,5], this paper proposes a quasi-experimental design to evaluate the impact of PythonTutor for learning programming in laboratory sessions using students' grade. To our knowledge, it is the first attempt that discusses such impact on given conditions. For our case study, students from 4 classes of Basic Data Structure (BDS) course are considered as our participants. They are asked to use such tool for completing their laboratory task in half of the semesters while experiencing the absence of such tool on the other half semester.",
            "score": 0.4310845031967213,
            "section_title": "Related Works",
            "char_start_offset": 1533,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 189
                },
                {
                    "start": 190,
                    "end": 344
                },
                {
                    "start": 345,
                    "end": 475
                },
                {
                    "start": 476,
                    "end": 576
                },
                {
                    "start": 577,
                    "end": 719
                },
                {
                    "start": 720,
                    "end": 812
                },
                {
                    "start": 813,
                    "end": 891
                },
                {
                    "start": 892,
                    "end": 1013
                },
                {
                    "start": 1014,
                    "end": 1093
                },
                {
                    "start": 1094,
                    "end": 1204
                },
                {
                    "start": 1207,
                    "end": 1316
                },
                {
                    "start": 1317,
                    "end": 1410
                },
                {
                    "start": 1411,
                    "end": 1498
                },
                {
                    "start": 1499,
                    "end": 1606
                },
                {
                    "start": 1609,
                    "end": 1908
                },
                {
                    "start": 1909,
                    "end": 1998
                },
                {
                    "start": 1999,
                    "end": 2115
                },
                {
                    "start": 2116,
                    "end": 2281
                }
            ],
            "ref_mentions": [
                {
                    "start": 162,
                    "end": 164,
                    "matchedPaperCorpusId": "56002529"
                },
                {
                    "start": 181,
                    "end": 185,
                    "matchedPaperCorpusId": "8381532"
                },
                {
                    "start": 185,
                    "end": 188,
                    "matchedPaperCorpusId": "3207419"
                },
                {
                    "start": 714,
                    "end": 718,
                    "matchedPaperCorpusId": "63179283"
                },
                {
                    "start": 822,
                    "end": 826,
                    "matchedPaperCorpusId": "63179283"
                },
                {
                    "start": 839,
                    "end": 843,
                    "matchedPaperCorpusId": "57857055"
                },
                {
                    "start": 1103,
                    "end": 1107,
                    "matchedPaperCorpusId": "8730376"
                },
                {
                    "start": 1114,
                    "end": 1118,
                    "matchedPaperCorpusId": "17172757"
                },
                {
                    "start": 1126,
                    "end": 1130,
                    "matchedPaperCorpusId": "58796028"
                },
                {
                    "start": 1148,
                    "end": 1152,
                    "matchedPaperCorpusId": "8193806"
                },
                {
                    "start": 1311,
                    "end": 1315,
                    "matchedPaperCorpusId": "8193806"
                },
                {
                    "start": 1744,
                    "end": 1748,
                    "matchedPaperCorpusId": "58120197"
                },
                {
                    "start": 1748,
                    "end": 1750,
                    "matchedPaperCorpusId": "17776914"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.60546875
        },
        {
            "corpus_id": "248510289",
            "title": "Programming Experience Requirements for Future Visual Development Environments",
            "text": "Being learning tools, visual programming systems strike for a balance between programming facilities and ease-of-use. Thus, more advanced programming techniques may be left out, restricting deployment to small-scale projects. In this context, optional programming features may be provided targeted to more advanced learners as listed below: \n\n\u2022 Scopes may be defined by visual grouping, with local variables being geometrically contained. \u2022 Modules allow split programs into multiple units and reuse them in one or more projects. \u2022 Hybrid code enables contrast the visual code and its respective textual form altogether, enabling mixed editing, while keeping both views fully-synced and well-formed. \u2022 Source code that complements visual code, helpful for implementing complex modules, and also for supporting the cooperation of learners with experienced programmers.",
            "score": 0.4268795056642635,
            "section_title": "Extra Optional Elements",
            "char_start_offset": 11413,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 117
                },
                {
                    "start": 118,
                    "end": 225
                },
                {
                    "start": 226,
                    "end": 340
                },
                {
                    "start": 343,
                    "end": 438
                },
                {
                    "start": 439,
                    "end": 529
                },
                {
                    "start": 530,
                    "end": 699
                },
                {
                    "start": 700,
                    "end": 867
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.92236328125
        },
        {
            "corpus_id": "240916683",
            "title": "A Cross-Sectional Study Investigating Primary School Children\u2019s Coding Practices and Computational Thinking Using ScratchJr",
            "text": "code while also contributing to the development of their CT. With these programming tools the coding process can be performed via drag and drop of visual objects, known as blocks, using a modular editing interface which allows learners to develop and execute programs in a more intuitive and user-friendly way (Chao, 2016;Durak, 2020;Hu et al., 2021;Lye & Koh, 2014). This drag and drop process keeps young children more focused on the programming process itself and decreases their cognitive load (Durak, 2020;Mladenovic et al., 2018;Moors et al., 2018;Vasilopoulos & Van Schaik, 2019). In contrast to textbased programming, visual programming does not require children memorizing complex programming syntax or debugging errors in their codes (Durak, 2020;Lindberg et al., 2019). Instead, these programming tools are argued to enable the introduction of children to coding, via facilitating their understanding of how to use basic algorithmic forms through a smooth and straightforward visual mode of programming (Portelance & Bers, 2015).\n\nSuch visual-based environments enable children to construct meaningful programs with instant output, which in turn sustains their engagement with the programming process (Bers, 2018;Kong & Wang, 2019). Active engagement is significant in learning programming, otherwise, students' interest, artifacts and learning can be affected (Durak, 2020). Visual programming tools transform young children into active creators of games, animations, and interactive stories in various disciplines (e.g., language, science, or mathematics), which can boost their interest in CT learning (Mladenovic et al., 2018;Moors et al., 2018). Many of these visual-based tools work on touch devices (tablets) whose interactive interface makes them even more accessible to young learners and children (Hill et al., 2015).\n\nThe literature suggests that visual programming tools are most often used to foster the acquisition of coding skills and CT in educational contexts (de Araujo et al., 2016;Resnick et al., 2009;Shute et al., 2017), as they effectively facilitate the cognitive, motor, and social development of young children (Lee et al., 2013). This study examines CT using ScratchJr, which was especially designed for",
            "score": 0.4227106823263234,
            "section_title": "The Role of Visual-Based Programming in Addressing Children's Difficulties With Coding and CT",
            "char_start_offset": 8363,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 310,
                    "end": 322,
                    "matchedPaperCorpusId": "206930744"
                },
                {
                    "start": 322,
                    "end": 334,
                    "matchedPaperCorpusId": "69880168"
                },
                {
                    "start": 334,
                    "end": 350,
                    "matchedPaperCorpusId": "225492990"
                },
                {
                    "start": 350,
                    "end": 366,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 498,
                    "end": 511,
                    "matchedPaperCorpusId": "69880168"
                },
                {
                    "start": 535,
                    "end": 554,
                    "matchedPaperCorpusId": "195832237"
                },
                {
                    "start": 554,
                    "end": 586,
                    "matchedPaperCorpusId": "67309000"
                },
                {
                    "start": 744,
                    "end": 757,
                    "matchedPaperCorpusId": "69880168"
                },
                {
                    "start": 757,
                    "end": 779,
                    "matchedPaperCorpusId": "69960068"
                },
                {
                    "start": 1014,
                    "end": 1039,
                    "matchedPaperCorpusId": "22376466"
                },
                {
                    "start": 1212,
                    "end": 1224,
                    "matchedPaperCorpusId": "52202617"
                },
                {
                    "start": 1372,
                    "end": 1385,
                    "matchedPaperCorpusId": "69880168"
                },
                {
                    "start": 1641,
                    "end": 1660,
                    "matchedPaperCorpusId": "195832237"
                },
                {
                    "start": 1818,
                    "end": 1837,
                    "matchedPaperCorpusId": "2173765"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.88623046875
        },
        {
            "corpus_id": "231725028",
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "text": "Thereafter, the study explains the methodology of this systematic literature review including the research questions. Subsequently, the study presents the results of answering the research questions by examining the visual programming tools presented in the selected articles against 12 dimensions: classification of visual programming, interaction style, target users, domain, platform, empirical evidence, types of test participants, number of test participants, programming skills of test participants, evaluation methods, evaluation measures, and accessibility. Thereafter, challenges and future research directions are discussed. Finally, the key findings are presented in the conclusion.",
            "score": 0.4227106823263234,
            "section_title": "I. INTRODUCTION",
            "char_start_offset": 4572,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 117
                },
                {
                    "start": 118,
                    "end": 565
                },
                {
                    "start": 566,
                    "end": 634
                },
                {
                    "start": 635,
                    "end": 693
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.91455078125
        },
        {
            "corpus_id": "212726996",
            "title": "Facilitating K-12 Teachers in Creating Apps by Visual Programming and Project-based Learning",
            "text": "Traditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming [9]- [10]. Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions. Study by [15] indicated that students who used the visual interface for programming spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface for programming. Saito, Washizaki, and Fukazawa also compared the learning effects of text-based and visual-based programming and found that visual-based programming induces a larger change in attitude toward programming [16]. Therefore, research results suggest that visual-based programming is advantageous in a programming implementation environment for novice programmers. \n\nNumerous studies have shown the benefits and feasibility of visual programming environments such as Scratch (scratch. mit.edu), Alice (www.alice.org), and Kodu (www.kodugamelab.com). Since they are easy to use and understand, visual programming environments have been used as lead-in courses for more advanced computer science courses. For example, research [17]- [18] taught Scratch in a CS0 course to improve the retention rate of at-risk majors and to stimulate interest and positive attitudes toward computer science. Scratch and Kodu were also used to teach important concepts of computer science for students [19]- [21]. Furthermore, research by Werner, Denner, Campe, and Kawamoto also pointed out that visual programming environment is helpful in the development of learners' computational thinking skills [22].",
            "score": 0.4227106823263234,
            "section_title": "Visual programming environment",
            "char_start_offset": 5363,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 157
                },
                {
                    "start": 158,
                    "end": 329
                },
                {
                    "start": 330,
                    "end": 417
                },
                {
                    "start": 418,
                    "end": 627
                },
                {
                    "start": 628,
                    "end": 766
                },
                {
                    "start": 767,
                    "end": 953
                },
                {
                    "start": 954,
                    "end": 1190
                },
                {
                    "start": 1191,
                    "end": 1400
                },
                {
                    "start": 1401,
                    "end": 1550
                },
                {
                    "start": 1553,
                    "end": 1670
                },
                {
                    "start": 1671,
                    "end": 1680
                },
                {
                    "start": 1681,
                    "end": 1703
                },
                {
                    "start": 1704,
                    "end": 1735
                },
                {
                    "start": 1736,
                    "end": 1888
                },
                {
                    "start": 1889,
                    "end": 2074
                },
                {
                    "start": 2075,
                    "end": 2179
                },
                {
                    "start": 2180,
                    "end": 2372
                }
            ],
            "ref_mentions": [
                {
                    "start": 319,
                    "end": 322,
                    "matchedPaperCorpusId": "33572463"
                },
                {
                    "start": 324,
                    "end": 328,
                    "matchedPaperCorpusId": "2965215"
                },
                {
                    "start": 963,
                    "end": 967,
                    "matchedPaperCorpusId": "16554511"
                },
                {
                    "start": 1395,
                    "end": 1399,
                    "matchedPaperCorpusId": "38535646"
                },
                {
                    "start": 1911,
                    "end": 1915,
                    "matchedPaperCorpusId": "59837822"
                },
                {
                    "start": 1917,
                    "end": 1921,
                    "matchedPaperCorpusId": "22652302"
                },
                {
                    "start": 2168,
                    "end": 2172,
                    "matchedPaperCorpusId": "16831477"
                },
                {
                    "start": 2174,
                    "end": 2178,
                    "matchedPaperCorpusId": "3344110"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9560546875
        },
        {
            "corpus_id": "224877240",
            "title": "Exploring the Effect of Training in Visual Block Programming for Preservice Teachers",
            "text": "Students are generally in favor of this pedagogical design, highlighting its usefulness and the active learning provided. The importance of an educational design that includes the approach of a visual programming language to understand the elements of logic, mathematics, and the creation of content in art and history, brings about significant improvements both in elementary [2] and higher education [32] through the understanding of computational concepts and active approaches. \n\nFrom our position as trainers of trainers, and from the application of approaches focused on visual block programming, we consider the impact generated by these emerging innovations in the initial training of future teachers, as well as the real presence of these key trends in the university training context. To address this, we specify the following aims: \n\n\u2022 O01-To assess the effect of a visual block programming-based intervention on pre-service teachers' mastery of coding. \u2022 O02-To assess the effect of a visual block programming-based intervention on pre-service teachers' opinions about the potential of programming as a pedagogical tool.",
            "score": 0.4205714040065763,
            "section_title": "Introduction",
            "char_start_offset": 7167,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 121
                },
                {
                    "start": 122,
                    "end": 481
                },
                {
                    "start": 484,
                    "end": 794
                },
                {
                    "start": 795,
                    "end": 842
                },
                {
                    "start": 845,
                    "end": 964
                },
                {
                    "start": 965,
                    "end": 1132
                }
            ],
            "ref_mentions": [
                {
                    "start": 377,
                    "end": 380,
                    "matchedPaperCorpusId": "27633066"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.79345703125
        },
        {
            "corpus_id": "234029837",
            "title": "Enhancing student interest in learning through the development of serious mathematics games",
            "text": "Scratch is a visual programming language for learning environments that allow beginners (whether students, teachers, learners, or parents) to learn to program without having to think about writing syntax completely wrong. This programming language was created by MIT Media Lab of the Massachusetts Institute of Technology with Scratch, users can create their animations, games, artworks, and more. Scratch users can create programs (called projects) by visually arranging command blocks (called blocks). In this way, students can focus on logic and programming flow (algorithms) without ever or frequently getting error errors due to incorrect syntax writing [13]. Scratch is taught to more than 800 schools and 70 colleges worldwide. In higher education, Scratch is used in Harvard University's CS50 introductory course.",
            "score": 0.4196427830698656,
            "section_title": "Scratch",
            "char_start_offset": 6572,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 221
                },
                {
                    "start": 222,
                    "end": 397
                },
                {
                    "start": 398,
                    "end": 503
                },
                {
                    "start": 504,
                    "end": 664
                },
                {
                    "start": 665,
                    "end": 734
                },
                {
                    "start": 735,
                    "end": 821
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7802734375
        },
        {
            "corpus_id": "53282492",
            "title": "State of the Software Development Life-Cycle for the Internet-of-Things",
            "text": "Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007]. \n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as: \n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device. \n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002]. \n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017]. \n\nAlthough several domains of applications already take advantage of the use of VPLs, the emerging field of Internetof-Things (IoT) is still lingering far behind other sectors. \n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003]. The application of domain-specific visual programming languages to solve the need of abstraction from the low-level and heterogeneous devices that usually make a part in the IoT connected world can already be observed. We can consider, as an example, how graphical-based programming languages are already widely used for programming low-level devices such as Programmed Logic Controllers (PLCs) in high-production manufacturing systems [Younis and Frey 2003]. \n\nThe goal of this section is to review the landscape of visual programming environments (viz.",
            "score": 0.4180328117224905,
            "section_title": "Visual Programming for IoT",
            "char_start_offset": 44329,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 179
                },
                {
                    "start": 180,
                    "end": 398
                },
                {
                    "start": 399,
                    "end": 615
                },
                {
                    "start": 618,
                    "end": 748
                },
                {
                    "start": 749,
                    "end": 768
                },
                {
                    "start": 771,
                    "end": 1013
                },
                {
                    "start": 1016,
                    "end": 1205
                },
                {
                    "start": 1206,
                    "end": 1221
                },
                {
                    "start": 1224,
                    "end": 1336
                },
                {
                    "start": 1337,
                    "end": 1503
                },
                {
                    "start": 1506,
                    "end": 1680
                },
                {
                    "start": 1683,
                    "end": 1912
                },
                {
                    "start": 1913,
                    "end": 2131
                },
                {
                    "start": 2132,
                    "end": 2372
                },
                {
                    "start": 2375,
                    "end": 2467
                }
            ],
            "ref_mentions": [
                {
                    "start": 752,
                    "end": 763,
                    "matchedPaperCorpusId": "48762803"
                },
                {
                    "start": 1209,
                    "end": 1220,
                    "matchedPaperCorpusId": "48762803"
                },
                {
                    "start": 1493,
                    "end": 1502,
                    "matchedPaperCorpusId": "30037917"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.927734375
        },
        {
            "corpus_id": "41975790",
            "title": "PROVIT-CI: A Classroom-Oriented Educational Program Visualization Tool",
            "text": "Program Visualization (PV) is useful to illustrate information inside computer programs during their runtime dynamically or statically [1]. It is widely used in visual debugger of Integrated Development Environment(IDE) [2]. On the other hand, studies have shown that PV can also improve beginner's understanding of computer program [3], [4]. A lot of educational PV tools have been proposed to support computer programming learning. For example, Je-liot3, for full or semi-automatic visualization of Java programs [5], [6], has been used in distance education [7], collaborative learning [8] and student programming exercise [9]; VILLE, for visualization of Java and pseudo-code programs, was used in lab session [10]; VIP is a profitable visualization tool for students to learn introductory C++ programming [11]; UUhistle, for introductory Python programming learning, can show program execution proceeds and explore students' mistakes by \"visual program simulation exercises\" [12], [13]; On-line Python Tutor, a webbased program visualization tool with digital textbooks and example programs works on all modern web browsers for students in exercise sessions or self-study [14]; The Teaching Machine(TM) [15], [16] can visualize C++ and Java program; A useful PV tool was proposed to promote stu-dents'understanding of data processing algorithms [17]. \n\nIn many universities like author's university, a computer programming course consists of lectures and exercises. The exercise is performed in an exercise classroom where each student uses a computer for self-study and the instructor mainly deals with the questions from the students. On the other hand, the lecture is performed in a lecture classroom equipped with an instructor computer and a wall-size projection screen for showing the desktop of the computer. In the lecture classroom, students share the teaching materials including example program source codes by the projection screen and are not requested to use their own computers. However, IDEs and above educational PV tools have only been used to support students in exercise or self-study and there is no research showing that instructors, who play the most important role in programming education, actively integrated those tools into their lecture classroom instruction.",
            "score": 0.417718533498412,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 139
                },
                {
                    "start": 140,
                    "end": 224
                },
                {
                    "start": 225,
                    "end": 342
                },
                {
                    "start": 343,
                    "end": 433
                },
                {
                    "start": 434,
                    "end": 1355
                },
                {
                    "start": 1358,
                    "end": 1470
                },
                {
                    "start": 1471,
                    "end": 1641
                },
                {
                    "start": 1642,
                    "end": 1820
                },
                {
                    "start": 1821,
                    "end": 1998
                },
                {
                    "start": 1999,
                    "end": 2293
                }
            ],
            "ref_mentions": [
                {
                    "start": 135,
                    "end": 138,
                    "matchedPaperCorpusId": "12628167"
                },
                {
                    "start": 220,
                    "end": 223,
                    "matchedPaperCorpusId": "1000380"
                },
                {
                    "start": 333,
                    "end": 336,
                    "matchedPaperCorpusId": "13907547"
                },
                {
                    "start": 515,
                    "end": 518,
                    "matchedPaperCorpusId": "8730376"
                },
                {
                    "start": 520,
                    "end": 523,
                    "matchedPaperCorpusId": "37104801"
                },
                {
                    "start": 561,
                    "end": 564,
                    "matchedPaperCorpusId": "11488438"
                },
                {
                    "start": 589,
                    "end": 592,
                    "matchedPaperCorpusId": "17766680"
                },
                {
                    "start": 626,
                    "end": 629,
                    "matchedPaperCorpusId": "25527478"
                },
                {
                    "start": 714,
                    "end": 718,
                    "matchedPaperCorpusId": "17776914"
                },
                {
                    "start": 980,
                    "end": 984,
                    "matchedPaperCorpusId": "24034783"
                },
                {
                    "start": 986,
                    "end": 990,
                    "matchedPaperCorpusId": "207200073"
                },
                {
                    "start": 1177,
                    "end": 1181,
                    "matchedPaperCorpusId": "8193806"
                },
                {
                    "start": 1208,
                    "end": 1212,
                    "matchedPaperCorpusId": "16770043"
                },
                {
                    "start": 1214,
                    "end": 1218,
                    "matchedPaperCorpusId": "35401513"
                },
                {
                    "start": 1350,
                    "end": 1354,
                    "matchedPaperCorpusId": "5639917"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8212890625
        },
        {
            "corpus_id": "7844885",
            "title": "An Interactive Book Authoring Tool to Introduce Programming Logic in Schools",
            "text": "The user creates a text, which may have one or more wiki link to other texts, which may also connect to other ones, and so forth. For increasing usability, Twine provides a visualization tool where the user can see the overall story graph, in a way similar to StoryTec. However, differently from the latter, it does not provide a visual editor for authoring the story logic. In Twine, each wiki-text may also have embedded a chunk of code (written in Javascript) in order to control, for instance, how many times the user has passed by that text or if a part of the text should be visible or not. This approach allows more control. However, it requires previous knowledge of a specific programming language. Figure 2 illustrates the Twine approach to embed variables and coding instructions into a narrative text. The two previously mentioned approaches, exemplified by StoryTec and Twine, have advantages and pitfalls. While a purely visual method does not provide all programming mechanisms, a direct use of a programming language may pose a barrier to beginners. It is worth then note that each approach targets a particular audience: non-programmer users and programmer ones. By focusing on a unique audience, they do not provide enough mechanisms to guide a non programmer user to become a programmer one. In other words, they are not adequate to be used as a learning tool. \n\nAiming at this learning guidance in programming skills, several tools have been constructed using a block-based visual programming strategy, as the one present in Scratch (Resnick et al., 2009). Indeed, the interest in block-based visual programming has grown in recent years, specially in the educational context, helping beginners to get involved in their programming first steps (Fraser, 2015). From a leaner perspective, the advantages of using block-based programming relies on the ability to use a visual language modeled for a specific domain, the possibility of gradually presenting parts of that language, and, finally, the capacity of not allowing syntax errors (only semantic errors) (Fraser, 2015). \n\nBecause of the previously mentioned reasons, authoring applications using block-based programming, such as Scratch (Resnick et al., 2009) and AppIventor (Wolber, 2011), have been widely used by educators to teach programming.",
            "score": 0.41508076872610844,
            "section_title": "RELATED WORK",
            "char_start_offset": 6488,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 129
                },
                {
                    "start": 130,
                    "end": 269
                },
                {
                    "start": 270,
                    "end": 374
                },
                {
                    "start": 375,
                    "end": 596
                },
                {
                    "start": 597,
                    "end": 631
                },
                {
                    "start": 632,
                    "end": 707
                },
                {
                    "start": 708,
                    "end": 813
                },
                {
                    "start": 814,
                    "end": 919
                },
                {
                    "start": 920,
                    "end": 1065
                },
                {
                    "start": 1066,
                    "end": 1179
                },
                {
                    "start": 1180,
                    "end": 1310
                },
                {
                    "start": 1311,
                    "end": 1379
                },
                {
                    "start": 1382,
                    "end": 1576
                },
                {
                    "start": 1577,
                    "end": 1779
                },
                {
                    "start": 1780,
                    "end": 2092
                },
                {
                    "start": 2095,
                    "end": 2320
                }
            ],
            "ref_mentions": [
                {
                    "start": 1764,
                    "end": 1778,
                    "matchedPaperCorpusId": "44698743"
                },
                {
                    "start": 2077,
                    "end": 2091,
                    "matchedPaperCorpusId": "44698743"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.859375
        },
        {
            "corpus_id": "269183392",
            "title": "Taking ASCII Drawings Seriously: How Programmers Diagram Code",
            "text": "While text remains the dominant medium for programming, signifcant research has investigated the use of visuals for assisting, explaining, teaching, and even doing programming. These investigations are rooted in the thesis that text and visuals, as two diferent media, have complimentary representational capabilities which can be integrated simultaneously to amplify problem-solving, learning, and communication [22,46,60]. Below, we review prior work that uses visual artifacts to assist in problem-solving for software development, as communication and educational tools to teach programming, and as part or as the whole of a programming language.",
            "score": 0.41450130713776434,
            "section_title": "RELATED WORK",
            "char_start_offset": 4911,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 176
                },
                {
                    "start": 177,
                    "end": 424
                },
                {
                    "start": 425,
                    "end": 650
                }
            ],
            "ref_mentions": [
                {
                    "start": 417,
                    "end": 420,
                    "matchedPaperCorpusId": "240766028"
                },
                {
                    "start": 420,
                    "end": 423,
                    "matchedPaperCorpusId": "2580513"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.84521484375
        },
        {
            "corpus_id": "267631545",
            "title": "Synthesis regarding the general aspects of studying visual programming in pre-university education",
            "text": "The tools and platforms for visual programming have become popular worldwide, and many educational institutions are integrating them into the school curriculum to familiarize students with programming and computational thinking. This contributes to preparing students for the constantly evolving digital world and helps them become active and competent citizens in the technology era. The proposed research aims to conduct an analysis of educational policies regarding the implementation of visual programming, both in schools in the Republic of Moldova and in education systems of other countries such as Romania, the United Kingdom, Estonia, or Spain. Aspects to be analyzed include established competencies, educational levels at which visual programming is introduced, programming languages and platforms used, as well as available resources. The goal of this analysis is to identify the experiences, approaches, and best practices used in the reference countries regarding the integration of visual programming in pre-university education. It also aims to propose concrete suggestions for improving the study of visual programming in the Republic of Moldova. These suggestions include recommendations for the curriculum, educational resources, and teacher training to ensure proper preparation of students in the field of visual programming. Visual programming plays a significant role in developing digital skills and computational thinking in students, providing them with the opportunity to express their creativity, learn essential technological skills, and develop logical and systematic thinking.",
            "score": 0.41450130713776434,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.83984375
        },
        {
            "corpus_id": "4039308",
            "title": "Visual and textual programming languages: a systematic review of the literature",
            "text": "This study is focused on the relationship between language choice and learning to program. In particular, we want to discover what effects visual programming languages have on the learning process as well as how they compared to the performance of students using traditional text-based languages. To that end, the following research questions were defined: 1. Are there any benefits of learning a visual programming language over a traditional textbased language? 2. Does the choice of First Programming Language make a difference? What languages are the best ones to teach? \n\n3 Method",
            "score": 0.41450130713776434,
            "section_title": "Research Questions",
            "char_start_offset": 2693,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 90
                },
                {
                    "start": 91,
                    "end": 296
                },
                {
                    "start": 297,
                    "end": 463
                },
                {
                    "start": 464,
                    "end": 531
                },
                {
                    "start": 532,
                    "end": 574
                },
                {
                    "start": 577,
                    "end": 585
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.83544921875
        },
        {
            "corpus_id": "214243289",
            "title": "VB2ALGO: An Educational Reverse Engineering Tool to Enhance High School Students\u2019 Learning Capacities in Programming",
            "text": "An educational software assessment tool, VB2ALGO, for a visual programming course has been developed and the effects of it on the high school students\u2019 performances, motivation and cognitive skills were explored. The tool inherits algorithm visualization technique together with reverse engineering approach; it takes the visual basic source code as an input and generates pseudocode and flowchart as an output. First, an experimental research methodology was applied, whereby pre-tests and post-tests were conducted to estimate the effect of using the software tool on student performances towards learning visual programming course. Then, the effect of the tool on students\u2019 motivation and cognitive skills were measured with students\u2019 questionnaires. Finally, teachers\u2019 class management skills were investigated with teachers\u2019 questionnaires in terms of time-management for better teaching experiences. The experiment was carried out with 294 students from 4 different high schools which had divided into experimental group and control groups. Parametric statistical tests were applied and results showed that the use of software tool reveals better performances for the experimental group as compared to the control group. In addition, the results of the students\u2019 questionnaires confirmed an increment in students' motivation and cognitive skills in programming language classes as compared to the traditional class. It also results in the improvement of students' learning capacities and knowledge about programming concepts. Finally, results of the teachers\u2019 quantitative analysis outlined that use of the software tool encourages teachers to complete more examples inside the classroom with better time management.",
            "score": 0.4143135278882468,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.81591796875
        },
        {
            "corpus_id": "11040530",
            "title": "Verificator: Educational Tool for Learning Programming",
            "text": "However, Naps et al. (2002) emphasizes that visualization tools can be useful only if students are actively involved in the learning process. Owing to the above-mentioned advantages of visualization tools in the educational process, they have been actively used in the study and animation of algorithms (Garner, 2003;Costelloe, 2004) and data structures (Grissom et al., 2003;Laakso et al., 2005). Visualization tools can be divided into two groups: flowcharts and simulation tools. \n\nFlowcharts are usually a good choice of a visualization tool for teaching programming, primarily because they can present the algorithm as a mental model that a student with little or no prior knowledge can easily understand. By using flowcharts, students will easily perceive the program flow and later, when they try to independently solve problems, this can be of great benefit. However, whereas flowcharts can be useful for visualization and modeling of simple programming concepts, they are not suitable for large and complex applications (Scott et al., 2006). From among the set of visual programming environments based on a flowchart primarily intended for teaching programming, the following should be pointed out: Rapid Algorithmic Prototyping Tool for Ordered Reasoning (RAPTOR; Carlisle et al., 2004), Flow Chart Interpreter (FCI; Atanasova and Hristova, 2003) and Flint (Crews, 2001). All the mentioned tools enable students to create algorithms through a combination of basic graphical symbols. In addition, studies have shown that the average grades of students using visualization development environments based on a flowchart were significantly higher than those who learned programming by using traditional development environments (Crews, 2001;Carlisle et al., 2004). \n\nThe second group consists of visualization simulation tools. The general approach to animation of algorithms defined in procedural higher level languages began with the BALSA system (Brown and Sedgewick, 1984) after which TANGO (Stasko, 1990) and Polka (Stasko and Kraemer, 1993) systems were developed at the Georgia Institute of Technology. Their main purpose was the teaching of dynamic behavior of complex algorithms. However, those systems were not very successful, primarily because their animation design was more appropriate for experts in the field than for novice students.",
            "score": 0.414031787312564,
            "section_title": "Related Work",
            "char_start_offset": 5026,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 141
                },
                {
                    "start": 142,
                    "end": 397
                },
                {
                    "start": 398,
                    "end": 482
                },
                {
                    "start": 485,
                    "end": 710
                },
                {
                    "start": 711,
                    "end": 866
                },
                {
                    "start": 867,
                    "end": 1050
                },
                {
                    "start": 1051,
                    "end": 1381
                },
                {
                    "start": 1382,
                    "end": 1492
                },
                {
                    "start": 1493,
                    "end": 1770
                },
                {
                    "start": 1773,
                    "end": 1833
                },
                {
                    "start": 1834,
                    "end": 2115
                },
                {
                    "start": 2116,
                    "end": 2194
                },
                {
                    "start": 2195,
                    "end": 2356
                }
            ],
            "ref_mentions": [
                {
                    "start": 9,
                    "end": 27,
                    "matchedPaperCorpusId": "1555643"
                },
                {
                    "start": 303,
                    "end": 317,
                    "matchedPaperCorpusId": "261693763"
                },
                {
                    "start": 354,
                    "end": 376,
                    "matchedPaperCorpusId": "2349102"
                },
                {
                    "start": 376,
                    "end": 396,
                    "matchedPaperCorpusId": "11344397"
                },
                {
                    "start": 1274,
                    "end": 1296,
                    "matchedPaperCorpusId": "60460747"
                },
                {
                    "start": 1327,
                    "end": 1356,
                    "matchedPaperCorpusId": "11083793"
                },
                {
                    "start": 1747,
                    "end": 1769,
                    "matchedPaperCorpusId": "60460747"
                },
                {
                    "start": 1955,
                    "end": 1982,
                    "matchedPaperCorpusId": "5875304"
                },
                {
                    "start": 2001,
                    "end": 2015,
                    "matchedPaperCorpusId": "6832560"
                },
                {
                    "start": 2026,
                    "end": 2052,
                    "matchedPaperCorpusId": "13984020"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8486328125
        },
        {
            "corpus_id": "271244918",
            "title": "Comparing Visual Metaphors with Textual Code For Learning Basic Computer Science Concepts in Virtual Reality",
            "text": "Because computer science is a field with a high level of perceived difficulty and a high dropout rate for students in introductory courses, there have been efforts made by multiple stakeholders to reduce the barriers to entry by teaching beginner programming concepts [1].Some of these efforts have taken the form of free and paid online courses that teach a particular programming language or a selection of programming languages through a curriculum consisting of progressive exercises beginning with fundamental concepts and easing into more advanced topics.Examples of such options include Codecademy, Udacity, Coursera, The Odin Project, Codewars, FreeCodeCamp, Udemy, edX, Code.org, as well as others [2].Schools like UC Berkeley are among educational institutions that offer their own coding bootcamp style programs, as they're also known [3].\n\nWhile these options are marketed as being ideal for novices of most age groups, they commonly use the pedagogical format of typing textual code into a window.This format is similar to real programming in a production context, but it may be better suited for older learners such as college students and continuing professionals who already have relatively high levels of reading and writing comprehension.The format may not be as accessible and engaging for younger learners as more visual programming options, especially learners young enough not to have developed high-level reading and writing skills [4] [5].\n\nThe need for more visually based educational programming options specifically suited for younger learners led to the creation and expansion of block-based programming (BBP) tools such as Blockly, Scratch, CoBlox, and others [4].These tools create a graphical user interface (GUI) for the user to be able to manipulate and combine pieces of code to create meaningful animations and interactions [4].This format has demonstrated success in the areas of engagement and learning new programming concepts when compared with text-based approaches [5].\n\nA 1999 study conducted by Mckay explored the effects of graphical metaphors on learning CS in adults [6].The study uses the term \"graphical metaphor\" synonymously with the current study's term \"visual metaphor,\" meaning a non-textual image which abstractly represents a concept [6].\n\nThe only difference in usage is that Mckay's study involved 2D images, whereas the current study uses 3D objects in the VR activity [6].",
            "score": 0.41383871595844657,
            "section_title": "2D COMPUTER SCIENCE EDUCATION",
            "char_start_offset": 823,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 272
                },
                {
                    "start": 272,
                    "end": 561
                },
                {
                    "start": 561,
                    "end": 711
                },
                {
                    "start": 711,
                    "end": 850
                },
                {
                    "start": 852,
                    "end": 1010
                },
                {
                    "start": 1010,
                    "end": 1256
                },
                {
                    "start": 1256,
                    "end": 1463
                },
                {
                    "start": 1465,
                    "end": 1693
                },
                {
                    "start": 1693,
                    "end": 1863
                },
                {
                    "start": 1863,
                    "end": 2010
                },
                {
                    "start": 2012,
                    "end": 2117
                },
                {
                    "start": 2117,
                    "end": 2294
                },
                {
                    "start": 2296,
                    "end": 2432
                }
            ],
            "ref_mentions": [
                {
                    "start": 2113,
                    "end": 2116,
                    "matchedPaperCorpusId": "145349110"
                },
                {
                    "start": 2290,
                    "end": 2293,
                    "matchedPaperCorpusId": "145349110"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.6474609375
        },
        {
            "corpus_id": "272639481",
            "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills",
            "text": "A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly. It begins with building the game world and creating characters or objects, followed by defining the game rules. The icon-based approach involves designing the 3D world and programming responses to game events. Kodu Game Lab is a visual programming language and development environment created by Microsoft, designed specifically for creating games (Choleva et al., 2022). It is aimed at children and beginners, providing an easy-to-use interface that allows users to create and customize their own games without requiring prior programming knowledge. Here are some key features and aspects of Kodu Game Lab. Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users. Users can build entire game worlds, create characters, and define their behaviors using the visual programming tools provided. This includes setting up rules, creating interactions, and defining objectives for the game. Kodu Game Lab features a 3D environment where users can design landscapes, add objects, and bring their games to life. The 3D aspect makes the games more engaging and visually appealing. Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Microsoft, 2018). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills.",
            "score": 0.412436391085234,
            "section_title": "Visual Programming Language (VPL)",
            "char_start_offset": 9841,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 193
                },
                {
                    "start": 194,
                    "end": 324
                },
                {
                    "start": 325,
                    "end": 452
                },
                {
                    "start": 453,
                    "end": 584
                },
                {
                    "start": 585,
                    "end": 737
                },
                {
                    "start": 738,
                    "end": 849
                },
                {
                    "start": 850,
                    "end": 947
                },
                {
                    "start": 948,
                    "end": 1109
                },
                {
                    "start": 1110,
                    "end": 1288
                },
                {
                    "start": 1289,
                    "end": 1345
                },
                {
                    "start": 1346,
                    "end": 1456
                },
                {
                    "start": 1457,
                    "end": 1526
                },
                {
                    "start": 1527,
                    "end": 1653
                },
                {
                    "start": 1654,
                    "end": 1746
                },
                {
                    "start": 1747,
                    "end": 1865
                },
                {
                    "start": 1866,
                    "end": 1933
                },
                {
                    "start": 1934,
                    "end": 2054
                },
                {
                    "start": 2055,
                    "end": 2189
                },
                {
                    "start": 2190,
                    "end": 2352
                },
                {
                    "start": 2353,
                    "end": 2487
                }
            ],
            "ref_mentions": [
                {
                    "start": 1086,
                    "end": 1108,
                    "matchedPaperCorpusId": "252953502"
                },
                {
                    "start": 2171,
                    "end": 2188,
                    "matchedPaperCorpusId": "237618637"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.97802734375
        },
        {
            "corpus_id": "247731455",
            "title": "Computational Thinking and User Interfaces: A Systematic Review",
            "text": "As a line of future work, the author mentions conducting a comparative study of the App Inventor and other programming environments, which are used to introduce programming to high school students. \n\nIn this article, the author addresses the need to use visual programming environments with an interface that helps users develop computer and computational thinking skills, by making it possible for users to focus on solving the problem in question, and not just on the code. \n\nEntry (Visual Programming to Enhance Children's Computational Thinking [20]): This article introduces Entry, a visual programming platform based on HTML5 that encourages the development of computational thinking in learners. \n\nIt features a simple and intuitive block-based interface. Through this friendly environment, it allows the user to engage in problem-based learning that spans the basic principles of programming. Furthermore, since it is Web-based, it is adaptive and can be easily used on mobile devices. \n\nIn future research, the authors propose conducting qualitative surveys to study the usability of the interface and apply specific measures to adapt the improvements to the user interface. \n\nMeasuring the Usability and Capability of App Inventor to Create Mobile Applications [21]: The goal of this study is to evaluate the usability of App Inventor to develop applications for mobile devices. To this end, the environment must be intuitive, usable and functional so that basic users can create simple applications, and higher level users can develop more advanced applications. \n\nIn order to carry out this research, the applications from a sample of 5228 resources were categorized and filtered. The findings indicate that the interface is limited by the learning resources, and that there is thus a relationship between the usability of the interfaces and the tutorials proposed to carry out the activity. \n\nFloors and Flexibility (Designing a Programming Environment for 4th-6th Grade Classrooms [22]): Several studies focused on Human-Computer Interaction show the differences between how children interact compared to adults. It is these differences that must therefore be kept in mind when designing visual tools for programming, since the development interface plays a fundamental role, as it aims to promote change in the students' roles as they transition from being mere users to developers. As a result, this paper argues for the need to have a tool that can be adapted to different educational levels, making the user focus on the project to be developed without becoming lost learning the interface.",
            "score": 0.4124245435768073,
            "section_title": "IV. RESULTS",
            "char_start_offset": 15292,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 197
                },
                {
                    "start": 200,
                    "end": 475
                },
                {
                    "start": 478,
                    "end": 702
                },
                {
                    "start": 705,
                    "end": 762
                },
                {
                    "start": 763,
                    "end": 900
                },
                {
                    "start": 901,
                    "end": 993
                },
                {
                    "start": 996,
                    "end": 1183
                },
                {
                    "start": 1186,
                    "end": 1388
                },
                {
                    "start": 1389,
                    "end": 1573
                },
                {
                    "start": 1576,
                    "end": 1692
                },
                {
                    "start": 1693,
                    "end": 1903
                },
                {
                    "start": 1906,
                    "end": 2126
                },
                {
                    "start": 2127,
                    "end": 2397
                },
                {
                    "start": 2398,
                    "end": 2608
                }
            ],
            "ref_mentions": [
                {
                    "start": 549,
                    "end": 553,
                    "matchedPaperCorpusId": "16225209"
                },
                {
                    "start": 1271,
                    "end": 1275,
                    "matchedPaperCorpusId": "15519079"
                },
                {
                    "start": 1995,
                    "end": 1999,
                    "matchedPaperCorpusId": "2173765"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8876953125
        },
        {
            "corpus_id": "145878711",
            "title": "A Web based Approach for Teaching and Learning Programming Concepts at Middle School Level",
            "text": "One of the major concerns in teaching and learning programming concepts is the complexity of syntax and precision of semantics of programming languages. Traditional teaching methods are static and passive i.e. they do not engage students in an interactive manner thereby making it difficult for students to grasp the contents and instructors to convey the instruction. This obstacle even becomes challenging when programming courses are to be taught to beginners. To cope up with this challenge, this work has proposed and prototyped a system that is aimed to focus on students at their middle level of education. Multimedia technology i.e. videos have been used to plunge the students in an interactive environment where learning JavaScript programming becomes fun instead of a mind-burden. Visualization concepts have been incorporated to provide visual learning for variables, loops, control structures, functions etc. This application is dynamic in nature that is user can not only understand the programming concepts but can also run the codes using code panel. The designed system has been tested to ensure the functionality, performance and feedback from the targeted users as discussed in results section.",
            "score": 0.4116372362202997,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.33349609375
        },
        {
            "corpus_id": "231014189",
            "title": "Teaching Loops Concept through Visualization Construction",
            "text": "Rather than a code having individual lines, loops (one-level) can be considered as a single line of command having some purpose and can be put in the body of another loop to get a nested (two-level) loop. A two-level loop can be put into the body of a one-level loop to get a three-level loop. This can be proceeded to get an n-level loop. \n\nIn order to bring the work on learning difficulties related to loops concept to the stage at which it is useful in practice, several questions should be considered such as: \"how to help students to develop their understanding\", \"how to help them to overcome their misconceptions\" or \"how to help students so that they do not construct misconceptions\". Despite the importance of loops as a computational concept, our knowledge base about how to facilitate students' understanding is limited. Visualization is one of the suggested tools that can be used to help learners overcome their cognitive difficulties in learning programming concepts (Ben-Ari et al., 2011;Sorva, L\u00f6nnberg and Malmi, 2013;Stasko, Kehoe and Taylor, 2001;Velazquez-Iturbide and Perez-Carrasco, 2016). Price, Baecker and Small (1998, p.4) focused on the visualization production and its purpose and defined the software visualization (SV) as \"the use of crafts of typography, graphic design, animation, and cinematography with modern human-computer interaction and computer graphics technology to facilitate both the human understanding and effective use of computer software.\" They classified algorithm visualization (AV), dealing with visualization of higher level abstractions, and program visualization (PV), dealing with the actual programs, as two subfields of SV. Unlike Price, Baecker and Small's (1998) product based definition Zazkis, Dubinsky and Dautermann (1996, p. 441) had a cognitive point of view and defined visualization as \"an act in which an individual establishes a strong connection between an internal construct and something to which access is gained through the senses.\" The definition sees visualization as an act not the product and it is a twofold definition.",
            "score": 0.41045944639441756,
            "section_title": "(iii)",
            "char_start_offset": 4834,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 204
                },
                {
                    "start": 205,
                    "end": 293
                },
                {
                    "start": 294,
                    "end": 339
                },
                {
                    "start": 342,
                    "end": 693
                },
                {
                    "start": 694,
                    "end": 832
                },
                {
                    "start": 833,
                    "end": 1112
                },
                {
                    "start": 1113,
                    "end": 1488
                },
                {
                    "start": 1489,
                    "end": 1681
                },
                {
                    "start": 1682,
                    "end": 2007
                },
                {
                    "start": 2008,
                    "end": 2099
                }
            ],
            "ref_mentions": [
                {
                    "start": 982,
                    "end": 1004,
                    "matchedPaperCorpusId": "43139516"
                },
                {
                    "start": 1004,
                    "end": 1036,
                    "matchedPaperCorpusId": "31325567"
                },
                {
                    "start": 1036,
                    "end": 1067,
                    "matchedPaperCorpusId": "1182172"
                },
                {
                    "start": 1067,
                    "end": 1111,
                    "matchedPaperCorpusId": "14539693"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.5029296875
        },
        {
            "corpus_id": "60941791",
            "title": "Reflections on Using Robots and Visual Programming Environments for Project-Based Teaching",
            "text": "Visual programming is a method to specify a program in a two (or more) dimensional fashion [4], whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification [6]. \n\nThe Cognitive Dimensions introduced by Green and Petre [7] provide a framework for assessment of a programming system as follows: Closeness of mapping (closeness of programming structures to problem domain), Consistency (similar semantics are expressed in similar forms to allow inference), Error-proneness (possibility of making mistakes because of poor notational design), Hard mental operations (thought processes required to formulate an expression made difficult by the notation), Hidden Dependencies (important relationships between entities are not visible), Progressive evaluation (ability to execute the program partially, before all of it is put together), Role-expressiveness (purpose and role of each component is easily inferred), Secondary Other comparison criteria have been formulated by Howard [8]: Intended audience, Paradigm, Ease of use, Visual representation, Reusability, Data structures and types, Effective use of screen area, Effective use of colours, Clarity of graphical symbols, Interactive capabilities. \n\nNext we analyse a subset of visual languages used in educational setting for teaching robot programming.",
            "score": 0.41045944639441756,
            "section_title": "body",
            "char_start_offset": 1,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 235
                },
                {
                    "start": 236,
                    "end": 403
                },
                {
                    "start": 404,
                    "end": 673
                },
                {
                    "start": 674,
                    "end": 953
                },
                {
                    "start": 956,
                    "end": 1988
                },
                {
                    "start": 1991,
                    "end": 2095
                }
            ],
            "ref_mentions": [
                {
                    "start": 91,
                    "end": 94,
                    "matchedPaperCorpusId": "12628167"
                },
                {
                    "start": 949,
                    "end": 952,
                    "matchedPaperCorpusId": "220866115"
                },
                {
                    "start": 1011,
                    "end": 1014,
                    "matchedPaperCorpusId": "11750514"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9453125
        },
        {
            "corpus_id": "7271567",
            "title": "A visual programming language for drawing and executing flowcharts",
            "text": "In [4] a general overview of the visual programming strengths and weaknesses is examined with a lot of examples of how certain languages cope with these opportunities and challenges. The two most notable items proposed are: \n\n\u2022 static representation -is a graphical notation used to present a program at rest sufficient to understand the logic \u2022 effective use of computer display -showing only the information important to the user at any given time LabView and Simulink can be mentioned as the representatives of a big group -the data flow VPLs, described in [5], which are based around a functional programming style. A similar VPL, but presented as an online web service is Yahoo Pipes [6]. \n\nKTechlab [7] is a flowchart VPL used to describe hardware components. Scratch [8] is a good example of a WHILE language flowchart VPL that has taken the role of education through fun and interactive app programming. One drawback in Scratch is that it doesn't present the user with the source code generated from his flowchart, thus not encouraging gradual transition to classical programming as the user gets more experienced.",
            "score": 0.41045944639441756,
            "section_title": "B. Related work",
            "char_start_offset": 4177,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 182
                },
                {
                    "start": 183,
                    "end": 223
                },
                {
                    "start": 226,
                    "end": 619
                },
                {
                    "start": 620,
                    "end": 693
                },
                {
                    "start": 696,
                    "end": 765
                },
                {
                    "start": 766,
                    "end": 911
                },
                {
                    "start": 912,
                    "end": 1122
                }
            ],
            "ref_mentions": [
                {
                    "start": 3,
                    "end": 6,
                    "matchedPaperCorpusId": "13484911"
                },
                {
                    "start": 560,
                    "end": 563,
                    "matchedPaperCorpusId": "5257722"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8828125
        },
        {
            "corpus_id": "14559159",
            "title": "Java-meets eclipse: An IDE for teaching Java following the object-later approach",
            "text": "An excellent survey of programming languages and environments for making programming accessible to beginners is contained in (Kelleher and Pausch, 2005). For what concerns Java, there is now a vast range of tools, which have been especially designed for educational purposes, in an attempt to create an environment that can help in teaching programming; we mention some of the popular ones. Alice (Dann et al., 2011) is an interactive programming environment that establishes an easy, intuitive relationship between program constructs and 3D graphics animations. BlueJ (Barnes and K\u00f6lling, 2011) is a teaching environment strictly linked to the development of object-oriented programs by means of a framework which is focused on objects (hence, applying a teaching paradigm opposite to the one followed by JOSH and Java--). JEliot 2000 (Levy et al., 2003) is a program animation system intended for teaching computer science especially to high school students but does not hide the object-oriented feature of the Java language. As far as we know, however, the Java--IDE is the first tool which combines the pure procedural Java syntax learning with the utilization of all the powerful features of an IDE like Eclipse.",
            "score": 0.40785524205113877,
            "section_title": "Educational Related Work",
            "char_start_offset": 24379,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 153
                },
                {
                    "start": 154,
                    "end": 390
                },
                {
                    "start": 391,
                    "end": 562
                },
                {
                    "start": 563,
                    "end": 823
                },
                {
                    "start": 824,
                    "end": 1027
                },
                {
                    "start": 1028,
                    "end": 1217
                }
            ],
            "ref_mentions": [
                {
                    "start": 125,
                    "end": 152,
                    "matchedPaperCorpusId": "9916677"
                },
                {
                    "start": 836,
                    "end": 855,
                    "matchedPaperCorpusId": "46185353"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.11083984375
        },
        {
            "corpus_id": "264307073",
            "title": "Game Engine Wizardry for Programming Mischief",
            "text": "Visual programming environments have the potential to make programming more accessible to programmers of all backgrounds and skill levels. For instance, Domain-Specific Languages (DSLs) have been shown to help non-programmers raise their productivity, and improve the quality of their work [26]. DSLs offer specific abstractions and notations that provide increased expressiveness over particular problem domains, e.g., banking, digital forensics and game design. \n\nLanguage workbenches and meta-programming languages provide techniques and approaches that support rapid prototyping of DSLs [9], especially compilers and interpreters, e.g., based on Visual Studio Code and the Language Server Protocol (LSP). However, generic language technology often has limited support for visual programming environments, e.g., projectional editors [30], block-based editors [20], or web interfaces [31]. Language engineers require tools and techniques to speed up and simplify the development of visual programming environments that are user friendly, aesthetically pleasing, and easy to deploy, maintain and extend. \n\nGame engines are collections of software libraries, toolkits and cross-compilers that have been especially designed for developing portable visual applications, games in particular. These engines represent the state of the art in 2D and 3D frameworks for creating visual simulations, Heads-Up Displays (HUDs) and immersive interactive experiences. \n\nTo date, only a limited number of authors have explored using game engines for creating DSLs [19,27,34]. We see a research opportunity to bridge the gap between the technological spaces of game engine technology and Programming Language (PL) research, language workbenches in particular. \n\nWe hypothesize that game engines are well-suited for the automated development of interactive programming environments, especially visual DSLs. In particular, we aim to learn how game engines can be used for creating visual input and feedback mechanisms that support exploratory programming, live programming and creative tinkering. \n\nTo shed light on this matter, we conduct a feasibility analysis and carry out a pilot study. First, we create a concise overview of a limited number of well-known game engines in Section 2. We assess strengths, weaknesses, opportunities and threats.",
            "score": 0.4065954769365496,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 138
                },
                {
                    "start": 139,
                    "end": 295
                },
                {
                    "start": 296,
                    "end": 463
                },
                {
                    "start": 466,
                    "end": 708
                },
                {
                    "start": 709,
                    "end": 891
                },
                {
                    "start": 892,
                    "end": 1104
                },
                {
                    "start": 1107,
                    "end": 1288
                },
                {
                    "start": 1289,
                    "end": 1454
                },
                {
                    "start": 1457,
                    "end": 1561
                },
                {
                    "start": 1562,
                    "end": 1744
                },
                {
                    "start": 1747,
                    "end": 1890
                },
                {
                    "start": 1891,
                    "end": 2079
                },
                {
                    "start": 2082,
                    "end": 2174
                },
                {
                    "start": 2175,
                    "end": 2331
                }
            ],
            "ref_mentions": [
                {
                    "start": 290,
                    "end": 294,
                    "matchedPaperCorpusId": "264769167"
                },
                {
                    "start": 591,
                    "end": 594,
                    "matchedPaperCorpusId": "5234848"
                },
                {
                    "start": 836,
                    "end": 840,
                    "matchedPaperCorpusId": "7129564"
                },
                {
                    "start": 862,
                    "end": 866,
                    "matchedPaperCorpusId": "243867310"
                },
                {
                    "start": 886,
                    "end": 890,
                    "matchedPaperCorpusId": "254126377"
                },
                {
                    "start": 1550,
                    "end": 1554,
                    "matchedPaperCorpusId": "27875923"
                },
                {
                    "start": 1557,
                    "end": 1560,
                    "matchedPaperCorpusId": "6365940"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9169921875
        },
        {
            "corpus_id": "65439136",
            "title": "An Embedding Technique for Language-Independent Lecturer-Oriented Program Visualization",
            "text": "As the demand of programmer is increased, programming becomes a promising skill to be learned [1]. However, learning programming is not a trivial task; some programming concepts are either abstract or difficult to be taught [1], [2]. Consequently, computer-based educational tools have been developed [3]. These tools are expected to provide clearer understanding for novice programmers. \n\nProgram Visualization (PV) tool is a kind of computer-based educational tool that is mainly focused on visualizing program data and process [3]. It could help novices to learn how a particular program works in debug-like fashion through interactive and descriptive visualization. According to several works [4]- [8], PV tool helps novice programmers in positive manner. It provides clearer view of data and process flow from a particular program run. \n\nNevertheless, to our knowledge, most PV tools are not designed to incorporate new programming language with ease. They use either a language-dependent debugger or a language-dependent code to generate visualization. Such generation mechanism takes a considerable amount of effort while a new programming language is incorporated. This paper proposes an embedding technique to cover given issue. Instead of relying to language-dependent features, it separates those features from the independent ones and makes them modifiable by users. It is important to note that separating those features require the user to have technical knowledge about target programming language when using given PV. Hence, we encourage this technique to be used only by lecturers for teaching programming material to novice programmers; lecturers are assumed to have sufficient technical knowledge to use proposed technique.",
            "score": 0.4064586197702927,
            "section_title": "INTRODUCTION",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 98
                },
                {
                    "start": 99,
                    "end": 233
                },
                {
                    "start": 234,
                    "end": 305
                },
                {
                    "start": 306,
                    "end": 387
                },
                {
                    "start": 390,
                    "end": 534
                },
                {
                    "start": 535,
                    "end": 669
                },
                {
                    "start": 670,
                    "end": 759
                },
                {
                    "start": 760,
                    "end": 840
                },
                {
                    "start": 843,
                    "end": 956
                },
                {
                    "start": 957,
                    "end": 1058
                },
                {
                    "start": 1059,
                    "end": 1172
                },
                {
                    "start": 1173,
                    "end": 1237
                },
                {
                    "start": 1238,
                    "end": 1378
                },
                {
                    "start": 1379,
                    "end": 1533
                },
                {
                    "start": 1534,
                    "end": 1742
                }
            ],
            "ref_mentions": [
                {
                    "start": 229,
                    "end": 232,
                    "matchedPaperCorpusId": "18208672"
                },
                {
                    "start": 301,
                    "end": 304,
                    "matchedPaperCorpusId": "16369862"
                },
                {
                    "start": 530,
                    "end": 533,
                    "matchedPaperCorpusId": "16369862"
                },
                {
                    "start": 697,
                    "end": 700,
                    "matchedPaperCorpusId": "17776914"
                },
                {
                    "start": 702,
                    "end": 705,
                    "matchedPaperCorpusId": "53083089"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.73779296875
        },
        {
            "corpus_id": "13395203",
            "title": "Visualizing Computer Programming in a Computer-based Simulated Environment",
            "text": "This paper focuses on a different visualization technique, which involves the application of virtual world technologies to visualize complex theory concepts of computer programming in order to enhance students\" understanding and learning of this subject at the HE level. The research involved HE in Computer Science students in a university center in England, UK. Visualization scenarios were designed in the virtual world of \"Second Life\" to support the learning of challenging programming concepts as part of the HE Computer Science Year-1 and Year-2 programming courses. These visualization scenarios were scripted by the researcher using the programming language embedded within Second Life, called \"Linden Labs Scripting Language (LSL)\". Many researchers confirmed the similarity of syntax and semantics between LSL and C++ language, which the selected HE students were studying as part of their Computer Science qualification. In [29], authors highlighted that the LSL\"s main syntax and operators are expressive of those in Java and C++ programming languages. It explained that Second Life implements a compiler for the LSL language that contains C++ source code. In [10], authors confirmed the above by saying that the programming of objects in Second Life is performed by the use of LSL scripting language, the keywords www.ijacsa.thesai.org and structure of which are similar to those in C Language. The way the variables are declared in LSL language is the same as that in C++, and the multiple methods of creating a loop in LSL are almost identical to those in C++ [30]. \n\nIn the visualization scenarios designed for this research, a number of eye-catching 3D objects were chosen to be programmed by learners within Second Life, e.g. Pok\u00e9mon. This was meant to enable them to visualize the execution of challenging program instructions in order to improve their understanding of the relationship between the scripts and the actual implementation process and results. The type of the 3D objects was selected to add interest for learners and make their learning process enjoyable. These visualization scenarios enabled learners to view the immediate effects of script changes on each 3D object, i.e. visualizing the program execution. This assisted learners to understand how each program instruction works. Particular emphasis was placed on instructions related to loops and functionsfor the Introduction to Programming course, and on classes and objectsfor the Object-Oriented Programming course.",
            "score": 0.4064586197702927,
            "section_title": "C. Application of Virtual World Technologies in the Learning of Computer Programming",
            "char_start_offset": 20021,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 270
                },
                {
                    "start": 271,
                    "end": 363
                },
                {
                    "start": 364,
                    "end": 573
                },
                {
                    "start": 574,
                    "end": 742
                },
                {
                    "start": 743,
                    "end": 932
                },
                {
                    "start": 933,
                    "end": 1065
                },
                {
                    "start": 1066,
                    "end": 1169
                },
                {
                    "start": 1170,
                    "end": 1349
                },
                {
                    "start": 1350,
                    "end": 1408
                },
                {
                    "start": 1409,
                    "end": 1581
                },
                {
                    "start": 1584,
                    "end": 1744
                },
                {
                    "start": 1745,
                    "end": 1753
                },
                {
                    "start": 1754,
                    "end": 1977
                },
                {
                    "start": 1978,
                    "end": 2089
                },
                {
                    "start": 2090,
                    "end": 2243
                },
                {
                    "start": 2244,
                    "end": 2316
                },
                {
                    "start": 2317,
                    "end": 2507
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.260986328125
        },
        {
            "corpus_id": "6764231",
            "title": "A Proposed Framework for Development of a Visualizer Based on Memory Transfer Language (MTL)",
            "text": "As depicted in Figure 1, a visualizer is proposed to have three main parts: \n\n1. The controls window: constitutes controls for adding statements automatically in the code window (A place where a program is displayed). The controls are for \"Declaration\", \"Assignment\", \"Data Input\", \"Data Output\", \"Condition Statement\", \"Looping Statement\" and \"Insert text/statement\". \n\nThis approach allows novices to create simple programs without memorizing the syntax of a programming language in use, which in turn reduces cognitive load for beginners. In addition to that, novices are not vulnerable in making syntactical errors as everything is taken care by a visualizer. A novice is simply required to click the control of the functionality to be performed and follow instructions. However, a visualizer should leave the room for the conversant novices to write their program in the code window right from the scratch without using the built in controls to automatically generate codes. x, RESERVED Fig. 1 The Proposed Layout of a Visualizer Interface",
            "score": 0.4064586197702927,
            "section_title": "B. A Visualizer's Layout",
            "char_start_offset": 6302,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 75
                },
                {
                    "start": 78,
                    "end": 80
                },
                {
                    "start": 81,
                    "end": 217
                },
                {
                    "start": 218,
                    "end": 368
                },
                {
                    "start": 371,
                    "end": 541
                },
                {
                    "start": 542,
                    "end": 663
                },
                {
                    "start": 664,
                    "end": 774
                },
                {
                    "start": 775,
                    "end": 979
                },
                {
                    "start": 980,
                    "end": 1044
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.82568359375
        },
        {
            "corpus_id": "246448099",
            "title": "The Effects on Secondary School Students of Applying Experiential Learning to the Conversational AI Learning Curriculum",
            "text": "in teaching programming than is conventional command-line programming with complex syntax (Cetin, 2016). In this study, visual programming tools referred to block-based programming tools such as MIT App Inventor or Scratch. In comparison with conventional text-based programming, such visual programming tools have been helpful for novices to fully focus on learning to solve problems as well as understand the logic and framework of the overall program, rather than attend to specific semantics or syntax (Grover & Pea, 2013;Hsu et al., 2018;Lye & Koh, 2014).",
            "score": 0.4064586197702927,
            "section_title": "Introduction",
            "char_start_offset": 2183,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 526,
                    "end": 543,
                    "matchedPaperCorpusId": "52813623"
                },
                {
                    "start": 543,
                    "end": 559,
                    "matchedPaperCorpusId": "11994747"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7958984375
        },
        {
            "corpus_id": "272053512",
            "title": "A Choice-Based Programming Learning Method to Develop Problem-Solving Skills",
            "text": "The results of the empirical experiment show that the proposed system is stable and can support learning in actual classroom use. The implemented system in the empirical experiment aims to facilitate programming learning with visual output through p5.js. While the system's UI is specific to p5.js, it can be applied to programming learning in other subjects and using different programming languages. For instance, the system could be used to learn programming languages other than JavaScript. Technologies such as WebAssembly [38] can convert programs written in Python, 119560 VOLUME 12, 2024 Authorized licensed use limited to the terms of the applicable license agreement with IEEE. Restrictions apply. \n\nJava, and other languages into a browser-executable format, enabling similar learning experiences in different languages. Other potential applications of programming education with content include learning to design a program that takes data as input and returns a specific output or handling software development, such as games or web development. \n\n3) TOWARD PROGRAMMING WITH AI SUPPORT TOOLS Programming styles are evolving with the increasing use of AI-based coding support tools. LLMs like ChatGPT enable non-programmers to create programs based on requirements described in natural language. This means that even non-programmers need to understand programming and be able to define software requirements. The proposed system will serve as an introduction for non-programmers who need an understanding of programming.",
            "score": 0.40639545490640383,
            "section_title": "2) APPLICATION TO OTHER PROGRAMMING AREAS",
            "char_start_offset": 37375,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 129
                },
                {
                    "start": 130,
                    "end": 254
                },
                {
                    "start": 255,
                    "end": 401
                },
                {
                    "start": 402,
                    "end": 494
                },
                {
                    "start": 495,
                    "end": 687
                },
                {
                    "start": 688,
                    "end": 707
                },
                {
                    "start": 710,
                    "end": 831
                },
                {
                    "start": 832,
                    "end": 1058
                },
                {
                    "start": 1061,
                    "end": 1194
                },
                {
                    "start": 1195,
                    "end": 1307
                },
                {
                    "start": 1308,
                    "end": 1420
                },
                {
                    "start": 1421,
                    "end": 1532
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.4306640625
        },
        {
            "corpus_id": "199408820",
            "title": "Engaging Primary School Children in Computational Thinking: Designing and Developing Videogames",
            "text": "Starting from the primary school age, the art of programming changes the children perspectives from application users to application creators. \n\nToday coding has become a more accessible and funny activity thanks to the visual and block languages paradigm (Bau, Gray, Kelleher, Sheldon, & Turbak, 2017). It opens up new opportunities for programming without struggling with the text-based coding. Scratch (Resnick et al., 2009), Code. org (Code, 2017), Blocky Games, Gameblox, Kodu Game Lab (Fowler, Fristce, & MacLauren, 2012) are learning environments where beginners, supported by visual programming, speed up their developing skills to build complex and exciting applications. Visual programming languages allow school teachers to organize innovative educational activities aimed at promoting Computational Thinking processes and facilitating the learning of programming concepts (Harms, Balzuweit, Chen, & Kelleher, 2016;Akinola, Akinkunmi, & Alo, 2012). In particular, Kodu Game Lab includes features that we identify as specifically suitable in primary school context. In fact, it enables children to image 3D virtual worlds and to program characters in a virtual stage by composing instructions through a language based on visual tiles (Chiazzese & Lagan\u00e0, 2011). The visual tiles have the affordance of the semantic meaning of the instruction. For example, tiles represent the sensory capabilities (e.g. to see, hear, touch) or actions (e.g. move, take, fire) of the characters. Moreover, Kodu Game Lab provides an easy to use, enjoyable, creative and highly accessible programming environment. From a teaching perspective, Kodu Game Lab provides interesting opportunities to design learning activities able to foster Computational Thinking processes (Touretzky, Marghitu, Ludi, Bernstein, & Ni, 2013). \n\nRepenning, Basawapatna, & Escherle (2017) identify three stages of the Computational Thinking process that a Computational Thinking tool must elicit: \n\n\u2022 Problem formulation (abstraction); \n\n\u2022 Solution expression (automation);",
            "score": 0.4063951674474139,
            "section_title": "Introduction",
            "char_start_offset": 4478,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 142
                },
                {
                    "start": 145,
                    "end": 303
                },
                {
                    "start": 304,
                    "end": 396
                },
                {
                    "start": 397,
                    "end": 680
                },
                {
                    "start": 681,
                    "end": 959
                },
                {
                    "start": 960,
                    "end": 1075
                },
                {
                    "start": 1076,
                    "end": 1271
                },
                {
                    "start": 1272,
                    "end": 1352
                },
                {
                    "start": 1353,
                    "end": 1450
                },
                {
                    "start": 1451,
                    "end": 1487
                },
                {
                    "start": 1488,
                    "end": 1603
                },
                {
                    "start": 1604,
                    "end": 1811
                },
                {
                    "start": 1814,
                    "end": 1963
                },
                {
                    "start": 1966,
                    "end": 2002
                },
                {
                    "start": 2005,
                    "end": 2040
                }
            ],
            "ref_mentions": [
                {
                    "start": 491,
                    "end": 527,
                    "matchedPaperCorpusId": "18713650"
                },
                {
                    "start": 884,
                    "end": 926,
                    "matchedPaperCorpusId": "18084520"
                },
                {
                    "start": 1244,
                    "end": 1270,
                    "matchedPaperCorpusId": "57070770"
                },
                {
                    "start": 1760,
                    "end": 1810,
                    "matchedPaperCorpusId": "3127969"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.87158203125
        },
        {
            "corpus_id": "246448099",
            "title": "The Effects on Secondary School Students of Applying Experiential Learning to the Conversational AI Learning Curriculum",
            "text": "In conventional programming, programs are written with strict syntax, which can be difficult for general populations to learn, especially non-native English speakers, since a program cannot run successfully it has even minor spelling errors. On the other hand, if students use block-based programming to build the program, these errors will not occur. Block-based programming emphasizes recognition over recall; code-blocks are readily available in the visual interface. Furthermore, the blocks are categorized according to their function or logic. Students only need to concentrate on using appropriate blocks to complete the work they want to do or to create the effect they desire, rather than memorize syntax or particular keywords of the programming language. Moreover, the shape and color of the blocks provide the students with scaffolding to emphasize which blocks can be linked together and how code can (or cannot) be developed. During this process of visual code development, students learn the concepts of programming, students usually need only drag and connect the blocks, reducing the cognitive load and allowing students to focus on the logic and structures involved in programming rather than the syntax of writing programs (Kelleher & Pausch, 2005). Block-based programming provides students with media-rich learning environments, allowing them to connect with various personal interests (Brennan & Resnick, 2012). Chiu (2020) discovered that learners were very positive about the creation of applications (apps) by visual programming and project development, and recommended that novice programmers create apps with block-based programming. Finally, when students used a visual programming tool to write a program, they tended to focus on solving problems. Researchers have indicated that visual programming tools have a positive impact on programming self-efficacy and decrease student frustration (Yukselturk & Altiok, 2017).\n\nIt is especially important to reduce learning frustration for those who are underrepresented in computer science, as they face additional challenges when they first enter the field. Furthermore, it is important to increase their participation in computer science, as underrepresented groups provide unique perspectives and diverse, innovative solutions. In this paper, we investigated the effectiveness of different learning techniques by gender, since historically, females have been underrepresented in computer science, and the relative number of females entering the field has significantly decreased over the past 30 years (Weston et al., 2019). By determining and using the most effective",
            "score": 0.40562818513868387,
            "section_title": "Literature Review",
            "char_start_offset": 2764,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 1241,
                    "end": 1266,
                    "matchedPaperCorpusId": "9916677"
                },
                {
                    "start": 1433,
                    "end": 1444,
                    "matchedPaperCorpusId": "212726996"
                },
                {
                    "start": 1918,
                    "end": 1945,
                    "matchedPaperCorpusId": "7007858"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.865234375
        },
        {
            "corpus_id": "55310713",
            "title": "Effect of GameMaker on Student Attitudes and Perceptions of Instructors",
            "text": "We employed the application tool GameMaker\u00ae, a program designed by Yoyo Games, ltd. GameMaker allows entry-level computing or non-programming students to quickly build simple video games and provides seasoned programmers the tools to build sophisticated games. GameMaker is implemented as a visual programming environment (VPE), using a graphical interface requiring drag-and-drop techniques to insert programming logic and concepts. Research has shown VPEs are successful interventions to introduce programming to new students [4]. GameMaker, in particular, has been successfully utilized to teach programming concepts to children, adolescents, adults, and senior citizens [5,6]. This tool may be especially useful in engaging both genders, as women show a preference for computer games with a creative, versus solely destructive, component [7].",
            "score": 0.40471771059769446,
            "section_title": "I. INTRODUCTION",
            "char_start_offset": 2681,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 83
                },
                {
                    "start": 84,
                    "end": 260
                },
                {
                    "start": 261,
                    "end": 433
                },
                {
                    "start": 434,
                    "end": 532
                },
                {
                    "start": 533,
                    "end": 680
                },
                {
                    "start": 681,
                    "end": 846
                }
            ],
            "ref_mentions": [
                {
                    "start": 528,
                    "end": 531,
                    "matchedPaperCorpusId": "54038126"
                },
                {
                    "start": 674,
                    "end": 677,
                    "matchedPaperCorpusId": "1600632"
                },
                {
                    "start": 677,
                    "end": 679,
                    "matchedPaperCorpusId": "6574895"
                },
                {
                    "start": 842,
                    "end": 845,
                    "matchedPaperCorpusId": "199610"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.888671875
        },
        {
            "corpus_id": "235507728",
            "title": "A Holistic Digital Game-Based Learning Approach to Out-of-School Primary Programming Education",
            "text": "There are many types of visual programming environments for beginner programmers that highlight distinct benefits of programming behaviors for problem-solving strategies in DGBL. Visual programming environments reduce the unnecessary syntax difficulties and assist programmers in visualizing the effects (Papadakis and Orfanakis, 2018). Such environments are able to enforce syntactic validity, which reduces error proneness in the notation by making it impossible for novices to encounter syntax errors (Chao, 2016). \n\nThe Scratch visual programming environment (Resnick et al., 2009) has been chosen as a key DGBL software for teaching programming in Phase 1 of the proposed educational approach. Scratch is a free block-based learning environment tool designed for children aged 8 to 16 which aims at teaching programming principles such as loops, synchronization, variables, conditionals, operators, broadcasts, and more (Fields et al., 2017;Stripeikait\u0117, 2017), through the use of graphical blocks which are overlapped by the \"drag and drop\" technique. Blocks are organized into different categories according to the functions they perform (motion, data, events, control, sensing, operators etc.). They are marked with different colors, which makes it easy to see the relationship between them. Moreover, the learning process can be integrated with geometric, arithmetic, and statistical concepts to investigate the key elements of solving problems and cultivate children's creative computational thinking for producing a joyful learning of programming. \n\nThe Scratch programming software is the most popular visual computing tool, more than doubling the next closest language (Blockly) according to (Rich et al., 2018). However, there are several alternatives such as Kodu (MacLaurin, 2009), Lightbot 2.0 (Piteira and Haddad, 2011), and Alice 2 (Cooper et al., 2003) for 3D modelling. More recent visual programming environments include Snap, Stencyl, Game Maker Studio and Tynker. Nevertheless, Scratch remains the most suitable visual programming language to develop computational thinking capabilities though programming (Maloney et al., 2010). Moreover, according to (Kim and Ko, 2017;Sweigart, 2016), Scratch is the best and the most successful educational visual programming environment available today.",
            "score": 0.40252841756478697,
            "section_title": "Phase 1. Learning programming",
            "char_start_offset": 14566,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 178
                },
                {
                    "start": 179,
                    "end": 336
                },
                {
                    "start": 337,
                    "end": 517
                },
                {
                    "start": 520,
                    "end": 698
                },
                {
                    "start": 699,
                    "end": 1057
                },
                {
                    "start": 1058,
                    "end": 1202
                },
                {
                    "start": 1203,
                    "end": 1299
                },
                {
                    "start": 1300,
                    "end": 1558
                },
                {
                    "start": 1561,
                    "end": 1725
                },
                {
                    "start": 1726,
                    "end": 1890
                },
                {
                    "start": 1891,
                    "end": 1987
                },
                {
                    "start": 1988,
                    "end": 2153
                },
                {
                    "start": 2154,
                    "end": 2315
                }
            ],
            "ref_mentions": [
                {
                    "start": 304,
                    "end": 335,
                    "matchedPaperCorpusId": "202252904"
                },
                {
                    "start": 504,
                    "end": 516,
                    "matchedPaperCorpusId": "206930744"
                },
                {
                    "start": 925,
                    "end": 946,
                    "matchedPaperCorpusId": "20966853"
                },
                {
                    "start": 946,
                    "end": 965,
                    "matchedPaperCorpusId": "40312873"
                },
                {
                    "start": 1779,
                    "end": 1796,
                    "matchedPaperCorpusId": "27027620"
                },
                {
                    "start": 1811,
                    "end": 1837,
                    "matchedPaperCorpusId": "10860192"
                },
                {
                    "start": 2130,
                    "end": 2152,
                    "matchedPaperCorpusId": "9744698"
                },
                {
                    "start": 2177,
                    "end": 2195,
                    "matchedPaperCorpusId": "6717766"
                },
                {
                    "start": 2195,
                    "end": 2210,
                    "matchedPaperCorpusId": "32202501"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.85791015625
        },
        {
            "corpus_id": "158235604",
            "title": "Perceptions of Scratch Programming among Secondary School Students in KwaZulu-Natal, South Africa",
            "text": "Due to the rapid growth of digital technology \"individuals are required to use a growing variety of technical, cognitive, and sociological skills in order to perform tasks and solve problems in digital environments\" (Eshet-Alkalai, 2004, p. 93). To assist in the attaining of these skills, teaching students to program has been introduced into primary and secondary education curriculums. Pendergast (2006) states that the significance of a well-constructed introduction to programming course cannot be over-emphasised, as it was observed that many students found difficulties with understanding the programming process as well as familiarising themselves with the various programming constructs. Visual programming tools like Alice, a programming language developed by Carnegie Mellon University, and Scratch, are favoured with younger introductory students (Lye, & Koh, 2014). Alice, which was developed before Scratch, is used to teach students general programming concepts as well as object-oriented programming (OOP) concepts. Much effort has gone into the development of visual programming tools for young individuals (Meerbaum-Salant, Armoni, & Ben-Ari, 2013), with these tools being used by young children and as a preliminary learning tool for secondary schools and universities. Visual programming tools such as these create a non-threatening, fun environment for students to develop software, in a way that aims to reduce the anxiety and fear often associated with learning programming (Meerbaum-Salant et al., 2013). It is believed that through these environments, students will be more open to continuing their study of programming. \n\nA study by Boyle, Bradley, Chalk, Jones and Pickard (2003) focused specifically on a \"visual approach\", making use of graphical shapes to teach abstract programming concepts which were available to students in a virtual learning environment (VLE). Boyle et al. (2003) implemented this approach with an introduction to programming course, and found a 12% to 23% increase in the pass rate over the previous year's students who did not have a VLE-and a graphics-based approach. The results of a questionnaire handed to students during mid-semester showed that 95% of students judged the graphics-based approach to learning programming to be \"good\" or \"very good\" (Boyle et al., 2003).",
            "score": 0.4024982055363106,
            "section_title": "Effectiveness of using programming and visual tools",
            "char_start_offset": 9276,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 245
                },
                {
                    "start": 246,
                    "end": 388
                },
                {
                    "start": 389,
                    "end": 696
                },
                {
                    "start": 697,
                    "end": 878
                },
                {
                    "start": 879,
                    "end": 1031
                },
                {
                    "start": 1032,
                    "end": 1288
                },
                {
                    "start": 1289,
                    "end": 1528
                },
                {
                    "start": 1529,
                    "end": 1645
                },
                {
                    "start": 1648,
                    "end": 1895
                },
                {
                    "start": 1896,
                    "end": 2122
                },
                {
                    "start": 2123,
                    "end": 2329
                }
            ],
            "ref_mentions": [
                {
                    "start": 389,
                    "end": 406,
                    "matchedPaperCorpusId": "264655814"
                },
                {
                    "start": 859,
                    "end": 877,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 1497,
                    "end": 1527,
                    "matchedPaperCorpusId": "16831477"
                },
                {
                    "start": 1659,
                    "end": 1706,
                    "matchedPaperCorpusId": "17271778"
                },
                {
                    "start": 1896,
                    "end": 1915,
                    "matchedPaperCorpusId": "17271778"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.73291015625
        },
        {
            "corpus_id": "68068900",
            "title": "Application of Visual Programming in Program Design Course",
            "text": "According to the problems in teaching of computer programming course, brought visual programming tools to assist teaching, introduced the advantages of visual programming, and made use of it in algorithm design, coding and modular design. Practice shows that by introducing of visual programming, it helps the students to improve their interesting, and develop the ability of logic thinking as well as programming. Introduction Computer programming is a basic course for college students of science and engineering majors, it aims to guide students to understand the ideas and methods of programming, and to master a language to solve problems by programming [1] . In recent years, with the propose and development of computational thinking [2] , it is becoming a trend to solve problems in various fields by means of computational methods and tools, thus it becomes more and more important of this course. But in teaching practice, it is quite difficult to reach the objects of this course. Firstly, it needs great efforts on coding and debugging of programs, but Students are often afraid of tedious syntax of the language, and finally lost confidence for programming when meet program errors again and again. Secondly, the procedure of programming is indeed a procedure of logical thinking, but for many fresh students, the ability of logical thinking is still weak, there is some difficulty for them to understand the logic of programs, so we need a gradual training method for logical thinking. Thirdly, the flow diagram that been used for expressing the algorithm, but for it cannot be executed, there has no way to verify the result of the algorithm, we need stronger tools to express algorithms and verify them. In recent years, a lot of visual programming tools came into being, for example, Scratch [3] , Blockly [4] , Snap [5] and so on. By introducing of visual programming tools in computer programming course, the problems mentioned above can be solved effectively. First, for that the core of computational thinking is the ideas rather than the language syntax, by using of visual tools will simplify programming, thus students will focus on the program logic rather than the language syntax, it will help to overcome the fear of programming and cultivate there interesting. Second, visual program help to express the logic of algorithm clearly, thus it helps to train logical thinking through visual programming, lastly, by modeling with visual programming tools, it is easy to execute the algorithm immediately, thus convenient to verify the algorithm.",
            "score": 0.4024982055363106,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9365234375
        },
        {
            "corpus_id": "11040530",
            "title": "Verificator: Educational Tool for Learning Programming",
            "text": "Programming is one of the fundamental skills to be adopted by students of information sciences at the end of the first year of their study. It is also expected that they will know basic programming concepts and have developed the algorithmic approach to solving problems. Basic programming concepts include the knowledge of control structures (sequence, selection, and iteration), mechanisms of aggregation (array, structure, union), pointers, functions, etc. When teaching programming, our aim is to teach novice students the basic principles of using programming concepts regardless of the programming language. However, goals are sometimes hard to meet in the real-life context. The research which was conducted at the multi-national level has shown that novice students, after completing and passing their courses in which they learn the basic concepts of programming, still encounter problems creating simple program solutions (Lister et al., 2004). This is probably accounted for by the fact that novice programmers do not have enough experience or skills regarding which programming constructs to use or where and how to use them. Furthermore, students are often faced with syntax errors. It is common for a small set of identical mistakes to occur regularly with all novice students (Spohrer and Soloway, 1986;Ben-Ari, 1998;McCracken et al., 2001). In order to help students in their first steps in learning programming, many visualization and animation software systems are developed. \n\nVisualization tools can be very useful in teaching programming, primarily because their main purpose is to facilitate students' understanding of code execution by guiding them through a series of animated techniques (Mulholland, 1998;Hundhausen et al., 2002). In addition, the results of several studies (Fowler et al., 2000;Cardellini, 2002, Thomas et al., 2002) showed that the majority of students (more than 75%) adopt new content best when it is presented visually. Thus, the use of a visualization tool in teaching programming allows students to create a mental model of program execution or its parts (Tudoreanu, 2003). However, Naps et al. (2002) emphasizes that visualization tools can be useful only if students are actively involved in the learning process.",
            "score": 0.4024982055363106,
            "section_title": "Related Work",
            "char_start_offset": 2903,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 139
                },
                {
                    "start": 140,
                    "end": 271
                },
                {
                    "start": 272,
                    "end": 459
                },
                {
                    "start": 460,
                    "end": 613
                },
                {
                    "start": 614,
                    "end": 681
                },
                {
                    "start": 682,
                    "end": 954
                },
                {
                    "start": 955,
                    "end": 1137
                },
                {
                    "start": 1138,
                    "end": 1195
                },
                {
                    "start": 1196,
                    "end": 1356
                },
                {
                    "start": 1357,
                    "end": 1493
                },
                {
                    "start": 1496,
                    "end": 1755
                },
                {
                    "start": 1756,
                    "end": 1966
                },
                {
                    "start": 1967,
                    "end": 2122
                },
                {
                    "start": 2123,
                    "end": 2264
                }
            ],
            "ref_mentions": [
                {
                    "start": 932,
                    "end": 953,
                    "matchedPaperCorpusId": "3207419"
                },
                {
                    "start": 1291,
                    "end": 1318,
                    "matchedPaperCorpusId": "10075496"
                },
                {
                    "start": 1318,
                    "end": 1332,
                    "matchedPaperCorpusId": "60449159"
                },
                {
                    "start": 1332,
                    "end": 1355,
                    "matchedPaperCorpusId": "8381532"
                },
                {
                    "start": 1712,
                    "end": 1730,
                    "matchedPaperCorpusId": "10505480"
                },
                {
                    "start": 1730,
                    "end": 1754,
                    "matchedPaperCorpusId": "270116183"
                },
                {
                    "start": 1800,
                    "end": 1821,
                    "matchedPaperCorpusId": "11524446"
                },
                {
                    "start": 1821,
                    "end": 1837,
                    "matchedPaperCorpusId": "146544285"
                },
                {
                    "start": 1837,
                    "end": 1859,
                    "matchedPaperCorpusId": "14112089"
                },
                {
                    "start": 2104,
                    "end": 2121,
                    "matchedPaperCorpusId": "18674360"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.41552734375
        },
        {
            "corpus_id": "246033999",
            "title": "Simplifying Programming for Non-technical Students: A Hermeneutic Approach",
            "text": "A central concern to the field of CT deals with how to simplify programming, to make it accessible to individuals without a technical background. Programming is generally regarded as a complex professional practice, aimed at the making of software and framed within a design process. \n\nAlthough it has been stated that CT is not only programming (Wing [37]), yet programming remains the main challenge in the design of CT pedagogical approaches and tools. In our study, we explored how programming can be simplified for non-technical university students and we propose a double contribution: \n\n1. A knowledge contribution represented by our new pedagogical approach in simplifying programming, grounded on hermeneutics and NOMs; 2. The Medialib library, which represents a design exemplar of our approach [38]. \n\nOur approach to simplify programming was to find a theoretical lens that could describe the learning path of beginner programmers in terms of knowledge distance. In our case, that lens was hermeneutic (and the hermeneutic spiral), and we proceeded by combining it with a more operational counterpart, notional machines (or NOMs). NOMs can be used to define the cognitive complexity of algorithms [6], but here instead we needed a way to define and assess the complexity (or by opposition, the simplicity) of pedagogical approaches to CT. We analyzed typical code examples used in textbooks and video-courses and at the various libraries for beginners (in particular for Python). We then developed our own library, called Medialib, based on the assumption that the first NOM presented to beginners programmers should be as simple and small as possible, in terms of number of concepts and their interconnections. To investigate how simple our library was, we defined a NOM for a minimal imperative fragment of Python. This fragment is powerful enough that beginners can use it to mentally execute flat, imperative programs of a complexity comparable to the typical examples used in beginners' textbooks and online material. We then proceeded to define possible initial NOMs for different, popular approaches, and in this way we could establish that the Medialib has indeed a rather small NOM, possibly smaller than most other approaches. In fact, the Medialib's NOM is not much more complex than the NOM for our minimal Python fragment.",
            "score": 0.40075158884123396,
            "section_title": "Conclusion",
            "char_start_offset": 70876,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 145
                },
                {
                    "start": 146,
                    "end": 283
                },
                {
                    "start": 286,
                    "end": 455
                },
                {
                    "start": 456,
                    "end": 591
                },
                {
                    "start": 594,
                    "end": 596
                },
                {
                    "start": 597,
                    "end": 810
                },
                {
                    "start": 813,
                    "end": 974
                },
                {
                    "start": 975,
                    "end": 1142
                },
                {
                    "start": 1143,
                    "end": 1350
                },
                {
                    "start": 1351,
                    "end": 1491
                },
                {
                    "start": 1492,
                    "end": 1723
                },
                {
                    "start": 1724,
                    "end": 1828
                },
                {
                    "start": 1829,
                    "end": 2034
                },
                {
                    "start": 2035,
                    "end": 2248
                },
                {
                    "start": 2249,
                    "end": 2347
                }
            ],
            "ref_mentions": [
                {
                    "start": 352,
                    "end": 356,
                    "matchedPaperCorpusId": "64533042"
                },
                {
                    "start": 805,
                    "end": 809,
                    "matchedPaperCorpusId": "7778267"
                },
                {
                    "start": 1209,
                    "end": 1212,
                    "matchedPaperCorpusId": "51951488"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.1258544921875
        },
        {
            "corpus_id": "231719015",
            "title": "What We Can Learn From Visual Artists About Software Development",
            "text": "Research in end-user programming (EUP) supports non-professional programmers as they develop software to further their work [55] and has focused largely on interaction designers. Research has shown that visual designers seek programming tools that directly integrate with visual drawing tools [67] and use high-level tools mapped to specific tasks or glued with general purpose languages rather than learn new programming frameworks [8]. Systems like Juxtapose [33] and Interstate [70] improve programming for interaction designers through better version management and visualizations. Re-envisioning software as information substrates [5] that integrate data and application functionality supports greater software malleability and more varied forms of collaboration in web [47] and video editing [48]. \n\nWhile there has been extensive EUP research targeting designers, less research examines EUP for visual art. Researchers have developed a variety of graphic art tools that enable programming through direct manipulation. Some systems support two pane interfaces that place visual output side-by-side with code [15,63]. Recent work demonstrated that allowing users to directly manipulate intermediate execution values, in addition to output, minimized textual editing [34]. Other work, like Dynamic Brushes, aims to support expressiveness through a direct manipulation environment coupled with a programming language [39]. Results from a study of debugging tools developed for Dynamic Brushes suggested that artists inspect program functionality while making artwork [54]. Our research is aimed at informing future efforts in EUP for visual art by investigating how artists approach software development and work with software representations. We provide insights into the ways that visual artists' objectives differ from other end-user programmers and highlight opportunities in building domain-specific programming tools for visual art.",
            "score": 0.3991470809037556,
            "section_title": "End-User Programming in Art and Design",
            "char_start_offset": 7407,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 178
                },
                {
                    "start": 179,
                    "end": 437
                },
                {
                    "start": 438,
                    "end": 585
                },
                {
                    "start": 586,
                    "end": 803
                },
                {
                    "start": 806,
                    "end": 913
                },
                {
                    "start": 914,
                    "end": 1024
                },
                {
                    "start": 1025,
                    "end": 1122
                },
                {
                    "start": 1123,
                    "end": 1276
                },
                {
                    "start": 1277,
                    "end": 1425
                },
                {
                    "start": 1426,
                    "end": 1575
                },
                {
                    "start": 1576,
                    "end": 1746
                },
                {
                    "start": 1747,
                    "end": 1941
                }
            ],
            "ref_mentions": [
                {
                    "start": 124,
                    "end": 128,
                    "matchedPaperCorpusId": "15559793"
                },
                {
                    "start": 293,
                    "end": 297,
                    "matchedPaperCorpusId": "1310663"
                },
                {
                    "start": 433,
                    "end": 436,
                    "matchedPaperCorpusId": "17479074"
                },
                {
                    "start": 461,
                    "end": 465,
                    "matchedPaperCorpusId": "379214"
                },
                {
                    "start": 481,
                    "end": 485,
                    "matchedPaperCorpusId": "7143896"
                },
                {
                    "start": 636,
                    "end": 639,
                    "matchedPaperCorpusId": "20393237"
                },
                {
                    "start": 775,
                    "end": 779,
                    "matchedPaperCorpusId": "3449397"
                },
                {
                    "start": 798,
                    "end": 802,
                    "matchedPaperCorpusId": "202713762"
                },
                {
                    "start": 1271,
                    "end": 1275,
                    "matchedPaperCorpusId": "198895618"
                },
                {
                    "start": 1420,
                    "end": 1424,
                    "matchedPaperCorpusId": "5012960"
                },
                {
                    "start": 1570,
                    "end": 1574,
                    "matchedPaperCorpusId": "210174639"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.6748046875
        },
        {
            "corpus_id": "256927842",
            "title": "Interaction support systems between teachers and visual content for effortless creation of program visualization",
            "text": "Several program visualization (PV) systems have been developed to support novice learners in understanding program behavior since last couple of decades. However, only a few have been introduced or continuously used in actual classes. One of the main obstacles to using PV systems in actual classrooms is the significant amount of time needed to integrate them into actual educational settings. We developed a PV system called Teacher\u2019s Explaining Design Visualization Tool (TEDViT) and introduced it into several practical applications. Although programming learning with TEDViT had a noticeable effect, the time required for PV customization (i.e., the time consumed for interactions between teachers and PV content) was a non-trivial problem. In this study, we describe three approaches to reduce the time cost of customizing by teachers; that is, we supported PV creation by (1) semi-automatically arranging drawing objects oriented toward novice learners, (2) allowing menu operations with a dialog interface, and (3) providing visual information and visual operations using a WYSIWYG PV editor. We developed three individual systems based on each approach and evaluated their effortlessness by measuring the time required for actual PV creation. The evaluation results suggest that each of the three approaches has a certain effect on improving the effortlessness of PV creation. This study describes our three approaches and the system developed based on them and discusses the possibility of integrating them.",
            "score": 0.39857759446045876,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.70654296875
        },
        {
            "corpus_id": "221855588",
            "title": "A Meta-Analysis of the Effects of Arduino-Based Education in Korean Primary and Secondary Schools in Engineering Education",
            "text": "From the ANOVA, the effect size based on the programming language was statistically different. The results of this study were inconsistent with the results of several previous studies (Armoni et al., 2015;Chang et al., 2017;M. Mladenovic et al., 2020;S. Mladenovic et al., 2016;S\u00e1ez-L\u00f3pez et al., 2016;Topalli & Cagiltay, 2018;Zhang et al., 2014) that reported that the application of visual programming language would have a more positive educational effect than the application of textual programming language. The results of this study were affected by the difference in computer teaching ability between teachers who applied the textual programming language and teachers who applied the visual programming language. The textual programming language has a disadvantage because it requires significant time to use the correct syntax and language acquisition, whereas the visual programming language has a low cognitive burden due to easy learning and simple grammar. Many researchers have tried to teach programming using visual programming instead of textual programming and reported that applying visual programming and then textual programming was effective for learning a programming language. The textual programming language used in Arduino's sketch is C-language-based, and teachers who apply the textual programming language should have more knowledge of the basic grammar and syntax of the C language than teachers who apply the visual programming language. Therefore, it could be inferred that the teachers who applied the textual programming language were acquiring more knowledge related to programming than the teachers who applied the visual programming language, and the group that applied the textual programming language had a significant educational effect. \n\nBased on the results of this study, the textual programming language was more effective than the visual programming language, but it is not recommended that the textual programming language be applied unconditionally when teaching Arduino. Many studies have reported that the application of the visual programming language is educationally effective for young students, and the visual programming language is even being developed for engineering students. Therefore, applying the textual or visual programming language based on the students' level is recommended. For example, it may be desirable for elementary school students to use visual programming languages such as Scratch for Arduino (S4A) and Entry and high school students to use textual programming languages such as sketch programs.",
            "score": 0.3978623152343237,
            "section_title": "Discussion",
            "char_start_offset": 21538,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 94
                },
                {
                    "start": 95,
                    "end": 512
                },
                {
                    "start": 513,
                    "end": 719
                },
                {
                    "start": 720,
                    "end": 968
                },
                {
                    "start": 969,
                    "end": 1199
                },
                {
                    "start": 1200,
                    "end": 1468
                },
                {
                    "start": 1469,
                    "end": 1777
                },
                {
                    "start": 1780,
                    "end": 2019
                },
                {
                    "start": 2020,
                    "end": 2235
                },
                {
                    "start": 2236,
                    "end": 2343
                },
                {
                    "start": 2344,
                    "end": 2574
                }
            ],
            "ref_mentions": [
                {
                    "start": 184,
                    "end": 205,
                    "matchedPaperCorpusId": "12666110"
                },
                {
                    "start": 224,
                    "end": 251,
                    "matchedPaperCorpusId": "219138516"
                },
                {
                    "start": 251,
                    "end": 278,
                    "matchedPaperCorpusId": "65156563"
                },
                {
                    "start": 278,
                    "end": 302,
                    "matchedPaperCorpusId": "27633066"
                },
                {
                    "start": 302,
                    "end": 327,
                    "matchedPaperCorpusId": "4012511"
                },
                {
                    "start": 327,
                    "end": 346,
                    "matchedPaperCorpusId": "63189205"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.489990234375
        },
        {
            "corpus_id": "244911365",
            "title": "Effects of the Problem-Oriented Learning Model on Middle School Students\u2019 Computational Thinking Skills in a Python Course",
            "text": "These tools become \"technical partners in the learning process\" (Jonassen et al., 2012), and the rationale for improving CT skills in each of these tools emphasizes various CT components (Shute et al., 2017). In addition, existing research has developed CT interventions in different disciplines such as physics and biology (Sengupta et al., 2013), expository writing and journalism (Wolz et al., 2011), mathematics (Wilkerson-Jerde, 2014), science in general (Weintrop et al., 2016;Basu et al., 2017), and science and arts (S\u00e1ez-L\u00f3pez et al., 2016). \n\nPrevious studies, however, preferred to apply visual programming languages, while paying less attention to text programming languages. Nonetheless, visual programming is not as reliable as text programming, and its functions are not as good as the latter. Deng et al. (2020) pointed out that visual programming requires learners to focus on a great number of grammar rules, and the programming foundation is needed to develop CT. Thus, visual programming alone may not be sufficient for students to understand the true meaning of programming and to master CT, especially for beginners. Text programming can compensate for visual programming based on program functionality (Weintrop and Wilensky, 2015). In the era of artificial intelligence, Python has become the preferred development language for artificial intelligence applications (Okonkow and Ade-Ibijola, 2021). Compared with other text programming languages, Python is closer to human languages as it conforms to people's thinking habits. It can reduce unnecessary grammar learning, thereby reducing cognitive load and allowing students to focus on solving programming problems (Maria and Tsiatsos, 2018). Kim et al. (2019) developed a data visualization education program, and the sixth-grade students received 6 days and 36 h of training. It was found that Python for data visualization education can effectively improve the CT of sixth graders, including their computational cognition, fluency, originality, and elaboration. Another study used the Python language to develop a learning program and model, and applied it to the 10-h learning of sixth-grade students.",
            "score": 0.39664837136429737,
            "section_title": "LITERATURE REVIEW Computational Thinking",
            "char_start_offset": 5230,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 208
                },
                {
                    "start": 209,
                    "end": 550
                },
                {
                    "start": 553,
                    "end": 687
                },
                {
                    "start": 688,
                    "end": 808
                },
                {
                    "start": 809,
                    "end": 982
                },
                {
                    "start": 983,
                    "end": 1138
                },
                {
                    "start": 1139,
                    "end": 1255
                },
                {
                    "start": 1256,
                    "end": 1421
                },
                {
                    "start": 1422,
                    "end": 1549
                },
                {
                    "start": 1550,
                    "end": 1716
                },
                {
                    "start": 1717,
                    "end": 1851
                },
                {
                    "start": 1852,
                    "end": 2038
                },
                {
                    "start": 2039,
                    "end": 2179
                }
            ],
            "ref_mentions": [
                {
                    "start": 187,
                    "end": 207,
                    "matchedPaperCorpusId": "125336127"
                },
                {
                    "start": 324,
                    "end": 347,
                    "matchedPaperCorpusId": "14084830"
                },
                {
                    "start": 383,
                    "end": 401,
                    "matchedPaperCorpusId": "17121594"
                },
                {
                    "start": 460,
                    "end": 483,
                    "matchedPaperCorpusId": "14430663"
                },
                {
                    "start": 483,
                    "end": 501,
                    "matchedPaperCorpusId": "12135191"
                },
                {
                    "start": 524,
                    "end": 549,
                    "matchedPaperCorpusId": "27633066"
                },
                {
                    "start": 809,
                    "end": 827,
                    "matchedPaperCorpusId": "208115827"
                },
                {
                    "start": 1225,
                    "end": 1254,
                    "matchedPaperCorpusId": "207226901"
                },
                {
                    "start": 1389,
                    "end": 1420,
                    "matchedPaperCorpusId": "251047879"
                },
                {
                    "start": 1689,
                    "end": 1715,
                    "matchedPaperCorpusId": "46843728"
                },
                {
                    "start": 1717,
                    "end": 1734,
                    "matchedPaperCorpusId": "199582200"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.206298828125
        },
        {
            "corpus_id": "13395203",
            "title": "Visualizing Computer Programming in a Computer-based Simulated Environment",
            "text": "The research paper covers the following: \n\n1) An introduction to the research, its aim and objectives. \n\n2) Literature review on the problem formulation: This covers the complexity acknowledged by researchers and educators of the programming process at different levels. \n\na) Traditional programming. b) Multithreading programming (concurrency and parallelism). \n\n3) How visualization techniques are employed in a collaborative and simulated virtual environments to facilitate the learning of programming. \n\na) How collaboration environments are exploited in the learning of programming. \n\nb) The employment of various visualization tools in the learning of programming. \n\nc) The application of virtual world technologies in the learning of programming. \n\nd) Former applications of virtual world technologies in the learning of programming. \n\n4) The conclusion and future scope of the research.",
            "score": 0.3946961894953656,
            "section_title": "PAPER OUTLINE",
            "char_start_offset": 719,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 40
                },
                {
                    "start": 43,
                    "end": 102
                },
                {
                    "start": 105,
                    "end": 270
                },
                {
                    "start": 273,
                    "end": 300
                },
                {
                    "start": 301,
                    "end": 361
                },
                {
                    "start": 364,
                    "end": 505
                },
                {
                    "start": 508,
                    "end": 587
                },
                {
                    "start": 590,
                    "end": 670
                },
                {
                    "start": 673,
                    "end": 753
                },
                {
                    "start": 756,
                    "end": 840
                },
                {
                    "start": 843,
                    "end": 894
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.6064453125
        },
        {
            "corpus_id": "227209010",
            "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications",
            "text": "People have to learn several information in the field of robotics because of growing technological productivity and developments in this area. We observe robotics works increasing in the market from day to day. Robots can do jobs like a human or they can do more. Nowadays robots have been playing an active role in many sectors therefore, robotic works are increasing day by day because of there is a need for qualified personnel in these sectors. Very few people know about robot programming, algorithm logic and follow projects on the subject. Learning programming from books or articles is very difficult and challenging. It can be done easier by visual perception. Therefore, roboticbased training becomes important. Robotics education and work in schools with supervisorship of assistant teacher is very interesting and extremely effective learning method for students. Visual Programming Languages (VPLs) are very good options for people who have no experience with text-based programming. \n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers.",
            "score": 0.39230231840814234,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 142
                },
                {
                    "start": 143,
                    "end": 210
                },
                {
                    "start": 211,
                    "end": 263
                },
                {
                    "start": 264,
                    "end": 448
                },
                {
                    "start": 449,
                    "end": 546
                },
                {
                    "start": 547,
                    "end": 625
                },
                {
                    "start": 626,
                    "end": 669
                },
                {
                    "start": 670,
                    "end": 721
                },
                {
                    "start": 722,
                    "end": 875
                },
                {
                    "start": 876,
                    "end": 996
                },
                {
                    "start": 999,
                    "end": 1240
                },
                {
                    "start": 1241,
                    "end": 1396
                },
                {
                    "start": 1397,
                    "end": 1639
                },
                {
                    "start": 1640,
                    "end": 1705
                },
                {
                    "start": 1706,
                    "end": 1802
                },
                {
                    "start": 1803,
                    "end": 1921
                },
                {
                    "start": 1922,
                    "end": 2021
                },
                {
                    "start": 2022,
                    "end": 2073
                }
            ],
            "ref_mentions": [
                {
                    "start": 1236,
                    "end": 1239,
                    "matchedPaperCorpusId": "8272806"
                },
                {
                    "start": 1468,
                    "end": 1471,
                    "matchedPaperCorpusId": "62509261"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.93505859375
        },
        {
            "corpus_id": "11795228",
            "title": "Visual definition of procedures for automatic virtual scene generation",
            "text": "With more and more digital media, especially in the field of virtual reality where detailed and convincing scenes are much required, procedural scene generation is a big helping tool for artists. A problem is that defining scene descriptions through these procedures usually requires a knowledge in formal language grammars, programming theory and manually editing textual files using a strict syntax, making it less intuitive to use. Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task. \nIn this thesis, an approach of using a VPL for defining procedures that automatically generate virtual scenes is presented. The methods required to build a VPL are presented, including a novel method of generating readable code in a structured programming language. Also, the methods for achieving basic principles of VPLs will be shown -- suitable visual presentation of information and guiding the programmer in the right direction using constraints. On the other hand, procedural generation methods are presented in the context of visual programming -- adapting the application programming interface (API) of these methods to better serve the user. The main focus will be on the methods for urban modeling, such as building, city layout and details generation with random number generation used to create non-deterministic scenes.",
            "score": 0.39089032709292404,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9287109375
        },
        {
            "corpus_id": "231725028",
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "text": "Diagrams have been utilized as communication and thinking tools across many domains [22]- [24]. Diagram-based visual programming languages, also known as diagrammatic or data flow languages, are characterized by connecting graphical objects ( e.g., boxes) by arrows, lines, or arcs that represent relations. To understand a diagram-based program, users traverse the diagram. Such a diagram uses different means of perceptual coding to represent the flow of the program. For example, flowcharts use connectedness and directionality to represent how a piece of information is related to one another, and how it flows from one to the other [25]. \n\nThis study will classify several visual programming tools according to the aforementioned VPL categories.",
            "score": 0.3908534054751986,
            "section_title": "II. BACKGROUND",
            "char_start_offset": 9585,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 95
                },
                {
                    "start": 96,
                    "end": 307
                },
                {
                    "start": 308,
                    "end": 374
                },
                {
                    "start": 375,
                    "end": 469
                },
                {
                    "start": 470,
                    "end": 642
                },
                {
                    "start": 645,
                    "end": 750
                }
            ],
            "ref_mentions": [
                {
                    "start": 84,
                    "end": 88,
                    "matchedPaperCorpusId": "74221"
                },
                {
                    "start": 90,
                    "end": 94,
                    "matchedPaperCorpusId": "143658620"
                },
                {
                    "start": 637,
                    "end": 641,
                    "matchedPaperCorpusId": "19780225"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.91748046875
        },
        {
            "corpus_id": "225609223",
            "title": "Unplugged Coding Using Flowblocks for Promoting Computational Thinking and Programming among Secondary School Students",
            "text": "This study integrates the usefulness of visual programming language (VPL) as well as flowcharts to make an unplugged coding activity more conceptually appropriate. In its current form, VPL such as Blockly and Scratch, does not emphasise on the meaning of block shapes, while this is a focus on flowchart in which different shapes signify different algorithmic tasks. Therefore, we bring in the user-friendly nature of VPL and integrate it with the concepts of flowchart, and coin a new term as flowblocks. In addition, this study incorporates human friendly language to make syntaxes accessible to younger age groups of learners and novice learners of programming. On top of this, this study adopts game-based learning into the activity in order to engage students in the learning process and make the activity more engaging and challenging. \n\nIt is believed that a careful design of the unplugged coding with flowblocks activity that adopts diagrammatic representation of flowcharts, the five computer science concepts integrated missions, the repetition of particular concepts throughout the missions, and the self-check process, together contributes to the improvement of students' computational thinking score. To be more specific, in the pretest as shown in Table 4, this chosen example which in fact represents the majority exhibits that the student was not aware of using flowcharts, but rather used a form of pseudocodes to complete the pretest. In addition, although the sense of sequence can be slightly detectable, it is not fully developed. However, through the aid of the unplugged coding using flowblocks activity, the student learned how the syntax is supposed to start and how the following syntaxes should be connected using provided flowblocks in a correct sequence (see Appendix for selected flowblocks from students). Before getting the mission completed, many students had to go through a series of debugs which, of course, help them learn and grow a sense of computational thinking as they proceeded. Therefore, the student could respond to the posttest correctly with accurate understanding of sequences. Since this fundamental concept can be easily comprehended and is repeatedly used in every single task of the further missions, the mean score of CT 1 (assess the concept of sequence) reached the highest compared to the other two tests, undoubtedly.",
            "score": 0.3908534054751986,
            "section_title": "DISCUSSION",
            "char_start_offset": 16700,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 163
                },
                {
                    "start": 164,
                    "end": 366
                },
                {
                    "start": 367,
                    "end": 505
                },
                {
                    "start": 506,
                    "end": 664
                },
                {
                    "start": 665,
                    "end": 841
                },
                {
                    "start": 844,
                    "end": 1214
                },
                {
                    "start": 1215,
                    "end": 1453
                },
                {
                    "start": 1454,
                    "end": 1552
                },
                {
                    "start": 1553,
                    "end": 1837
                },
                {
                    "start": 1838,
                    "end": 2022
                },
                {
                    "start": 2023,
                    "end": 2127
                },
                {
                    "start": 2128,
                    "end": 2376
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.79248046875
        },
        {
            "corpus_id": "60833664",
            "title": "A visual programming language for novices",
            "text": "Abstract : We present BridgeTalk, a new approach to visual languages for novice programmers. The design of BridgeTalk is based on data about how novices learn to program. BridgeTalk allows novices to program with programming plans -- frame-like objects that capture essential program components like keep a running total and iterate down a data structure. Novices are focused on the interactions between plans, not on the implementation details for a particular plan. Beginning with plans as a basis for a novice programming language, we were forced to develop a programming formalism that can deal with multiple levels of detail, merged plan implementations, and interrelationships between plans. The actual visual presentation for the language is based on six design, implement, test with students, and redesign cycles. Keywords: Visual languages; Novice programming; Programming education; programming cognition.",
            "score": 0.3908534054751986,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9052734375
        },
        {
            "corpus_id": "39606061",
            "title": "Measuring an Impact of Block-Based Language in Introductory Programming",
            "text": "The body of introductory programming is not to develop an understanding of the grammar of particular programming languages, but it should develop the problem-solving skills with computing that is called \"computational thinking\" [1]. The similar concept has been proposed by the United Nations Educational, Scientific and Cultural Organization (UNESCO), as \"designing a task-oriented algorithm\" [2]. Both statements include common sense. One is to focus on the thinking and creation of algorithms. Another is that computing is not only dependent upon the use of actual computers, but logical modeling for the required problem-solving. \n\nA use of visual language, especially \"building-block approach\" [3] is the most popular way to form the learning environment for the purpose of education. Many block-based languages for education have been proposed over more than two decades, and yet developers continue by trial and error to improve the language using modern software technology. The first workshop specifically blockbased language focused was held in the last year (Blocks and Beyond in Visual Languages and Human-Centric Computing (VL/HCC 2015) [4]). The workshop was able to collect a remarkable number of submissions, the participants discussed the design of the next generation of block-based language, including the topic of how to design the tools as a bridge to text-based language (e.g. [5,6]). \n\nHowever, as the workshop stated \"Despite their popularity, there has been remarkably little research on the usability, effectiveness, or generalizability of affordances from these environments\" [4], there is little research which provides evidence showing advantages of block-based language. Practitioners using visual programming languages believe that the visual programming approach is an effective way in developing computational thinking because learners can focus on their problem-solving tasks [7]. The block-based language should be used as scaffolding to text-based language. However, the belief is not verified, and the percentage of degree is not clear yet. \n\nHence, we tried learning data analysis with fine grain logs recorded by students' development environment. We conducted the introductory education using the tools we developed, where the learners can switch their language between visual-block language (Block) and one for a text-based language (Java) by bidirectional translation technology.",
            "score": 0.38927444319721205,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 232
                },
                {
                    "start": 233,
                    "end": 398
                },
                {
                    "start": 399,
                    "end": 436
                },
                {
                    "start": 437,
                    "end": 496
                },
                {
                    "start": 497,
                    "end": 633
                },
                {
                    "start": 636,
                    "end": 789
                },
                {
                    "start": 790,
                    "end": 982
                },
                {
                    "start": 983,
                    "end": 1155
                },
                {
                    "start": 1156,
                    "end": 1398
                },
                {
                    "start": 1399,
                    "end": 1406
                },
                {
                    "start": 1409,
                    "end": 1700
                },
                {
                    "start": 1701,
                    "end": 1914
                },
                {
                    "start": 1915,
                    "end": 1993
                },
                {
                    "start": 1994,
                    "end": 2077
                },
                {
                    "start": 2080,
                    "end": 2186
                },
                {
                    "start": 2187,
                    "end": 2421
                }
            ],
            "ref_mentions": [
                {
                    "start": 228,
                    "end": 231,
                    "matchedPaperCorpusId": "41391768"
                },
                {
                    "start": 1399,
                    "end": 1402,
                    "matchedPaperCorpusId": "40151963"
                },
                {
                    "start": 1402,
                    "end": 1404,
                    "matchedPaperCorpusId": "10876307"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7958984375
        },
        {
            "corpus_id": "232124222",
            "title": "Hands-on training about overfitting",
            "text": "This time, the data plot does not expose any class structure; red and blue data points are intermixed. Compare this outcome to the overfitted visualization from Fig 12 . https://doi.org/10.1371/journal.pcbi.1008671.g013 manuscript, their primary use is self-study after the workshop. The lecture does not involve any showing of slides. Everything is hands-on; Orange is the only tool shown on the projector. If an additional explanation is required, say, for classification trees, logistic regression, or similar, we recommend using the blackboard. \n\nCourses oriented towards beginners must carefully balance between oversimplification and overwhelming. As we mentioned, our typical target audience is not students of computer science or math. Mathematically minded students may understand the topic easier if it is explained more formally. Computer scientists would benefit from being introduced to tools like Jupyter Notebook and the related Python machine learning stack or similar tools in other suitable languages. However, our target students, who do not possess those necessary skills, would find using programming tools more difficult than the concepts we intend to teach. The whole lecture may turn into a frustrating hunt for missing parentheses. In our past attempts at teaching data mining through programming in Python, we have been dissipating time to even such small details explaining that function names are case sensitive. The lessons we taught in this way were more about programming than about data mining. The environment we select to teach data science should serve as a helping tool instead of representing an obstacle to learning. Introduction to data science through textual programming either requires good coding skills or leads to a superficial understanding of the written code, which is in effect no deeper, but far less satisfying for students and teachers than using visual programming tools. \n\nWe use Orange in the lectures we propose here because of its strong focus on interactivity, simplicity of use, and educational value. In general, though, the tool's choice depends on the teacher's style, so we encourage the reader to explore other tools that support visual programming and workflows, such as Knime [13] or RapidMiner [14]. \n\nUsing visual programming and avoiding mathematics exposes us to the danger of oversimplification.",
            "score": 0.38712658949898937,
            "section_title": "Discussion",
            "char_start_offset": 24963,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 102
                },
                {
                    "start": 103,
                    "end": 169
                },
                {
                    "start": 170,
                    "end": 219
                },
                {
                    "start": 220,
                    "end": 283
                },
                {
                    "start": 284,
                    "end": 335
                },
                {
                    "start": 336,
                    "end": 407
                },
                {
                    "start": 408,
                    "end": 548
                },
                {
                    "start": 551,
                    "end": 653
                },
                {
                    "start": 654,
                    "end": 743
                },
                {
                    "start": 744,
                    "end": 840
                },
                {
                    "start": 841,
                    "end": 1019
                },
                {
                    "start": 1020,
                    "end": 1180
                },
                {
                    "start": 1181,
                    "end": 1256
                },
                {
                    "start": 1257,
                    "end": 1440
                },
                {
                    "start": 1441,
                    "end": 1526
                },
                {
                    "start": 1527,
                    "end": 1654
                },
                {
                    "start": 1655,
                    "end": 1924
                },
                {
                    "start": 1927,
                    "end": 2060
                },
                {
                    "start": 2061,
                    "end": 2266
                },
                {
                    "start": 2269,
                    "end": 2366
                }
            ],
            "ref_mentions": [
                {
                    "start": 2242,
                    "end": 2246,
                    "matchedPaperCorpusId": "6514304"
                },
                {
                    "start": 2261,
                    "end": 2265,
                    "matchedPaperCorpusId": "3355639"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.701171875
        },
        {
            "corpus_id": "248510289",
            "title": "Programming Experience Requirements for Future Visual Development Environments",
            "text": "The notion of visual programming concerns methods to define programs in a multi-dimensional fashion (Myers, 1990). The latter is not linked to the underlying program representation, but concerns the interactive visual means through which a program is created, refined and managed. Hence, text-based code is considered as one-dimension method and is therefore not treated as visual programming. \n\nWhile visual programming adoption ranges from rapid application development, interactive software configurations, and system administration, it became popular for educational purposes, in particular for teaching programming skills. In this framework, Scratch (Maloney et al., 2010), a block-based tool and Lego Mindstorms\u2122 (Vallance et al., 2009) are amongst the most well-known visual tools in learning contexts. Historically, visual programing systems have been deployed to introduce students in the programming universe before being enabled to manage and master professional source-based programming languages. In this context, their scope is generally considered to be restricted in the early stages of acquiring programming skills. But today, there are visual tools for professional development purposes, ranging from business process, Internet of Things, 3d graphics and robotics, meaning their scope is not merely restricted to learning activities. Also, such tools support an important activity in the development lifecycle that is not always substituted by text-based counterparts, thus retaining a distinct and critical role. In this sense, for certain development skills, professional programmers may still have to learn using visual tools before switching (if they ever do) to the most powerful programminglanguage basis. This interplay between visual tools for leaning, with typical professional programming environments, is depicted under Figure 1. \n\nIn an educational context, emphasis is put on blending user experience (Law et al., 2009) with learning experience (Tawfik et al., 2021) to optimally support programming tasks. We define this combination as programming experience (see Figure 2) to better highlight and contextualise the importance of the programming task. In this context, we carried out a systematic analysis briefed in this paper, resulting in key design requirements linking to programming experience, with a summary provided under Figure 3.",
            "score": 0.38704866882156796,
            "section_title": "INTRODUCTION",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 114
                },
                {
                    "start": 115,
                    "end": 280
                },
                {
                    "start": 281,
                    "end": 393
                },
                {
                    "start": 396,
                    "end": 627
                },
                {
                    "start": 628,
                    "end": 809
                },
                {
                    "start": 810,
                    "end": 1009
                },
                {
                    "start": 1010,
                    "end": 1132
                },
                {
                    "start": 1133,
                    "end": 1351
                },
                {
                    "start": 1352,
                    "end": 1531
                },
                {
                    "start": 1532,
                    "end": 1729
                },
                {
                    "start": 1730,
                    "end": 1858
                },
                {
                    "start": 1861,
                    "end": 2037
                },
                {
                    "start": 2038,
                    "end": 2183
                },
                {
                    "start": 2184,
                    "end": 2372
                }
            ],
            "ref_mentions": [
                {
                    "start": 100,
                    "end": 112,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 655,
                    "end": 677,
                    "matchedPaperCorpusId": "9744698"
                },
                {
                    "start": 719,
                    "end": 742,
                    "matchedPaperCorpusId": "208013563"
                },
                {
                    "start": 1932,
                    "end": 1950,
                    "matchedPaperCorpusId": "10465690"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9267578125
        },
        {
            "corpus_id": "226841104",
            "title": "The Use of Color Gradation on Program Visualization for Learning Programming",
            "text": "As the impact of Information Technology (IT) in daily life grows rapidly, programming becomes a promising skill to be learned; the demand of program development is increased. However, learning programming is not a trivial task; high logical thinking and clear understanding about abstractive concepts are required. As a result, several educational tools for learning programming are proposed [1]. \n\nProgram Visualization (PV) is a programmingfocused educational tool that helps the user to understand his/her source code (i.e. program) through visualization [1]. A typical PV works by accepting a code and then generating visualization states as its result (each state displays program information after a particular instruction has been executed). Using such tool, users are expected to understand their code further; resulted states are visualized in descriptive and interactive manner. \n\nTo our knowledge, no PVs utilize color gradation as a part of their features, even though color plays an important role in visualization. Hence, this paper explores the use of color gradation on PV. To be specific, color gradation will be applied for displaying two pieces of information: execution frequency of each instruction and access frequency of each variable. The execution frequency of each instruction is related to program complexity. With this information, the students can understand which parts of their program are executed most, and if they want to optimize, they know that those parts should be the main focus. The access frequency of each variable is related to program-to-variable dependency. With this information, the students can exclude unused variables. Further, if they want to optimize their code, variables with high access frequency can be addressed last; these variables are heavily related to the program and their optimization may take a considerable amount of time. We would argue that both pieces of information are important for users to learn their code at Introductory Programming course. They can get the main idea of program optimization prior taking the real material at more advanced courses.",
            "score": 0.38704866882156796,
            "section_title": "INTRODUCTION",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 174
                },
                {
                    "start": 175,
                    "end": 314
                },
                {
                    "start": 315,
                    "end": 396
                },
                {
                    "start": 399,
                    "end": 526
                },
                {
                    "start": 527,
                    "end": 562
                },
                {
                    "start": 563,
                    "end": 748
                },
                {
                    "start": 749,
                    "end": 888
                },
                {
                    "start": 891,
                    "end": 1028
                },
                {
                    "start": 1029,
                    "end": 1089
                },
                {
                    "start": 1090,
                    "end": 1258
                },
                {
                    "start": 1259,
                    "end": 1336
                },
                {
                    "start": 1337,
                    "end": 1518
                },
                {
                    "start": 1519,
                    "end": 1602
                },
                {
                    "start": 1603,
                    "end": 1668
                },
                {
                    "start": 1669,
                    "end": 1888
                },
                {
                    "start": 1889,
                    "end": 2015
                },
                {
                    "start": 2016,
                    "end": 2123
                }
            ],
            "ref_mentions": [
                {
                    "start": 392,
                    "end": 395,
                    "matchedPaperCorpusId": "12752102"
                },
                {
                    "start": 558,
                    "end": 561,
                    "matchedPaperCorpusId": "12752102"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.77490234375
        },
        {
            "corpus_id": "11795228",
            "title": "Visual definition of procedures for automatic virtual scene generation",
            "text": "In [6] a general overview of the visual programming strengths and weaknesses is examined with a lot of examples of how certain languages cope with these opportunities and challenges. The two interesting concepts are mentioned:\n\n\u2022 static representation -is a graphical notation used to present a program at rest sufficient to understand its meaning\n\n\u2022 effective use of computer display -showing only the information important to the user at that given time, considering the context These two factors are something important if a VPL is to scale well to a project of a larger scope. By keeping them in mind as guidelines while designing a VPL, one could get closer to the usability classical programming currently offers.",
            "score": 0.38704866882156796,
            "section_title": "Advances in visual programming",
            "char_start_offset": 7376,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 3,
                    "end": 6,
                    "matchedPaperCorpusId": "13484911"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.755859375
        },
        {
            "corpus_id": "15432848",
            "title": "The Design of EzWindows: A Graphics API for an Introductory Programming Course",
            "text": "This paper has described the rationale and design of EzWindows-a graphics API for a beginning object-oriented programming course. EzWindows has proven to be extremely popular. Its popularity is due to several factors. While simple to use, EzWindows allows beginning students to build surprisingly polished programs. This power helps motivate the students. Its O-O implementation serves as an excellent case study for students who had used it. It is platform and compiler independent. Finally, to the best of our knowledge it is the first graphics package that allows beginning programmers to use the mouse as an input device that they control.",
            "score": 0.38704866882156796,
            "section_title": "Summary",
            "char_start_offset": 15612,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 129
                },
                {
                    "start": 130,
                    "end": 175
                },
                {
                    "start": 176,
                    "end": 217
                },
                {
                    "start": 218,
                    "end": 315
                },
                {
                    "start": 316,
                    "end": 355
                },
                {
                    "start": 356,
                    "end": 442
                },
                {
                    "start": 443,
                    "end": 483
                },
                {
                    "start": 484,
                    "end": 643
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.357177734375
        },
        {
            "corpus_id": "6167862",
            "title": "Effects, Experiences and Feedback from Studies of a Program Visualization Tool",
            "text": "Program visualization (PV) is potentially a useful method for teaching programming basics to novice programmers. However, there are very few studies on the effects of PV. We have developed a PV tool called ViLLE at the University of Turku. In this paper, multiple studies on the effects of the tool are presented. In addition, new qualitative data about students' feedback of using the tool is presented. Both, the results of our studies and the feedback indicate that ViLLE can be used effectively in teaching basic programming concepts to novice programmers.",
            "score": 0.38704866882156796,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8505859375
        },
        {
            "corpus_id": "55308032",
            "title": "The Impact of Online Algorithm Visualization on ICT Students\u2019 Achievements in Introduction to Programming Course",
            "text": "The study was conducted with ICT students in their second year at university. They were first enrolled in a mandatory programming language course that prepared them to begin coding and algorithm development. In the traditional design of the programming language course, students learn about algorithms and the semantics of computer programming by exploring several algorithm samples during first three or four weeks. Later, they begin coding with the C# programming language, one of the most powerful and widely used programming languages. In recent years, various instructional strategies and technological tools and applications have begun to be used to teach programming language. In this study, algorithm visualization program in an online environment was employed. This environment is provided by a non-profit organization named code.org. This organization was launched in 2013 and aims to teach computer programming and computer science through visualization. This environment teaches programming in a visual way those who have no prior programming experience by enable designing media-rich interactive projects. Code.org was selected for use in this study because it is online, free, and provides a user-friendly interface. This program provides various courses that can be chosen depending on the scope of the instructional objectives. In this study, the researcher utilized the \"20 hour introduction course\" on code.org. Moreover, this environment allows the instructor to observe his or her students' progress in real-time (see Figure 1).",
            "score": 0.38704866882156796,
            "section_title": "Setting",
            "char_start_offset": 7005,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 77
                },
                {
                    "start": 78,
                    "end": 207
                },
                {
                    "start": 208,
                    "end": 416
                },
                {
                    "start": 417,
                    "end": 539
                },
                {
                    "start": 540,
                    "end": 683
                },
                {
                    "start": 684,
                    "end": 769
                },
                {
                    "start": 770,
                    "end": 843
                },
                {
                    "start": 844,
                    "end": 965
                },
                {
                    "start": 966,
                    "end": 1118
                },
                {
                    "start": 1119,
                    "end": 1230
                },
                {
                    "start": 1231,
                    "end": 1343
                },
                {
                    "start": 1344,
                    "end": 1429
                },
                {
                    "start": 1430,
                    "end": 1548
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.62548828125
        },
        {
            "corpus_id": "216202070",
            "title": "Web Application to Support the Learning of Programming Through the Graphic Visualization of Programs",
            "text": "This paper presents a web application to support the learning of programming at the undergraduate level, which allows students to graphically visualize through animations the execution of programs written in the Java programming language. The web application supports the understanding of programs and the basic con-cepts of programming, such as declaration of variables, assignment of values to variables, use of control structures, and calls to functions with parameters. The development of the web application, its architecture and the three systems that compose it are presented: data collection, processing and representation. The op-eration of the web application is shown through three programs, for which their execution is visualized graphically.Educational technology, education computing, software understanding, software visualization",
            "score": 0.38704866882156796,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.791015625
        },
        {
            "corpus_id": "252233721",
            "title": "A case study of the integration of Algorithm Visualizations in Hungarian programming education",
            "text": "Sorting out Sorting: a more outdated look that uses different colours, markings, and an oral explanation associated with the video. \n\nVisuAlgo: pseudocode is displayed, interactive elements (speed, adjustability of steps), the interface is transparent, colourful. \n\nAlgTan: displays the pseudocode indicating the current state, using different colours, but a diagram is missing to visualize the data (for example, a column display for each element in an array). \n\nCodeCombat: a design for children, elements of gamification that can reduce learning efficiency (too many games will lead to less new material being learned). \n\nCodinGame: more complex application, visualizations are nicely executed, it is possible to use different programming languages. \n\nCS Unplugged: close-to-experience structure, interactions with other people, no deeper knowledge required to try the tasks. \n\nThe subject found detailed colour visualizations to be an important component, as well as interaction elements (such as the potential to watch the process step-by-step) to aid in the use of the tool, and hence in the learning process. In addition, the display of tasks and algorithms of various difficulty was mentioned, which can thus cover programming education more widely.",
            "score": 0.38704866882156796,
            "section_title": "First subject:",
            "char_start_offset": 14556,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 131
                },
                {
                    "start": 134,
                    "end": 263
                },
                {
                    "start": 266,
                    "end": 461
                },
                {
                    "start": 464,
                    "end": 622
                },
                {
                    "start": 625,
                    "end": 752
                },
                {
                    "start": 755,
                    "end": 878
                },
                {
                    "start": 881,
                    "end": 1115
                },
                {
                    "start": 1116,
                    "end": 1257
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.44384765625
        },
        {
            "corpus_id": "236256391",
            "title": "Applying Talent Quality-Management System (TTQS) to Enhance Information Literacy, Learning Motivation, and Computational Thinking Competency of Nursing Undergraduates",
            "text": "Game-based learning, problem-based learning, and visual programming proved to be useful technologies that helped learners perform better in basic programming courses. App Inventor for mobile learning was built for students without programming skills. This is a programming tool for Android apps with graphical building blocks, which is suitable for beginners [22]. It is also a visual programming environment featuring an interface very similar to that of Scratch, but it is oriented toward the intuitive development of fully functional applications for mobile phones and tablets with text and images. Because App Inventor has a low entry barrier and allows novices to write, debug, and run programs with confidence and interest [22,23], we used this software to teach nursing students while avoiding frustration in the beginning stage of learning programming.",
            "score": 0.3868591193492174,
            "section_title": "App Inventor",
            "char_start_offset": 5564,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 166
                },
                {
                    "start": 167,
                    "end": 250
                },
                {
                    "start": 251,
                    "end": 364
                },
                {
                    "start": 365,
                    "end": 601
                },
                {
                    "start": 602,
                    "end": 860
                }
            ],
            "ref_mentions": [
                {
                    "start": 359,
                    "end": 363,
                    "matchedPaperCorpusId": "56284231"
                },
                {
                    "start": 729,
                    "end": 733,
                    "matchedPaperCorpusId": "56284231"
                },
                {
                    "start": 733,
                    "end": 736,
                    "matchedPaperCorpusId": "64783957"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7841796875
        },
        {
            "corpus_id": "52053927",
            "title": "Rock bottom, the world, the sky: Catrobat, an extremely large-scale and long-term visual coding project relying purely on smartphones",
            "text": "In the last decade, a number of block-based visual programming tools, e.g., Scratch, have been introduced which should help teenagers to have an easier time when first practicing programming. These tools have all had very similar goals: they focus on younger learners, support novices in their first programming steps, they can be used in informal learning situations, and provide a visual/block-based programming language which allows teenagers to recognize blocks instead of recalling syntax (Tumlin, 2017). Unlike traditional programming languages, which require code statements and complex syntax rules, here graphical programming blocks are used that automatically snap together like Lego blocks when they make syntactical sense (Ford, 2009). \n\nAnother critical improvement of visual programming systems over classic text based programming languages is the fact that all elements of the programming environment and also the programming language itself, including the formula elements, are translated to the human language of the young users. Especially for human languages that are not written with the Latin alphabet, this is a huge advantage for users, as they are not used to think in English and very often have difficulties to even read Latin scripts. In case of developing countries, usually only a small percentage of the population understands English, in which most user interfaces are exclusively available, thus implicitly excluding a large part of the world's population. Localization of a software can revolutionize E-learning, resulting in more educated workforce and improved economy (Ghuman, 2017). Pocket Code supports localization and internationalization on the application level. The app's language and locale can be changed without changing the smartphone's interface language on the system level. Languages such as Sindhi and Pashto, which are yet to be supported by operating systems, can thus be seamlessly used by our users (Awwad, 2017). Catrobat shares this feature, which improves accessibility and inclusiveness to users from all regions of the world, e.g., with Scratch and Snap!, and this certainly contributes in a major way to the positive worldwide reception of these visual programming environments. Thus, visual programming languages provide an easier start and a more engaging experience for teenagers. The ease of use, and simplicity of such programming environments enables young people to become game makers, and by the seamless translation of their user interfaces, to collaborate with other users on a worldwide scale.",
            "score": 0.3832814172581209,
            "section_title": "Trend 1: Block-based and Visual Coding",
            "char_start_offset": 11541,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 191
                },
                {
                    "start": 192,
                    "end": 509
                },
                {
                    "start": 510,
                    "end": 747
                },
                {
                    "start": 750,
                    "end": 1046
                },
                {
                    "start": 1047,
                    "end": 1261
                },
                {
                    "start": 1262,
                    "end": 1488
                },
                {
                    "start": 1489,
                    "end": 1619
                },
                {
                    "start": 1620,
                    "end": 1704
                },
                {
                    "start": 1705,
                    "end": 1823
                },
                {
                    "start": 1824,
                    "end": 1968
                },
                {
                    "start": 1969,
                    "end": 2239
                },
                {
                    "start": 2240,
                    "end": 2344
                },
                {
                    "start": 2345,
                    "end": 2565
                }
            ],
            "ref_mentions": [
                {
                    "start": 494,
                    "end": 508,
                    "matchedPaperCorpusId": "18077793"
                },
                {
                    "start": 734,
                    "end": 746,
                    "matchedPaperCorpusId": "60730266"
                },
                {
                    "start": 1954,
                    "end": 1967,
                    "matchedPaperCorpusId": "13550274"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.79541015625
        },
        {
            "corpus_id": "220668511",
            "title": "Curriculum, Teaching and Learning, and Assessments for Introductory Programming Course",
            "text": "Another survey on program visualization tools for learning introductory programming education is done by [8]. However, none of them focus on channels publishing literature on IPC and problems faced by novice students required to achieve desired solutions. \n\nOur review distinguishes itself from the above reviews by focusing only on the publication channels related to IPC, closely examining the IPC curricula, and identifying the approaches addressing challenges faced by novice students. Furthermore, we conduct a more balanced and comprehensive approach than all of the above reviews: we select tools in a systematic way following strict criteria, and we code them using a predetermined labelling.",
            "score": 0.3832814172581209,
            "section_title": "II. LITERATURE REVIEW",
            "char_start_offset": 5907,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 109
                },
                {
                    "start": 110,
                    "end": 255
                },
                {
                    "start": 258,
                    "end": 489
                },
                {
                    "start": 490,
                    "end": 700
                }
            ],
            "ref_mentions": [
                {
                    "start": 105,
                    "end": 108,
                    "matchedPaperCorpusId": "16369862"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.423828125
        },
        {
            "corpus_id": "257145390",
            "title": "Computational Thinking Training and Deep Learning Evaluation Model Construction Based on Scratch Modular Programming Course",
            "text": "Visual programming tools lead learners to contact the code language in the way of module splicing, which can make learners accept learning programming psychologically. Its main teaching function is to weaken the writing of programming code, emphasize the application of CT knowledge and methods, and enhance the learner's motivation [23]. Visual programming tools can describe and execute problems in real situations in a modular programming language according to the problemsolving plan [24]. Figure 4 reveals the visual programming problem-solving model. \n\nAs shown in Figure 4, a plan is formed through CT and methods, and a visual programming platform program is built according to the plan. After the platform is debugged, the solution to the problem is obtained and mapped to the real situation. Trough the real situation, questions can be raised and fed back to the CTmethods. Te real situation can further extract the elements in the real situation, such as people, things, things and rules. Finally, the problem is solved.",
            "score": 0.3832814172581209,
            "section_title": "Visual Programming Problem-Solving Model.",
            "char_start_offset": 9036,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 167
                },
                {
                    "start": 168,
                    "end": 338
                },
                {
                    "start": 339,
                    "end": 493
                },
                {
                    "start": 494,
                    "end": 556
                },
                {
                    "start": 559,
                    "end": 695
                },
                {
                    "start": 696,
                    "end": 801
                },
                {
                    "start": 802,
                    "end": 883
                },
                {
                    "start": 884,
                    "end": 999
                },
                {
                    "start": 1000,
                    "end": 1031
                }
            ],
            "ref_mentions": [
                {
                    "start": 333,
                    "end": 337,
                    "matchedPaperCorpusId": "235749050"
                },
                {
                    "start": 488,
                    "end": 492,
                    "matchedPaperCorpusId": "237732833"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.90478515625
        },
        {
            "corpus_id": "57212690",
            "title": "The Effectiveness of a Program Visualization Tool on Introductory Programming: A Case Study with PythonTutor",
            "text": "Program Visualization (PV) is an educational tool frequently used to assist users for understanding a program flow. However, despite its clear benefits, PV cannot be incorporated easily on Introductory Programming course. Several key properties such as student characteristics and behavior should be considered beforehand. This paper is intended to provide an empirical review about the impact of PV toward students of Introductory Programming course. For our case study, PythonTutor is selected as a sample of PVs due to its accessibility. It can be accessed anywhere and anytime through a web browser. Three conclusions are obtained based on our evaluation on data collected from a survey. Firstly, PV is quite effective to assist students for conducting several programming sub-tasks. Secondly, PV, at some extent, may help students to learn advanced topics on Introductory Programming course. Finally, despite the fact that several features should be incorporated to enhance understanding of students, PV is beneficial for learning Introductory Programming course, especially when it is frequently used.",
            "score": 0.3832814172581209,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.779296875
        },
        {
            "corpus_id": "151413422",
            "title": "Programaci\u00f3n visual por bloques en Educaci\u00f3n Primaria: aprendiendo y creando contenidos en ciencias sociales",
            "text": "This study details the analysis regarding practice and integration of visual programming with blocks in Primary Education in Social Sciences through the Scratch application. The research analyzes benefits and practices measured in intervention from a Design Based Research, data triangulation, Bloom\u2019s classical taxonomy, the TPACK model and Flipped Classroom model. In this case, 46 primary school students in 6th grade participate in the academic year 2013-14 creating animations and interactive environments that enable the development of content in Art History through the paintings of El Greco, Velazquez, Picasso and Dali. Learning processes and creation of multimedia products by visual programming are accurately measured from the mentioned models. In the process of analyzing active learning, content in Art history and computational concepts, results highlight the ability of students to understand, apply, and synthesize contents. We conclude that these practices support improvement, motivation, satisfaction, fun, useful and commitment from students, enabling understanding of contents and logic and computational concepts Through multimedia activities with visual programming blocks.",
            "score": 0.3832814172581209,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.798828125
        },
        {
            "corpus_id": "11040530",
            "title": "Verificator: Educational Tool for Learning Programming",
            "text": "It is a 3-D Interactive Graphics Programming Environment that allows scripting and modeling prototype objects that a virtual simulation world is made of (Pausch et al., 1995). In simulations, students can use simple scripts to control the appearance and behavior of objects. During script execution, visualization allows students to establish correlation between the program and the animated action of the complex and thus understand how basic programming constructs operate. TRAKLA2 is a visual environment that allows the assessment of simulation of algorithms and data structures (Korhonen et al., 2003). VILLE is a visual tool that supports Java, C ++ and pseudo programming languages (Kaila et al., 2009). Programming examples can be simultaneously displayed in two programming languages, and thus show different implementations of programming concepts. In addition, VILLE allows monitoring of the execution of the program and thus of the result of changes in the output arising from changes in the value of variables. Finally, we should by all means mention BlueJ as an example of a static visualization tool whose characteristics are a directly parameterized call of the method and automatic generation of applet skeleton. Its basic purpose is acquiring object-oriented concepts in the Java programming language (K\u00f6lling et al., 2003). \n\nFrom all the aforementioned examples it can be concluded that visualization tools are very useful in teaching programming to novice students, primarily because they can show and explain programming concepts in a very simple way. However, their main disadvantage is that the majority of them are focused on only one programming language and the simplest program constructs. Furthermore, the aim of teaching programming is that students understand basic programming concepts and that they become able to apply those concepts during the problem solving process, regardless of implemented programming language. Unfortunately, most of these tools are too focused on the visualization component, and less on learning the syntax and semantics of the selected programming language. Therefore, we believe that the visualization tools are more appropriate for teaching programming in elementary schools, but not at universities where the student needs to learn algorithmic approach to solve given problems. Finally, the results of research that has followed the use of most of the aforementioned tools have not revealed any significantly better results and students still experience the same difficulties when learning basic programming (Milne and Rowe, 2002;Lahtinen et al., 2005;Butler and Morgan, 2007).",
            "score": 0.3832814172581209,
            "section_title": "Related Work",
            "char_start_offset": 9335,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 175
                },
                {
                    "start": 176,
                    "end": 274
                },
                {
                    "start": 275,
                    "end": 475
                },
                {
                    "start": 476,
                    "end": 607
                },
                {
                    "start": 608,
                    "end": 710
                },
                {
                    "start": 711,
                    "end": 858
                },
                {
                    "start": 859,
                    "end": 1023
                },
                {
                    "start": 1024,
                    "end": 1229
                },
                {
                    "start": 1230,
                    "end": 1342
                },
                {
                    "start": 1345,
                    "end": 1573
                },
                {
                    "start": 1574,
                    "end": 1717
                },
                {
                    "start": 1718,
                    "end": 1951
                },
                {
                    "start": 1952,
                    "end": 2118
                },
                {
                    "start": 2119,
                    "end": 2341
                },
                {
                    "start": 2342,
                    "end": 2641
                }
            ],
            "ref_mentions": [
                {
                    "start": 153,
                    "end": 174,
                    "matchedPaperCorpusId": "59702596"
                },
                {
                    "start": 583,
                    "end": 606,
                    "matchedPaperCorpusId": "59855353"
                },
                {
                    "start": 689,
                    "end": 709,
                    "matchedPaperCorpusId": "6167862"
                },
                {
                    "start": 1319,
                    "end": 1341,
                    "matchedPaperCorpusId": "2805887"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.73828125
        },
        {
            "corpus_id": "236566925",
            "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games",
            "text": "Visual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI). \n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations. \n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts ...) and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer. \n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc. \n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions.",
            "score": 0.3832814172581209,
            "section_title": "Visual programming:",
            "char_start_offset": 28669,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 149
                },
                {
                    "start": 150,
                    "end": 360
                },
                {
                    "start": 363,
                    "end": 692
                },
                {
                    "start": 695,
                    "end": 896
                },
                {
                    "start": 897,
                    "end": 978
                },
                {
                    "start": 979,
                    "end": 1158
                },
                {
                    "start": 1161,
                    "end": 1286
                },
                {
                    "start": 1287,
                    "end": 1305
                },
                {
                    "start": 1308,
                    "end": 1490
                },
                {
                    "start": 1491,
                    "end": 1701
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.939453125
        },
        {
            "corpus_id": "53293319",
            "title": "Effect of active learning using program visualization in technology-constrained college classrooms",
            "text": "Computer-based visualizations involve \"the use of computer supported, interactive, visual representations of data to amplify cognition\" (Tory and Moller 2004) like educational animations and simulations. Well-designed visualizations with affordances that are known to promote learning, like variable manipulations, dynamic multiple representations, and others, have been shown to be effective learning resources (Linn and Eylon 2006). They make the invisible visible and improve prediction and reasoning abilities (Riess and Mischo 2010). In the domain of Computer Science (CS), such visualizations entail the use of graphical entities to depict runtime behaviors of code segments, consequent changes occurring within the computer system or algorithm executions. The visualizations used in CS are classified into two broad categories, based on their level of abstraction-algorithm visualization (AV) and program visualization (PV) (Price et al. 1993). The current study focuses on PV, which is visualization of actual program code at a low level of abstraction, in either static or dynamic form (Price et al. 1993). It includes both animations and simulations (Sorva et al. 2013), depicting the runtime behavior of a program with graphical elements. These graphical elements illustrate the changes occurring within the computer system like changes in the memory map (Fig. 1). These visualizations assist in clearing misconceptions about complex programming topics (Urquiza-Fuentes and Vel\u00e1zquez-Iturbide 2013; Sorva et al. 2013), promote conceptual and procedural understanding (Byrne et al. 1999;Hansen et al. 2000;Laakso et al. 2009), improve verbalization of programming concepts (Ben-Bassat Levy et al. 2003), and understanding the working of the \"notional machine\" (Sorva et al. 2013) for novice programmers. \n\nHowever, these benefits from visualizations remain unrealized if instructional strategy used is to simply exhibit the visualization in the classroom (Windschitl and Andre 1998). Such type of passive strategy is prevalent in technology-constrained instructormediated classrooms (Kundi and Nawaz 2010).",
            "score": 0.3832814172581209,
            "section_title": "Background",
            "char_start_offset": 13,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 203
                },
                {
                    "start": 204,
                    "end": 434
                },
                {
                    "start": 435,
                    "end": 538
                },
                {
                    "start": 539,
                    "end": 762
                },
                {
                    "start": 763,
                    "end": 951
                },
                {
                    "start": 952,
                    "end": 1115
                },
                {
                    "start": 1116,
                    "end": 1249
                },
                {
                    "start": 1250,
                    "end": 1375
                },
                {
                    "start": 1376,
                    "end": 1813
                },
                {
                    "start": 1816,
                    "end": 1993
                },
                {
                    "start": 1994,
                    "end": 2116
                }
            ],
            "ref_mentions": [
                {
                    "start": 136,
                    "end": 157,
                    "matchedPaperCorpusId": "2677477"
                },
                {
                    "start": 412,
                    "end": 433,
                    "matchedPaperCorpusId": "155326055"
                },
                {
                    "start": 514,
                    "end": 537,
                    "matchedPaperCorpusId": "145192917"
                },
                {
                    "start": 931,
                    "end": 950,
                    "matchedPaperCorpusId": "3163293"
                },
                {
                    "start": 1095,
                    "end": 1114,
                    "matchedPaperCorpusId": "3163293"
                },
                {
                    "start": 1160,
                    "end": 1179,
                    "matchedPaperCorpusId": "16369862"
                },
                {
                    "start": 1510,
                    "end": 1528,
                    "matchedPaperCorpusId": "16369862"
                },
                {
                    "start": 1578,
                    "end": 1597,
                    "matchedPaperCorpusId": "14230078"
                },
                {
                    "start": 1616,
                    "end": 1635,
                    "matchedPaperCorpusId": "11082159"
                },
                {
                    "start": 1695,
                    "end": 1712,
                    "matchedPaperCorpusId": "46185353"
                },
                {
                    "start": 1770,
                    "end": 1788,
                    "matchedPaperCorpusId": "16369862"
                },
                {
                    "start": 1965,
                    "end": 1992,
                    "matchedPaperCorpusId": "144044936"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.673828125
        },
        {
            "corpus_id": "52247781",
            "title": "Looking at Algorithm Visualization through the Eyes of Pre-service ICT Teachers",
            "text": "Teachers have a dual role as educators and innovators in information societies. Until recent decades, it was generally accepted that qualified teachers possessed content knowledge and pedagogical knowledge, but today, it is expected that good teachers learn emerging technologies and utilize them in the classroom, along with content and pedagogical knowledge [20]. In programming education, teachers have utilized a technology supported strategy called algorithm visualization (AV). AV is defined as the graphical illustration of algorithms and data structure via software developed for this purpose [13,35]. Almost all educational communities have a positive perception of AV [28]. AV is preferred in programming education to facilitate student understanding of the way computer algorithms function [14]. New strategies are needed in this field, because learning computer programming is not easy, even for college students enrolled in computer-related disciplines. College students who have basic programming knowledge perceive programming courses as difficult, because these courses require higher-order thinking skills [37]. Researchers have investigated several problems that may cause failure of some novice programming students and dropout of the programming course [8]. Some of the major problems identified for college students are abstract concepts, lack of understanding of the larger entities, lack of applications, and lack of practical and concrete learning situations [22]. A recently conducted study categorized the problems a novice learner faces as \"programming knowledge (56%), programming skills (17%), understanding semantics (13%), and debugging (13%)\" [29]. Regarding these problems, computer science educators and instructional technologists have been studying technological and pedagogical ways to make programming instruction easier and more effective. Surely, it is critical to employ instructional time in the most appropriate ways possible. In this regard, much algorithm visualization software has been developed to facilitate learning and teaching, and especially to support novice programmers. One of the first examples of algorithm visualization software is the Brown Algorithm Simulator and Animator (BALSA) that assists students in learning the fundamentals of computer programming through system-generated visualizations [3]. While some AVs can be accessed for free, only a few of them maintain an educational quality [35]. It is also important to highlight that after the concept was debuted in the mid-1970s, more than 500 algorithm visualization soft wares have been developed, but a comprehensive",
            "score": 0.3832814172581209,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 360,
                    "end": 364,
                    "matchedPaperCorpusId": "42674854"
                },
                {
                    "start": 601,
                    "end": 605,
                    "matchedPaperCorpusId": "30164228"
                },
                {
                    "start": 605,
                    "end": 608,
                    "matchedPaperCorpusId": "18418524"
                },
                {
                    "start": 678,
                    "end": 682,
                    "matchedPaperCorpusId": "1555643"
                },
                {
                    "start": 801,
                    "end": 805,
                    "matchedPaperCorpusId": "33047739"
                },
                {
                    "start": 1483,
                    "end": 1487,
                    "matchedPaperCorpusId": "6988391"
                },
                {
                    "start": 1675,
                    "end": 1679,
                    "matchedPaperCorpusId": "55080386"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.53662109375
        },
        {
            "corpus_id": "231725028",
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "text": "This study characterized how various visual programming approaches empower end users to develop applications. The study analyzed 30 VPL tools proposed in the literature. To analyze the tools, the study examined how each tool fares across 12 dimensions: VPL classification, interaction style, target users, domain, platform, type of empirical evaluation, types of test participants, number of test participants, programming skills of test participants, evaluation methods, evaluation measures, and accessibility of visual programming tools. \n\nAll the tools the study surveyed were domain specific. The results show that the tools were proposed in various areas including IoT, education, robotics, and more, and targeted mostly general users as well as students and domain experts. \n\nDespite the difference of VPL approaches, most tools utilize high-level abstractions to hide implementation details, and use similar interaction styles such as direct manipulation (in the form of drag-drop) and menu selection. Some commonalities have been observed among tools of the same domain. For instance, tools that target IoT allow end users to access services using visual abstractions, while tools built for educational purposes mostly use a block-based approach, and use similar visual abstractions representing programming constructs. \n\nMost of the tools produced some empirical evidence that points to the success of their approaches with end users, though only a few of the tools conducted a formal experiment. Moreover, the test subjects were mostly students with little to no programming skills in a university setting as opposed to typical users in a real setting. To evaluate the tools, most authors used tasks or surveys. Further, most of the tools measured perceived usability using surveys, while fewer tools measures usability factors such as ease of learning and task efficiency using time completion and number of errors. \n\nThere are several challenges to be addressed by future tools. None of the tool authors explicitly mentioned the reliance of usability principles in designing the tools, though a few authors performed usability tests to evaluate the tools. Further, only one of the tools was evaluated the expressiveness of their tools. It is imperative for end users to understand the limits of the tools. Finally, 53.3% (16) of the tools were available publicly with some documentation. We strongly recommend that future tools are made available for end users as well as comprehensive documentation to ensure tool adoption and sustainability.",
            "score": 0.3823975792711091,
            "section_title": "X. CONCLUSION",
            "char_start_offset": 70594,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 109
                },
                {
                    "start": 110,
                    "end": 169
                },
                {
                    "start": 170,
                    "end": 539
                },
                {
                    "start": 542,
                    "end": 596
                },
                {
                    "start": 597,
                    "end": 779
                },
                {
                    "start": 782,
                    "end": 1008
                },
                {
                    "start": 1009,
                    "end": 1078
                },
                {
                    "start": 1079,
                    "end": 1327
                },
                {
                    "start": 1330,
                    "end": 1505
                },
                {
                    "start": 1506,
                    "end": 1662
                },
                {
                    "start": 1663,
                    "end": 1721
                },
                {
                    "start": 1722,
                    "end": 1926
                },
                {
                    "start": 1929,
                    "end": 1990
                },
                {
                    "start": 1991,
                    "end": 2167
                },
                {
                    "start": 2168,
                    "end": 2247
                },
                {
                    "start": 2248,
                    "end": 2317
                },
                {
                    "start": 2318,
                    "end": 2399
                },
                {
                    "start": 2400,
                    "end": 2555
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.900390625
        },
        {
            "corpus_id": "264130933",
            "title": "Determining the Effectiveness of the 3D Alice Programming Environment at the Computer Science I Level",
            "text": "The motivation for changing the manner in which programming is taught in educational institutions comes from the recognition that there has been and continues to be a significant decline in the number of students entering the fields of computer science, computer engineering, and computer programming (Dann, Cooper, & Pausch, 2005;Kessler, 2005;Morris, 2004;Pausch & Conway, 2000;Tucci, 2005;Vegso, 2005). In North America numerous computer departments have reported significant drops in enrolment in their first year computer programs and are struggling to retain even a small number of students in the second and higher year levels (Kessler, 2005;Tucci, 2005;Vegso, 2005). In order to address this problem and to introduce students to a more intuitive \"objects-first\" approach to programming, Carnegie Mellon University (CMU) developed a richly-interactive 3D graphical programming development environment called Alice (Dann et al., 2005). This visual programming environment offers:\n\n\u2022 ease of construction of virtual worlds and situating subtasks to solve in this world; \u2022 a reduction in complexity of details for beginner programmers; and \u2022 visualization of objects in a 3D environment situated in a meaningful context (Dann et al., 2005).\n\nThe Alice programming environment provides a means through which students build virtual worlds where objects and their behaviours are situated in a \"real\" context (Dann et al., 2005). Alice offers the programmer a way to develop realistic 3D animations and programs that support rich interaction with the user (e.g., computer games). A brief description of the Alice environment is described below. Alice is free and is available from http://www.alice.org. Teaching materials are also free and may be found at: http://www.aliceprogramming.net.\n\nAs an example of a virtual world that can be created in Alice, consider a problem involving an interactive game in which the user drives a car for a driving test. A scene from this virtual world may look like that presented in Figure 1. In order to create and manipulate virtual worlds, Alice provides a Virtual World Editor that has numerous features. Figure 2 depicts the Virtual World Editor. In this editor, students can add 3D objects from a local or internet-based gallery of objects (bottom section) and arrange",
            "score": 0.3821943090211126,
            "section_title": "INTRODUCTION",
            "char_start_offset": 15,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.86767578125
        },
        {
            "corpus_id": "60881491",
            "title": "Introducing basic Programming Concepts to Elementary School Children",
            "text": "Scratch is a programming language learning environment created with an idea to enable beginners to quickly create programs without having to learn how to write them syntactically correct. It is intended to motivate further learning through playfully experimenting and creating projects, such as interactive animations, games, etc. (Maloney, Resnick, Rusk, Silverman & Eastmond, 2010). \n\nScratch features a graphical user interface which prevents the need to memorize the programming language, and instead allows for users to explore its different functions. \n\nMain program is made from code fragments (called \"blocks\") that can be dragged onto the scripts area to make programs. Blocks are organized into different categories such as movement, looks, control, sensing, etc. for easier use. Different kinds of blocks also have different colors and shapes. \n\nIt can be noticed that all of them have special focus on visual presentation. That is considered quite important, especially considering the age of users it is intended for. Because of that, all aspects of teaching approach described in this paper also have strong emphasis on visual presentation, thus improving the user (children's) experience. \n\nAnother important characteristic is usability or \"ease-of-use\" of the application. Again, all above applications are fairly easy to use and have very simple set of basic commands. Some of them (NXT-G and Scratch) have the option of making custom, more complex commands. It should be taken into account that teaching method described in this paper is intended for primary school children and teaching a few basic concepts, therefore it would be sufficient to keep the set of commands minimal so that children would not be burdened with excessive set of data that they would have to memorize. It is more important to teach them the process of logical thinking and problem solving (Adams, Kaczmarczyk, Picton, & Demian, 2011). Once they have developed that kind of knowledge they can easily apply it to the all other aspects of education as well as real life problems. Some of these applications are used in college for teaching students whose primary field of study is not computer science. During discussions with professors using those applications it was pointed that the majority of students are trying to solve given problems using the \"trial and error\" technique.",
            "score": 0.38150596228657674,
            "section_title": "Scratch",
            "char_start_offset": 6312,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 187
                },
                {
                    "start": 188,
                    "end": 384
                },
                {
                    "start": 387,
                    "end": 557
                },
                {
                    "start": 560,
                    "end": 678
                },
                {
                    "start": 679,
                    "end": 789
                },
                {
                    "start": 790,
                    "end": 854
                },
                {
                    "start": 857,
                    "end": 934
                },
                {
                    "start": 935,
                    "end": 1030
                },
                {
                    "start": 1031,
                    "end": 1203
                },
                {
                    "start": 1206,
                    "end": 1288
                },
                {
                    "start": 1289,
                    "end": 1385
                },
                {
                    "start": 1386,
                    "end": 1475
                },
                {
                    "start": 1476,
                    "end": 1796
                },
                {
                    "start": 1797,
                    "end": 1929
                },
                {
                    "start": 1930,
                    "end": 2071
                },
                {
                    "start": 2072,
                    "end": 2194
                },
                {
                    "start": 2195,
                    "end": 2373
                }
            ],
            "ref_mentions": [
                {
                    "start": 331,
                    "end": 383,
                    "matchedPaperCorpusId": "9744698"
                },
                {
                    "start": 1884,
                    "end": 1928,
                    "matchedPaperCorpusId": "40927523"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.474609375
        },
        {
            "corpus_id": "10304140",
            "title": "Object-Oriented Programming for non-IT Students: Starting from Scratch",
            "text": "A new trend in teaching programming skills is the development of an environment created especially for learning. These are graphical tools, such as Scratch [8], Snap! [9], Blockly [10], which make the learning process much easier for the beginners especially for non-IT, who have not any experience in programming. \n\nIn our course we use Scratch as the supporting tool before creating applications in VBA or Python. After a few years of practice, we came to the conclusion that a graphical environment, such as Scratch, is an effective introductory tool to understand both the object-oriented approach and the functionality of a program. \n\nIn addition, syntax errors are impossible in Scratch, which is a great help for students. It is easy to discover and correct run-time errors as well, because Scratch works as an interpreter. \n\nGraphical command blocks give a visual picture of the different controls (selections, loops), used in the program. They create the necessary associations when students start coding in a text-based programming language. \n\nScratch is not designed to solve complicated tasks, but it is simple, very expressive, and makes understanding the behaviour of objects easier. \n\nIt should be mentioned that according the annual students' feedback Scratch is the most popular module in the course. \n\nCreation of objects is solved by importing or drawing graphics. Combining the blocks for each object creates the methods. Some of the blocks are used to show the reaction of the object to some events. We see here the main aspects of object-oriented programming resulting in an attractive animation. \n\nFurther, we will briefly review the main programming concepts that are usually complicated for non-IT learners.",
            "score": 0.38021308238268503,
            "section_title": "IV. VISUAL PROGRAMMING WITH SCRATCH",
            "char_start_offset": 7747,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 112
                },
                {
                    "start": 113,
                    "end": 314
                },
                {
                    "start": 317,
                    "end": 415
                },
                {
                    "start": 416,
                    "end": 637
                },
                {
                    "start": 640,
                    "end": 729
                },
                {
                    "start": 730,
                    "end": 830
                },
                {
                    "start": 833,
                    "end": 947
                },
                {
                    "start": 948,
                    "end": 1051
                },
                {
                    "start": 1054,
                    "end": 1197
                },
                {
                    "start": 1200,
                    "end": 1317
                },
                {
                    "start": 1320,
                    "end": 1383
                },
                {
                    "start": 1384,
                    "end": 1441
                },
                {
                    "start": 1442,
                    "end": 1520
                },
                {
                    "start": 1521,
                    "end": 1618
                },
                {
                    "start": 1621,
                    "end": 1732
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7568359375
        },
        {
            "corpus_id": "4039308",
            "title": "Visual and textual programming languages: a systematic review of the literature",
            "text": "It is well documented and has been the topic of much research as well that Computer Science courses tend to have higher than average drop-out rates at third level, particularly so, for students advancing from first year to second year. This is a problem that needs to be addressed not only with urgency but also with caution. The required number of Computer Science graduates is growing every year, but the number of graduates is not meeting this demand, and one way that this problem can be alleviated is to encourage students, at an early age, towards studying Computer Science courses. This paper presents a systematic literature review that examines the role of visual and textual programming languages when learning to program, particularly as a First Programming Language. The approach is systematic in that a structured search of electronic resources has been conducted, and the results are presented and quantitatively analysed. This study will provide insight into whether or not the current approaches to teaching young learners programming are viable, and examines what we can do to increase the interest and retention of these students as they progress through their education.",
            "score": 0.37955109953353117,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.53125
        },
        {
            "corpus_id": "224865976",
            "title": "EUD-MARS: End-user development of model-driven adaptive robotics software systems",
            "text": "Tool-supported visual paradigms enable end-users to perform some of the programming tasks that professional programmers usually perform. Since we primarily intended EUD-MARS to be for end-users, we devised a visual programming tool to complement it. \n\nThis tool (Fig. 14) is web-based and uses Blockly. The latter is a JavaScript library created by Google to support the development of visual programming languages and tools [94]. Blockly represents coding concepts as interlocking blocks. Scratch, the end-user visual programming tool has been using interlocking blocks since before Blockly's initial release. Researchers have used Blockly to develop languages for several types of applications including model checking [95], web development [96], and data queries [97]. Blockly's paradigm is similar to jigsaw puzzles, which researchers introduced and evaluated in the area of end-user development [98,99]. We also used jigsaw puzzles as the visual notation for Visual Simple Transformations (ViSiT), which is an approach that empowers end-users to wire together previously incompatible IoT objects [100]. The previous work showed that end-users perceive visual interlocking blocks to be usable and learnable. Hence, we used this visualization paradigm for EUD-MARS since it is a promising choice. \n\nUsing the tool that we developed, end-users can drag visual programming blocks from a toolbar (Fig. 14a) onto a canvas (Fig. 14b). These blocks represent concepts such as actions, action sequences, events, and so on. End-users can save their visual programs to files and reload them later to continue their work (Fig. 14c). The toolbar contains some fixed elements such as the ones related to numbers and text. The toolbar also contains other elements such as actions, which are loaded dynamically based on the program's robot pool. End-users can drag and drop elements to move them around on the canvas. They can also delete individual elements or the entire program (Fig. 14d). End-users can zoom the canvas in and out to visualize the program in a better way on different resolutions. \n\nEnd-users can run their programs directly from the tool (Fig. 14e).",
            "score": 0.37955109953353117,
            "section_title": "Tool for end-users",
            "char_start_offset": 86859,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 136
                },
                {
                    "start": 137,
                    "end": 249
                },
                {
                    "start": 252,
                    "end": 302
                },
                {
                    "start": 303,
                    "end": 430
                },
                {
                    "start": 431,
                    "end": 489
                },
                {
                    "start": 490,
                    "end": 610
                },
                {
                    "start": 611,
                    "end": 771
                },
                {
                    "start": 772,
                    "end": 908
                },
                {
                    "start": 909,
                    "end": 1107
                },
                {
                    "start": 1108,
                    "end": 1211
                },
                {
                    "start": 1212,
                    "end": 1299
                },
                {
                    "start": 1302,
                    "end": 1432
                },
                {
                    "start": 1433,
                    "end": 1518
                },
                {
                    "start": 1519,
                    "end": 1625
                },
                {
                    "start": 1626,
                    "end": 1712
                },
                {
                    "start": 1713,
                    "end": 1834
                },
                {
                    "start": 1835,
                    "end": 1906
                },
                {
                    "start": 1907,
                    "end": 1981
                },
                {
                    "start": 1982,
                    "end": 2089
                },
                {
                    "start": 2092,
                    "end": 2159
                }
            ],
            "ref_mentions": [
                {
                    "start": 425,
                    "end": 429,
                    "matchedPaperCorpusId": "2701916"
                },
                {
                    "start": 721,
                    "end": 725,
                    "matchedPaperCorpusId": "27966302"
                },
                {
                    "start": 743,
                    "end": 747,
                    "matchedPaperCorpusId": "7626370"
                },
                {
                    "start": 766,
                    "end": 770,
                    "matchedPaperCorpusId": "18324831"
                },
                {
                    "start": 900,
                    "end": 904,
                    "matchedPaperCorpusId": "7388219"
                },
                {
                    "start": 904,
                    "end": 907,
                    "matchedPaperCorpusId": "14321554"
                },
                {
                    "start": 1101,
                    "end": 1106,
                    "matchedPaperCorpusId": "267872312"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8837890625
        },
        {
            "corpus_id": "3949077",
            "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications",
            "text": "Learning computer programming has been always challenging. Since the sixties of the last century, many researchers developed Visual Programming Languages (VPLs) to help in this regard. In this thesis, ten VPLs were specifically selected, studied, experimented with, and evaluated. A total of fifteen metrics were used to evaluate the tools. Comparisons, classification, and gap analysis were then presented. A list of requirements for a general-purpose VPL and a guide to help the novice programmer choose the right tool were generated and finally the PWCT (Programming Without Coding Technology, a novel general-purpose visual programming language) is developed and presented. PWCT has been launched as a Sourceforge project, which currently has more than 230,000 downloads for the language and more than 19,500,000 downloads for samples, tutorials and movies. Many business applications and projects are developed using PWCT, Also we developed the Supernova programming language and the Ring programming language using PWCT to prove that it can be used for advanced and large projects. Feedback from developers and results from the studies indicate that PWCT is a very appealing, competitive, and powerful language.",
            "score": 0.37955109953353117,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.90771484375
        },
        {
            "corpus_id": "230282866",
            "title": "On some innovations in teaching the formal semantics using software tools",
            "text": "The using of this book assumes the coordination with particular modules of our software package. We note that standard teaching methods -explanation and model calculation using board where the r\u00f4le of the educator/teacher is indispensable cannot be so simply omitted. We think that modern visualizing methods can significantly help and we want to apply them but we do not want to avoid using standard methods as well [28]. \n\nThe practical outcomes of using the software package will be used in teaching computer science courses in the field of software engineering focusing on the design and development of correct programs and systems, not only at the domestic university and at a cooperating university, Johannes Kepler University in Linz, Austria, or other universities where related and similar courses are a part of curriculum. One of the advantages can be also putting this software into practice for distance learning. Our software tool (or the complete software package) can serve as a modern interactive learning tool, as a support for new teachers of the course, as a tool for IT experts using formal methods or for other interested experts. \n\nThe proposed teaching software can help teachers and educators in providing a better and illustrative form for the students: \n\n-during the lectures, the teacher can present examples directly and interactively; or at least use prepared examples depicted on screen-shots; -at laboratory exercises and seminars, examples can be explained step-wise with possible change of input parameters to show the differences in programs' simulations. \n\nThe teaching software can be very useful for students especially in the following cases: \n\n-during the laboratory work for simulation of program execution, when examining the conditions of how results will program produce based on input parameters; -in the phase of self-study and self-preparation for testing or exams; -when doing research or simulations when the visual output is needed. \n\nMoreover, the program provides visual output that can be stored into graphic file. Another option is to export the L A T E X source of the produced visual output that can be used in other projects. We consider both output forms as very important for future work in studying, teaching and preparing output materials. \n\nThe theoretical outcomes of using the software package can find their application in the field of further research on the issue of interactive and experiential teaching of theoretical principles in computer science.",
            "score": 0.37955109953353117,
            "section_title": "Motivation for bringing innovations to teaching",
            "char_start_offset": 17304,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 96
                },
                {
                    "start": 97,
                    "end": 267
                },
                {
                    "start": 268,
                    "end": 422
                },
                {
                    "start": 425,
                    "end": 832
                },
                {
                    "start": 833,
                    "end": 925
                },
                {
                    "start": 926,
                    "end": 1151
                },
                {
                    "start": 1154,
                    "end": 1278
                },
                {
                    "start": 1281,
                    "end": 1589
                },
                {
                    "start": 1592,
                    "end": 1680
                },
                {
                    "start": 1683,
                    "end": 1981
                },
                {
                    "start": 1984,
                    "end": 2066
                },
                {
                    "start": 2067,
                    "end": 2181
                },
                {
                    "start": 2182,
                    "end": 2299
                },
                {
                    "start": 2302,
                    "end": 2517
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.2958984375
        },
        {
            "corpus_id": "252233721",
            "title": "A case study of the integration of Algorithm Visualizations in Hungarian programming education",
            "text": "In this study, I will introduce how Algorithm Visualizations (AV) can help programming education or, in this case, the acquisition of basic programming theorems. I used two di erent methods to test this: in the first round, I examined in a larger group how much the students' ability to solve specific tasks changes after being introduced to a visualization tool, and then, what was their motivation and experience during this process. In the second round, I looked for the components that could be important when choosing a tool with the help of an in-depth interview with a smaller number of individuals. In both cases, I describe the research, experience, and results of the study, and then summarize them at the end. \nSubject Classification: 97P10",
            "score": 0.37955109953353117,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.64892578125
        },
        {
            "corpus_id": "251713000",
            "title": "CodeToon: Story Ideation, Auto Comic Generation, and Structure Mapping for Code-Driven Storytelling",
            "text": "Comics could benefit students learning object-oriented programming. Other programming paradigms such as functional programming may require identifying abstractions (e.g., pointers) important to them for custom visual vocabulary, which would help expand the set of visual vocabularies and advance our understanding mental models for programming. \n\nDesign Implications. Our work has interesting design implications for various domains. Our user study results suggest that the 1-to-1 mapping can be an effective, useful design when using comics as a complementary representation for code. This confirms the suggestion in the literature on multiple representational systems, which recommends making the mapping between multiple representations clear. For research areas-such as data and stats comics [5,41]-that also leverage comics in much the same way coding strip does, our insights concerning 1-to-1 mapping and the process of building comic expressions can help them explore a similar direction where they can also explore methods to auto generate comics from languages in their domain (e.g., R programming). Our work also leads to many interesting questions for comic authoring tools and coding tools. For instance, how can comic authoring tools utilize our idea of generating comics from language semantics and computational steps to enhance and diversify the authoring process? How can we design coding tools that offer ways to switch between code and other levels of abstraction (e.g., stories and comics)? How can we leverage such interaction to support various tasks programmers perform, e.g., reading and writing code, and debugging? What representations or abstractions can we support in these coding tools? How can we make their transitions seamless? How should we design these transitions and interactions so that we maximize the benefits of multiple representations? \n\nVisual Programming Environment for Artistic Activities. Using coding strips to teach and learn computer programming is a new and promising approach. Recent work showed that it can enhance student learning and address some challenges in teaching programming [33,36,38]. But there is still much work to be done. To ease its adoption, we need a curriculum containing a set of learning activities and guidelines in an accessible form, such as a cheat sheet, so that teachers can quickly reference and apply it to their teaching and lessons. Moreover, understanding the nature and impact of this approach needs to be further investigated.",
            "score": 0.37955109953353117,
            "section_title": "Implications & Opportunities",
            "char_start_offset": 45583,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 67
                },
                {
                    "start": 68,
                    "end": 344
                },
                {
                    "start": 347,
                    "end": 367
                },
                {
                    "start": 368,
                    "end": 433
                },
                {
                    "start": 434,
                    "end": 585
                },
                {
                    "start": 586,
                    "end": 746
                },
                {
                    "start": 747,
                    "end": 1109
                },
                {
                    "start": 1110,
                    "end": 1203
                },
                {
                    "start": 1204,
                    "end": 1381
                },
                {
                    "start": 1382,
                    "end": 1511
                },
                {
                    "start": 1512,
                    "end": 1641
                },
                {
                    "start": 1642,
                    "end": 1716
                },
                {
                    "start": 1717,
                    "end": 1760
                },
                {
                    "start": 1761,
                    "end": 1878
                },
                {
                    "start": 1881,
                    "end": 1936
                },
                {
                    "start": 1937,
                    "end": 2029
                },
                {
                    "start": 2030,
                    "end": 2149
                },
                {
                    "start": 2150,
                    "end": 2190
                },
                {
                    "start": 2191,
                    "end": 2417
                },
                {
                    "start": 2418,
                    "end": 2514
                }
            ],
            "ref_mentions": [
                {
                    "start": 796,
                    "end": 799,
                    "matchedPaperCorpusId": "659424"
                },
                {
                    "start": 799,
                    "end": 802,
                    "matchedPaperCorpusId": "222353618"
                },
                {
                    "start": 2142,
                    "end": 2145,
                    "matchedPaperCorpusId": "229347790"
                },
                {
                    "start": 2145,
                    "end": 2148,
                    "matchedPaperCorpusId": "222223894"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.6005859375
        },
        {
            "corpus_id": "6764231",
            "title": "A Proposed Framework for Development of a Visualizer Based on Memory Transfer Language (MTL)",
            "text": "Numerous program visualization tools have been developed and deployed. Though the rationale behind all visualizers is almost the same, each one has come up with unique features and functionalities and distinct ways of helping novices to program. Mutua et al [8] posit that, visualization tools have been developed to supplement the learning process; in that regard various forms of teaching aids, models and software systems are deployed in enhancing the learning process. Different visualizers for different programming languages such as C, C++ and JAVA are available today. Kasurinen et al [4], deployed a program visualization tool (Turtlet) to enhance student motivation and interest towards programming in the introductory programming course by applying visualization tool to lecture demonstrations. Alice, a 3-D interactive graphics programming environment developed with a goal to make it easy for novices to develop interesting 3-D environments and to explore the new medium of interactive 3-D graphics. Alice serves as a good programming language for the novice programmers as they can follow up and see how their animated programs run [9]. Some other visualizers developed include BlueJ, Jeliot, JPie and Scratch.",
            "score": 0.37955109953353117,
            "section_title": "B. Program Visualization Tools",
            "char_start_offset": 3528,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 70
                },
                {
                    "start": 71,
                    "end": 245
                },
                {
                    "start": 246,
                    "end": 472
                },
                {
                    "start": 473,
                    "end": 575
                },
                {
                    "start": 576,
                    "end": 804
                },
                {
                    "start": 805,
                    "end": 1011
                },
                {
                    "start": 1012,
                    "end": 1149
                },
                {
                    "start": 1150,
                    "end": 1223
                }
            ],
            "ref_mentions": [
                {
                    "start": 258,
                    "end": 261,
                    "matchedPaperCorpusId": "208974128"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7412109375
        },
        {
            "corpus_id": "249431936",
            "title": "An Exploratory Analysis of Feedback Types Used in Online Coding Exercises",
            "text": "Numerous approaches, prototypes and exercise tools are currently available on the web, allowing for individual practice and gaining programming experience in a self-directed manner. The present work aims at analyzing three popular, freely available examples in order to identify the applied types of tutoring feedback. Therefore, CodingBat, Scratch and Blockly are briefly introduced. \n\nCodingBat One of the selected tools for this analysis is CodingBat created by Nick Parlante [34], as it is freely available on the Internet. Moreover, there is no registration or initial setup required. CodingBat is supposed to help train programming skills in Java and Python. The exercises can be used individually at students' pace, but also serve as examples in face-to-face class settings, e.g., at Stanford University. A clear advantage for users is that no preparation or installation is required to solve the tasks. Students can directly write a method into a white box and execute it as illustrated in Figure 1. For some exercises, hints and solutions are available along with help pages and more worked examples. As soon as students execute their code via the go-button, unit-tests are performed and feedback related to selected test cases is provided in the browser by means of a table. It represents the unit-test results of the execution in terms of the expected and actual outcome related to students' input. A color code system (green vs. red) indicates, whether the unit-test results are correct and the problem has been fully solved by the student. Scratch Scratch [22] aims at providing a low-threshold approach towards programming. It is a freely available visual programming language and community that allows for the simple development of stories, games and animations. Similarly, a registration is not required to create a first project. The potential of Scratch for formal programming education is founded the empowerment of learners to practice programming in a self-directed manner [40]. Scratch utilizes visual feedback, among other types, by illustrating the execution of a constructed program and its steps in order to clarify their sequence and coherence. The resulting visual display (see Figure 2) becomes increasingly individual, depending on the student input. According to Shu [42], programming involves both hemispheres of the brain so that the use of images for learning processes in programming education is recommended.",
            "score": 0.37955109953353117,
            "section_title": "Tools Offering Online Coding Exercises",
            "char_start_offset": 7794,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 181
                },
                {
                    "start": 182,
                    "end": 318
                },
                {
                    "start": 319,
                    "end": 384
                },
                {
                    "start": 387,
                    "end": 527
                },
                {
                    "start": 528,
                    "end": 589
                },
                {
                    "start": 590,
                    "end": 664
                },
                {
                    "start": 665,
                    "end": 811
                },
                {
                    "start": 812,
                    "end": 910
                },
                {
                    "start": 911,
                    "end": 1007
                },
                {
                    "start": 1008,
                    "end": 1109
                },
                {
                    "start": 1110,
                    "end": 1284
                },
                {
                    "start": 1285,
                    "end": 1409
                },
                {
                    "start": 1410,
                    "end": 1552
                },
                {
                    "start": 1553,
                    "end": 1637
                },
                {
                    "start": 1638,
                    "end": 1777
                },
                {
                    "start": 1778,
                    "end": 1846
                },
                {
                    "start": 1847,
                    "end": 1999
                },
                {
                    "start": 2000,
                    "end": 2171
                },
                {
                    "start": 2172,
                    "end": 2280
                },
                {
                    "start": 2281,
                    "end": 2444
                }
            ],
            "ref_mentions": [
                {
                    "start": 1994,
                    "end": 1998,
                    "matchedPaperCorpusId": "273180521"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.65576171875
        },
        {
            "corpus_id": "252100466",
            "title": "iProgVR: Design of a Virtual Reality Environment to Improve Introductory Programming Learning",
            "text": "Furthermore, some researchers also employed visualisa-346 tion techniques to help students learn and program better. For 347 instance, Lerner [47]  were placed in the control group while 54 students were 360 placed in the experimental group that was taught with various 361 visualisation tools. Results showed there were no significant 362 differences between both groups. The authors claimed that 363 while the results suggest that visualizations can help students 364 understand programming concepts, it should only be used as 365 a supplement in lectures to promote student participation dur-366 ing lessons. Consequently, Khaloo et al. [49] developed a 3D 367 code visualisation tool that aims to improve students under-368 standing of programming concepts. To do so, the visualisation 369 tool represents each class as a separate 3D environment and 370 lays out data structures and functions on the walls. The system 371 teachers to set up programming-based quests and challenges for their students. By conducting surveys on 30 participants from a high school in Greece, it was found that participants in the experimental group were engaged and motivated throughout the experience. However, it was also found that there was no significant difference between the control group and the experimental group in terms of students' performance for a test. Furthermore, Mathrani et al. [64] utilized a game called ''LightBot'', to test the feasibility of the system in regards to teaching programming concepts. In the game, participants are required to guide a robot to solve puzzles using blocks that represent commands identical to code. Evaluation results gathered from 20 participants found that the game successfully introduced programming concepts such as recursion, conditionals, and functions. \n\nWong and Yatim [65] developed a game called ''The Odyssey of Phoenix'' to aid in the learning of Object-Oriented Programming (OOP) concepts. This is accomplished by mapping game processes to their respective concepts. The inheritance concept, for instance, is mapped into the game's crafting element, where resources needed by both the nose and main gear can be shared due to them falling under the gear category. Results gathered from the pre-and post-test of 214 first-year university students were analysed to determine the game's effectiveness.",
            "score": 0.37955109953353117,
            "section_title": "345",
            "char_start_offset": 13148,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 116
                },
                {
                    "start": 117,
                    "end": 294
                },
                {
                    "start": 295,
                    "end": 372
                },
                {
                    "start": 373,
                    "end": 611
                },
                {
                    "start": 612,
                    "end": 761
                },
                {
                    "start": 762,
                    "end": 910
                },
                {
                    "start": 911,
                    "end": 1004
                },
                {
                    "start": 1005,
                    "end": 1186
                },
                {
                    "start": 1187,
                    "end": 1353
                },
                {
                    "start": 1354,
                    "end": 1507
                },
                {
                    "start": 1508,
                    "end": 1636
                },
                {
                    "start": 1637,
                    "end": 1798
                },
                {
                    "start": 1801,
                    "end": 1941
                },
                {
                    "start": 1942,
                    "end": 2018
                },
                {
                    "start": 2019,
                    "end": 2214
                },
                {
                    "start": 2215,
                    "end": 2349
                }
            ],
            "ref_mentions": [
                {
                    "start": 1383,
                    "end": 1387,
                    "matchedPaperCorpusId": "41674708"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.37109375
        },
        {
            "corpus_id": "59181988",
            "title": "Using Technology in the Computer Science Classroom: Using a Scriptable Game-engine for Teaching Artificial Intelligence",
            "text": "The conditions of clean concepts, the simple object model, visualisation and interaction satisfy the requirements of supportive tools for understanding (Bransford et al., 2000, p. 215). The conditions of easy transition, ease of use and the necessary integrated tools provide the requirements for supportive tools for real-world implementation (Bransford et al., 2000, pp. 207-209). Programming provides immediate feedback to the student, which is a major requirement for active learning (Bransford et al., 2000, pp. 12,19). K\u00f6lling (1999b) states that a good programming environment provides immediate feedback and reward to students and represents the most powerful support a teacher can wish for, \"Every teaching environment should try to create this sense of fun through interactivity and immediacy.\" K\u00f6lling and Rosenberg (2001) provide constructivist guidelines for teaching programmers to continuously build upon their knowledge: objects must be explained first, followed by filling in blanks in existing programs, adding new methods and classes and then finally developing a project from scratch. The importance of visualising the program structure and careful consideration of the user interface for interaction are also stressed (K\u00f6lling & Rosenberg, 2001). Naps et al. (2002) provide an overview of the best practices specific for visualisation of algorithms: 1. Help students interpret the visualisation and its relation to the program elements. \n\n2. Adapt to their knowledge level. \n\n3. Provide multiple views, ideally a simultaneous visualisation and stepwise code view of the algorithm. 4. Provide performance information of the algorithms. 5. Support flexible execution controls such as play, stop and pause. 6. Support learner built visualisations to gain insight and a sense of responsibility. 7. Support for custom input data sets. \n\nThere exists a perception that the visualisation that might incur too much additional overhead (Naps et al., 2002). From all the above discussion, it would be ideal if the students can use a real-world context tool for their problemimplementations and that the tool provides built-in interactive visualisation capabilities to enhance understanding. If it can provide feedback to the students, they themselves and the lecturer can gauge their level of understanding. \n\nScriptable game-engines, as supportive technology for computer science teaching are now presented.",
            "score": 0.37955109953353117,
            "section_title": "Supportive Technology and Computer Science Teaching",
            "char_start_offset": 12823,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 185
                },
                {
                    "start": 186,
                    "end": 382
                },
                {
                    "start": 383,
                    "end": 524
                },
                {
                    "start": 525,
                    "end": 804
                },
                {
                    "start": 805,
                    "end": 1104
                },
                {
                    "start": 1105,
                    "end": 1267
                },
                {
                    "start": 1268,
                    "end": 1457
                },
                {
                    "start": 1460,
                    "end": 1494
                },
                {
                    "start": 1497,
                    "end": 1601
                },
                {
                    "start": 1602,
                    "end": 1724
                },
                {
                    "start": 1725,
                    "end": 1811
                },
                {
                    "start": 1812,
                    "end": 1850
                },
                {
                    "start": 1853,
                    "end": 1968
                },
                {
                    "start": 1969,
                    "end": 2201
                },
                {
                    "start": 2202,
                    "end": 2318
                },
                {
                    "start": 2321,
                    "end": 2419
                }
            ],
            "ref_mentions": [
                {
                    "start": 525,
                    "end": 540,
                    "matchedPaperCorpusId": "15702105"
                },
                {
                    "start": 805,
                    "end": 833,
                    "matchedPaperCorpusId": "8897725"
                },
                {
                    "start": 1239,
                    "end": 1266,
                    "matchedPaperCorpusId": "8897725"
                },
                {
                    "start": 1268,
                    "end": 1286,
                    "matchedPaperCorpusId": "1555643"
                },
                {
                    "start": 1948,
                    "end": 1967,
                    "matchedPaperCorpusId": "1555643"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.3916015625
        },
        {
            "corpus_id": "255699199",
            "title": "Shoot2Learn: Fix-and-Play Educational Game for Learning Programming; Enhancing Student Engagement by Mixing Game Playing and Game Programming",
            "text": "Program visualization tools are designed to engage the students by visualizing the effects of each line of the code using graphics and animations (Fouh et al., 2012). This will help the student to formulate his own mental model of how a program is being executed in a notional machine. The term \"notional machine\" was coined by du Boulay et al. (1981) to denote the high-level abstraction of the hardware and software features of a computing agent, which includes, the compiler, OS, RAM, CPU, and I/O systems. This type of mental model is required for a programmer to comprehend the structure and dynamics of the underlying execution agent of their program. Jeliot's family of tools is considered one of the most-studied PV tools (Jeliot 3,n.d.). \n\nAlgorithm animation tools are used to visualize data movements in complex algorithms and are generally used in CS2 courses. Comprehensive reviews of visualization tools are given in (Hundhausen et al., 2002;Price et al., 1993;Saito et al., 2017). A few past research indicated that PV alone is not sufficient to support learning programming (Naps et al., 2003;Pears & Rogalli, 2011). \n\nSyntax-free, block-based, drag-and-drop microworlds Papert (1980) argues that the programming languages should be not only simple and entertaining for the students to learn (\"low-floor\"), but also powerful enough for the practitioners to build complex useful systems (\"high-ceilings\"). However, in general, popular programming languages have unusual syntax and complex semantics. One of the challenges in learning programming is understanding the semantics of different language constructs and their syntaxes. Without this comprehensive knowledge, devising and implementing a solution to a considerably complex problem will be challenging. Drag-and-Drop visual programming environments like Alice, Scratch, and App-Inventor (Turbak et al., 2014) are designed to address this difficulty-they allow a novice learner to develop problem-solving skills without being hindered by the complexities of syntax and semantics of the programming language. Students need not worry about the properties of the underlying notional machine.",
            "score": 0.37955109953353117,
            "section_title": "Program visualization (PV) / Algorithm animation (AA)",
            "char_start_offset": 8146,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 166
                },
                {
                    "start": 167,
                    "end": 285
                },
                {
                    "start": 286,
                    "end": 509
                },
                {
                    "start": 510,
                    "end": 657
                },
                {
                    "start": 658,
                    "end": 746
                },
                {
                    "start": 749,
                    "end": 872
                },
                {
                    "start": 873,
                    "end": 995
                },
                {
                    "start": 996,
                    "end": 1132
                },
                {
                    "start": 1135,
                    "end": 1420
                },
                {
                    "start": 1421,
                    "end": 1514
                },
                {
                    "start": 1515,
                    "end": 1644
                },
                {
                    "start": 1645,
                    "end": 1774
                },
                {
                    "start": 1775,
                    "end": 2078
                },
                {
                    "start": 2079,
                    "end": 2159
                }
            ],
            "ref_mentions": [
                {
                    "start": 146,
                    "end": 165,
                    "matchedPaperCorpusId": "1212293"
                },
                {
                    "start": 331,
                    "end": 351,
                    "matchedPaperCorpusId": "38215294"
                },
                {
                    "start": 931,
                    "end": 956,
                    "matchedPaperCorpusId": "270116183"
                },
                {
                    "start": 956,
                    "end": 975,
                    "matchedPaperCorpusId": "3163293"
                },
                {
                    "start": 975,
                    "end": 994,
                    "matchedPaperCorpusId": "28314150"
                },
                {
                    "start": 1090,
                    "end": 1109,
                    "matchedPaperCorpusId": "1555643"
                },
                {
                    "start": 1109,
                    "end": 1131,
                    "matchedPaperCorpusId": "25527478"
                },
                {
                    "start": 1859,
                    "end": 1880,
                    "matchedPaperCorpusId": "61427297"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.716796875
        },
        {
            "corpus_id": "274390000",
            "title": "Students' Visualisations of Programming Concepts: An Exploratory Analysis",
            "text": "This study explores the intuitive visualisations of code created by novice programming students with the aim of uncovering how these reflect their understanding of fundamental programming concepts. Through a thematic analysis of student drawings, this exploratory research identifies common themes and categorises different modes of visual expression. The findings reveal great variations in how students can visualise code, and suggest that drawings can serve as an effective tool for both diagnosing student misconceptions and supporting their learning of programming. This study highlights the potential of incorporating visual exercises into programming education to improve concept comprehension.",
            "score": 0.37955109953353117,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.74853515625
        },
        {
            "corpus_id": "216202070",
            "title": "Web Application to Support the Learning of Programming Through the Graphic Visualization of Programs",
            "text": "This paper presented a web application to support the learning of programming, which allows students to graphically visualize through animations the execution of programs written in the Java programming language. The web application supports the understanding of programs and understanding of the basic concepts of programming, such as declaration of variables, assignment of values to variables, use of control structures, and calls to methods with parameters. \n\nIt was carried out a comparative analysis of tools similar to the web application presented, and the most relevant features for the visualization of programs were highlighted. The implementation of the application was also presented, where its architecture and the three systems that composed it were explained: data collection, data processing and data representation. \n\nThe operation of the web application was illustrated through three programs, for which its execution was graphically visualized. It is important to emphasize that the step by step execution of a program helps the student to understand it, because while it is displayed graphically in the web application, the instruction that is being executed in the source code is also shown. \n\nFurther work is required to develop an assessment instrument to formally apply it to students of introductory courses of programming, with the aim of assessing their opinion about the use of the web application that was presented in this paper. Once the instrument is applied to students, the application will be improved according to the feedback received. Additionally, work is being carried out in the web application to develop an interpreter to execute programs written in the C programming language, which will also be graphically visualized.",
            "score": 0.37955109953353117,
            "section_title": "Conclusions and Future Work",
            "char_start_offset": 31478,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 212
                },
                {
                    "start": 213,
                    "end": 461
                },
                {
                    "start": 464,
                    "end": 639
                },
                {
                    "start": 640,
                    "end": 833
                },
                {
                    "start": 836,
                    "end": 964
                },
                {
                    "start": 965,
                    "end": 1213
                },
                {
                    "start": 1216,
                    "end": 1460
                },
                {
                    "start": 1461,
                    "end": 1573
                },
                {
                    "start": 1574,
                    "end": 1764
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.82666015625
        },
        {
            "corpus_id": "259562741",
            "title": "Analysis of the learning object-oriented programming factors",
            "text": "According to Robins [11], students often encounter challenges in the form of success/failure rates as well as the complexity of programming (such as the code, the object, the model, and the display) when enrolling in programming courses. However, there are effective and innovative approaches to teaching programming skills that motivate novice students to learn programming while also adding value to the teaching process. There are many learning tools for graphical programming, which is more appealing than textual programming. As college students are at an age where they can start learning how to program and solve problems, these tools have been proposed as part of university learning methods [12]. \n\nIn general, logic is the most crucial aspect of the programming process, and it is also the first step in the creation of a complete program. Many high-level languages, such as Java, C++, and Arduino, have similar syntactic and semantic rules. However, writing programs in a specific programming language requires that the programmer be familiar with the language's structure and be able to recall certain concepts. While the complex syntax of programming languages may be easy for experts to understand, it offers no instructional benefit to beginners. As a result, many students struggle to grasp basic concepts, such as object-oriented management or the development of an algorithm to solve a problem. \n\nThe challenges that students face when learning object-oriented programming have led to the development of various educational programming environments in recent years. The design of these environments is a crucial topic as it can impact the success of students' learning. Hence, this research aims to explore the factors that educational programming environments possess to enhance students' learning outcomes and identify the main factors that should be considered in any learning environment for object-oriented programming. \n\nMackin [13] claims that the turtle graphics library is included in the logo programming language. Papert's theory on mathematics teaching inspired this logo-based effort, so Turtle graphics are often used in introductory computer science courses. The process of sketching on paper with a pen served as a point of comparison for the physical and graphical models that were the basis for the design of the turtle graphics, making the concept easy for students to understand.",
            "score": 0.3792412689846246,
            "section_title": "PROGRAMMING LANGUAGE ISSUES AND CHALLENGES",
            "char_start_offset": 2040,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 237
                },
                {
                    "start": 238,
                    "end": 423
                },
                {
                    "start": 424,
                    "end": 530
                },
                {
                    "start": 531,
                    "end": 705
                },
                {
                    "start": 708,
                    "end": 849
                },
                {
                    "start": 850,
                    "end": 951
                },
                {
                    "start": 952,
                    "end": 1123
                },
                {
                    "start": 1124,
                    "end": 1261
                },
                {
                    "start": 1262,
                    "end": 1412
                },
                {
                    "start": 1415,
                    "end": 1583
                },
                {
                    "start": 1584,
                    "end": 1687
                },
                {
                    "start": 1688,
                    "end": 1942
                },
                {
                    "start": 1945,
                    "end": 2042
                },
                {
                    "start": 2043,
                    "end": 2191
                },
                {
                    "start": 2192,
                    "end": 2417
                }
            ],
            "ref_mentions": [
                {
                    "start": 700,
                    "end": 704,
                    "matchedPaperCorpusId": "240004039"
                },
                {
                    "start": 1952,
                    "end": 1956,
                    "matchedPaperCorpusId": "59603519"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.53271484375
        },
        {
            "corpus_id": "258950063",
            "title": "Prototype of a Recommendation Model with Artificial Intelligence for Computational Thinking Improvement of Secondary Education Students",
            "text": "The PrimaryCode (https://sites.google.com/view/primarycode-v3-english/inicio?pli=1 (accessed on 24 May 2023)) visual execution environment (VEE) proposed in this paper utilizes pre-established Java or Scratch programs for each of the proposed lessons. It is a Java-based application that can be installed on any PC (independently of its operating system). Using pre-established coding environments, such as this one, prevents syntax errors, and there is a guide to cover programming concepts incrementally (from easy to difficult). Such environments make novice programmers feel confident while learning. \n\nAccording to the Fogg model [42], the three elements designed to change human behavior are motivation (towards acting either for rewards, recognition, fear, pleasure, etc.), skill (the difficulty level experienced in carrying out the deed), and the trigger (the agent that causes the action). This VEE provides for a dynamic where these three elements converge at the same time, a successful teaching-learning strategy for new concepts, which in this instance includes those related to an introduction to a programming course. \n\nThe Mishra and Koehler TPACK model [43] serves as a foundation for the VEE's integration of required knowledge and the creation of a practical tool for teaching programming concepts [44]. TPACK identifies the areas in which technology is consistently incorporated into instruction and the pupil's learning experience is improved. Three fields of knowledge converge in this area: content knowledge (programming ideas), pedagogical knowledge (visualization of the script execution and on the other parts of the PC, such as the screen, the memory, the files, etc.), and technological knowledge (executing scripts with Java and Scratch). TPACK is located at the confluence of the three areas, as shown in Figure 1. \n\nprogramming subject [41] with a programming course in undergraduate degrees. Results showed good reliability for Scratch and Tableau, and the use of visual and interactive programming pedagogies increased the interest of novice and non-technical students in learning technology [41].",
            "score": 0.3790556260892042,
            "section_title": "Visual Execution Environment",
            "char_start_offset": 9491,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 251
                },
                {
                    "start": 252,
                    "end": 355
                },
                {
                    "start": 356,
                    "end": 531
                },
                {
                    "start": 532,
                    "end": 604
                },
                {
                    "start": 607,
                    "end": 899
                },
                {
                    "start": 900,
                    "end": 1133
                },
                {
                    "start": 1136,
                    "end": 1323
                },
                {
                    "start": 1324,
                    "end": 1465
                },
                {
                    "start": 1466,
                    "end": 1769
                },
                {
                    "start": 1770,
                    "end": 1846
                },
                {
                    "start": 1849,
                    "end": 1925
                },
                {
                    "start": 1926,
                    "end": 2132
                }
            ],
            "ref_mentions": [
                {
                    "start": 635,
                    "end": 639,
                    "matchedPaperCorpusId": "1659386"
                },
                {
                    "start": 1171,
                    "end": 1175,
                    "matchedPaperCorpusId": "269381324"
                },
                {
                    "start": 1869,
                    "end": 1873,
                    "matchedPaperCorpusId": "225246451"
                },
                {
                    "start": 2127,
                    "end": 2131,
                    "matchedPaperCorpusId": "225246451"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.447998046875
        },
        {
            "corpus_id": "5015407",
            "title": "Teaching GUI-Programming Concepts to Prospective K12 ICT Teachers: MIT App Inventor as an Alternative to Text-Based Languages",
            "text": "Many universities still follow the conventional programming curriculum that suggests the use of text-based languages in usually the imperative, procedural or object-oriented paradigms for the development of desktop console applications, in order to introduce novice students to programming. Considering this, and under the light of the information regarding GUI-first notion, one might think there might be an alternative use for the App Inventor generation of educational tools. That is, using these in the second course that follows up the first -conventional\u2016 programming course. This way, students may perhaps have a smoother transition from the console to the GUI and from procedural to object-oriented, thanks to simple GUI designer, visual block components of programming and the motivation brought in by smart mobile devices. This approach may even help reclaim students who have stumbled in the initial course due to the difficulties of using a text-based language and/or losing interest in the course due to finding the console applications irrelevant to the real world. There may also be an added benefit of instilling a broader perspective of programming to students by providing them the means to transfer their initial learning (in console applications, with text based languages) to a different environment (GUI applications, visual languages). \n\nHowever, current literature tells that text-based languages used in programming courses at the university level are chosen as a result of evaluations that rely largely on the criterion of software industry preferences, due to employment concerns. It is a fact that the industry favors text-based languages over others. Another fact is that visual block-based programming languages are considered to be -too simple\u2016 by relatively successful students (Kasurinen, Purmonen, & Nikula, 2008). These may be considered elements that may negatively affect student motivation in a course that uses a visual, blocks-based language. Therefore, factors such as prior knowledge or experience in programming may further influence student performance in a class that uses visual languages and this fact needs to be considered in research efforts. Research also needs to focus on reasons for adoption/rejection of a certain blocks-based language by students.",
            "score": 0.37858325183175834,
            "section_title": "MIT App Inventor: Not as an Initial but as a Secondary Tool",
            "char_start_offset": 11960,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 290
                },
                {
                    "start": 291,
                    "end": 479
                },
                {
                    "start": 480,
                    "end": 582
                },
                {
                    "start": 583,
                    "end": 833
                },
                {
                    "start": 834,
                    "end": 1080
                },
                {
                    "start": 1081,
                    "end": 1359
                },
                {
                    "start": 1362,
                    "end": 1608
                },
                {
                    "start": 1609,
                    "end": 1680
                },
                {
                    "start": 1681,
                    "end": 1849
                },
                {
                    "start": 1850,
                    "end": 1983
                },
                {
                    "start": 1984,
                    "end": 2193
                },
                {
                    "start": 2194,
                    "end": 2304
                }
            ],
            "ref_mentions": [
                {
                    "start": 1811,
                    "end": 1848,
                    "matchedPaperCorpusId": "15751668"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.71044921875
        },
        {
            "corpus_id": "270620622",
            "title": "VDebugger: Harnessing Execution Feedback for Debugging Visual Programs",
            "text": "We hereby discuss the potential limitations of our work: \n\n(1) In this work, our critic model can provide basic explanations of identified errors by predicting errors locations. However, human programmers may benefit from more detailed explanations in natural language. The automatic collection of such text-rich description is very challenging. Therefore, obtaining expert annotations would be a valu-able though costly future step to enhance the interpretability of the debugging process. \n\n(2) Our work mainly focuses on established tasks such as visual question answering and visual grounding. While these tasks demonstrate the effectiveness of our framework, real-world applications often require systems to interact dynamically with humans, respond to open-ended questions, and perform on-demand reasoning. Although our current work does not directly address these complex, real-world scenarios, we believe our method is generic framework that can be adapted for such applications. Exploring the application of our selfdebugging method to more in-the-wild and diverse scenarios is an exciting direction for future research. \n\n(3) Following prior work (Gupta and Kembhavi, 2023;Sur\u00eds et al., 2023), our method utilizes a text-only language model (LLM) to generate visual programs, which may introduce limitations to its capabilities. Incorporating visual information and/or jointly training the debugger with foundational VLMs could be a valuable direction for future research, potentially further enhancing its self-critic capabilities. \n\nVisual programming and end-to-end VLMs are two different approaches to visual reasoning. Visual programming invokes multiple foundation VLMs through code, while end-to-end VLMs directly take an image as input and generate texts as output. Despite their seemingly different methodologies, visual programming is a complementary technique that can be combined with end-to-end VLMs to offer additional benefits. Firstly, visual programming can integrate with more powerful VLMs to further enhance performance as shown in Table 8. Secondly, despite the rapid development of endto-end VLMs, they still have difficulty reasoning with compositional concepts such as counting and spatial relationship. Visual programming offer benefits in tasks like such as compositional reasoning, counting, and enhancing interpretability.",
            "score": 0.37829183329324756,
            "section_title": "Limitations",
            "char_start_offset": 22667,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 56
                },
                {
                    "start": 59,
                    "end": 177
                },
                {
                    "start": 178,
                    "end": 269
                },
                {
                    "start": 270,
                    "end": 345
                },
                {
                    "start": 346,
                    "end": 490
                },
                {
                    "start": 493,
                    "end": 597
                },
                {
                    "start": 598,
                    "end": 812
                },
                {
                    "start": 813,
                    "end": 987
                },
                {
                    "start": 988,
                    "end": 1129
                },
                {
                    "start": 1132,
                    "end": 1338
                },
                {
                    "start": 1339,
                    "end": 1542
                },
                {
                    "start": 1545,
                    "end": 1633
                },
                {
                    "start": 1634,
                    "end": 1783
                },
                {
                    "start": 1784,
                    "end": 1952
                },
                {
                    "start": 1953,
                    "end": 2070
                },
                {
                    "start": 2071,
                    "end": 2237
                },
                {
                    "start": 2238,
                    "end": 2360
                }
            ],
            "ref_mentions": [
                {
                    "start": 1157,
                    "end": 1183,
                    "matchedPaperCorpusId": "253734854"
                },
                {
                    "start": 1183,
                    "end": 1202,
                    "matchedPaperCorpusId": "257505358"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.80712890625
        },
        {
            "corpus_id": "224877240",
            "title": "Exploring the Effect of Training in Visual Block Programming for Preservice Teachers",
            "text": "Visual programming languages, specifically Scratch, solve many problems related to the difficulties of introducing programming into educational contexts [19]. Scratch allows a simple and attractive introduction to programming and avoids the difficulties posed by classic textual programming languages [20]. In this context, a study providing detailed evidence related to the integration of visual block programming as combined tools in areas framed in the current curriculum is therefore of great interest. Brennan and Resnick [21] pointed out the main activities to be included in the design of learning environments related to constructionism, which are based on the belief that the most effective learning experiences are related to active construction, socially significant elements [14,22], interactions, and elements supporting reflection [14,23]. \n\nSeveral studies have found positive results related to attitudes towards computer science [24][25][26] and the improvement of skills related to computational concepts [27,28]. Israel, Pearson, Tapia, Wherfel, and Reese [29] argued that research concerning teaching practices indicates that teachers who were initially skeptical about programming implementation, in the end, considered that the Scratch application was really valuable and accessible; something that has also been argued by other authors [30]. \n\nIn a study with elementary students, S\u00e1ez-L\u00f3pez et al. [2] reported statistically significant improvements in the understanding of computational concepts and practices due to the use of Scratch in the classroom, which suggests recommending educational authorities to implement programming in elementary educational environments. Students can approach computational practices and create their own content related to curricular areas, especially in the social sciences and arts, given the characteristics of the visual content these areas present, allowing the creation of colorful, dynamic, and motivating projects from an active perspective. These conclusions are reaffirmed in the study by [31] which demonstrated the acquisition of basic concepts of computer programming in the elementary education setting. \n\nThese investigations highlight the advantages related to student motivation, fun, commitment and enthusiasm through this pedagogical approach. Students are generally in favor of this pedagogical design, highlighting its usefulness and the active learning provided.",
            "score": 0.3760264569907081,
            "section_title": "Introduction",
            "char_start_offset": 4845,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 158
                },
                {
                    "start": 159,
                    "end": 306
                },
                {
                    "start": 307,
                    "end": 506
                },
                {
                    "start": 507,
                    "end": 853
                },
                {
                    "start": 856,
                    "end": 1031
                },
                {
                    "start": 1032,
                    "end": 1364
                },
                {
                    "start": 1367,
                    "end": 1695
                },
                {
                    "start": 1696,
                    "end": 2008
                },
                {
                    "start": 2009,
                    "end": 2176
                },
                {
                    "start": 2179,
                    "end": 2321
                },
                {
                    "start": 2322,
                    "end": 2443
                }
            ],
            "ref_mentions": [
                {
                    "start": 153,
                    "end": 157,
                    "matchedPaperCorpusId": "60903435"
                },
                {
                    "start": 791,
                    "end": 794,
                    "matchedPaperCorpusId": "41152386"
                },
                {
                    "start": 849,
                    "end": 852,
                    "matchedPaperCorpusId": "62553091"
                },
                {
                    "start": 946,
                    "end": 950,
                    "matchedPaperCorpusId": "59880291"
                },
                {
                    "start": 1023,
                    "end": 1027,
                    "matchedPaperCorpusId": "212663873"
                },
                {
                    "start": 1075,
                    "end": 1079,
                    "matchedPaperCorpusId": "31980722"
                },
                {
                    "start": 1359,
                    "end": 1363,
                    "matchedPaperCorpusId": "57920371"
                },
                {
                    "start": 1422,
                    "end": 1425,
                    "matchedPaperCorpusId": "27633066"
                },
                {
                    "start": 2058,
                    "end": 2062,
                    "matchedPaperCorpusId": "151413422"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.81201171875
        },
        {
            "corpus_id": "264246440",
            "title": "Development and Evaluation of Functions for Elementary/Secondary Programming Education: The Visual Programming Environment \u201cAT\u201d",
            "text": "The Japanese government has recently addressed the issue of promoting programming education in elementary/secondary education to develop students\u2019 ability to utilize information. The curriculum guidelines for junior high school and high school, published by the Japanese government, also include programming education for understanding measurement/control systems and developing problem-solving ability. This study developed a visual programming environment called AT, which was implemented in programming classes for novices in some universities and a technical college. With the objective of introducing the AT environment into elementary/secondary programming education, this study also developed some functionalities of AT that offer users intuitive operation capabilities on tablet devices for AT\u2019s editor. We conducted a survey for evaluating the intuitive operation in an actual classroom, and the usability and comprehensibility of the editor were highly evaluated by the students.",
            "score": 0.375857175152596,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8291015625
        },
        {
            "corpus_id": "244060650",
            "title": "Programming by Blocks",
            "text": "To start learning to program it is necessary to make an analysis of the development environment as well as the programming language, to know which would be the most viable for students to interact within this process and learn in the best way. For example, for Revell \"A typical text-based programming language makes the programmer think like a computer, a visual programming language allows the programmer to describe it as a collection of graphics intended to solve an event\" [Revell, 2018]. \n\nVisual programming languages allow people using this methodology to have a more graphical way to solve problems, using programming elements that can be displayed as images or words in a development environment as Boshernitsan and Downes (2004), point out \"such languages are characterized by their reliance on visual techniques throughout the programming process. The programmer manipulates icons or other graphical representations to create a program, which is then debugged and executed in the same visual environment\". This workshop introduces the main programming concepts using a graphical language such as Scratch, which is explained in Section 1.3, and to achieve this, the computational thinking explained in Section 1.2 is applied 1.5. Wing (2006) indicates that the \"Computational thinking involves problem solving, system design and understanding of human behavior using the fundamental concepts of computer science\". To implement its resolution, computer science resorts to the area of programming, which is the necessary set of instructions given to a machine to be able to perform a specific task. Unlike digital literacy, which involves acquiring a series of basic skills in the use of hardware and software, languages and new forms of communication, digital literacy is not a new skill [UNESCO, 2021].",
            "score": 0.375857175152596,
            "section_title": "Introduction to programming",
            "char_start_offset": 30,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 243
                },
                {
                    "start": 244,
                    "end": 493
                },
                {
                    "start": 496,
                    "end": 859
                },
                {
                    "start": 860,
                    "end": 1017
                },
                {
                    "start": 1018,
                    "end": 1240
                },
                {
                    "start": 1241,
                    "end": 1424
                },
                {
                    "start": 1425,
                    "end": 1607
                },
                {
                    "start": 1608,
                    "end": 1813
                }
            ],
            "ref_mentions": [
                {
                    "start": 478,
                    "end": 492,
                    "matchedPaperCorpusId": "59670739"
                },
                {
                    "start": 1241,
                    "end": 1252,
                    "matchedPaperCorpusId": "41391768"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.87158203125
        },
        {
            "corpus_id": "14340047",
            "title": "Programmatic and direct manipulation, together at last",
            "text": "In a recent position paper [12], we provided a broad overview of relevant program synthesis (e.g. [23,24,31]), programming by example (e.g. [1,18,26]), and bidirectional programming techniques (e.g. [22]). Here, we focus our discussion on projects related to vector graphics. \n\nSeveral projects use programming languages, direct manipulation interfaces [29], or some combination to provide expressive means for manipulating visual output. We classify them using the following interaction modes identified by Bret Victor in a talk on drawing tools [7]: \"Use\" for using built-in functionality through menus and buttons; \"Draw\" for directly manipulating domain objects; and \"Code\" for writing programs that manipulate domain objects. \n\nDynamic Drawing (Use + Draw). Victor's prototype interactive drawing editor [7], Apparatus [34], and Programming by Manipulation [21] provide expressive direct manipulation capabilities that serve as a way to build programs in restricted, domain-specific languages. By design, these tools tend to prohibit or discourage the user from manipulating content via the \"indirect\" mechanism of code. \n\nAlthough this choice may be desirable for many application domains and end users, we believe there are limits to what can be accomplished using features and transformations provided by any tool. Therefore, our work targets users who wish to work both via direct and programmatic manipulation (i.e. Draw + Code). \n\nPrograms that Generate Graphics (Code). Processing [3] is a language and environment for generating visual output that has been popular both in classroom and commercial settings. Follow-on projects, such as Processing.js [28], provide similar development environments for Web programming. These systems provide immediate and interactive output, but they do not provide ways to directly manipulate output in order to modify the program that generated it. \n\nGUIs that Generate Programs (Draw + Code). Graphical user interfaces (GUIs) for creating visual output in many domains often generate \"code behind\" what the user directly manipulates. Such tools include PaintCode [27], DrawScript [15], SVG-edit [33], and Adobe Fireworks for graphic design.",
            "score": 0.3755352986588484,
            "section_title": "Related Work",
            "char_start_offset": 48154,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 97
                },
                {
                    "start": 98,
                    "end": 139
                },
                {
                    "start": 140,
                    "end": 198
                },
                {
                    "start": 199,
                    "end": 205
                },
                {
                    "start": 206,
                    "end": 275
                },
                {
                    "start": 278,
                    "end": 438
                },
                {
                    "start": 439,
                    "end": 730
                },
                {
                    "start": 733,
                    "end": 762
                },
                {
                    "start": 763,
                    "end": 998
                },
                {
                    "start": 999,
                    "end": 1125
                },
                {
                    "start": 1128,
                    "end": 1322
                },
                {
                    "start": 1323,
                    "end": 1425
                },
                {
                    "start": 1426,
                    "end": 1439
                },
                {
                    "start": 1442,
                    "end": 1481
                },
                {
                    "start": 1482,
                    "end": 1620
                },
                {
                    "start": 1621,
                    "end": 1662
                },
                {
                    "start": 1663,
                    "end": 1730
                },
                {
                    "start": 1731,
                    "end": 1895
                },
                {
                    "start": 1898,
                    "end": 1940
                },
                {
                    "start": 1941,
                    "end": 2081
                },
                {
                    "start": 2082,
                    "end": 2188
                }
            ],
            "ref_mentions": [
                {
                    "start": 27,
                    "end": 31,
                    "matchedPaperCorpusId": "9391753"
                },
                {
                    "start": 98,
                    "end": 102,
                    "matchedPaperCorpusId": "5893736"
                },
                {
                    "start": 102,
                    "end": 105,
                    "matchedPaperCorpusId": "8795162"
                },
                {
                    "start": 105,
                    "end": 108,
                    "matchedPaperCorpusId": "12707986"
                },
                {
                    "start": 140,
                    "end": 143,
                    "matchedPaperCorpusId": "16414501"
                },
                {
                    "start": 146,
                    "end": 149,
                    "matchedPaperCorpusId": "6544598"
                },
                {
                    "start": 353,
                    "end": 357,
                    "matchedPaperCorpusId": "14942172"
                },
                {
                    "start": 862,
                    "end": 866,
                    "matchedPaperCorpusId": "14162941"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.76171875
        },
        {
            "corpus_id": "269747039",
            "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models",
            "text": "Visual programming interfaces (VPIs) have been extensively studied as tools to aid users in designing and implementing systems through graphical elements rather than text-based code [31].A key benefit of VPIs is their lower entry barrier for novice programmers [45].There are primarily two main paradigms for VPIs.The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph.Pioneering work in this area includes Prograph [17] and LabVIEW [27].The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together.Notable works in this area include Scratch [35] and Blockly [19].Many commercial creative applications have adopted VPIs, including game engines such as Unity [11], CAD tools such as Grasshopper [9], and multimedia development tools such as Max/MSP [12].\n\nVPI concepts have been applied to machine learning applications.For example, Teachable Machine [15] uses a visual interface to help students learn to train a machine learning model.ML Blocks [46] assists developers in training, evaluating, and exporting machine learning model architectures.Very recently, researchers in both academia and industry have worked on VPIs that support the creation of AI workflows through the combination of pre-trained models.Several works have investigated node-based interfaces for building Large Language Model (LLM) pipelines, including PromptChainer [48], FlowiseAI [2], and Langflow [3].Most closely related to our work are Rapsai by Du et al. [18] and ComfyUI [1].Both tools provide a node-based interface for machine learning researchers and enthusiasts to build multimedia machine learning pipelines.These tools are catered more toward users with at least some background knowledge in AI programming, giving users the flexibility to customize the tools through programming at the expense of exposing more technical elements to the user.\n\nOur work builds upon prior and concurrent VPI tools and research.However, we made several design choices for our tool to help better support non-technical designers (Table 1).First, our tool leverages a block-based VPI paradigm, which has been shown to be effective in supporting novice programming learners [35].",
            "score": 0.3745341611864952,
            "section_title": "Visual Programming Interfaces",
            "char_start_offset": 6517,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 187
                },
                {
                    "start": 187,
                    "end": 266
                },
                {
                    "start": 266,
                    "end": 314
                },
                {
                    "start": 314,
                    "end": 455
                },
                {
                    "start": 455,
                    "end": 524
                },
                {
                    "start": 524,
                    "end": 666
                },
                {
                    "start": 666,
                    "end": 731
                },
                {
                    "start": 731,
                    "end": 920
                },
                {
                    "start": 922,
                    "end": 986
                },
                {
                    "start": 986,
                    "end": 1103
                },
                {
                    "start": 1103,
                    "end": 1213
                },
                {
                    "start": 1213,
                    "end": 1378
                },
                {
                    "start": 1378,
                    "end": 1545
                },
                {
                    "start": 1545,
                    "end": 1623
                },
                {
                    "start": 1623,
                    "end": 1761
                },
                {
                    "start": 1761,
                    "end": 1997
                },
                {
                    "start": 1999,
                    "end": 2064
                },
                {
                    "start": 2064,
                    "end": 2174
                },
                {
                    "start": 2174,
                    "end": 2312
                }
            ],
            "ref_mentions": [
                {
                    "start": 182,
                    "end": 186,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 261,
                    "end": 265,
                    "matchedPaperCorpusId": "18983760"
                },
                {
                    "start": 502,
                    "end": 506,
                    "matchedPaperCorpusId": "9693598"
                },
                {
                    "start": 1017,
                    "end": 1021,
                    "matchedPaperCorpusId": "218482766"
                },
                {
                    "start": 1113,
                    "end": 1117,
                    "matchedPaperCorpusId": "251662411"
                },
                {
                    "start": 1507,
                    "end": 1511,
                    "matchedPaperCorpusId": "247447133"
                },
                {
                    "start": 1602,
                    "end": 1606,
                    "matchedPaperCorpusId": "258216977"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9384765625
        },
        {
            "corpus_id": "249297813",
            "title": "Collaborative learning with block-based programming: investigating human-centered artificial intelligence in education",
            "text": "There is a growing recognition that computing is an essential skill for all students to master, and consequently block-based programming and computer science courses have entered school curricula in many countries (M\u00f8rch, Litherland, and Andersen 2019;Weintrop and Wilensky 2017). Block-based programming relates to visual programming, which became a niche area of programming language research in the mid-1980s, following the invention of graphical user interfaces. Two pioneering visual programming environments were Fabrik (Ingalls et al. 1988) and BLOX (Kopache and Glinert 1988), which made it easier for non-expert and disabled users to learn textual programming (Smalltalk, Pascal, or C) using direct manipulation interfaces (drag-and-drop programme structures analogous to solving a jigsaw puzzle or building with LEGO). Corral, Fronza, and Pahl (2021) presented a recent overview of block-based programming as a tool during the past 10 years. They defined blockbased programming as languages and tools that allow non-professional users to create working software products with little knowledge of the structure and syntax of a regular programming language. One of their arguments is that block-based programming democratises software development by enabling the creation of software products by non-expert programmers, from elementary school pupils who create software products as part of their education to professionals. \n\nWith increased access to online programming environments since the millennium, visual programming has reached non-professional communities through hobbies and entertainment (e.g. creating video games and animations). Further innovations in user interfaces for editing code, software tools, and environments that run in the browser are important success factors (Resnick et al. 2009). Another success factor is the availability of an online repository of examples (source code and applications) created by peers. Today, block-based programming environments typically serve as students' introduction to the practice of programming (Weintrop and Wilensky 2017). Scratch is one of the most popular block-based programming languages (Brennan and Resnick 2012;Resnick et al. 2009;Zhang and Nouri 2019). It is known to 'lower the floor' to programming.",
            "score": 0.3738127651449265,
            "section_title": "Block-based programming: an overview",
            "char_start_offset": 6552,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 280
                },
                {
                    "start": 281,
                    "end": 466
                },
                {
                    "start": 467,
                    "end": 828
                },
                {
                    "start": 829,
                    "end": 951
                },
                {
                    "start": 952,
                    "end": 1165
                },
                {
                    "start": 1166,
                    "end": 1431
                },
                {
                    "start": 1434,
                    "end": 1612
                },
                {
                    "start": 1613,
                    "end": 1650
                },
                {
                    "start": 1651,
                    "end": 1817
                },
                {
                    "start": 1818,
                    "end": 1945
                },
                {
                    "start": 1946,
                    "end": 2092
                },
                {
                    "start": 2093,
                    "end": 2230
                },
                {
                    "start": 2231,
                    "end": 2279
                }
            ],
            "ref_mentions": [
                {
                    "start": 214,
                    "end": 252,
                    "matchedPaperCorpusId": "174768966"
                },
                {
                    "start": 252,
                    "end": 279,
                    "matchedPaperCorpusId": "10976181"
                },
                {
                    "start": 526,
                    "end": 546,
                    "matchedPaperCorpusId": "2924265"
                },
                {
                    "start": 829,
                    "end": 860,
                    "matchedPaperCorpusId": "237518377"
                },
                {
                    "start": 1795,
                    "end": 1816,
                    "matchedPaperCorpusId": "229934947"
                },
                {
                    "start": 2063,
                    "end": 2091,
                    "matchedPaperCorpusId": "10976181"
                },
                {
                    "start": 2188,
                    "end": 2208,
                    "matchedPaperCorpusId": "229934947"
                },
                {
                    "start": 2208,
                    "end": 2229,
                    "matchedPaperCorpusId": "196173419"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.88427734375
        },
        {
            "corpus_id": "272053512",
            "title": "A Choice-Based Programming Learning Method to Develop Problem-Solving Skills",
            "text": "Programming is becoming a new form of literacy worldwide, and computers are widely integrated into daily life. Programming education is now offered in elementary schools as part of the development of computational thinking [1] and STEM education [2], and services to support programming learning are growing [3], [4], [5]. In addition, End-User Development (EUD) [6], [7] environments are proliferating, allowing non-computer experts to enjoy the benefits of programming. Various types of programming support are available using large language models (LLM) such as ChatGPT [8], [9]. Learning programming is becoming more critical, and the fields in which programming can be utilized are expanding. \n\nThe associate editor coordinating the review of this manuscript and approving it for publication was Antonio Piccinno . \n\nOn the other hand, novice programmers face many barriers to learning programming. Many studies have been conducted on the difficulties faced by novice programmers when learning programming. In most previous studies, understanding the abstract concepts and syntax necessary for programming, designing programs to solve problems, and analyzing problems are often cited as difficulties for them [10], [11], [12], [13], [14], [15]. Our study focuses on the problem-solving skills of novice programmers in programming. Problem-solving skills are crucial in learning programming [16], [17]. The problem-solving process in programming generally involves four steps: understanding the problem, planning a solution, implementing the solution, and testing and debugging the solution [18]. To improve problem-solving skills in programming, it is necessary to repeat the four steps through repeated trial and error. However, novice programmers are hindered by a lack of programming understanding, and troubles caused by the code, such as implementation and syntax errors, make the trial-and-error process time-consuming. \n\nThis study proposes a programming learning method that supports novice programmers' thinking processes when solving programming tasks. This method presents candidate solutions for programming tasks in natural language rather than in a program. It improves problem-solving skills in programming by allowing novice programmers to rapidly trial and error various candidates of solution alternatives for programming tasks. We implemented the proposed method as a web application that can be used from a smartphone.",
            "score": 0.3732859215580525,
            "section_title": "I. INTRODUCTION",
            "char_start_offset": 18,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 110
                },
                {
                    "start": 111,
                    "end": 322
                },
                {
                    "start": 323,
                    "end": 471
                },
                {
                    "start": 472,
                    "end": 582
                },
                {
                    "start": 583,
                    "end": 697
                },
                {
                    "start": 700,
                    "end": 819
                },
                {
                    "start": 822,
                    "end": 903
                },
                {
                    "start": 904,
                    "end": 1011
                },
                {
                    "start": 1012,
                    "end": 1249
                },
                {
                    "start": 1250,
                    "end": 1335
                },
                {
                    "start": 1336,
                    "end": 1406
                },
                {
                    "start": 1407,
                    "end": 1600
                },
                {
                    "start": 1601,
                    "end": 1725
                },
                {
                    "start": 1726,
                    "end": 1930
                },
                {
                    "start": 1933,
                    "end": 2067
                },
                {
                    "start": 2068,
                    "end": 2176
                },
                {
                    "start": 2177,
                    "end": 2351
                },
                {
                    "start": 2352,
                    "end": 2443
                }
            ],
            "ref_mentions": [
                {
                    "start": 223,
                    "end": 226,
                    "matchedPaperCorpusId": "41391768"
                },
                {
                    "start": 246,
                    "end": 249,
                    "matchedPaperCorpusId": "14430663"
                },
                {
                    "start": 363,
                    "end": 366,
                    "matchedPaperCorpusId": "15559793"
                },
                {
                    "start": 368,
                    "end": 371,
                    "matchedPaperCorpusId": "230572664"
                },
                {
                    "start": 578,
                    "end": 581,
                    "matchedPaperCorpusId": "257059818"
                },
                {
                    "start": 1214,
                    "end": 1218,
                    "matchedPaperCorpusId": "180319090"
                },
                {
                    "start": 1220,
                    "end": 1224,
                    "matchedPaperCorpusId": "6988391"
                },
                {
                    "start": 1226,
                    "end": 1230,
                    "matchedPaperCorpusId": "62075548"
                },
                {
                    "start": 1232,
                    "end": 1236,
                    "matchedPaperCorpusId": "20106328"
                },
                {
                    "start": 1238,
                    "end": 1242,
                    "matchedPaperCorpusId": "207242009"
                },
                {
                    "start": 1244,
                    "end": 1248,
                    "matchedPaperCorpusId": "1894216"
                },
                {
                    "start": 1395,
                    "end": 1399,
                    "matchedPaperCorpusId": "15626062"
                },
                {
                    "start": 1401,
                    "end": 1405,
                    "matchedPaperCorpusId": "5597326"
                },
                {
                    "start": 1595,
                    "end": 1599,
                    "matchedPaperCorpusId": "240789280"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.2254638671875
        },
        {
            "corpus_id": "202566030",
            "title": "Scenior: An Immersive Visual Scripting system of Gamified Training based on VR Software Design Patterns",
            "text": "From table 2 we identify that both programmers and non programmers asked more often for help in the generation of Action scripts than the training scenario. In addition, it is clear, regarding the implementation of Actions, programmers were more familiar with the tools and managed to complete the tasks five minutes earlier. An interesting realization is the fact that non-programmers rated the overall experience higher than the programmers although they gave lower scores on the implementation of Action Scripts. The final evaluation was for VR Editor. We introduced the new tool to the participants with a brief in the beginning to ask them later to implement two tasks. Table 3 shows some interesting results from the evaluation of VR Editor. First of all, participants asked for help in a higher rate that the Visual Scripting tool. In addition, non-programmers completed the tasks four minutes earlier using the VR Editor than the Visual scripting tool. The overall experience has similar values with the one from the Visual Scripting tool. \n\nThe next session was an open discussion about Scenior to get feedback from the participants. Some of them suggested to implement additional features on the Visual Scripting editor focusing more in the User Experience that functionality. Other participants commented on the difficulty they had to understand the interaction with some modules from VR Editor since there was not a tutorial while playing the application. In addition, some programmers complained they could not assimilate the generation of Actions through VR Editor due to the overload of information in a single window. A positive feedback we received from some non-programmers was the feeling of accomplishment when the managed to generate a simple VR application without knowing programming. Finally, some programmers mentioned they enjoyed the process of Action generation from the Visual Scripting editor due to the visualization of the complete scenario in a single window.",
            "score": 0.37312159407079154,
            "section_title": "RESULTS",
            "char_start_offset": 39674,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 156
                },
                {
                    "start": 157,
                    "end": 325
                },
                {
                    "start": 326,
                    "end": 515
                },
                {
                    "start": 516,
                    "end": 555
                },
                {
                    "start": 556,
                    "end": 674
                },
                {
                    "start": 675,
                    "end": 747
                },
                {
                    "start": 748,
                    "end": 838
                },
                {
                    "start": 839,
                    "end": 960
                },
                {
                    "start": 961,
                    "end": 1047
                },
                {
                    "start": 1050,
                    "end": 1142
                },
                {
                    "start": 1143,
                    "end": 1286
                },
                {
                    "start": 1287,
                    "end": 1467
                },
                {
                    "start": 1468,
                    "end": 1633
                },
                {
                    "start": 1634,
                    "end": 1807
                },
                {
                    "start": 1808,
                    "end": 1992
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.61962890625
        },
        {
            "corpus_id": "17525634",
            "title": "Selecting a first programming Language to Teach Prospective Teachers - Case Examples from Two Programs",
            "text": "One of the main issues that educators in introductory programming courses deal with is whether to select a programming language from the general purpose programming group or from the beginner level programming group. General purpose programming courses are those that have been used in the industry for a while such as Java, C++, Visual Basic and others. Beginner programming languages are the languages that are designed to simplify the learning of programming. They usually include tools and objects that make learning to program simpler. An example of this is the Alice programming language and Scratch. \n\nSelecting a general programming course opens the door to wider range of applications and also opens the link to simplify learning other similar general purpose programming languages. However, a beginner programming language has a distinct advantage in that is it is designed for beginners, thus it simplifies learning requirements for students.",
            "score": 0.3727406788716554,
            "section_title": "General Purpose versus Beginner Programming Courses",
            "char_start_offset": 21403,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 216
                },
                {
                    "start": 217,
                    "end": 354
                },
                {
                    "start": 355,
                    "end": 462
                },
                {
                    "start": 463,
                    "end": 540
                },
                {
                    "start": 541,
                    "end": 606
                },
                {
                    "start": 609,
                    "end": 791
                },
                {
                    "start": 792,
                    "end": 953
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.361328125
        },
        {
            "corpus_id": "248387201",
            "title": "Designing activities and tools to support university students' creative and collaborative exploration of physical computing",
            "text": "Sentance and Csizmadia (2017) observed that in schools, programming is perceived to be the most challenging aspect of computer science: students have problems with connecting the theoretical concepts to the practical applications and thinking computationally, as well as breaking problems into smaller pieces was perceived difficult. Visual programming tools have been developed to help with these challenges and aim to make programming more accessible for non-technical students. However, the differences between visual programming and traditional text-based programming are considerably extensive. Visual programming languages simplify procedures and guide the user through the creation, for example, with blocks that snap together or use colour-coding. Vihavainen, Paksula and Luukkainen (2011) noticed that a common problem when teaching text-based programming languages is that the focus is too much on learning specific syntax or semantics rather than understanding the process. When students understand the process of coding, they can construct more meaningful programs. Also, Przybylla & Romeike (2014) assert that physical computing encourages learners to use their imagination and creativity, focusing more on ideas, not on technical limitation. Physical computing takes a hands-on approach to understand computational thinking, building tangible artefacts to visualise the abstract programming concepts. \n\nProgramming and electronics are fundamental design disciplines, and therefore they should be taught through design activities rather than limiting education to textbook readings and \"cookbook\" laboratory exercises (Buechley, Eisenberg, & Elumeze, 2007). Even if the outcome does not turn out to be as hoped, students can revise their ideas and create a new version. Iversen and colleagues (2016) argue that design-based activities with tangible digital artefacts provide learners with competencies that reach beyond STEM (Science, Technology, Engineering, and Mathematics) skills. New digital tools, such as 3D printers, laser cutters, and construction kits should expand the forms of learning in classrooms enabling children to learn through the processes of constructing and thinking rather than disabling their thinking by letting them merely carry out ready planned projects. As a matter of fact, design thinking, and computational thinking are both tools for problem-solving (Bowler, 2014). \n\nLearning through design argues that students construct their knowledge by designing and creating meaningful projects and that learning is the most effective when pupils are engaged in creating a tangible artefact .",
            "score": 0.3721991141151649,
            "section_title": "Background",
            "char_start_offset": 2990,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 333
                },
                {
                    "start": 334,
                    "end": 480
                },
                {
                    "start": 481,
                    "end": 599
                },
                {
                    "start": 600,
                    "end": 755
                },
                {
                    "start": 756,
                    "end": 984
                },
                {
                    "start": 985,
                    "end": 1077
                },
                {
                    "start": 1078,
                    "end": 1255
                },
                {
                    "start": 1256,
                    "end": 1414
                },
                {
                    "start": 1417,
                    "end": 1670
                },
                {
                    "start": 1671,
                    "end": 1782
                },
                {
                    "start": 1783,
                    "end": 1997
                },
                {
                    "start": 1998,
                    "end": 2296
                },
                {
                    "start": 2297,
                    "end": 2412
                },
                {
                    "start": 2415,
                    "end": 2629
                }
            ],
            "ref_mentions": [
                {
                    "start": 756,
                    "end": 797,
                    "matchedPaperCorpusId": "3016237"
                },
                {
                    "start": 1084,
                    "end": 1110,
                    "matchedPaperCorpusId": "6485878"
                },
                {
                    "start": 1631,
                    "end": 1669,
                    "matchedPaperCorpusId": "18437979"
                },
                {
                    "start": 2397,
                    "end": 2411,
                    "matchedPaperCorpusId": "143257820"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.89111328125
        },
        {
            "corpus_id": "253179087",
            "title": "Design, development, and evaluation of a virtual reality game-based application to support computational thinking",
            "text": "As earlier explained, each of the mini games developed in the iThinkSmart VR gamebased application is specifically targeted at using visualization to teach units of learning objects in CT concepts. Visualization of introductory programming concepts has been pursued by computer science educators for over two decades (Bergin et al., 1998). This study reinforces the use of visualization in enhancing students learning experience towards building their problem-solving skills, which will, in turn, improve their programming skills. The mini games contained in iThinkSmart application include (i) River Crossing, (ii) Mount Patti Treasure Hunt (MoPaTH), and (iii) Tower of Hanoi. \n\n(1)",
            "score": 0.3721991141151649,
            "section_title": "Demonstrating iThinkSmart VR game-based application",
            "char_start_offset": 32243,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 197
                },
                {
                    "start": 198,
                    "end": 339
                },
                {
                    "start": 340,
                    "end": 530
                },
                {
                    "start": 531,
                    "end": 677
                },
                {
                    "start": 680,
                    "end": 683
                }
            ],
            "ref_mentions": [
                {
                    "start": 317,
                    "end": 338,
                    "matchedPaperCorpusId": "1761616"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.270751953125
        },
        {
            "corpus_id": "57212690",
            "title": "The Effectiveness of a Program Visualization Tool on Introductory Programming: A Case Study with PythonTutor",
            "text": "According to several works [10][11][12][13], learning programming has been proven to be a highly non-trivial task for students. Students are not only required to master considerably high computational thinking but also well-developed knowledge about programming language. Based on that reason, many educational tools have been developed to simplify student learning process, especially for novice students. These tools target various programming aspects. It may target abstraction knowledge [2], program flow [3], or program characteristics [4,5]. However, since program characteristics are considered as supplementary knowledge, the target is rarely used as the main objective of educational tools. \n\nBased on the fact that illustration may help students to recall explained information [14], most educational tools are focused on visualizing the learning material. The tools focused on visualizing abstraction knowledge is frequently referred as Algorithm Visualization (AV) [15], whereas the others that focus on visualizing program flow are referred as Program Visualization (PV) [6]. AV is an educational tool which visualizes and animates several aspects from a given algorithm based on its working mechanism [16]. VisuAlgo [2,17,18], AlgoViz [19], AP-ASD1 [20], AP-SA [21], and AP-BB [22] are several examples in this category. Some of them are developed as a web-based application to enable easy access, whereas the others are developed as a desktop-based application to enable direct use without relying on Internet connection. On the contrary, PV is an educational tool which visualizes and animates several program aspects from a given source code based on its runtime execution [6]. This tool is frequently used as a supplementary tool to Introductory Programming course [3,6,13,23]. Several examples of the tools are Jeliot 3 [7], JIVE [8], VILLE [9], and PythonTutor [3]. Among these tools, PythonTutor is the only tool designed as a web application. \n\nJeliot 3 [7] is a program visualization tool aiming at novices for learning Java programming. As the execution advances step-by-step, all variables and function calls are visualized to improve user understanding further about the given program.",
            "score": 0.3721991141151649,
            "section_title": "II. LITERATURE REVIEW",
            "char_start_offset": 2743,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 127
                },
                {
                    "start": 128,
                    "end": 271
                },
                {
                    "start": 272,
                    "end": 406
                },
                {
                    "start": 407,
                    "end": 454
                },
                {
                    "start": 455,
                    "end": 547
                },
                {
                    "start": 548,
                    "end": 699
                },
                {
                    "start": 702,
                    "end": 866
                },
                {
                    "start": 867,
                    "end": 1088
                },
                {
                    "start": 1089,
                    "end": 1220
                },
                {
                    "start": 1221,
                    "end": 1334
                },
                {
                    "start": 1335,
                    "end": 1536
                },
                {
                    "start": 1537,
                    "end": 1694
                },
                {
                    "start": 1695,
                    "end": 1795
                },
                {
                    "start": 1796,
                    "end": 1885
                },
                {
                    "start": 1886,
                    "end": 1964
                },
                {
                    "start": 1967,
                    "end": 2060
                },
                {
                    "start": 2061,
                    "end": 2211
                }
            ],
            "ref_mentions": [
                {
                    "start": 27,
                    "end": 31,
                    "matchedPaperCorpusId": "8381532"
                },
                {
                    "start": 31,
                    "end": 35,
                    "matchedPaperCorpusId": "3207419"
                },
                {
                    "start": 35,
                    "end": 39,
                    "matchedPaperCorpusId": "3171653"
                },
                {
                    "start": 39,
                    "end": 43,
                    "matchedPaperCorpusId": "58120197"
                },
                {
                    "start": 491,
                    "end": 494,
                    "matchedPaperCorpusId": "63179283"
                },
                {
                    "start": 509,
                    "end": 512,
                    "matchedPaperCorpusId": "8193806"
                },
                {
                    "start": 541,
                    "end": 544,
                    "matchedPaperCorpusId": "195973260"
                },
                {
                    "start": 788,
                    "end": 792,
                    "matchedPaperCorpusId": "36571078"
                },
                {
                    "start": 977,
                    "end": 981,
                    "matchedPaperCorpusId": "57212690"
                },
                {
                    "start": 1215,
                    "end": 1219,
                    "matchedPaperCorpusId": "207180400"
                },
                {
                    "start": 1230,
                    "end": 1233,
                    "matchedPaperCorpusId": "63179283"
                },
                {
                    "start": 1275,
                    "end": 1279,
                    "matchedPaperCorpusId": "55160332"
                },
                {
                    "start": 1291,
                    "end": 1295,
                    "matchedPaperCorpusId": "56002529"
                },
                {
                    "start": 1783,
                    "end": 1786,
                    "matchedPaperCorpusId": "8193806"
                },
                {
                    "start": 1788,
                    "end": 1791,
                    "matchedPaperCorpusId": "58120197"
                },
                {
                    "start": 1791,
                    "end": 1794,
                    "matchedPaperCorpusId": "17776914"
                },
                {
                    "start": 1839,
                    "end": 1842,
                    "matchedPaperCorpusId": "8730376"
                },
                {
                    "start": 1849,
                    "end": 1852,
                    "matchedPaperCorpusId": "17172757"
                },
                {
                    "start": 1860,
                    "end": 1863,
                    "matchedPaperCorpusId": "58796028"
                },
                {
                    "start": 1881,
                    "end": 1884,
                    "matchedPaperCorpusId": "8193806"
                },
                {
                    "start": 1976,
                    "end": 1979,
                    "matchedPaperCorpusId": "8730376"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.81396484375
        },
        {
            "corpus_id": "55805309",
            "title": "ICT Teachers\u2019 Acceptance of \u201cScratch\u201d as Algorithm Visualization Software",
            "text": "In a recently conducted study with the participation of students in a computer-related discipline, these challenges were reported as \"programming knowledge, programming skills, understanding semantics of the program, and debugging\" (\u00d6zmen & Altun, 2014). This study also underlines that lack of practice and lack of algorithm usage, along with lack of knowledge, are major problems causing student failure in programming courses. \n\nComputer science educators and researchers have been striving to find pedagogical and technological ways to make the programming instruction process easier and more effective. One of these proposed solutions is to use Algorithm Visualization (AV), since many of the aforementioned problems in learning how to program stem from a faulty grasp of practical usage of algorithms. AV is defined as the graphical illustration of algorithms via software developed for this purpose (Hundhausen, 2002), which aims to facilitate student understanding of the way computer algorithms function (Haundhausen & Brown, 2008). There are many AV software programs aiming to assist novice programmers in learning programming concepts in a visual way, such as Scratch, Alice, Android Appinventor, Scriptease, Kodu, and so forth. These programs have gained popularity in teaching programming, especially as they provide novice programmers with the opportunity to focus more on design and development rather than on programming syntax (Grover & Pea, 2013); decrease the cognitive load through the avoidance of the handling of syntax errors (Kelleher & Pausch, 2005, p. 131); and a fun and comfortable learning context (Kelleher, Pausch, & Kiesler, 2007). In this respect, according to Brennan and Resnick (2012), these AV software programs help learners develop computational thinking skills through design and development of interactive media. Considering all these advantages, AV software is an innovative technology for teaching programming to novice programmers and young students. \n\nOf all these AV software programs, Scratch was chosen for this study due to several reasons. Scratch is a popular AV software, which was particularly designed to teach young students programming (Maloney, Resnick, Silverman, & Eastmond, 2010). First of all, it includes more programming concepts than other AV software programs and it has a context supporting active learning (Koorsse, Cilliers, & Calitz, 2014).",
            "score": 0.3721991141151649,
            "section_title": "Introduction",
            "char_start_offset": 2312,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 254
                },
                {
                    "start": 255,
                    "end": 429
                },
                {
                    "start": 432,
                    "end": 607
                },
                {
                    "start": 608,
                    "end": 807
                },
                {
                    "start": 808,
                    "end": 1041
                },
                {
                    "start": 1042,
                    "end": 1240
                },
                {
                    "start": 1241,
                    "end": 1664
                },
                {
                    "start": 1665,
                    "end": 1854
                },
                {
                    "start": 1855,
                    "end": 1995
                },
                {
                    "start": 1998,
                    "end": 2090
                },
                {
                    "start": 2091,
                    "end": 2241
                },
                {
                    "start": 2242,
                    "end": 2410
                }
            ],
            "ref_mentions": [
                {
                    "start": 232,
                    "end": 253,
                    "matchedPaperCorpusId": "55080386"
                },
                {
                    "start": 906,
                    "end": 924,
                    "matchedPaperCorpusId": "30164228"
                },
                {
                    "start": 1628,
                    "end": 1663,
                    "matchedPaperCorpusId": "3910027"
                },
                {
                    "start": 2193,
                    "end": 2240,
                    "matchedPaperCorpusId": "9744698"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.611328125
        },
        {
            "corpus_id": "41332694",
            "title": "Assessing the Usability of a Novel System for Programming Education",
            "text": "As Gomes and Mendez point out [7], two of the major difficulties in teaching novice students programming skills is the lack of personalization and emphasis on individual learning style, and that programming languages in general, are meant for professional use in the field and not designed specifically for educational purposes. Online programing courses can pose additional challenges for educators related to student learning style [5]. Research suggests that students benefit from a more student centered active learning approach compared to a more traditional lecture course format [17]. To overcome some of these difficulties, there have been various approaches in teaching programming skills to improving pedagogy. In some instances, schools have adopted visual programming languages such as Alice and Scratch as a more \"gentle\" introduction to code. These languages provide a visual interface where students can work and write programs. Chang [6] points out with Alice, that \"Abstract concepts can be transformed into visual representations that help students develop debugging skills, observe variables, and trace logic, which leads to correcting their programs and solving problems\" (pg. 190). These languages are geared not for full application development, but for learning logic, control structures and sometimes object oriented design. Python is increasingly being used in introductory courses as an easier to learn language compared to C++ or Java [14]. There have been other approaches towards programming visualization or having highly visual programming environments for students such as ViLLE [13], Jeliot 3 [11], or BlueJ [8]. There are additional visualization tools that can be helpful for novice programmers to learn the fundamentals. \n\nIn addition to changes in language selection and use of visual environments, other approaches tied into pedagogy of teaching programing concepts are being explored. The use of Learning Objects (LO) are increasingly being explored which involves the creation of many exploratory and full scale learning tools [1,9]. Many LOs include aspects of animation, annotation, examples and visualization as a modularized component, which can often be integrated or developed for use in a Learning Management system [3]. Some of the mentioned visual environments or languages can be used in conjunction with or as part of a LO. Some aspects of learning particular programming constructs can be emphasized as part of a LO.",
            "score": 0.3721991141151649,
            "section_title": "Literature Review",
            "char_start_offset": 858,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 328
                },
                {
                    "start": 329,
                    "end": 438
                },
                {
                    "start": 439,
                    "end": 591
                },
                {
                    "start": 592,
                    "end": 720
                },
                {
                    "start": 721,
                    "end": 856
                },
                {
                    "start": 857,
                    "end": 943
                },
                {
                    "start": 944,
                    "end": 1196
                },
                {
                    "start": 1197,
                    "end": 1202
                },
                {
                    "start": 1203,
                    "end": 1348
                },
                {
                    "start": 1349,
                    "end": 1467
                },
                {
                    "start": 1468,
                    "end": 1645
                },
                {
                    "start": 1646,
                    "end": 1756
                },
                {
                    "start": 1759,
                    "end": 1923
                },
                {
                    "start": 1924,
                    "end": 2073
                },
                {
                    "start": 2074,
                    "end": 2267
                },
                {
                    "start": 2268,
                    "end": 2374
                },
                {
                    "start": 2375,
                    "end": 2468
                }
            ],
            "ref_mentions": [
                {
                    "start": 30,
                    "end": 33,
                    "matchedPaperCorpusId": "55563372"
                },
                {
                    "start": 586,
                    "end": 590,
                    "matchedPaperCorpusId": "16353313"
                },
                {
                    "start": 950,
                    "end": 953,
                    "matchedPaperCorpusId": "56686833"
                },
                {
                    "start": 1462,
                    "end": 1466,
                    "matchedPaperCorpusId": "7152586"
                },
                {
                    "start": 1611,
                    "end": 1615,
                    "matchedPaperCorpusId": "58796028"
                },
                {
                    "start": 1626,
                    "end": 1630,
                    "matchedPaperCorpusId": "8730376"
                },
                {
                    "start": 2067,
                    "end": 2070,
                    "matchedPaperCorpusId": "16726364"
                },
                {
                    "start": 2263,
                    "end": 2266,
                    "matchedPaperCorpusId": "16859871"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7861328125
        },
        {
            "corpus_id": "269929859",
            "title": "GeckoGraph: A Visual Language for Polymorphic Types",
            "text": "Many studies have compared the effectiveness of a visual-based programming environment with a textual-based one.Studies [7][8][9]23] found that compared to a purely textual programming language with similar positioning, students who were taught a visual programming language show greater confidence, better retention, and enjoyment in programming courses.While showing a similar trend, GeckoGraph experiments in the context of accompanying text-based notation rather than replacing it.\n\nMany have studied the effect of visual augmentation, providing a visual representation of programming objects without removing the text-based notation.Greenfoot [22] allows visual and textual representations of programming concepts to be accessible to the learner.PILeT [2], providing a programming environment that is an adaptive presentation based on the user's preference.Both tools show positive results in the use of visual augmentation.Although similar to GeckoGraph in combining visual language and text-based programming environment, both studies evaluated the effect based on imperative languages (Java and Python), while our evaluation focused on the effect on a functional language (Haskell).",
            "score": 0.3721991141151649,
            "section_title": "Visual vs Textual representation",
            "char_start_offset": 35330,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 112
                },
                {
                    "start": 112,
                    "end": 355
                },
                {
                    "start": 355,
                    "end": 485
                },
                {
                    "start": 487,
                    "end": 638
                },
                {
                    "start": 638,
                    "end": 751
                },
                {
                    "start": 751,
                    "end": 862
                },
                {
                    "start": 862,
                    "end": 929
                },
                {
                    "start": 929,
                    "end": 1190
                }
            ],
            "ref_mentions": [
                {
                    "start": 120,
                    "end": 123,
                    "matchedPaperCorpusId": "29477898"
                },
                {
                    "start": 123,
                    "end": 126,
                    "matchedPaperCorpusId": "20007893"
                },
                {
                    "start": 126,
                    "end": 129,
                    "matchedPaperCorpusId": "215915742"
                },
                {
                    "start": 129,
                    "end": 132,
                    "matchedPaperCorpusId": "4039308"
                },
                {
                    "start": 648,
                    "end": 652,
                    "matchedPaperCorpusId": "43390779"
                },
                {
                    "start": 757,
                    "end": 760,
                    "matchedPaperCorpusId": "2833173"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.84033203125
        },
        {
            "corpus_id": "253043422",
            "title": "Visual authoring of virtual reality conversational scenarios for e-learning",
            "text": "The potential of Chatbots for mentoring students has been researched, with the conclusion that their current development does not have a clear pedagogical focus on improving and supporting learning [9]. One emerging field of Chatbot applications are as Pedagogic Conversational Agents (PCAs), which are autonomous characters that cohabit with students in a learning environment and which are usually employed to create rich learning interactions [10]. \n\nEvery new interaction style requires the involvement of various expert profiles, including programmers, developers, and human-computer interaction experts. That restricts the creation of interactive learning materials and activities to non-experts, not to mention the worldwide scarcity of computing professionals and software developers. To alleviate such deficiencies, Visual Programming Languages (VPLs) have been researched in the End-User Development (EUD) field to allow non-expert users to develop their own software solutions with no need of having specialized programming skills [11]. VPLs mostly use block-based and flowchart graphical representations to allow non-expert users to program without having to learn the syntax of a traditional programming language. \n\nTherefore, in this work, the following hypothesis is raised: flow chart diagrams and block-based languages can be used in combination with CAs to easily develop learning environments based on multimodal VR scenarios. These scenarios support LA, enabling educators to track learners' activity. \n\nA set of extensions developed for the MIT App Inventor (AI2) mobile application authoring platform [12] is presented as a contribution to this work. Such extensions enable the authoring of a VR environment to interact via a chatbot, recording the app user's activity and defining the app's behaviour by employing a Business Process Model and Notation (BPMN) diagram. The extensions were developed to facilitate the use of the app with a type of VR glasses that requires a smartphone. Nonetheless, the extensions allow using the app without any need to employ VR glasses. \n\nThe rest of the document is structured as follows. Section 2 presents the research background and related works. Section 3 describes the contribution made, consisting of a set of extensions to the AI2 development environment. Section 4 shows an illustrative example of how to design a virtual scenario with the provided tools and provides a quantitative assessment of the required building blocks when creating a demo application with and without the new AI2 extensions.",
            "score": 0.3715582637020175,
            "section_title": "Introduction",
            "char_start_offset": 2404,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 202
                },
                {
                    "start": 203,
                    "end": 451
                },
                {
                    "start": 454,
                    "end": 609
                },
                {
                    "start": 610,
                    "end": 792
                },
                {
                    "start": 793,
                    "end": 1047
                },
                {
                    "start": 1048,
                    "end": 1226
                },
                {
                    "start": 1229,
                    "end": 1445
                },
                {
                    "start": 1446,
                    "end": 1521
                },
                {
                    "start": 1524,
                    "end": 1672
                },
                {
                    "start": 1673,
                    "end": 1890
                },
                {
                    "start": 1891,
                    "end": 2007
                },
                {
                    "start": 2008,
                    "end": 2094
                },
                {
                    "start": 2097,
                    "end": 2147
                },
                {
                    "start": 2148,
                    "end": 2209
                },
                {
                    "start": 2210,
                    "end": 2322
                },
                {
                    "start": 2323,
                    "end": 2567
                }
            ],
            "ref_mentions": [
                {
                    "start": 198,
                    "end": 201,
                    "matchedPaperCorpusId": "235825558"
                },
                {
                    "start": 446,
                    "end": 450,
                    "matchedPaperCorpusId": "234079366"
                },
                {
                    "start": 1042,
                    "end": 1046,
                    "matchedPaperCorpusId": "67770007"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8779296875
        },
        {
            "corpus_id": "203645408",
            "title": "Augmented Reality App for Teaching OOP",
            "text": "The project can be extended to theoretically all the programming languages as this is in essence a tool for elearning using visual techniques, in the future, this application can be enhanced to follow \"one size fits all\" concept. Web Programming as well as Database Programming can also be included as in databases, we also require large amounts of visualizations and have to ponder upon the many what ifs. Machine learning techniques can be used to provide exercises to users based on their progress. This application can be made in game type theme in which user can progress only by completing a previous task to a satisfactory level. This will allow for more immersion and not let the user get bored. This application can be further extended to the professional level. This can also be really helpful for the beginners. More over the system can with some time include its own compiler that can visually show objects which will form basis for a simulator for testing running of the application.",
            "score": 0.37070531749791535,
            "section_title": "VII. FUTURE WORK",
            "char_start_offset": 12062,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 229
                },
                {
                    "start": 230,
                    "end": 406
                },
                {
                    "start": 407,
                    "end": 501
                },
                {
                    "start": 502,
                    "end": 636
                },
                {
                    "start": 637,
                    "end": 703
                },
                {
                    "start": 704,
                    "end": 771
                },
                {
                    "start": 772,
                    "end": 822
                },
                {
                    "start": 823,
                    "end": 996
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.34521484375
        },
        {
            "corpus_id": "203645408",
            "title": "Augmented Reality App for Teaching OOP",
            "text": "It finally points difficulties in some areas and result, planning to give an easy and effective way to teaches OOP [9], by participating in applied task, the comprehension of the subject becomes better [10]. \n\nIt is known through research that the programming skills of first year students are not up to the required level as most of them have not been exposed to how to solve tasks and do programming [11] hence in the past there have been many application that have focused on teaching beginners how to code but in most of these applications the user only learns the syntax and does not have an editor to practise it side by side and while it is important to know how to build a solution [12] it is also better to at least once make the solution as well because it cements our understanding, there have also been many lone editors for the java language but they are complicated and not very good for beginners to work on, while in the system we are proposing we will try to combine both an explainer as well as an editor with visual representations to allow the user to quickly understand concepts and learn the language efficiently as in interactive setting the user unknowingly tries harder [13].",
            "score": 0.3703281112560465,
            "section_title": "Moreover, The School Education Department of Punjab has been working closely with Punjab Information",
            "char_start_offset": 5451,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 207
                },
                {
                    "start": 210,
                    "end": 1200
                }
            ],
            "ref_mentions": [
                {
                    "start": 115,
                    "end": 118,
                    "matchedPaperCorpusId": "9916677"
                },
                {
                    "start": 402,
                    "end": 406,
                    "matchedPaperCorpusId": "8381532"
                },
                {
                    "start": 1195,
                    "end": 1199,
                    "matchedPaperCorpusId": "14154945"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.24853515625
        },
        {
            "corpus_id": "257395014",
            "title": "Recent Robots in STEAM Education",
            "text": "In the description of the above robots, the related programming languages were mentioned.Some of these languages are presented in more detail below.First, there are traditional scripting languages and visual programming languages.The first category includes Python [66][67][68], C, C++, Java, JavaScript [69], etc., and is the basis for the creation of the second, i.e., visual programming languages.\n\nIn primary school age or education in general, it would be easier to use a visual programming language.The term \"visual programming language\" means a programming language that is based on visual expressions and is suitable for beginners [70].These expressions are either icons and blocks (puzzles), or diagrams and forms, which act as commands and conditions for the user to program the robot object he desires.These expressions are asked by the user to drag them and put them in the appropriate order to write the code that will command the robot to act.Some visual programming languages used in education are AgentSheets, App Inventor (for Android), Blocky, Bubble, Scratch, etc.\n\nOne of the most popular languages is Scratch (Figure 5).This is evidenced by the fact that it has been used in a variety of studies [71][72][73][74][75][76][77][78][79][80][81].Scratch's goal is for students to learn programming concepts by playing and creating videos and music.In other words, it enables teachers to use it as a means of teaching in their classrooms.Scratch is free and available online.Its shape makes it quite attractive to students of both primary and secondary education.Moreover, one of its advantages is that it is dynamic, as users can edit and modify its code while it is running.Behind the visual expressions, the executable code runs in the Squeak (Scratch 0. x, Scratch 1. x) or ActionScript (Scratch 2.0) written programming languages.According to the research in [28], 50% of the published work they found on STEAM education uses Scratch.Scratch can be an important lead in introducing advanced students to the Python programming language [82].",
            "score": 0.37021008283330337,
            "section_title": "Programming Languages",
            "char_start_offset": 24224,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 89
                },
                {
                    "start": 89,
                    "end": 148
                },
                {
                    "start": 148,
                    "end": 230
                },
                {
                    "start": 230,
                    "end": 400
                },
                {
                    "start": 402,
                    "end": 505
                },
                {
                    "start": 505,
                    "end": 644
                },
                {
                    "start": 644,
                    "end": 813
                },
                {
                    "start": 813,
                    "end": 957
                },
                {
                    "start": 957,
                    "end": 1083
                },
                {
                    "start": 1085,
                    "end": 1141
                },
                {
                    "start": 1141,
                    "end": 1262
                },
                {
                    "start": 1262,
                    "end": 1364
                },
                {
                    "start": 1364,
                    "end": 1453
                },
                {
                    "start": 1453,
                    "end": 1490
                },
                {
                    "start": 1490,
                    "end": 1578
                },
                {
                    "start": 1578,
                    "end": 1691
                },
                {
                    "start": 1691,
                    "end": 1850
                },
                {
                    "start": 1850,
                    "end": 1954
                },
                {
                    "start": 1954,
                    "end": 2060
                }
            ],
            "ref_mentions": [
                {
                    "start": 269,
                    "end": 273,
                    "matchedPaperCorpusId": "155729844"
                },
                {
                    "start": 273,
                    "end": 277,
                    "matchedPaperCorpusId": "233178376"
                },
                {
                    "start": 304,
                    "end": 308,
                    "matchedPaperCorpusId": "211211914"
                },
                {
                    "start": 639,
                    "end": 643,
                    "matchedPaperCorpusId": "18077793"
                },
                {
                    "start": 1221,
                    "end": 1225,
                    "matchedPaperCorpusId": "250717356"
                },
                {
                    "start": 1225,
                    "end": 1229,
                    "matchedPaperCorpusId": "225315516"
                },
                {
                    "start": 1229,
                    "end": 1233,
                    "matchedPaperCorpusId": "63548771"
                },
                {
                    "start": 1237,
                    "end": 1241,
                    "matchedPaperCorpusId": "145028763"
                },
                {
                    "start": 1241,
                    "end": 1245,
                    "matchedPaperCorpusId": "248821748"
                },
                {
                    "start": 1245,
                    "end": 1249,
                    "matchedPaperCorpusId": "237702196"
                },
                {
                    "start": 1249,
                    "end": 1253,
                    "matchedPaperCorpusId": "9744698"
                },
                {
                    "start": 1253,
                    "end": 1257,
                    "matchedPaperCorpusId": "6556344"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.87451171875
        },
        {
            "corpus_id": "227011903",
            "title": "RustViz: Interactively Visualizing Ownership and Borrowing",
            "text": "As an alternative to the graph-based visualization, Blaser's Visual Studio Code extension can show a text-based explanation of lifetime errors in Rust code. The focus of Blaser's tool seems to be to help programmers reason about lifetime-related errors in their code through editor integrations, while our focus is on generating visualizations in documentation for use in a teaching setting. \n\nOutside of Rust, there are many visualization systems developed to teach beginners about program behavior, and Sorva et al. [14] published an extensive review of such systems. There are also tutoring systems for teaching programming, some of which include visualizations. Crow et al. [3] created a review of a number of these systems and identified those that have visualizations.",
            "score": 0.3701613510791476,
            "section_title": "RELATED WORK",
            "char_start_offset": 23454,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 156
                },
                {
                    "start": 157,
                    "end": 391
                },
                {
                    "start": 394,
                    "end": 569
                },
                {
                    "start": 570,
                    "end": 665
                },
                {
                    "start": 666,
                    "end": 774
                }
            ],
            "ref_mentions": [
                {
                    "start": 518,
                    "end": 522,
                    "matchedPaperCorpusId": "16369862"
                },
                {
                    "start": 678,
                    "end": 681,
                    "matchedPaperCorpusId": "38113232"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.52392578125
        },
        {
            "corpus_id": "155850225",
            "title": "Algotaurus: an educational computer programming game for beginners",
            "text": "ABSTRACT An educational computer game is presented, used for beginner students to introduce some basic concepts of code execution and code writing. In this mini-language microworld game, a code should be written with which a robot can escape from a procedurally generated labyrinth. The game uses a simple language and utilizes a virtual environment, where code execution could be tracked easily. One essential advantage of the software is that after a very short training, students can start experimenting, and they can understand many basic properties of code writing and execution. Based on several pilot teaching classes in both primary schools and universities, the game is an efficient tool to introduce the bases of computer programming, which bases might be harder to demonstrate with other educational tools.",
            "score": 0.3701143465335547,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.2110595703125
        },
        {
            "corpus_id": "188475500",
            "title": "Learning Difficulties and Use of Visual Technologies in Learning to Program",
            "text": "In recent years, programming has been seen as a promising career with great earning potential. Rapid growth and use of computer technology give further emphasis to programming. Therefore, faculties open programming courses ranging from introductory to advanced levels. Primary and secondary schools also started to include programming courses in their curriculum. However, in the literature, it has been widely accepted that learning to program is a challenging task for students. Studies conducted on programming education show that significant number of students fail the programming course or get low grades. Of the reasons why students have problems in programming, necessity to possess variety of knowledge while dealing with the programming exercises is mentioned most in the research. These are syntactic, conceptual and strategic knowledge. Other reasons involve lack of motivation, lack of skills required for the programming, lack of mathematical knowledge and unfamiliarity with the programming courses. This is a literature review study that discusses learning difficulties of students and visual technologies used in programming courses to overcome problems mentioned above. This study examines technologies such as Scratch, Alice, Blockly, Jeliot and Ville. The properties of these technologies, how they can be used in programming and results of research studying the effectiveness of these technologies are also discussed",
            "score": 0.3685763966626367,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.6025390625
        },
        {
            "corpus_id": "262701504",
            "title": "PVC.js: visualizing C programs on web browsers for novices",
            "text": "We propose a new visualization technique for C languages called PVC.js. It is a browser-based JavaScript application inspired by previous studies. The application is open-access and free to try at the listed address (see Section 1). The experiment reveals that PVC.js is useful not only to novices, but also to programmers in general. \n\nIn the future, we plan to investigate whether PVC.js can help students learn programming by evaluating users' programming skills after using PVC.js. Moreover, we will continue to develop and improve PVC.js. For example, our visualize application currently supports only C language. It does not support the full range of C language syntax and standard library functions. We are also planning to improve PVC.js to increase the support functions, support multiple programming languages and incorporate some suitable block-based representation (e.g. blockly 15 can transpile blocks to code). Such block-based representation can make it easier for the learners to avoid using not supported features and also protect them from syntax errors.",
            "score": 0.3685763966626367,
            "section_title": "Conclusions and future work",
            "char_start_offset": 27874,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 71
                },
                {
                    "start": 72,
                    "end": 146
                },
                {
                    "start": 147,
                    "end": 232
                },
                {
                    "start": 233,
                    "end": 334
                },
                {
                    "start": 337,
                    "end": 485
                },
                {
                    "start": 486,
                    "end": 543
                },
                {
                    "start": 544,
                    "end": 618
                },
                {
                    "start": 619,
                    "end": 706
                },
                {
                    "start": 707,
                    "end": 882
                },
                {
                    "start": 883,
                    "end": 924
                },
                {
                    "start": 925,
                    "end": 1072
                }
            ],
            "ref_mentions": [
                {
                    "start": 891,
                    "end": 893,
                    "matchedPaperCorpusId": "16369862"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.4033203125
        },
        {
            "corpus_id": "252233721",
            "title": "A case study of the integration of Algorithm Visualizations in Hungarian programming education",
            "text": "Sorting out Sorting: easy to understand. So far, the subject has encountered only one type of visualization, which was a video like this, showing different sorting algorithms with a spectacular visual and audio association. \n\nVisualgo: new features include modifiability, pseudo-code display, and the ability to interact. \n\nAlgTan: the visibility of the time of the process has been revealed, the pseudocode clearly shows at which step we are, the display of the array is similar to the data storage. In addition, it was suggested that the values should be displayed in columns here as well, and that the specification could be included in the interface (this is a key concept in programming teaching at ELTE). \n\nCodeCombat: uses player elements that indirectly help to learn algorithmizing, programming; interactive elements appear: the code is written by the user. \n\nCodinGame: the application allows you to compete, which is accompanied by a reward system (gamification), you can view other people's solutions or even communicate with other users. \n\nCS Unplugged: it turned out as a positive method, that you can learn and master algorithms a little further away from the computer. \n\nThe subject has identified the following items that they would consider important in a toolkit: detailed visualization, source code that appears, data display, performance testing (\"worst case\" examples), and the ability to test. The usability of the social elements also appeared as a novelty: the subject found it very useful that in case of specific tasks, the users can access the solutions of others and highlighted the possibility of communication with other users. Also, it has been suggested that sometimes less interaction could be better, because it is considered less effective if the user is spending too much time on side activities.",
            "score": 0.3685763966626367,
            "section_title": "Second subject:",
            "char_start_offset": 15833,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 40
                },
                {
                    "start": 41,
                    "end": 223
                },
                {
                    "start": 226,
                    "end": 321
                },
                {
                    "start": 324,
                    "end": 500
                },
                {
                    "start": 501,
                    "end": 710
                },
                {
                    "start": 713,
                    "end": 866
                },
                {
                    "start": 869,
                    "end": 1050
                },
                {
                    "start": 1053,
                    "end": 1184
                },
                {
                    "start": 1187,
                    "end": 1416
                },
                {
                    "start": 1417,
                    "end": 1658
                },
                {
                    "start": 1659,
                    "end": 1833
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.369384765625
        },
        {
            "corpus_id": "61809687",
            "title": "A Study on the Suitability of Visual Languages for Non-Expert Robot Programmers",
            "text": "A visual programming language allows users and developers to create programs by manipulating program elements graphically. Several studies have shown the benefits of visual languages for learning purposes and their applicability to robot programming. However, at present, there are not enough comparative studies on the suitability of textual and visual languages for this purpose. In this paper, we study if, as with a textual language, the use of a visual language could also be suitable in the context of robot programming and, if so, what the main advantages of using a visual language would be. For our experiments, we selected a sample of 60 individuals among students with adequate knowledge of procedural programming, that was divided into three groups. For the first group of 20 students, a learning scenario based on a textual object-oriented language was used for programming a specific commercial robotic ball with sensing, wireless communication, and output capabilities, whereas for the second and the third group, two learning scenarios based on visual languages were used for programming the robot. After taking a course for programming the robot in the corresponding learning scenario, each group was evaluated by completing three programming exercises related to the robot features (i.e. motion, lighting, and collision detection). Our results show that the students that worked with visual languages perceived a higher clarity level in their understanding of the course exposition, and a higher enjoyment level in the use of the programming environment. Moreover, they also achieved an overall better mark.",
            "score": 0.3685763966626367,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.923828125
        },
        {
            "corpus_id": "231725028",
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "text": "We classify the programming skills into four categories: Novice, beginner, intermediate, and advanced. Novices have never studied programming. They never wrote any code and they are not aware of basic programming concepts such as variables, functions, etc. Beginners have basic programming knowledge such as variables and functions. Their knowledge corresponds to the programming concepts discussed in the first programming course in an undergraduate program. End users with intermediate programming skills have taken multiple programming courses, and they may have knowledge of data structures such as queues, stacks, as well as algorithms. Their knowledge corresponds to the programming skills of a third or fourth-year undergraduate computer science student. End users with advanced programming skills have professional programming experience. For instance, they may have worked as developers, or they write code as part of their profession. \n\nNaturally, most of the articles (18 out of 30) presented evaluations with novice end users, whereas authors of 14 articles evaluated their tools with beginners. A few articles included intermediate and advanced users in their evaluation. Some articles such as [47], [59] and [48] evaluated their tools with users of various degrees of programming skills. \n\nWe believe it is ideal to evaluate visual programming tools with novices or beginners as they are expected to encounter more conceptual problems compared to intermediate and advanced end users, thereby giving tool authors more valuable feedback.",
            "score": 0.3685763966626367,
            "section_title": "D. RQ2-D4: PROGRAMMING SKILLS OF TEST PARTICIPANTS",
            "char_start_offset": 54151,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 102
                },
                {
                    "start": 103,
                    "end": 142
                },
                {
                    "start": 143,
                    "end": 332
                },
                {
                    "start": 333,
                    "end": 459
                },
                {
                    "start": 460,
                    "end": 641
                },
                {
                    "start": 642,
                    "end": 761
                },
                {
                    "start": 762,
                    "end": 846
                },
                {
                    "start": 847,
                    "end": 944
                },
                {
                    "start": 947,
                    "end": 1107
                },
                {
                    "start": 1108,
                    "end": 1184
                },
                {
                    "start": 1185,
                    "end": 1301
                },
                {
                    "start": 1304,
                    "end": 1549
                }
            ],
            "ref_mentions": [
                {
                    "start": 1207,
                    "end": 1211,
                    "matchedPaperCorpusId": "49346356"
                },
                {
                    "start": 1213,
                    "end": 1217,
                    "matchedPaperCorpusId": "21940115"
                },
                {
                    "start": 1222,
                    "end": 1226,
                    "matchedPaperCorpusId": "9828877"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8056640625
        },
        {
            "corpus_id": "234855740",
            "title": "A Study of the Impact of Arduino and Visual Programming In Self-Efficacy, Motivation, Computational Thinking and 5th Grade Students\u2019 Perceptions on Electricity",
            "text": "In accordance with the above mentioned is Scratch, a very popular visual programming language that was created in MIT. It is believed that it should be included in teaching practice, as visual programming environments are particularly easy to use, even for very young children, because they focus on learning in a playful way, similar to lego bricks, which reduces the cognitive load and the stress of failure and helps students to develop a range of very important skills for the 21st century: deeper understanding of mathematical and computational concepts, creative thinking, argumentation, collaboration, critical thinking, problem solving, algorithmic thinking, composition, self-directed learning, prediction and evaluation (Liu, Lin, Hasson, & Barnett, 2011;Lopez & Hernandez, 2015;Maloney et al., 2010;Meerbaum-Salant et al., 2013;Resnick, 2008;Resnick et al., 2009).",
            "score": 0.3685763966626367,
            "section_title": "Visual Programming",
            "char_start_offset": 9664,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 118
                },
                {
                    "start": 119,
                    "end": 875
                }
            ],
            "ref_mentions": [
                {
                    "start": 730,
                    "end": 765,
                    "matchedPaperCorpusId": "857929"
                },
                {
                    "start": 765,
                    "end": 789,
                    "matchedPaperCorpusId": "121115410"
                },
                {
                    "start": 789,
                    "end": 810,
                    "matchedPaperCorpusId": "9744698"
                },
                {
                    "start": 810,
                    "end": 839,
                    "matchedPaperCorpusId": "16831477"
                },
                {
                    "start": 839,
                    "end": 853,
                    "matchedPaperCorpusId": "44396832"
                },
                {
                    "start": 853,
                    "end": 874,
                    "matchedPaperCorpusId": "44396832"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.66845703125
        },
        {
            "corpus_id": "276961580",
            "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs",
            "text": "A computer program defines the operation of computer systems. However, \"the program given to a computer for solving a problem need not be in a written format\" [73]. This future-looking statement, dating back to the 1960s, inspired several generations of researchers to design and build visual programming systems. Today, visual programming systems (e.g., LabView [39], Unity Graph Editor [76], PromptChainer [84], ComfyUI [13] and Visual Blocks [18]) typically feature a node graph editor, providing users with a visual workspace to \"write\" their program using \"building blocks\" [28,68,89]. Recent work further explored the application of visual programming in education [9,35,40], XR creativity support [88,91,93], and robotics [14,30,31]. For example, Zhang et al. [93] connected the visual programming tool to the concept of teaching by demonstration [44,49,99], allowing users to rapidly customize AR effects in video creation. FlowMatic [91] extended traditional visual programming interfaces into 3D virtual environments, providing users with immersive authoring experiences. \n\nAdvancements in AI have introduced many repositories of advanced ML models [33,66], and an increasing number of researchers are exploring AI chains [41,86]. This progress has motivated HCI researchers to design and build a range of visual programming interfaces to support the AI development process [13,43,84]. For example, ChainForge is a web-based platform for developers to explore various LLM-related configuration and designs in a wide range of applications [4]. Visual Blocks enables creation and interaction of advanced ML pipelines that can leverage state-of-the-art computer vision and computer graphics models in the browser [18]. \n\nThis work contributes the technical system, implementation and evaluation of a novel AI assistant that enables the use of text-based instructions in visual programming of ML pipelines. Compared to typical workflows in which people manually build their pipelines, InstructPipe has the potential to accelerate ML pipeline prototyping in visual programming.",
            "score": 0.3685763966626367,
            "section_title": "Related Work 2.1 Visual Programming",
            "char_start_offset": 6886,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 61
                },
                {
                    "start": 62,
                    "end": 164
                },
                {
                    "start": 165,
                    "end": 313
                },
                {
                    "start": 314,
                    "end": 590
                },
                {
                    "start": 591,
                    "end": 740
                },
                {
                    "start": 741,
                    "end": 931
                },
                {
                    "start": 932,
                    "end": 1081
                },
                {
                    "start": 1084,
                    "end": 1240
                },
                {
                    "start": 1241,
                    "end": 1395
                },
                {
                    "start": 1396,
                    "end": 1552
                },
                {
                    "start": 1553,
                    "end": 1725
                },
                {
                    "start": 1728,
                    "end": 1912
                },
                {
                    "start": 1913,
                    "end": 2082
                }
            ],
            "ref_mentions": [
                {
                    "start": 408,
                    "end": 412,
                    "matchedPaperCorpusId": "247447133"
                },
                {
                    "start": 445,
                    "end": 449,
                    "matchedPaperCorpusId": "258216977"
                },
                {
                    "start": 579,
                    "end": 583,
                    "matchedPaperCorpusId": "1529669"
                },
                {
                    "start": 583,
                    "end": 586,
                    "matchedPaperCorpusId": "259376453"
                },
                {
                    "start": 586,
                    "end": 589,
                    "matchedPaperCorpusId": "269753286"
                },
                {
                    "start": 671,
                    "end": 674,
                    "matchedPaperCorpusId": "267523023"
                },
                {
                    "start": 674,
                    "end": 677,
                    "matchedPaperCorpusId": "258217657"
                },
                {
                    "start": 677,
                    "end": 680,
                    "matchedPaperCorpusId": "220885043"
                },
                {
                    "start": 704,
                    "end": 708,
                    "matchedPaperCorpusId": "269717820"
                },
                {
                    "start": 708,
                    "end": 711,
                    "matchedPaperCorpusId": "222799772"
                },
                {
                    "start": 711,
                    "end": 714,
                    "matchedPaperCorpusId": "264350354"
                },
                {
                    "start": 729,
                    "end": 733,
                    "matchedPaperCorpusId": "16198810"
                },
                {
                    "start": 733,
                    "end": 736,
                    "matchedPaperCorpusId": "207237260"
                },
                {
                    "start": 736,
                    "end": 739,
                    "matchedPaperCorpusId": "23415794"
                },
                {
                    "start": 767,
                    "end": 771,
                    "matchedPaperCorpusId": "264350354"
                },
                {
                    "start": 854,
                    "end": 858,
                    "matchedPaperCorpusId": "1504689"
                },
                {
                    "start": 858,
                    "end": 861,
                    "matchedPaperCorpusId": "12628167"
                },
                {
                    "start": 861,
                    "end": 864,
                    "matchedPaperCorpusId": "251252905"
                },
                {
                    "start": 942,
                    "end": 946,
                    "matchedPaperCorpusId": "222799772"
                },
                {
                    "start": 1163,
                    "end": 1166,
                    "matchedPaperCorpusId": "257833781"
                },
                {
                    "start": 1236,
                    "end": 1239,
                    "matchedPaperCorpusId": "238353829"
                },
                {
                    "start": 1391,
                    "end": 1394,
                    "matchedPaperCorpusId": "247447133"
                },
                {
                    "start": 1548,
                    "end": 1551,
                    "matchedPaperCorpusId": "262044762"
                },
                {
                    "start": 1720,
                    "end": 1724,
                    "matchedPaperCorpusId": "258216977"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.90380859375
        },
        {
            "corpus_id": "19038821",
            "title": "Design Space of Programming Tools on Mobile Touchscreen Devices",
            "text": "Visual Programming (VP) languages enable programming by means of interacting with graphical elements, such as blocks, symbols, and arrows, rather than text. They are known, in general, to promote program comprehension by representing content in two-dimensions (text is considered onedimensional) and by emphasizing the underlying semantics rather than the syntax [40,53]. The contexts where VP is used mostly include learning environments (for both children and novice programmers) and specialized domains [40,41]. \n\nVP languages are a somewhat natural fit for use on touchscreen devices because they inherently leverage their interaction style and make minimal or no use of the keyboard [21,29]. Aspects of VP can be observed even in the syntaxenforcing implementations of TouchDevelop [58] and the syntax-directed keyboard extension [1]. Therefore, incorporating VP concepts in the implementations of even conventional programming languages on touchscreen devices can be useful in advancing their usability.",
            "score": 0.3685763966626367,
            "section_title": "VP concepts",
            "char_start_offset": 21548,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 156
                },
                {
                    "start": 157,
                    "end": 371
                },
                {
                    "start": 372,
                    "end": 514
                },
                {
                    "start": 517,
                    "end": 696
                },
                {
                    "start": 697,
                    "end": 839
                },
                {
                    "start": 840,
                    "end": 1009
                }
            ],
            "ref_mentions": [
                {
                    "start": 363,
                    "end": 367,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 506,
                    "end": 510,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 688,
                    "end": 692,
                    "matchedPaperCorpusId": "64789544"
                },
                {
                    "start": 787,
                    "end": 791,
                    "matchedPaperCorpusId": "14819227"
                },
                {
                    "start": 835,
                    "end": 838,
                    "matchedPaperCorpusId": "14326365"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.94091796875
        },
        {
            "corpus_id": "67486810",
            "title": "Prospects and opportunities for visual programming technologies and tools application in educating at school",
            "text": "Article depicts typical problems that students encounter when mastering programming. For each problem, a number of existing specialized software environments offering a solution is displayed. Analyses of programming environments elements and the selection of those who are directly involved in solving problems are conducted. In the end, aggregation of the best solution is carried out and an assumption about the possibility of combining the best elements is made. Initially, the school computer science course was focused on the formation of computer programming and computer skills. Now the main part of the course is devoted to the study of applied software and information technologies. At the same time, classical programming languages developed in the last century are used for learning more. The first successful attempt to create an alternative programming language that could act as an educational tool is the Logo language. A similar display method can be found in many programming environments, where the user does not need to have programming skills, but be able to make a workable algorithm. This allows you not to be distracted by programming language, but to design a program from blocks. Each of the visual programming environments mentioned in the article is not without a number of drawbacks. However, even with this state of affairs, there is a tendency to expand the use of visual programming languages in teaching.",
            "score": 0.3685763966626367,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8037109375
        },
        {
            "corpus_id": "17592120",
            "title": "Picture: A Simple Structured Graphics Model",
            "text": "Before going any further, it is worth being a bit more precise about the term graphics and the use of it throughout this paper. We are concerned here with providing an appropriate programming abstraction for expressing two-dimensional graphical output in a functional language, providing a model with graphic capabilities similar to that provided by systems such as PostScript 9] and MetaPost 8]. The main goal is to provide an abstraction that is convenient and high-level enough for the programmer rather than creating a representation that could be used as a meta le picture format for drawing tools. We are not concerned with the description of 3D geometries here, and all the challenges that poses to both programmer and implementor. \n\nWhat properties would we like such a two-dimensional, functional graphics model to possess? \n\nPictures should be concrete. Representing a graphical object as a concrete value has its advantages. Apart from isolating and abstracting away the low-level details of a graphics system interface, having a value representing a picture allows a program to manipulate and inspect pictures to create new values. Representing a picture as a higher-order function or procedurally by a sequence of drawing actions is too opaque, as their structure cannot be unravelled by other functions, only composed together in a xed number of ways. \n\nInstead we raise the level of abstraction and provide a declarative description of pictures, where a graphical scene is described concretely via a recursive data type that can be freely combined and manipulated by functions. The application operate in terms of the objects that they want to output and it is only at the rendering stage that the value representing the picture is actually mapped into a sequence of drawing actions. Simple application interface. Commonly used graphics programming interfaces have often painfully complex interfaces for accessing the graphical hardware 2]. The multitude of arguments required just to get simple graphics output from an application leads to either poorly structured programs or the avoidance of graphics completely. Simple graphics should be simple to express and integrate into an otherwise non-graphical application. Expressing graphics declaratively using a functional language focuses on the picture values that the application manipulates, shielding the programmer from having to deal with the complexities of a particular system. Composition. The ability to combine parts to make up a whole is desirable feature when describing two-dimensional graphics, as scenes can often be partitioned into a clear hierarchical structure.",
            "score": 0.3683410874638242,
            "section_title": "Motivation",
            "char_start_offset": 2525,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 127
                },
                {
                    "start": 128,
                    "end": 396
                },
                {
                    "start": 397,
                    "end": 603
                },
                {
                    "start": 604,
                    "end": 738
                },
                {
                    "start": 741,
                    "end": 832
                },
                {
                    "start": 835,
                    "end": 863
                },
                {
                    "start": 864,
                    "end": 935
                },
                {
                    "start": 936,
                    "end": 1143
                },
                {
                    "start": 1144,
                    "end": 1365
                },
                {
                    "start": 1368,
                    "end": 1592
                },
                {
                    "start": 1593,
                    "end": 1798
                },
                {
                    "start": 1799,
                    "end": 1828
                },
                {
                    "start": 1829,
                    "end": 1955
                },
                {
                    "start": 1956,
                    "end": 2130
                },
                {
                    "start": 2131,
                    "end": 2233
                },
                {
                    "start": 2234,
                    "end": 2450
                },
                {
                    "start": 2451,
                    "end": 2463
                },
                {
                    "start": 2464,
                    "end": 2646
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.400390625
        },
        {
            "corpus_id": "239165549",
            "title": "LEARNERS' CONFESSION FOR BIDIRECTIONAL TRANSCRIPTION EFFECTIVENESS FOR BEGINNERS IN THE PROGRAMMING COURSE",
            "text": "The Adoption of programming education has become a global trend. In Japan, the Japan Revitalization Strategy 2016, announced by the Headquarters for Japan's Economic Revitalization in 2016, set forth the aim of making programming education compulsory in primary and secondary education. The purpose of this is to cultivate basic logical thinking skills through programming education, as part of efforts to develop and secure human resources for sparking economic growth. On the other hand, it will likely be necessary to review previously existing programming education in ICT human resources development courses at various types of schools. In the programming education for beginners that we are implementing at a college of technology, there is a considerable percentage of students who feel they are not up to programming. Thus, this study proposes \"bidirectional transcription learning\" for beginner programmers as an educational method to help strengthen programming education. It focuses on the process of converting a natural language to a programming language in the final stage of unplugged to code writing. Based on experience, transcription learning is regarded as effective for mastering programming, but we have conducted a trial to further improve efficiency and deepen understanding, and here we provide an overview and report on our results.",
            "score": 0.36832369892153827,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.075439453125
        },
        {
            "corpus_id": "257391554",
            "title": "Analyzing computational thinking studies in Scratch programming: A review of elementary education literature",
            "text": "Scratch is a block-based visual coding language created by MIT. Although Scratch has primarily been associated with a young learning audience (e.g., Chou, 2020;Rose et al., 2020), it's a user-friendly visual interface where students stack and fit blocks together, rather than write code via complex and technical syntax. This block-building metaphor for programming and coding, however, can encourage CT for beginners in the domain regardless of age (e.g., Dolgopolovas et al., 2015;Korkmaz, 2016;Romero et al., 2017). With Scratch, users can learn the ISSN 2513-8359 fundamental principles of programming (e.g., sequences, loops, conditional statements, etc.) by creating their own projects, such as games or animated videos. By providing an accessible learning environment where young learners can think about such concepts and engage in various cognitive processes, Scratch is particularly impactful for developing problem-solving skills (Berikan & \u00d6zdemir, 2019;Donley, 2012;Korkmaz, 2016;Topallia & Cagiltayb, 2018). The cognitive benefits of Scratch include the development of logical, analytical, mathematical, and creative thinking skills as a means to approach complex problems in computer programming (Korkmaz, 2016). As a problem-solving process by extension, these skills not only overlap with CT, but are critical in practice such as abstraction, algorithmic thinking, problem solving, pattern recognition, and design-based thinking (Kalelioglu et al., 2016). As these skills are logical and mathematical in nature, they are heavily implemented in programming environments, and Scratch is no exception-it is rather a question of how and why Scratch affects computational thinking.",
            "score": 0.3682473971765289,
            "section_title": "What is Scratch Programming/Coding?",
            "char_start_offset": 4918,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 63
                },
                {
                    "start": 64,
                    "end": 320
                },
                {
                    "start": 321,
                    "end": 518
                },
                {
                    "start": 519,
                    "end": 726
                },
                {
                    "start": 727,
                    "end": 1021
                },
                {
                    "start": 1022,
                    "end": 1227
                },
                {
                    "start": 1228,
                    "end": 1472
                },
                {
                    "start": 1473,
                    "end": 1693
                }
            ],
            "ref_mentions": [
                {
                    "start": 149,
                    "end": 160,
                    "matchedPaperCorpusId": "202776938"
                },
                {
                    "start": 160,
                    "end": 178,
                    "matchedPaperCorpusId": "221178581"
                },
                {
                    "start": 483,
                    "end": 497,
                    "matchedPaperCorpusId": "64016264"
                },
                {
                    "start": 497,
                    "end": 517,
                    "matchedPaperCorpusId": "10069184"
                },
                {
                    "start": 941,
                    "end": 966,
                    "matchedPaperCorpusId": "164806961"
                },
                {
                    "start": 979,
                    "end": 993,
                    "matchedPaperCorpusId": "64016264"
                },
                {
                    "start": 993,
                    "end": 1020,
                    "matchedPaperCorpusId": "4012511"
                },
                {
                    "start": 1211,
                    "end": 1226,
                    "matchedPaperCorpusId": "64016264"
                },
                {
                    "start": 1446,
                    "end": 1471,
                    "matchedPaperCorpusId": "26908185"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.5537109375
        },
        {
            "corpus_id": "10304140",
            "title": "Object-Oriented Programming for non-IT Students: Starting from Scratch",
            "text": "As mentioned above, we build UML (Unified Modelling Language) activity diagrams to describe algorithms in complicated tasks. We have been using a verbal description and pseudo code as well. Now, when we create Scratch projects as an introduction to programming, we can also use its scripts to visualize, formulate and describe the problem. \n\nAt the beginning, the teacher provides the students with a prepared model, which is analysed in a group. The analysis is followed by writing the program code according to the diagrams. Later on, students have to create the models themselves. \n\nIt has to be mentioned that according to tests [13] most of our students are visual learners [14], [15]. For them it is very important to see \"how it works\". Scratch, with its elements of attractiveness, helps those students to understand the main idea of creating an application. \n\nVBA already has a built-in visualising tool: students can follow the code execution using the Locals Window (Fig. 11). \n\nIt automatically displays all the names of the declared variables in the current procedure, their types and their values. When the Locals Window is visible, it is automatically updated every time -students can see and check each step and its result in their program. Python does not have such an opportunity, but still needs to be visualised. We show students the Online Python Tutor [16]. Using the visualizing tool, the students can follow each step of their code and check the values and types of the variables, as well as the order of the operators during the execution. It has to be noted that this tool has some drawbacks, as it does not support the Python graphics, time functions and work with files. However, for the beginners in programming it gives the understanding of the code execution (Fig. 12) \n\nMoreover, for our students we create short videos about the main terms, such as iterations, branching and the execution of the processes. It should be mentioned that we surely use sound and voice records in these videos to explain the complicated moments. In our work with educational visions we follow the ideas of Khan Academy [17]. \n\nIn addition, we always try to provide students\u00b4 applications with a similar content.",
            "score": 0.3682040526652511,
            "section_title": "VII. THE TEACHING METHODOLOGY",
            "char_start_offset": 16959,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 124
                },
                {
                    "start": 125,
                    "end": 189
                },
                {
                    "start": 190,
                    "end": 339
                },
                {
                    "start": 342,
                    "end": 446
                },
                {
                    "start": 447,
                    "end": 526
                },
                {
                    "start": 527,
                    "end": 583
                },
                {
                    "start": 586,
                    "end": 690
                },
                {
                    "start": 691,
                    "end": 743
                },
                {
                    "start": 744,
                    "end": 866
                },
                {
                    "start": 869,
                    "end": 987
                },
                {
                    "start": 990,
                    "end": 1111
                },
                {
                    "start": 1112,
                    "end": 1256
                },
                {
                    "start": 1257,
                    "end": 1332
                },
                {
                    "start": 1333,
                    "end": 1379
                },
                {
                    "start": 1380,
                    "end": 1564
                },
                {
                    "start": 1565,
                    "end": 1698
                },
                {
                    "start": 1699,
                    "end": 1799
                },
                {
                    "start": 1802,
                    "end": 1939
                },
                {
                    "start": 1940,
                    "end": 2057
                },
                {
                    "start": 2058,
                    "end": 2136
                },
                {
                    "start": 2139,
                    "end": 2223
                }
            ],
            "ref_mentions": [
                {
                    "start": 679,
                    "end": 683,
                    "matchedPaperCorpusId": "3046916"
                },
                {
                    "start": 685,
                    "end": 689,
                    "matchedPaperCorpusId": "14532870"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.499267578125
        },
        {
            "corpus_id": "55308032",
            "title": "The Impact of Online Algorithm Visualization on ICT Students\u2019 Achievements in Introduction to Programming Course",
            "text": "In the present decade, more interactive and application-rich AV environments have been developed. For example, Alice was developed at Carnegie Mellon to enable beginners in computer programming to develop attractive three-dimensional graphic animations (Dann et al., 2000). Scratch is another recently developed AV which has gained great popularity. Scratch enables learners to develop \"interactive, media-rich projects\" (Maloney et al., 2010, p. 1). Like Alice and Scratch, Greenfoot was designed to teach programming in a visual way to those who have no prior programming experience (K\u00f6lling, 2010). \n\nGenerally, educators have used AVs to facilitate lectures, maintain individual learning, support laboratory assignments, and give homework (Hundhausen et al., 2002;Naps, 1990). In their meta-analysis study, Hundhausen and colleagues (2002) indicated that there are four main pedagogical approaches in algorithm visualization: Epistemic Fidelity, Dual-coding, Individual Differences, and Cognitive Constructivism. Epistemic Fidelity emphasizes encoding and transferring experts' mental model to learners through graphic illustration. This theory requires an excellent match between an expert's denotational semantics and the graphical representations. Dual-coding theory highlights two symbolic systems: verbal events and non-verbal events. The use of both words and graphics allows learners to create dual representations in their minds. The individual differences approach underlines the different needs, mental progress, abilities, and learning styles of each individual learner. The learning environment should address individual differences by providing different learning options. Cognitive Constructivism indicates that each individual constructs the knowledge in his/her mind. Each learner establishes the truth by themselves. In the learning process, students must be active and involved. In recent years, in addition to all of these approaches, the game-based learning approach has become a theoretical guide to AV programs. This approach emphasizes goal-oriented, active and enjoyable learning. \n\nSince beginning in the mid-1970s, debates about effectiveness of AV has continued. Recently, developers have begun adapting algorithm visualization to online environments. Online algorithm visualization programs are accessible from computers and mobile devices via the internet. Without a doubt, OAV will be used more widely than the former programs. However, there is presently insufficient evidence about the effectiveness of these online learning tools.",
            "score": 0.36671458161562726,
            "section_title": "Introduction",
            "char_start_offset": 2064,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 97
                },
                {
                    "start": 98,
                    "end": 273
                },
                {
                    "start": 274,
                    "end": 349
                },
                {
                    "start": 350,
                    "end": 450
                },
                {
                    "start": 451,
                    "end": 601
                },
                {
                    "start": 604,
                    "end": 780
                },
                {
                    "start": 781,
                    "end": 1016
                },
                {
                    "start": 1017,
                    "end": 1136
                },
                {
                    "start": 1137,
                    "end": 1254
                },
                {
                    "start": 1255,
                    "end": 1343
                },
                {
                    "start": 1344,
                    "end": 1441
                },
                {
                    "start": 1442,
                    "end": 1585
                },
                {
                    "start": 1586,
                    "end": 1689
                },
                {
                    "start": 1690,
                    "end": 1787
                },
                {
                    "start": 1788,
                    "end": 1837
                },
                {
                    "start": 1838,
                    "end": 1900
                },
                {
                    "start": 1901,
                    "end": 2037
                },
                {
                    "start": 2038,
                    "end": 2108
                },
                {
                    "start": 2111,
                    "end": 2193
                },
                {
                    "start": 2194,
                    "end": 2282
                },
                {
                    "start": 2283,
                    "end": 2389
                },
                {
                    "start": 2390,
                    "end": 2461
                },
                {
                    "start": 2462,
                    "end": 2567
                }
            ],
            "ref_mentions": [
                {
                    "start": 585,
                    "end": 600,
                    "matchedPaperCorpusId": "18208672"
                },
                {
                    "start": 743,
                    "end": 768,
                    "matchedPaperCorpusId": "270116183"
                },
                {
                    "start": 768,
                    "end": 779,
                    "matchedPaperCorpusId": "5923749"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.416015625
        },
        {
            "corpus_id": "11795228",
            "title": "Visual definition of procedures for automatic virtual scene generation",
            "text": "With more and more digital media, especially in the field of virtual reality where detailed and convincing scenes are much required, procedural scene generation is a big helping tool for artists. A problem is that defining scene descriptions through these procedures usually requires a knowledge in formal language grammars, programming theory and manually editing textual files using a strict syntax, making it less intuitive to use.\n\nLuckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task.\n\nIn this thesis, an approach of using a VPL for defining procedures that automatically generate virtual scenes is presented. The methods required to build a VPL are presented, including a novel method of generating readable code in a structured programming language. Also, the methods for achieving basic principles of VPLs will be shownsuitable visual presentation of information and guiding the programmer in the right direction using constraints. On the other hand, procedural generation methods are presented in the context of visual programming -adapting the application programming interface (API) of these methods to better serve the user. The main focus will be on the methods for urban modeling, such as building, city layout and details generation with random number generation used to create non-deterministic scenes.\n\nThese methods are demonstrated on an example of vIDE, a VPL based on the Eclipse IDE. The design of vIDE with respect to the Eclipse Graphical Modeling Framework (GMF) is described. The concept of a flowchart graphical notation is examined, its mapping to an algorithm data structure and the final conversion to a textual program (for example in the scripting language Python). The procedural generation functionality is encapsulated in a C ++ library libprocedural, which uses Ogre as a graphical engine.\n\nTo make the interface between vIDE and libprocedural intuitive, high-level Python bindings were created.\n\nIndex terms -procedural scene generation, Visual programming, VPL, flowchart, programming language, GOTO, WHILE, vIDE, Eclipse, GMF, OCL, libprocedural, Ogre, C ++ , Python",
            "score": 0.3658630631991789,
            "section_title": "Abstract",
            "char_start_offset": 73345,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9072265625
        },
        {
            "corpus_id": "237962799",
            "title": "Implementation and evaluation of a remote seminar on the pedagogical use of educational robotics",
            "text": "There is a long, rich history of attempts and strategies to ease the process of learning to program and make programming engaging and accessible to a broader population. Some of these strategies include a) applying pair-programming and collaborative learning, b) using themes that are attractive to students as a multimedia, game, and/or animation approach, c) using visualized programming to introduce core concepts before more advanced and in-depth courses (Kafai, 2016;Patterson, 2016). As a result, many visualized programming tools have been developed and primarily blocks languages, in which programs are constructed by connecting blocks that resemble puzzle pieces (Grover & Pea, 2013;Guzdial, 2004). These tools have become quite popular in recent years and are increasingly used to introduce novices to programming (Kalogiannakis & Papadakis, 2017a;2017b). To use educational robotics in school, we chose the Scratch programming environment. Then we have to choose a robot, and we chose for the young students up to 12 years old the Thymio and the older ones the Arduino. \n\nScratch is an educational programming environment developed by the eponymous project at the MIT Media Lab. It has a graphic programming language that makes programming more accessible to children (from 8 years and up), teenagers, and other beginner programmers. It is a dynamic interpreted visual programming language, and being dynamic allows changes to the code even during program execution. It aims to teach programming concepts to children and teens and create games, videos, and music. The latest Scratch 3.0 has many extensions available, making it easy to interface with robotic systems. \n\nScratch's innovation lies in the fact that one does not have to type a single line of code to write a program. Language is structured like a puzzle or like LEGO pieces. A user has to drag blocks (pieces of code) and stick them in any way you want in the middle so that the generated script produces the desired action. It is, in essence, a programming environment with which we can make our own interactive stories, our games easily and quickly while at the same time coming in contact with the basic principles of programming. The blocks control the actions of sprites on a canvas. In Scratch, users write programs to manipulate sprites; the default sprite is the Scratch cat.",
            "score": 0.3656006446010334,
            "section_title": "Scratch, Arduino, Thymio",
            "char_start_offset": 14795,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 169
                },
                {
                    "start": 170,
                    "end": 489
                },
                {
                    "start": 490,
                    "end": 707
                },
                {
                    "start": 708,
                    "end": 865
                },
                {
                    "start": 866,
                    "end": 950
                },
                {
                    "start": 951,
                    "end": 1080
                },
                {
                    "start": 1083,
                    "end": 1189
                },
                {
                    "start": 1190,
                    "end": 1344
                },
                {
                    "start": 1345,
                    "end": 1477
                },
                {
                    "start": 1478,
                    "end": 1574
                },
                {
                    "start": 1575,
                    "end": 1678
                },
                {
                    "start": 1681,
                    "end": 1791
                },
                {
                    "start": 1792,
                    "end": 1849
                },
                {
                    "start": 1850,
                    "end": 1999
                },
                {
                    "start": 2000,
                    "end": 2208
                },
                {
                    "start": 2209,
                    "end": 2263
                },
                {
                    "start": 2264,
                    "end": 2358
                }
            ],
            "ref_mentions": [
                {
                    "start": 459,
                    "end": 472,
                    "matchedPaperCorpusId": "19437271"
                },
                {
                    "start": 672,
                    "end": 692,
                    "matchedPaperCorpusId": "1266139"
                },
                {
                    "start": 692,
                    "end": 706,
                    "matchedPaperCorpusId": "6339931"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.759765625
        },
        {
            "corpus_id": "248510289",
            "title": "Programming Experience Requirements for Future Visual Development Environments",
            "text": ": Visual programming is widely adopted for teaching purposes, considered as an appropriate starting base before introducing learners to typical programming languages. However, the progress in such tools is very slow and limited compared to standard programming environments. Moreover, there is no systematic classification regarding the most important requirements to improve the support of visual programming tasks. In this context, we introduce programming experience as the context-specific notion of user-experience for the programming domain. Then, we identify three groups of requirements relating to language, interaction and tools, and elaborate with specific requirements per group. In this analysis, we study related examples from current tools in various domains, while we propose scenarios inspired from source-based programming environments.",
            "score": 0.36498851303176744,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.87060546875
        },
        {
            "corpus_id": "252233721",
            "title": "A case study of the integration of Algorithm Visualizations in Hungarian programming education",
            "text": "Sorting Out Sorting: in the case of the video material, the quantitative and colourful representation of the data and the presentation of each step with animation were mentioned. \n\nVisuAlgo: colour data representation, pseudocode is displayed next to the visualization, the speed of the process can be adjusted, the input can be modified (also randomized). \n\nAlgTan: compared to the previous one, there is no column appearance here, the algorithm also appears in the form of pseudocode, structure program and C ++ code, the algorithm can be scaled, but it can also be played automatically. \n\nCodeCombat: possibility for playful learning, detailed visual display, easyto-understand description associated with tasks, playable step-by-step . \n\nCodinGame: the possibility of playful learning, more difficult tasks are available, more detailed, task-specific visualizations are displayed, several programming languages can be used, not only does the website allow individual practice, but we can also compare our knowledge to that of others'. \n\nCS Unplugged: it is possible to think (about algorithmic solutions) without a computer, it is also a useful tool for young people, teacher communication helps the learning process. \n\nAccording to the interviewee, the most important elements were the possibility of interaction, the introduction of playful elements and the detailed visual representation, and also that the description of the algorithm could be displayed in as many programming languages as possible. While the subject never met a tool like these, found that it could be very useful in the programming education.",
            "score": 0.36498851303176744,
            "section_title": "Third subject:",
            "char_start_offset": 17685,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 178
                },
                {
                    "start": 181,
                    "end": 356
                },
                {
                    "start": 359,
                    "end": 589
                },
                {
                    "start": 592,
                    "end": 739
                },
                {
                    "start": 742,
                    "end": 1038
                },
                {
                    "start": 1041,
                    "end": 1221
                },
                {
                    "start": 1224,
                    "end": 1507
                },
                {
                    "start": 1508,
                    "end": 1619
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.5341796875
        },
        {
            "corpus_id": "264387086",
            "title": "Improving CS1 Programming Learning with Visual Execution Environments",
            "text": "Students in their first year of computer science (CS1) at universities typically struggle to grasp fundamental programming concepts. This paper discusses research carried out using a Java-based visual execution environment (VEE) to introduce fundamental programming concepts to CS1 students. The VEE guides beginner programmers through the fundamentals of programming, utilizing visual metaphors to explain and direct interactive tasks implemented in Java. The study\u2019s goal was to determine if the use of the VEE in the instruction of a group of 63 CS1 students from four different groups enrolled in two academic institutions (based in Madrid, Spain and Galway, Ireland) results in an improvement in their grasp of fundamental programming concepts. The programming concepts covered included those typically found in an introductory programming course, e.g., input and output, conditionals, loops, functions, arrays, recursion, and files. A secondary goal of this research was to examine if the use of the VEE enhances students\u2019 understanding of particular concepts more than others, i.e., whether there exists a topic-dependent benefit to the use of the VEE. The results of the study found that use of the VEE in the instruction of these students resulted in a significant improvement in their grasp of fundamental programming concepts compared with a control group who received instruction without the use of the VEE. The study also found a pronounced improvement in the students\u2019 grasp of particular concepts (e.g., operators, conditionals, and loops), suggesting the presence of a topic-dependent benefit to the use of the VEE.",
            "score": 0.36498851303176744,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8388671875
        },
        {
            "corpus_id": "239179809",
            "title": "Is Mathematics Required for Cooking? An Interdisciplinary Approach to Integrating Computational Thinking in a Culinary and Restaurant Management Course",
            "text": "Alberts and Stevenson [38] stated that digital media refers to interactive information exchange and communication media that uses multiple media or a combination of two or more media in computer application systems. Digital media is computer-centric and can simultaneously present text, images, audio and animations. When instruction is delivered through digital media, students make obvious gains in terms of knowledge, attitudes and intentions in relation to food. \n\nTraditional text-based programming design focuses mainly on abstract concepts. For many students, this learning method is challenging and it can easily lead to low interest and fear in learning situations [39]. In comparison, the emergence of the E-visual programming language lowers the threshold of programming learning. Kelleher and Pausch [40] revealed the three common characteristics of the E-visual programming environment: simplifying the programming design process, providing support for students' learning and stimulating students' learning motivation. Selby and Woollard [41] proposed that programming design activities are related to computational thinking ability. While learning programming, students can achieve a complete understanding and application of computational thinking and elements such as disassembly, pattern recognition and abstraction can be included. Regarding the use of E-visualization development tools to learn computational thinking, Schnotz and Bannert [42] and Holmqvist and Wartenberg [43] stated that it is much easier to read graphics than reading texts, which is helpful for the mastery of the entire program structure. Learning with E-visualization is more natural than learning with text only. \n\nHsu et al. [44] applied visualized E-learning with digital media to teaching culinary courses and found that it improved students' culinary skills during training. Malan and Leitner [45] pointed out that, while learning E-visual programming, students feel like they are playing games instead of writing programs, which can help them understand the concept of programming. In teaching, it is possible to program E-visual language and teach using program blocks to guide students in step-by-step thinking; in this way, students do not have to worry about spelling or grammatical errors and can concentrate on the logic and structure of programming [46].",
            "score": 0.36498851303176744,
            "section_title": "Teaching with Digital Media",
            "char_start_offset": 14452,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 215
                },
                {
                    "start": 216,
                    "end": 316
                },
                {
                    "start": 317,
                    "end": 466
                },
                {
                    "start": 469,
                    "end": 547
                },
                {
                    "start": 548,
                    "end": 679
                },
                {
                    "start": 680,
                    "end": 791
                },
                {
                    "start": 792,
                    "end": 1031
                },
                {
                    "start": 1032,
                    "end": 1146
                },
                {
                    "start": 1147,
                    "end": 1349
                },
                {
                    "start": 1350,
                    "end": 1629
                },
                {
                    "start": 1630,
                    "end": 1705
                },
                {
                    "start": 1708,
                    "end": 1871
                },
                {
                    "start": 1872,
                    "end": 2079
                },
                {
                    "start": 2080,
                    "end": 2359
                }
            ],
            "ref_mentions": [
                {
                    "start": 22,
                    "end": 26,
                    "matchedPaperCorpusId": "151987094"
                },
                {
                    "start": 674,
                    "end": 678,
                    "matchedPaperCorpusId": "70424"
                },
                {
                    "start": 812,
                    "end": 816,
                    "matchedPaperCorpusId": "9916677"
                },
                {
                    "start": 1458,
                    "end": 1462,
                    "matchedPaperCorpusId": "6820370"
                },
                {
                    "start": 1719,
                    "end": 1723,
                    "matchedPaperCorpusId": "58938566"
                },
                {
                    "start": 1890,
                    "end": 1894,
                    "matchedPaperCorpusId": "982597"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.58642578125
        },
        {
            "corpus_id": "65439136",
            "title": "An Embedding Technique for Language-Independent Lecturer-Oriented Program Visualization",
            "text": "Nowadays, programming is a promising skill to be learned; the demand of programmer is increased. To align with such trend, several Program Visualization (PV) tools have been developed. Using such tool, user can learn how a particular program works through interactive and descriptive visualization. However, most of the tools are language-dependent: they use either language-dependent debugger or code to generate visualization. Such dependency may become a problem when a program written in new programming language is incorporated. Therefore, this paper proposes an embedding technique to handle given issue. To incorporate new programming language, it only needs five language-dependent features to be set. In general, our proposed technique works in threefold: embedding some statements to target program, generating visualization states by running the program with console commands, and visualizing given program based on generated visualization states. According to our evaluation, proposed technique is able to incorporate program written in any programming languages as long as those languages provide required language-dependent features. Further, it is practical to be used since it still have the benefits of conventional PV even though it is designed as a language-independent PV.",
            "score": 0.36498851303176744,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.74853515625
        },
        {
            "corpus_id": "250319468",
            "title": "Visualizing Source-Code Evolution for Understanding Class-Wide Programming Processes",
            "text": "While efficiency is undoubtedly an important factor in actual use, this study placed the highest priority on establishing an effective visualization method. In future studies, we plan to evaluate the efficiency of the proposed tools in classes and develop more efficient methods. For example, comments obtained from participants mentioned the implementation of interoperability between the two tools, which could be one way to increase efficiency. \n\nThird, the participants did not review every week's programming sessions with the proposed tools. In this study, the evaluation was conducted on programming activities in the early weeks of the course, when students are particularly likely to have problems. As students progress in their learning, their understanding of programming will deepen, and the way they make mistakes may change. Furthermore, since the lesson content differs from week to week, there remains the possibility that individual differences in programming may not be well-represented in some cases. Therefore, the results of this study are only applicable to classes in which students do not have advanced skills and the content is relatively basic. \n\nFuture studies should examine how the proposed tools can be used during actual classes and what improvements teachers can make by using them. At the same time, it is also important to improve the tools so that teachers can use them effectively in the limited time they have in class, including integration of the proposed tools.",
            "score": 0.36498851303176744,
            "section_title": "Conclusions",
            "char_start_offset": 41192,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 156
                },
                {
                    "start": 157,
                    "end": 279
                },
                {
                    "start": 280,
                    "end": 447
                },
                {
                    "start": 450,
                    "end": 547
                },
                {
                    "start": 548,
                    "end": 707
                },
                {
                    "start": 708,
                    "end": 838
                },
                {
                    "start": 839,
                    "end": 1019
                },
                {
                    "start": 1020,
                    "end": 1170
                },
                {
                    "start": 1173,
                    "end": 1314
                },
                {
                    "start": 1315,
                    "end": 1501
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.4091796875
        },
        {
            "corpus_id": "13395203",
            "title": "Visualizing Computer Programming in a Computer-based Simulated Environment",
            "text": "Learning computer programming forms a cause of concern to a large number of novice programmers and students studying this field at the HE level. Research revealed that these concerns are the main reason behind HE students\" withdrawal from their computing courses, achieving poorly or failing the modules that include programming concepts. \n\nResearch also showed that there are a number of software tools to visualize program structure for learners; however, the majority of them promoted static visualization, which did not generate the degree of support needed for the programming complex theoretical process. This research demonstrated that there are strong indications of benefits of visualizing the program structure in virtual worlds, as this platform offers great advantages such as collaboration, simulation, interactivity and experiential learning, which are ideal for learning computer programming. This did not only cover enhancements to students\" understanding of the programming complicated process, but also increased their engagement in the sessions, enhanced affective quality and improved their achievement. \n\nThe future scope could be utilizing virtual reality technology to facilitate the learning of programming with a comprehensive comparison between the advantages and limitations of both computer-based simulated environments. Aspects such as lecturer/students\" satisfaction, ease of use and the technical issues involved could form the main points of the proposed comparison.",
            "score": 0.36498851303176744,
            "section_title": "IV. CONCLUSION AND FUTURE SCOPE",
            "char_start_offset": 41142,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 144
                },
                {
                    "start": 145,
                    "end": 338
                },
                {
                    "start": 341,
                    "end": 610
                },
                {
                    "start": 611,
                    "end": 907
                },
                {
                    "start": 908,
                    "end": 1123
                },
                {
                    "start": 1126,
                    "end": 1348
                },
                {
                    "start": 1349,
                    "end": 1498
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.390380859375
        },
        {
            "corpus_id": "212828512",
            "title": "PointerViz - Towards Visualizing Pointers for Novice Programmers",
            "text": "Researchers have developed various visualization tools to help novice programmers learn programming quicker have been developed. Scratch [5] is a blockbased visualization tool that helps users to program easier by supporting drag and drop of blocks than writing the program. Blockly is also a block-based tool that provides visualization of programs [6]. Coding concepts are represented as interlocked blocks and Blockly generates syntactically correct code in programming language of our choice [6]. Tools like Examplore provide visualization of API usage examples to help users understand various correct ways of using APIs in programming languages [9]. Progranimate, an e-learning web based tool assists users in programming using flow chart representations. It provides code generation, inspects variables and thus provides syntax and semantic learning of programmers to the users. This helps users to gain an in-depth sound knowledge of the programming language [15]. NetBlox is another visualization tool that has been developed to enhance understanding of distributed programming [16]. In this tool, messages that are communicated among systems are represented as blocks with message payloads. Programmers are provisioned to provide Message Type that defines data present in the message. \n\nGames is another direction of research that has been leveraged to make programming interesting and easy [17,18,19,20].One of the games developed by Leutenegger et al. teaches fundamental programming concepts in C++language, with the help of 2D game development [18].Robot ON! is a game developed to improve program 1 https://github.com/AkhilaSriManasa/ PointerViz Comprehension among learners. It helps players in understanding of control flow, program statements, data types and function calls by allowing players to demonstrate their understanding of the above in a given program [19]. RoBUG game has been developed to support and motivate players in learning of effective debugging. It comprises of four levels that require player to do certain tasks in each of them, like code tracing, using print statements to identify bugs, use divide-and-conquer strategy to spot the bugs and using breakpoints to analyze variable values [20]. \n\nExtensions to GCspy tool have been developed, that track and visualize dynamic memory allocations as nodes and graphs [21].",
            "score": 0.36498851303176744,
            "section_title": "Related Work",
            "char_start_offset": 3665,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 128
                },
                {
                    "start": 129,
                    "end": 274
                },
                {
                    "start": 275,
                    "end": 354
                },
                {
                    "start": 355,
                    "end": 500
                },
                {
                    "start": 501,
                    "end": 655
                },
                {
                    "start": 656,
                    "end": 761
                },
                {
                    "start": 762,
                    "end": 885
                },
                {
                    "start": 886,
                    "end": 972
                },
                {
                    "start": 973,
                    "end": 1092
                },
                {
                    "start": 1093,
                    "end": 1200
                },
                {
                    "start": 1201,
                    "end": 1294
                },
                {
                    "start": 1297,
                    "end": 1649
                },
                {
                    "start": 1650,
                    "end": 1690
                },
                {
                    "start": 1691,
                    "end": 1884
                },
                {
                    "start": 1885,
                    "end": 1982
                },
                {
                    "start": 1983,
                    "end": 2231
                },
                {
                    "start": 2234,
                    "end": 2357
                }
            ],
            "ref_mentions": [
                {
                    "start": 137,
                    "end": 140,
                    "matchedPaperCorpusId": "13884453"
                },
                {
                    "start": 350,
                    "end": 353,
                    "matchedPaperCorpusId": "7626370"
                },
                {
                    "start": 496,
                    "end": 499,
                    "matchedPaperCorpusId": "7626370"
                },
                {
                    "start": 651,
                    "end": 654,
                    "matchedPaperCorpusId": "4492862"
                },
                {
                    "start": 967,
                    "end": 971,
                    "matchedPaperCorpusId": "16333142"
                },
                {
                    "start": 1087,
                    "end": 1091,
                    "matchedPaperCorpusId": "15372150"
                },
                {
                    "start": 1401,
                    "end": 1405,
                    "matchedPaperCorpusId": "1296380"
                },
                {
                    "start": 1405,
                    "end": 1408,
                    "matchedPaperCorpusId": "3103690"
                },
                {
                    "start": 1408,
                    "end": 1411,
                    "matchedPaperCorpusId": "16391217"
                },
                {
                    "start": 1411,
                    "end": 1414,
                    "matchedPaperCorpusId": "20227428"
                },
                {
                    "start": 1558,
                    "end": 1562,
                    "matchedPaperCorpusId": "3103690"
                },
                {
                    "start": 1879,
                    "end": 1883,
                    "matchedPaperCorpusId": "16391217"
                },
                {
                    "start": 2226,
                    "end": 2230,
                    "matchedPaperCorpusId": "20227428"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.68212890625
        },
        {
            "corpus_id": "32610688",
            "title": "Identifying middle school students\u2019 challenges in computational thinking-based science learning",
            "text": "In a visual programming (VP) environment, students construct programs using graphical objects and a drag-and-drop interface, thus making the programming more intuitive and accessible to the novice programmer (Kelleher and Pausch 2005). Visual constructs significantly reduce issues with program syntax and understanding textual structures making it easier for students to focus on the semantic meaning of the constructs (Soloway 1993). For example, visual interfaces make it easier to interpret and use flow of control constructs, such as loops and conditionals (Parsons and Haden 2007a, b). \n\nCTSiM provides a library of visual constructs that students can choose from and arrange spatially to generate their computational models. If students try to drag and drop a programming construct incorrectly, the system disallows the action and indicates the error by explicitly displaying an \"x\" sign. Therefore, CTSiM eliminates the possibility of generating programs (that is, models) with syntax errors. Examples of other agent-based VP environments include AgentSheets (Repenning 1993), StarLogo TNG (Klopfer et al. 2005), Scratch (Maloney et al. 2004), ViMAP (Sengupta et al., 2015), and Alice (Conway 1997). They have been used successfully in teaching children CT through game design, storytelling, and modeling activities.",
            "score": 0.36498851303176744,
            "section_title": "The advantages of visual programming",
            "char_start_offset": 11363,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 235
                },
                {
                    "start": 236,
                    "end": 435
                },
                {
                    "start": 436,
                    "end": 591
                },
                {
                    "start": 594,
                    "end": 731
                },
                {
                    "start": 732,
                    "end": 895
                },
                {
                    "start": 896,
                    "end": 1000
                },
                {
                    "start": 1001,
                    "end": 1207
                },
                {
                    "start": 1208,
                    "end": 1324
                }
            ],
            "ref_mentions": [
                {
                    "start": 208,
                    "end": 234,
                    "matchedPaperCorpusId": "9916677"
                },
                {
                    "start": 420,
                    "end": 434,
                    "matchedPaperCorpusId": "15270981"
                },
                {
                    "start": 1067,
                    "end": 1083,
                    "matchedPaperCorpusId": "3187251"
                },
                {
                    "start": 1098,
                    "end": 1119,
                    "matchedPaperCorpusId": "54120970"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.90869140625
        },
        {
            "corpus_id": "231725028",
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "text": "Visual programming is a subset of the end-user development field (EUD). Other subsets of EUD include End-user programming (EUP), which mainly focuses on enabling end users to create their own programs [12], while EUD tackles the entire software life cycle including maintainability, and extensibility. End-user Software Engineering (EUSE) is another related research area which focuses on the quality attributes of the software developed by end users including reusability, security, and verifiability [77]. \n\nVisual programming refers to approaches and methods that use two-dimensional graphical elements to allow nonprogrammer end-users to create, extend, and customize software applications [9]. Visual programming languages (VPLs) are described by programming constructs and rules which are visually depicted [13]. \n\nThere are two widely known taxonomies for visual programming languages: (1) Myers [1] classified visual programming languages by specification techniques. Certain categories in Myers' classification can be generalized into one category. As an example, data-flow graphs, directed graphs, and flowcharts can be considered diagrammatic VPLs. (2) Burnett and Baker [2], on the other hand, listed three broad subcategories under ''visual representations'' namely: diagrammatic languages, iconic languages, and languages based on static pictorial sequences. This classification, while highly useful, does not list the form-based VPLs mentioned in Myers' classification. \n\nCombining the taxonomies developed by Myers [1] and Burnett and Baker [2], we divide VPLs into four categories: form-based languages, block-based languages, diagrambased languages, and icon-based languages. All categories (or subcategories), based on visual program representation, presented in both [1] and [2] are assigned to a category under our new categorization. For instance, block-based languages represent jigsaw puzzle pieces in [1], while diagram-based languages cover diagrammatic languages in [2], data flow graphs and directed graphs in [1]. Further, we filtered out the subcategories in [1] which apply to textual programming languages. \n\nWe define the VPL categories as follows:",
            "score": 0.36498851303176744,
            "section_title": "II. BACKGROUND",
            "char_start_offset": 5284,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 71
                },
                {
                    "start": 72,
                    "end": 301
                },
                {
                    "start": 302,
                    "end": 507
                },
                {
                    "start": 510,
                    "end": 698
                },
                {
                    "start": 699,
                    "end": 818
                },
                {
                    "start": 821,
                    "end": 975
                },
                {
                    "start": 976,
                    "end": 1057
                },
                {
                    "start": 1058,
                    "end": 1159
                },
                {
                    "start": 1160,
                    "end": 1372
                },
                {
                    "start": 1373,
                    "end": 1484
                },
                {
                    "start": 1487,
                    "end": 1693
                },
                {
                    "start": 1694,
                    "end": 1855
                },
                {
                    "start": 1856,
                    "end": 2042
                },
                {
                    "start": 2043,
                    "end": 2138
                },
                {
                    "start": 2141,
                    "end": 2181
                }
            ],
            "ref_mentions": [
                {
                    "start": 502,
                    "end": 506,
                    "matchedPaperCorpusId": "15687689"
                },
                {
                    "start": 694,
                    "end": 697,
                    "matchedPaperCorpusId": "8272806"
                },
                {
                    "start": 813,
                    "end": 817,
                    "matchedPaperCorpusId": "41867280"
                },
                {
                    "start": 903,
                    "end": 906,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 1182,
                    "end": 1185,
                    "matchedPaperCorpusId": "1426814"
                },
                {
                    "start": 1531,
                    "end": 1534,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 1557,
                    "end": 1560,
                    "matchedPaperCorpusId": "1426814"
                },
                {
                    "start": 1787,
                    "end": 1790,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 1795,
                    "end": 1798,
                    "matchedPaperCorpusId": "1426814"
                },
                {
                    "start": 1926,
                    "end": 1929,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 1993,
                    "end": 1996,
                    "matchedPaperCorpusId": "1426814"
                },
                {
                    "start": 2038,
                    "end": 2041,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 2089,
                    "end": 2092,
                    "matchedPaperCorpusId": "7335020"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.96044921875
        },
        {
            "corpus_id": "202566030",
            "title": "Scenior: An Immersive Visual Scripting system of Gamified Training based on VR Software Design Patterns",
            "text": "Visual programming is getting more publicity as more platforms and tools are emerging to enlarge the community. We can separate them into two categories according to their visual appearance and basic functionalities: a) block-based and b) node-based scripting languages Block-based visual languages consist of modular blocks that represent fundamental programming utilities (if else, while, for loops etc.) or even custom prototypes that describe more complex functionalities. OpenBlocks [27] proposes an extendable framework that enables application developers to build their own graphical block programming systems by specifying a single XML file. Google's online visual scripting platform Blocky [24] uses interlocking, graphical blocks to represent code concepts like variables, logical expressions, loops, and other basic programming patterns to export blocks to many programming languages like JavaScript, Python, PHP and Lua. Another approach from MIT is StarLogo [17], a client-based modeling and simulation software which facilitates the generation and understanding of simulations of complex systems. StarLogo utilize 3D graphics, sounds and a block based interface to facilitate as a programming tool for educational video games. Finally, another interesting approach is the Scratch [18] visual programming language and environment, which primarily targets ages 8 to 16 offering an authoring tool to support self-directed learning through tinkering and collaboration with peers. \n\nOn the other hand, node-based visual languages, represent structures and data flow using logical nodes linked with edges reflecting their correlation. The resulting structure looks like a directed graph that provides users with a visual overview of important data and program flow. GRaIL [8] was one of the first systems that featured a visual scripting method for the creation of computer instructions based on cognitive visual patterns. It was used to make sophisticated programs that can be compiled and run at full speed, or stepped through with a debugging interpreter that can run the program at variable speeds. More recently, [16] published three case studies on Visual programming for building information modeling (BIM) utilizing Dynamo, an pen source graphical programming framework for design. a lightweight tool with an intuitive user interface for commissioning of IP-enabled WSNs.",
            "score": 0.36173949247405796,
            "section_title": "Visual Programming as an authoring tool",
            "char_start_offset": 7334,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 111
                },
                {
                    "start": 112,
                    "end": 476
                },
                {
                    "start": 477,
                    "end": 649
                },
                {
                    "start": 650,
                    "end": 932
                },
                {
                    "start": 933,
                    "end": 1110
                },
                {
                    "start": 1111,
                    "end": 1240
                },
                {
                    "start": 1241,
                    "end": 1489
                },
                {
                    "start": 1492,
                    "end": 1642
                },
                {
                    "start": 1643,
                    "end": 1773
                },
                {
                    "start": 1774,
                    "end": 1930
                },
                {
                    "start": 1931,
                    "end": 2110
                },
                {
                    "start": 2111,
                    "end": 2297
                },
                {
                    "start": 2298,
                    "end": 2387
                }
            ],
            "ref_mentions": [
                {
                    "start": 699,
                    "end": 703,
                    "matchedPaperCorpusId": "2701916"
                },
                {
                    "start": 971,
                    "end": 975,
                    "matchedPaperCorpusId": "54120970"
                },
                {
                    "start": 1294,
                    "end": 1298,
                    "matchedPaperCorpusId": "9744698"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8818359375
        },
        {
            "corpus_id": "266514821",
            "title": "EntangleVR++: evaluating the potential of using entanglement in an interactive VR scene creation system",
            "text": "Visual programming systems (VPS) offer an opportunity to enable novice and casual users to create complex programs by using graphical elements and little training Myers (1990).Because the variable states and data flows of a program are visualized, visual programming is often used in educational environments to help students understand relatively difficult concepts Tamilselvam et al. (2019);Pinto-Llorente et al. (2016); Krishnamoorthy and Kapila (2016).Visualization and immediate feedback in a VPS matches with the graphical interface concept of What-You-eXperience-Is-What-You-Get (WYXIWYG) Lee et al. (2005).In an ideal VR authoring tool, the creator would immediately see and experience the output during the creation process.The simplicity of creation provided by the combination of visual programming and WYXIWYG has led to the design of a few VR authoring tools and platforms in recent years.For example, Dreams20 is an immersive creation system on the PlayStation gaming console that is widely used by artists to create interactive VR mini-game worlds via its visual programming interface and scene composing tools.Scenior is a visual scripting system capable of generating VR training scenarios accompanied by a VR editor to interactively control and edit the generated training content Zikas et al. (2020).Ivy is a spatially situated visual programming tool that allows users to link IoT objects and insert logic constructs with visualized real-time data flow to compose mixed reality experiences Ens et al. (2017).FlowMatic is another recent system that provides a reactive visual programming and immersive authoring interface that allows the creator to compose interactive VR experiences Zhang and Oney (2020).EntangleVR++ leverages the benefits of visual programming as well as WYXIWYG interfaces to allow creators to interactively preview their composed visual programs without compiling and building.It supports a fast test and iteration process where artists can interact to see how multiple virtual objects are entangled in a scene and how they may produce different outcomes upon different interactions.",
            "score": 0.3614349632155474,
            "section_title": "Visual Programming for VR Authoring",
            "char_start_offset": 9178,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 176
                },
                {
                    "start": 176,
                    "end": 456
                },
                {
                    "start": 456,
                    "end": 614
                },
                {
                    "start": 614,
                    "end": 733
                },
                {
                    "start": 733,
                    "end": 902
                },
                {
                    "start": 902,
                    "end": 1126
                },
                {
                    "start": 1126,
                    "end": 1319
                },
                {
                    "start": 1319,
                    "end": 1528
                },
                {
                    "start": 1528,
                    "end": 1725
                },
                {
                    "start": 1725,
                    "end": 1918
                },
                {
                    "start": 1918,
                    "end": 2124
                }
            ],
            "ref_mentions": [
                {
                    "start": 163,
                    "end": 175,
                    "matchedPaperCorpusId": "7335020"
                },
                {
                    "start": 393,
                    "end": 421,
                    "matchedPaperCorpusId": "7166572"
                },
                {
                    "start": 423,
                    "end": 455,
                    "matchedPaperCorpusId": "18184791"
                },
                {
                    "start": 596,
                    "end": 613,
                    "matchedPaperCorpusId": "5744929"
                },
                {
                    "start": 1299,
                    "end": 1318,
                    "matchedPaperCorpusId": "221070583"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.84375
        },
        {
            "corpus_id": "58120197",
            "title": "Effectiveness of Program Visualization in Learning Java: a Case Study with Jeliot 3",
            "text": "The paper discussed the problem of the applications of software for visualization Jeliot3 in learning the programming language Java. The study involved 400 students of two higher education institutions in Serbia. Based on the research, which lasted for two years, it can be stated that there are significant differences in the achievements of students who were taught in the traditional way, and those who have used Jeliot3. Through well-defined messages from the compiler Jeliot indicates to the user where the syntax errors in code are. The goal is to help novices understand basic concepts of algorithms and programming like assignment, I/O and control flow, whose dynamic aspects are not easily grasped just by looking at the static representation of an algorithm in a programming language [11]. Software Visualization tools are intended to be used in the early stages of the learning path of a programmer, teaching the students the basics of programming, algorithms, and the software development cycle [17]. While a future experiment involving Jeliot and more advanced students (in terms of programming) may provide interesting results, it is the belief of the authors that this particular program works best with beginner students. \n\nIt is not possible to \"eject\" teachers from the teaching process and replace them with a computer, but it is necessary to ensure their active participation during the animation code so that students receive the necessary explanation. Using visualization tools should be intense, in the sense that teachers need to use it in the teaching process, and students in laboratory exercises as well as when working at home. Of course, further research in this field is required. Although this study did not directly deal with the influence of Jeliot to accelerate learning processes, based on previous research of the authors [18] about the visualization of some selected parts of the course Analogue and Digital Electronics that has shown that interactive animations can significantly contribute to increasing the speed of learning, it can be assumed that Jeliot could be especially helpful to beginners in learning Java in the same way. It must be noted that it is already clear there is a need for different tools for learning depending on the level of students' knowledge of the studied materials. Advanced students and even students with only superficial experience in programming are very sensitive to the change of tools that are used as a code editor, if it does not provide significant improvement over the tools they are used on.",
            "score": 0.3614349632155474,
            "section_title": "Conclusions",
            "char_start_offset": 25000,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 132
                },
                {
                    "start": 133,
                    "end": 212
                },
                {
                    "start": 213,
                    "end": 424
                },
                {
                    "start": 425,
                    "end": 538
                },
                {
                    "start": 539,
                    "end": 799
                },
                {
                    "start": 800,
                    "end": 1012
                },
                {
                    "start": 1013,
                    "end": 1237
                },
                {
                    "start": 1240,
                    "end": 1473
                },
                {
                    "start": 1474,
                    "end": 1655
                },
                {
                    "start": 1656,
                    "end": 1710
                },
                {
                    "start": 1711,
                    "end": 2170
                },
                {
                    "start": 2171,
                    "end": 2333
                },
                {
                    "start": 2334,
                    "end": 2571
                }
            ],
            "ref_mentions": [
                {
                    "start": 794,
                    "end": 798,
                    "matchedPaperCorpusId": "46185353"
                },
                {
                    "start": 1007,
                    "end": 1011,
                    "matchedPaperCorpusId": "10952531"
                },
                {
                    "start": 1858,
                    "end": 1862,
                    "matchedPaperCorpusId": "6797723"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.56982421875
        },
        {
            "corpus_id": "276684953",
            "title": "Two Approaches for Programming Education in the Domain of Graphics: An Experiment",
            "text": "There are multiple senses in which programming education can be related to graphics. This section clarifies the scope of this work. \n\nA fundamental separation exists between graphical and text-based programming. Doing 'graphical programming' commonly means using a visual programming language to create programs graphically, instead of textually. Scratch [33] is an example of a visual programming language popular in educational contexts at the school level. Scratch programs are composed of 'blocks' connected visually. The success of blockbased visual programming languages led to the creation of Blockly [44], a library that facilitates the creation of other block-based languages. Scratch also inspired the creation of Snap! [26], a block-based language in which users can define their own blocks. Our work instead concerns text-based programming languages, which university-level educational contexts use more frequently. \n\nEven when written using text-based programming languages, programs can involve 'the domain of graphics' to different extents. For instance, a program can produce 'static' graphics (2D or 3D), 'animated' graphics, or 'interactive' graphics (known as Graphical User Interfaces). \n\nWhile creating interactive graphical programs has also been explored as a possibility to learn programming (e.g., [17,34]), our work focuses on approaches to create static 2D graphics, among which there is already considerable variety.",
            "score": 0.3614349632155474,
            "section_title": "Graphics and Programming Education",
            "char_start_offset": 3499,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 84
                },
                {
                    "start": 85,
                    "end": 131
                },
                {
                    "start": 134,
                    "end": 211
                },
                {
                    "start": 212,
                    "end": 346
                },
                {
                    "start": 347,
                    "end": 459
                },
                {
                    "start": 460,
                    "end": 521
                },
                {
                    "start": 522,
                    "end": 685
                },
                {
                    "start": 686,
                    "end": 802
                },
                {
                    "start": 803,
                    "end": 927
                },
                {
                    "start": 930,
                    "end": 1055
                },
                {
                    "start": 1056,
                    "end": 1206
                },
                {
                    "start": 1209,
                    "end": 1444
                }
            ],
            "ref_mentions": [
                {
                    "start": 355,
                    "end": 359,
                    "matchedPaperCorpusId": "9744698"
                },
                {
                    "start": 608,
                    "end": 612,
                    "matchedPaperCorpusId": "2701916"
                },
                {
                    "start": 730,
                    "end": 734,
                    "matchedPaperCorpusId": "220755838"
                },
                {
                    "start": 1323,
                    "end": 1327,
                    "matchedPaperCorpusId": "3102760"
                },
                {
                    "start": 1327,
                    "end": 1330,
                    "matchedPaperCorpusId": "14479674"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8193359375
        },
        {
            "corpus_id": "226841104",
            "title": "The Use of Color Gradation on Program Visualization for Learning Programming",
            "text": "In general, educational tools for learning programming can be classified into twofold: standard educational tool and Software Visualization (SV). Standard educational tool enhances user understanding with no strong emphasis on visualizing software (i.e. program) data and process. For instance, a work proposed by [2] is more focused on comparing both algorithm and program time complexity in empirical manner. Other examples are the work proposed by [3,4]; they are primarily focused on active learning about Greedy algorithm. In contrast, SV enhances student understanding with a strong emphasis on visualizing software data and process [1]. Since software can be perceived from two perspectives, SV is usually classified further to two sub-categories: Algorithm and Program Visualization. \n\nAlgorithm Visualization (AV) focuses on visualizing algorithm (i.e. an abstractive representation of program). This kind of tool is frequently used to cover complex topics such as data structures and ISSN 2355-0082 algorithm strategies. First, a work in [5] proposes an AV for learning basic data structure material in accordance with an undergraduate course in a private university. Second, a work in [6] proposes a webbased portal for learning data structure and algorithm where more emphasis is given on data structure; the materials itself vary from the simplest one (e.g. stack) to the most complex one (e.g. graph). Third, a work in [7] proposes an AV for learning algorithm strategies by example; it covers brute force, dynamic programming, backtracking, and greedy algorithm strategy. Last, a work in [8] proposes an AV for learning branch \\& bound strategy; it utilizes traveling salesperson problem as its case study. \n\nDifferent with AV, Program Visualization (PV) focuses on visualizing program. Several examples of such tool are PythonTutor, Jelliot 3, Ville, Omnicode, and PITON. First, PythonTutor [9] is a web-based PV that is originally designed to teach user how Python program works. Second, Jelliot 3 [10] is a PV for learning Java program. Third, Ville [11] is a PV with language-independent design; new programming language can be incorporated directly as long as it has similar characteristic with the existing ones.",
            "score": 0.3614349632155474,
            "section_title": "II. RELATED WORKS",
            "char_start_offset": 2160,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 145
                },
                {
                    "start": 146,
                    "end": 253
                },
                {
                    "start": 254,
                    "end": 280
                },
                {
                    "start": 281,
                    "end": 410
                },
                {
                    "start": 411,
                    "end": 527
                },
                {
                    "start": 528,
                    "end": 643
                },
                {
                    "start": 644,
                    "end": 791
                },
                {
                    "start": 794,
                    "end": 904
                },
                {
                    "start": 905,
                    "end": 1030
                },
                {
                    "start": 1031,
                    "end": 1177
                },
                {
                    "start": 1178,
                    "end": 1370
                },
                {
                    "start": 1371,
                    "end": 1407
                },
                {
                    "start": 1408,
                    "end": 1415
                },
                {
                    "start": 1416,
                    "end": 1586
                },
                {
                    "start": 1587,
                    "end": 1721
                },
                {
                    "start": 1724,
                    "end": 1801
                },
                {
                    "start": 1802,
                    "end": 1887
                },
                {
                    "start": 1888,
                    "end": 1996
                },
                {
                    "start": 1997,
                    "end": 2054
                },
                {
                    "start": 2055,
                    "end": 2233
                }
            ],
            "ref_mentions": [
                {
                    "start": 314,
                    "end": 317,
                    "matchedPaperCorpusId": "195973260"
                },
                {
                    "start": 451,
                    "end": 454,
                    "matchedPaperCorpusId": "16343597"
                },
                {
                    "start": 454,
                    "end": 456,
                    "matchedPaperCorpusId": "26801929"
                },
                {
                    "start": 639,
                    "end": 642,
                    "matchedPaperCorpusId": "12752102"
                },
                {
                    "start": 1048,
                    "end": 1051,
                    "matchedPaperCorpusId": "57857055"
                },
                {
                    "start": 1196,
                    "end": 1199,
                    "matchedPaperCorpusId": "63179283"
                },
                {
                    "start": 1433,
                    "end": 1436,
                    "matchedPaperCorpusId": "55160332"
                },
                {
                    "start": 1603,
                    "end": 1606,
                    "matchedPaperCorpusId": "56002529"
                },
                {
                    "start": 1907,
                    "end": 1910,
                    "matchedPaperCorpusId": "8193806"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.82861328125
        },
        {
            "corpus_id": "252100466",
            "title": "iProgVR: Design of a Virtual Reality Environment to Improve Introductory Programming Learning",
            "text": "As with most studies, alternative methods are considered when coming up with an approach to address the gaps presented in this study. Some of the alternative methods include visual programming, tangible tools, and game-based learning experiences. However, these techniques are deemed unsuitable for the aim of this study, which is to solve issues faced by students when learning computer programming. For instance, visual programming makes programming less daunting by allowing users to build programs without the need to worry about syntax [51]. However, since this study aims to address misconceptions and since misconceptions of programming concepts also cause syntax errors [21], the nature of visual programming languages that do not expose users to syntax does not coincide with this aim. For the same reason, visual programming does not meet the requirements of the spiral approach which aims to strengthen both semantic and syntactical knowledge at the same time [76]. As mentioned, it is important to have students visualize the computer memory as a large storage space capable of storing many pieces of data [83]. Hence, while tangible tools support the constructivist learning theory [30], [31], it may require extensive effort on the educator's side to prepare elaborate cardboard setups to visualize a computer's memory. However, this is not an issue for pre-developed VR environments that can be shared  in educational contexts [95], [96], [97].",
            "score": 0.3614349632155474,
            "section_title": "F. ALTERNATIVE METHODOLOGIES",
            "char_start_offset": 30792,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 133
                },
                {
                    "start": 134,
                    "end": 246
                },
                {
                    "start": 247,
                    "end": 400
                },
                {
                    "start": 401,
                    "end": 546
                },
                {
                    "start": 547,
                    "end": 794
                },
                {
                    "start": 795,
                    "end": 976
                },
                {
                    "start": 977,
                    "end": 1123
                },
                {
                    "start": 1124,
                    "end": 1333
                },
                {
                    "start": 1334,
                    "end": 1459
                }
            ],
            "ref_mentions": [
                {
                    "start": 678,
                    "end": 682,
                    "matchedPaperCorpusId": "67866357"
                },
                {
                    "start": 1195,
                    "end": 1199,
                    "matchedPaperCorpusId": "4841775"
                },
                {
                    "start": 1201,
                    "end": 1205,
                    "matchedPaperCorpusId": "18297414"
                },
                {
                    "start": 1448,
                    "end": 1452,
                    "matchedPaperCorpusId": "216132591"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.41064453125
        },
        {
            "corpus_id": "18505493",
            "title": "First Steps Towards a Visualization-Based Computer Science Hypertextbook as a Moodle Module",
            "text": "Algorithm visualization (AV) has a long tradition in visually presenting dynamic contentstypically, algorithms and data structures. The discipline and its associated tools promise easier learning and better motivation for learners. However, while surveys usually show interest in AV use, the adoption of AV by educators is lower than the proponents and developers of such systems would hope and expect. In the following, we will use the term AV whenever we refer to algorithm or program visualization or animation. \n\nIn a survey performed by the ITiCSE 2002 Working Group on 'Improving the Educational Impact of Algorithm Visualization\", the main reasons why educators do not use AV materials in their lectures can be reduced to two aspects: the time required to do so and the lack of integration with existing teaching materials (Naps et al., 2003). \n\nSince that report, several approaches have addressed the time aspect, for example by providing tools or generators for quickly producing content that fits the educator's or learner's expectations, and allow the user to specify the input values (R\u00f6\u00dfling and Ackermann, 2006;Naps, 2005). However, the integration of AV into the learning materials still needs to be addressed. \n\nA 2006 ITiCSE Working Group therefore proposed a combination of hypertext-based textual materials with image, video, and AV content, as well as aspects from a learning management system (R\u00f6\u00dfling et al., 2006). This combination was called a Visualization-based Computer Science Hypertextbook (VizCoSH) to illustrate the main aspect form the Working Group's point of view: the seamless integration of AV materials into the learning materials used for a course. \n\nIn this paper, we present our first approach of implementing a VizCoSH. As stated by previous authors of related hypertextbooks, the effort required to create a full-fledged hypertextbook is intense. The well-known theory hypertextbook Snapshots of the Theory of Computing (Ross, 2006;Boroni et al., 2002), while far from finished, already represents the work of about twelve years. Therefore, it seems unlikely that a full-fledged VizCoSH -including the features \"borrowed\" from course or learning management systems described in the Working Group Report (R\u00f6\u00dfling et al., 2006) -could already exist if it were built from scratch since 2006.",
            "score": 0.3614349632155474,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 131
                },
                {
                    "start": 132,
                    "end": 231
                },
                {
                    "start": 232,
                    "end": 402
                },
                {
                    "start": 403,
                    "end": 514
                },
                {
                    "start": 517,
                    "end": 850
                },
                {
                    "start": 853,
                    "end": 1138
                },
                {
                    "start": 1139,
                    "end": 1226
                },
                {
                    "start": 1229,
                    "end": 1438
                },
                {
                    "start": 1439,
                    "end": 1687
                },
                {
                    "start": 1690,
                    "end": 1761
                },
                {
                    "start": 1762,
                    "end": 1889
                },
                {
                    "start": 1890,
                    "end": 2072
                },
                {
                    "start": 2073,
                    "end": 2331
                }
            ],
            "ref_mentions": [
                {
                    "start": 830,
                    "end": 849,
                    "matchedPaperCorpusId": "1555643"
                },
                {
                    "start": 1097,
                    "end": 1126,
                    "matchedPaperCorpusId": "6950491"
                },
                {
                    "start": 1126,
                    "end": 1137,
                    "matchedPaperCorpusId": "1284319"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.31689453125
        },
        {
            "corpus_id": "3949077",
            "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications",
            "text": "The objectives of this research subject are:\n\n1. Creating a Framework for creating visual programming languages to help us in creating the visual programming language components faster. The framework must contains the designers and domain-specific language to quickly create the visual programming language components. The implementation of each component should be done in little minutes to ensure the high-level of productivity. 2. Designing a General-Purpose visual programming language to make programming easier to understand for audiences other than programmers and to help expert programmers to quickly create programs and applications in less time. 3. Implementing the General-Purpose visual programming language through an information system that support programs and applications creation and manipulation, to reduce errors and to help users program faster. 4. Evaluating the system in developing business applications and comparing this to using other traditional programming languages that are text based.",
            "score": 0.3614349632155474,
            "section_title": "Research Objectives",
            "char_start_offset": 11043,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 657,
                    "end": 658,
                    "matchedPaperCorpusId": "62213603"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.91259765625
        },
        {
            "corpus_id": "16477440",
            "title": "JeCo: Combining Program Visualization and Story Weaving",
            "text": "Jeliot 3 (Moreno et al., 2004c) is a program visualization tool supporting teaching and learning of programming in introductory Java programming courses. It supports dif-ferent kinds of approaches in teaching of introductory programming such as objectsfirst or fundamentals-first. It is released under the GPL and is freely available at (http://cs.joensuu.fi/jeliot/). \n\nFig. 1 illustrates the user interface of Jeliot 3. Most of the Java language concepts are currently supported and visualized by Jeliot 3. It displays the operation of a virtual machine during program execution. However, the animation takes place on the Java language level and not the level of bytecode to make it relevant for students. It shows all the details of the program execution by visualizing expression evaluations, method calls, and object-and array allocations. Thus, the visualization can be used to teach and learn programming concepts. Another view (not shown in the figure ) shows the method call tree of the executed program. Furthermore, Jeliot provides a possibility to explore the history of the execution through static snapshots taken before and after a possible interesting event in the visualization. \n\nIn a classroom study, Ben-Bassat Levy et al. (Ben-Bassat Levy et al., 2003) found that Jeliot 2000 supported the learning of mediocre students. Students created viable mental models of the program execution based on the Jeliot's visual display. Jeliot also provided them with vocabulary to describe the execution. Because of that students were able to answer questions related to unseen situations by drawing a Jeliot-like display and describing the situation through the diagram. Because Jeliot 3 uses the same visualization scheme as Jeliot 2000 and only extends it, we can assume that similar results are achieved when Jeliot 3 is used in a classroom. \n\nOne reason to develop Jeliot 3 was to enhance the modularity and extensibility of the previous versions. We have developed an extension that allows Jeliot 3 to interact with BlueJ, a widely used educational programming environment. It is possible to start animations in Jeliot directly from BlueJ's object bench.",
            "score": 0.3614349632155474,
            "section_title": "Jeliot",
            "char_start_offset": 4461,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 153
                },
                {
                    "start": 154,
                    "end": 280
                },
                {
                    "start": 281,
                    "end": 368
                },
                {
                    "start": 371,
                    "end": 581
                },
                {
                    "start": 582,
                    "end": 707
                },
                {
                    "start": 708,
                    "end": 844
                },
                {
                    "start": 845,
                    "end": 921
                },
                {
                    "start": 922,
                    "end": 1013
                },
                {
                    "start": 1014,
                    "end": 1195
                },
                {
                    "start": 1198,
                    "end": 1341
                },
                {
                    "start": 1342,
                    "end": 1442
                },
                {
                    "start": 1443,
                    "end": 1511
                },
                {
                    "start": 1512,
                    "end": 1678
                },
                {
                    "start": 1679,
                    "end": 1852
                },
                {
                    "start": 1855,
                    "end": 1959
                },
                {
                    "start": 1960,
                    "end": 2086
                },
                {
                    "start": 2087,
                    "end": 2167
                }
            ],
            "ref_mentions": [
                {
                    "start": 9,
                    "end": 30,
                    "matchedPaperCorpusId": "8730376"
                },
                {
                    "start": 1231,
                    "end": 1273,
                    "matchedPaperCorpusId": "46185353"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.62255859375
        },
        {
            "corpus_id": "202566030",
            "title": "Scenior: An Immersive Visual Scripting system of Gamified Training based on VR Software Design Patterns",
            "text": "We organized a user-based qualitative evaluation experiment to examine and quantify the effectiveness and impact of Scenior but to also gather useful data and comments for future updates. In more detail, the experiment conducted from 12 participants, half of them were familiar with computer programming and VR whereas the other half did not have programming background or any familiarity with VR. We split our participants in this way to examine the differences between programmers and non-programmers and how this variable will affect their interaction with Scenior. In the begin of the experiment, participants rate themselves on their familiarity with VR and their programming skills (figure 10). \n\nThe experiment was separated in four sessions to evaluate the different components and functionalities of Scenior. The first part was to run a VR training scenario generated from Scenior. For this reason, we developed a VR training scenario regarding the restoration of an antique clock where users asked to complete interactive tasks to make the clock working again. The next session, evaluates the capabilities of Visual Scripting, participants were asked to generate a Use and a Remove Action into the VR scenario. After that, they had to utilize VR Editor to change the positions of certain interactive objects and generate an Insert Action directly from the virtual environment. Finally we had an open discussion with the participants to give us valuable feedback for all the implemented tools. \n\nWe begin with the evaluation of the generated training scenario. In the following tables, the completion time is measured in mm:ss format, the evaluation of mechanics in 0-10 range and the Help metric illustrates amount of times where participants asked for hints don't knowing how to proceed further. From table 1 we acquire that non-programmers faced more difficulties on completing the scenario since their average completion time and times asked for help are higher. In contrast they have higher rates in the quality of the overall experience and the educational value of the application. We continue with the evaluation of Visual Scripting tool. In this phase, we explained all the possibilities and functionalities of Visual Scripting and how to generate scripts automatically. After this brief explanation, users were asked to implement a new Use and Remove Action utilizing the scenegraph editor. From table 2 we identify that both programmers and non programmers asked more often for help in the generation of Action scripts than the training scenario.",
            "score": 0.36009389425447197,
            "section_title": "RESULTS",
            "char_start_offset": 37264,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 187
                },
                {
                    "start": 188,
                    "end": 397
                },
                {
                    "start": 398,
                    "end": 568
                },
                {
                    "start": 569,
                    "end": 700
                },
                {
                    "start": 703,
                    "end": 817
                },
                {
                    "start": 818,
                    "end": 890
                },
                {
                    "start": 891,
                    "end": 1070
                },
                {
                    "start": 1071,
                    "end": 1220
                },
                {
                    "start": 1221,
                    "end": 1386
                },
                {
                    "start": 1387,
                    "end": 1502
                },
                {
                    "start": 1505,
                    "end": 1569
                },
                {
                    "start": 1570,
                    "end": 1806
                },
                {
                    "start": 1807,
                    "end": 1975
                },
                {
                    "start": 1976,
                    "end": 2097
                },
                {
                    "start": 2098,
                    "end": 2155
                },
                {
                    "start": 2156,
                    "end": 2288
                },
                {
                    "start": 2289,
                    "end": 2409
                },
                {
                    "start": 2410,
                    "end": 2566
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7529296875
        },
        {
            "corpus_id": "250414169",
            "title": "Effect of SRA-programming on computational thinking through different output modalities",
            "text": "Several limitations and considerations can be identified regarding the results of this research. Due to these a certain lack of generalisability of the results obtained should be taken into account. During the course of this research, it may be the case that non-experimental variables played a determining role in the final results. Reasons for this may include that pupils continued to work with programming environments at home or within their current primary school curriculum, or that pupils have developed over time as a result of their standard educational programme. In addition, our findings could also be explained by taking into account children's familiarity with computer games with visual output representing tangibles and/or their previous computer experience. \n\nThis research made use of two visual programming environments: Bomberbot, with an on-screen output, and Lego EV-3 Mindstorms, with a tangible output. In order to be able to generalise the results of our research, it should be replicated with other visual programming environments with different types of on-screen and tangible output. The issues of whether the nature of the programming task and the level of difficulty affect the outcome and learning effects should also be examined. There are also arguments that the use of visual programming environments with incentives provides a low threshold for giving guidance to users; the user is guided more explicitly through the tasks, and it is therefore questionable whether these incentives restrict freedom of choice. \n\nIt would also be interesting to further investigate (1) whether the use of SRA-programming in a visual programming environment in which a tangible output is first used and then a visual output (or vice versa) yields a greater understanding of complex programming concepts; (2) whether this can be attributed to the application of SRA and ( 3) to what extent this results in the subsequent measurable development of CT. We note that SRA-programming of robotics with tangible output involves a very different form of application of SRA compared to visual SRA-programming with on-screen output. Learning to apply SRA in one environment may have (dis) advantages in the other. In follow-up research, it would be worthwhile to further clarify the relationship between the use of SRA-programming, the sequence in which the type of programming environment is applied, and possible differences in the development of CT.",
            "score": 0.35962349826152357,
            "section_title": "Limitations and follow-up research",
            "char_start_offset": 56118,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 96
                },
                {
                    "start": 97,
                    "end": 198
                },
                {
                    "start": 199,
                    "end": 333
                },
                {
                    "start": 334,
                    "end": 574
                },
                {
                    "start": 575,
                    "end": 775
                },
                {
                    "start": 778,
                    "end": 927
                },
                {
                    "start": 928,
                    "end": 1112
                },
                {
                    "start": 1113,
                    "end": 1262
                },
                {
                    "start": 1263,
                    "end": 1546
                },
                {
                    "start": 1549,
                    "end": 1967
                },
                {
                    "start": 1968,
                    "end": 2140
                },
                {
                    "start": 2141,
                    "end": 2221
                },
                {
                    "start": 2222,
                    "end": 2460
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.72900390625
        },
        {
            "corpus_id": "3949077",
            "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications",
            "text": "languages. With Alice, a programmer using a Graphical User Interface (GUI) environment selects program constructs and methods from lists of available choices [15,[21][22]95]. Figure 1: the Alice System [15] Scratch is developed at the Massachusetts Institute of Technology Media Laboratory. It is a new VPL and environment that supports the creation of interactive stories, games, animations, music and art projects (as shown in figure 2). Scratch allows educators to reduce the cognitive load that learners experience when they are initially introduced to programming [23][24]96]. Kodu is an educational tool that was developed by Microsoft Research in 2010 to teach the basics of game development. Kodu is a new icon-based visual language programming made especially for creating games. It was designed to be appealing to children and enjoyable by everyone. The Kodu language is entirely event driven, where each line of programming is in the form of a condition and an action [25,97].\n\nLabView is a licensed software and it targets scientists and engineers. It is a graphical development environment with built-in functionality for data acquisition, instrument control, measurement analysis, and data presentation (Li et al., 2011). In LabView, the execution is determined by the structure of a graphical block diagram in which the programmer connects different function-nodes by drawing wires [13].\n\nTersus is an open source VPL developed by Tersus Software Ltd. It is used to build rich web and mobile applications by visually defining user interface, client side behavior, and server side processing (as shown in figure 3). It is a general purpose language that utilizes flow diagrams [93,98]. Limnor (shown in figure 4) developed by Longflow Enterprises Limited is general-purpose VPL. It is based on visual studio .NET. It can be used to create most applications, interactive multimedia kiosks, sales presentations, database applications with interactive query and search, business management systems, internet payphone kiosks, etc. Non-technically oriented users can use it [26]. Limnor supports code generation only in C#. Figure 4: the Limnor System [26] Prograph is a popular general purpose VPL licensed under Prograph CPX and Marten. The Object-Oriented, Data-flow & multi-paradigm language has long",
            "score": 0.3595441335826238,
            "section_title": "Examples of Visual Programming Languages",
            "char_start_offset": 5241,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 158,
                    "end": 162,
                    "matchedPaperCorpusId": "61050952"
                },
                {
                    "start": 162,
                    "end": 166,
                    "matchedPaperCorpusId": "7772283"
                },
                {
                    "start": 170,
                    "end": 173,
                    "matchedPaperCorpusId": "925284"
                },
                {
                    "start": 202,
                    "end": 206,
                    "matchedPaperCorpusId": "61050952"
                },
                {
                    "start": 569,
                    "end": 573,
                    "matchedPaperCorpusId": "28857437"
                },
                {
                    "start": 573,
                    "end": 577,
                    "matchedPaperCorpusId": "10424846"
                },
                {
                    "start": 983,
                    "end": 986,
                    "matchedPaperCorpusId": "16049286"
                },
                {
                    "start": 1397,
                    "end": 1401,
                    "matchedPaperCorpusId": "214813316"
                },
                {
                    "start": 1691,
                    "end": 1695,
                    "matchedPaperCorpusId": "17653432"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8740234375
        },
        {
            "corpus_id": "219966747",
            "title": "A Large-scale Analysis of App Inventor Projects",
            "text": "Nowadays, computing is evident in most activities. Regardless of the area of expertise of a professional, it is important not only to know the basic functionality and interfaces of computers but also the fundamentals and basic principles of computing. To teach computing to novices and non-computing people, typically block-based visual programming environments are used such as App Inventor [1] or Scratch [2]. \n\nApp Inventor is a visual programming environment that allows people to create mobile applications for Android devices through programming blocks rather than textual commands [1]. It is used by a wide range of people of all ages and backgrounds with more than 1 million unique monthly active users from 195 countries who created almost 35 million mobile apps [1]. App Inventor projects can be shared via the App Inventor Gallery [1] under the creative commons license, containing over 150 thousand projects in April 2020. Another example, is Scratch, a visual programming environment that allows people to create stories, animations, and games. It is designed especially for young people between 8 and 16 years, but can also be used by people of all ages [2]. Currently, it has more than 53 million users and more than 52 million projects shared within the Scratch community. \n\nThe evaluation of visual programming environments as tools for teaching computational thinking and end-user programming has received significant attention in the past. Several studies have been carried out on analyzing large datasets of projects created with visual programming environments, including Scratch [3][4] [5][6] [7] [8], Snap! [9] and App Inventor [10] [11]. These studies aim to identify the programming practices of programmer's projects in large galleries [3][4] [9], learning trajectories [5], bad smells of programs [6], or skill progression [7] [8][10] [11]. \n\nThere also exist studies comparing these visual programming environments regarding the effectiveness to learn computational thinking and introductory programming concepts [12][13] [14]. Park and Shin [12] crawled mature projects, including tutorials and popular projects from the Scratch and App Inventor galleries. They used a rubric for comparing 524 Scratch mature projects with 379 App Inventor mature projects.",
            "score": 0.35952076695656565,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 50
                },
                {
                    "start": 51,
                    "end": 251
                },
                {
                    "start": 252,
                    "end": 411
                },
                {
                    "start": 414,
                    "end": 592
                },
                {
                    "start": 593,
                    "end": 776
                },
                {
                    "start": 777,
                    "end": 934
                },
                {
                    "start": 935,
                    "end": 1057
                },
                {
                    "start": 1058,
                    "end": 1172
                },
                {
                    "start": 1173,
                    "end": 1288
                },
                {
                    "start": 1291,
                    "end": 1458
                },
                {
                    "start": 1459,
                    "end": 1661
                },
                {
                    "start": 1662,
                    "end": 1867
                },
                {
                    "start": 1870,
                    "end": 2055
                },
                {
                    "start": 2056,
                    "end": 2185
                },
                {
                    "start": 2186,
                    "end": 2285
                }
            ],
            "ref_mentions": [
                {
                    "start": 407,
                    "end": 410,
                    "matchedPaperCorpusId": "273180521"
                },
                {
                    "start": 1168,
                    "end": 1171,
                    "matchedPaperCorpusId": "273180521"
                },
                {
                    "start": 1601,
                    "end": 1604,
                    "matchedPaperCorpusId": "549693"
                },
                {
                    "start": 1608,
                    "end": 1611,
                    "matchedPaperCorpusId": "10175290"
                },
                {
                    "start": 1615,
                    "end": 1618,
                    "matchedPaperCorpusId": "16776934"
                },
                {
                    "start": 1619,
                    "end": 1622,
                    "matchedPaperCorpusId": "202729803"
                },
                {
                    "start": 1630,
                    "end": 1633,
                    "matchedPaperCorpusId": "209497130"
                },
                {
                    "start": 1651,
                    "end": 1655,
                    "matchedPaperCorpusId": "16454238"
                },
                {
                    "start": 1762,
                    "end": 1765,
                    "matchedPaperCorpusId": "549693"
                },
                {
                    "start": 1769,
                    "end": 1772,
                    "matchedPaperCorpusId": "209497130"
                },
                {
                    "start": 1796,
                    "end": 1799,
                    "matchedPaperCorpusId": "10175290"
                },
                {
                    "start": 1824,
                    "end": 1827,
                    "matchedPaperCorpusId": "23154256"
                },
                {
                    "start": 1850,
                    "end": 1853,
                    "matchedPaperCorpusId": "16776934"
                },
                {
                    "start": 1854,
                    "end": 1857,
                    "matchedPaperCorpusId": "202729803"
                },
                {
                    "start": 2050,
                    "end": 2054,
                    "matchedPaperCorpusId": "63450913"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.88232421875
        },
        {
            "corpus_id": "55805309",
            "title": "ICT Teachers\u2019 Acceptance of \u201cScratch\u201d as Algorithm Visualization Software",
            "text": "The results demonstrated that color separation and drag-drop features makes programming understandable and motivating. Similar results were found in the literature that lack of motivation is a problem in learning programming (Lahtinen, Ala-mutka, & J\u00e4rvinen, 2005) and AV software provides learners with motivation and engagement (Begosso & Da Silva, 2013;Grover & Pea, 2013). The third factor affecting their acceptance in terms of ease of use is familiar interface. Lye and Koh (2014) reported that Scratch has interface features similar to traditional visual programming languages. \n\nIn conjunction with their conclusion, the results of this study showed that Scratch has interface properties similar to traditional software and this enabled students to master Scratch and consequently have positive acceptance. \n\nIn addition, the study sought to determine whether participants' acceptance varies depending on gender, years of programming experience, programming background and the type of high school they graduated from as indicators of programming experience. The results indicated that there is no significant difference between their acceptance scores in terms of gender, programming background, and the high school type they graduated from and there is also no significant correlation between programming experience and their acceptance. These results mean that students have acceptance of Scratch regardless of gender and programming experience, although it was reported in the literature that the challenge of learning programming varies depending on gender (Howland & Good, 2015;Yurdug\u00fcl & A\u015fkar, 2013) and experience (Lau & Yuen, 2011;\u00d6zmen & Altun, 2014). For this reason, the non-significancy has important implications for programming instruction at the university level, since this could be considered an advantage of Scratch for its widespread adoption by all learners, particularly novice programmers.",
            "score": 0.3593562726409459,
            "section_title": "Discussion",
            "char_start_offset": 25933,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 118
                },
                {
                    "start": 119,
                    "end": 376
                },
                {
                    "start": 377,
                    "end": 467
                },
                {
                    "start": 468,
                    "end": 584
                },
                {
                    "start": 587,
                    "end": 814
                },
                {
                    "start": 817,
                    "end": 1065
                },
                {
                    "start": 1066,
                    "end": 1346
                },
                {
                    "start": 1347,
                    "end": 1669
                },
                {
                    "start": 1670,
                    "end": 1920
                }
            ],
            "ref_mentions": [
                {
                    "start": 225,
                    "end": 264,
                    "matchedPaperCorpusId": "6988391"
                },
                {
                    "start": 330,
                    "end": 356,
                    "matchedPaperCorpusId": "28442112"
                },
                {
                    "start": 468,
                    "end": 486,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 1569,
                    "end": 1591,
                    "matchedPaperCorpusId": "15817917"
                },
                {
                    "start": 1591,
                    "end": 1614,
                    "matchedPaperCorpusId": "145550149"
                },
                {
                    "start": 1648,
                    "end": 1668,
                    "matchedPaperCorpusId": "55080386"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.264892578125
        },
        {
            "corpus_id": "204754385",
            "title": "Full Stack Web Development Teaching: Current Status and a New Proposal",
            "text": "The main purpose of this effort is to present a brand-new environment for practising some of the most broadly used \u2013 both client- and server-side \u2013 web technologies. It is about a web-based, access-free, educational platform, which provides a user-friendly interface, illustrative graphics and supporting material, as well. Full stack development platforms are rarely met online, as most of them are usually oriented towards either front- or backend development and focus on specific programming languages without offering an overview of actual, integrated projects. This research also involves evaluating existing teaching methods, scanning and comparing some of the most popular, educational web platforms and, furthermore, discovering simple techniques and efficient approaches to reach valuable programming resources for both students and self-learners. The paper places particular emphasis on the recognition of the applications\u2019 key features and the variety of programming tools that promote learning and skill enhancement. Moreover, it discusses the roles of tutors and learners, while suggesting a learning path for novice developers. Given the fact that computer science courses often require exceptional practices, this study aims at encouraging active, self-motivated and self-paced learning.",
            "score": 0.3590242364447823,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.272705078125
        },
        {
            "corpus_id": "264371146",
            "title": "Core competencies of K-12 computer science education from the perspectives of college faculties and K-12 teachers",
            "text": "Programming is one of the fundamental skills in CS and a vital tool to develop CT skills (Grover & Pea, 2013;Lye & Koh, 2014). Research indicated that introducing CT to students in their earlier years is important as it could equip students with critical thinking skills (Tran, 2019). The programming approach has been implemented for CT education in pre-school (e.g., \u00c7iftci & Bildiren, 2020) and K-12 education (e.g., Schmidt, 2016). For example, \u00c7iftci and Bildiren (2020) found that programming can help develop 4-5-year-old preschool students' problem solving and cognitive skills. Irish and Kang (2018) found that integrating programming into other learning activities can engage students in both programming and general subjects learning. \n\nConsequently, programming languages and environments play an important role in K-12 CS education. The question of which language should be taught in K-12 has been a controversial topic. Currently, popular programming languages such as Python, Java, C, and C++ are widely used in industry and academia (TIOBE, 2021). These languages are also called textual programming languages as they are primarily written in text editors. Therefore, programmers should learn not only logical thinking but also the syntax of the language. Although textual programming languages may be difficult to approach for novice learners, research has indicated that students who learn textual programming language as the introductory programming language can transit to other textual languages easier as they move forward (Enbody & Punch, 2010). Thus, they recommend that it is preferable to have textual programming language for novice learners, given that the textual programming languages are universally used in real life. \n\nOn the contrary, the non-textual programming languages and environments, which comprises diverse visual formats such as diagrams, flowcharts, and coding blocks (Dehouck, 2016), are expected to be easy enough for beginners to get started and extensive enough to meet the needs for advanced programming (Grover & Pea, 2013). Visual programming environments that are widely used include Scratch, Game Maker, Code.org, Alice, Kodu, etc. Some of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace.",
            "score": 0.35840842659811467,
            "section_title": "Programming Languages in CS Education",
            "char_start_offset": 5917,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 126
                },
                {
                    "start": 127,
                    "end": 284
                },
                {
                    "start": 285,
                    "end": 435
                },
                {
                    "start": 436,
                    "end": 586
                },
                {
                    "start": 587,
                    "end": 745
                },
                {
                    "start": 748,
                    "end": 845
                },
                {
                    "start": 846,
                    "end": 933
                },
                {
                    "start": 934,
                    "end": 1063
                },
                {
                    "start": 1064,
                    "end": 1172
                },
                {
                    "start": 1173,
                    "end": 1271
                },
                {
                    "start": 1272,
                    "end": 1568
                },
                {
                    "start": 1569,
                    "end": 1749
                },
                {
                    "start": 1752,
                    "end": 2074
                },
                {
                    "start": 2075,
                    "end": 2166
                },
                {
                    "start": 2167,
                    "end": 2184
                },
                {
                    "start": 2185,
                    "end": 2380
                }
            ],
            "ref_mentions": [
                {
                    "start": 109,
                    "end": 125,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 271,
                    "end": 283,
                    "matchedPaperCorpusId": "67320246"
                },
                {
                    "start": 369,
                    "end": 393,
                    "matchedPaperCorpusId": "212664197"
                },
                {
                    "start": 420,
                    "end": 434,
                    "matchedPaperCorpusId": "8288189"
                },
                {
                    "start": 449,
                    "end": 475,
                    "matchedPaperCorpusId": "212664197"
                },
                {
                    "start": 587,
                    "end": 608,
                    "matchedPaperCorpusId": "149230231"
                },
                {
                    "start": 1545,
                    "end": 1567,
                    "matchedPaperCorpusId": "189052"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.77392578125
        },
        {
            "corpus_id": "251224298",
            "title": "An Open Source Interactive Visual Analytics Tool for Comparative Programming Comprehension",
            "text": "\u2022 Visualization: We allow the visualization of fixations and saccades for one or several programmers, for example, to understand the visual attention behavior of beginners, experts, and professionals in coding. \n\n\u2022 Algorithms: To further bring the data into a task-solving and useful form, we incorporated algorithmic approaches to filter, group, and cluster the data. \u2022 Linking: As a visual analytics tool consists of a wealth of linked concepts, we also combine visualizations, algorithms, and interactions with the users in the loop to find patterns and anomalies. \n\nTo illustrate the tool's usefulness, we apply it to the Eye Movements In Programming (EMIP) dataset [3] that contains the eye movements of 216 programmers of multiple expertise levels was collected during two code comprehension tasks. The primary result of this line of research is summarizing the programmers' behavior and strategy analysis. It may be easier to visualize each programmer's flow and gaze attention and compare their strategies in terms of their expertise with our approach than by just relying on the manual inspection of the programmer's behavior. Such summaries reflect which parts of the code a programmer focused on, for example, the body, arguments, or return types, to mention a few. Although it is difficult to condense these outcomes, one can see regions of specific focus in the case of experienced vs. non-experienced programmers [12].",
            "score": 0.3579899441680118,
            "section_title": "INTRODUCTION",
            "char_start_offset": 2148,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 210
                },
                {
                    "start": 213,
                    "end": 368
                },
                {
                    "start": 369,
                    "end": 567
                },
                {
                    "start": 570,
                    "end": 804
                },
                {
                    "start": 805,
                    "end": 912
                },
                {
                    "start": 913,
                    "end": 1135
                },
                {
                    "start": 1136,
                    "end": 1276
                },
                {
                    "start": 1277,
                    "end": 1432
                }
            ],
            "ref_mentions": [
                {
                    "start": 670,
                    "end": 673,
                    "matchedPaperCorpusId": "224857497"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.654296875
        },
        {
            "corpus_id": "258325793",
            "title": "AlgoPoint as an Original Didactic Tool for Introductory Programming Using Flowcharts",
            "text": "There are many textual and visual programming languages available today that are applied in the process of learning computer science. This group includes popular programming languages used in industry, e.g. Python and JavaScript Amid other textual languages, some original solutions can be found, for instance, MiniScript (Strout, 2021), Coral (Edgcomb et al., 2019) and SIMPLE (Rababaah, 2020). Most of them are simplifications of already existing programming languages, created to aid students switching smoothly between languages used globally. \n\nIn literature, we can trace a variety of games that support learning programming, such as Tuk Tuk (Koracharkornradt, 2017) or AstroCode (Bione et al., 2017). Such games, also called serious games, help students develop computational thinking skills in a friendly game environment. Using stories and maps with different difficulty levels encourage players to practice their problem-solving skills in ways not possible in the real world. \n\nAs for the block-based approach, one of the most popular tools is Scratch (Meerbaum-Salant et al., 2010). This application enables the creation of simple games and interactive programs. It is designed for children who learn while creating their games and animations. What is more, Scratch is always free and available in as many as 70 languages creating a kind of coding community for children, encouraging self-expression and collaboration. Comparable solutions to this platform are, for example, Alice, App Inventor and SmartBuilder (KAYA and YILDIZ, 2019;Werner et al., 2012). There is also a text-visual hybrid named Pytch created at Trinity College Dublin, which is the environment inspired by Scratch that uses Python instead of blocks (Strong and North, 2021). It helps children to step forward from Scratch's blocks drag'n'drop to the concept of writing code in Python. \n\nAlso worth mentioning is a group of applications that are aimed at older students who are not yet proficient in programming but still enjoy the concept of block-based code building. One of them is Flow-gorithm. Unlike Scratch, the blocks have different shapes for specific functionalities and are not placed like puzzles on a stack, but are appropriately connected by lines with arrows.",
            "score": 0.3579152567309107,
            "section_title": "RELATED WORK",
            "char_start_offset": 3233,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 133
                },
                {
                    "start": 134,
                    "end": 206
                },
                {
                    "start": 207,
                    "end": 395
                },
                {
                    "start": 396,
                    "end": 547
                },
                {
                    "start": 550,
                    "end": 707
                },
                {
                    "start": 708,
                    "end": 830
                },
                {
                    "start": 831,
                    "end": 985
                },
                {
                    "start": 988,
                    "end": 1093
                },
                {
                    "start": 1094,
                    "end": 1173
                },
                {
                    "start": 1174,
                    "end": 1254
                },
                {
                    "start": 1255,
                    "end": 1429
                },
                {
                    "start": 1430,
                    "end": 1567
                },
                {
                    "start": 1568,
                    "end": 1755
                },
                {
                    "start": 1756,
                    "end": 1865
                },
                {
                    "start": 1868,
                    "end": 2049
                },
                {
                    "start": 2050,
                    "end": 2078
                },
                {
                    "start": 2079,
                    "end": 2254
                }
            ],
            "ref_mentions": [
                {
                    "start": 322,
                    "end": 336,
                    "matchedPaperCorpusId": "244957392"
                },
                {
                    "start": 344,
                    "end": 366,
                    "matchedPaperCorpusId": "219866263"
                },
                {
                    "start": 378,
                    "end": 394,
                    "matchedPaperCorpusId": "221916941"
                },
                {
                    "start": 648,
                    "end": 672,
                    "matchedPaperCorpusId": "19122816"
                },
                {
                    "start": 686,
                    "end": 706,
                    "matchedPaperCorpusId": "196083086"
                },
                {
                    "start": 1062,
                    "end": 1092,
                    "matchedPaperCorpusId": "16831477"
                },
                {
                    "start": 1546,
                    "end": 1566,
                    "matchedPaperCorpusId": "1332295"
                },
                {
                    "start": 1730,
                    "end": 1754,
                    "matchedPaperCorpusId": "239028930"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.391357421875
        },
        {
            "corpus_id": "264371146",
            "title": "Core competencies of K-12 computer science education from the perspectives of college faculties and K-12 teachers",
            "text": "Some of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace. Thus, novice CS learners can focus on the computational concepts and logic without being bothered by the syntax (Bau et al., 2017;Kelleher & Pausch, 2005). Some research argues that visual programming languages might be more appropriate for novice learners as they are easier to learn (Bau et al., 2017;Chen et al., 2020;Malan & Leitner, 2007). For example, Chen et al. (2020) analyzed data from 10,000 undergraduate students who enrolled in CS courses and found that students whose first programming language was visual performed better than did students whose first programming language was textual when the programming languages were first introduced in K-12 stages. Moreover, the visual languages and environments provide scaffolds and enable knowledge transfer. Research indicates that visual programming languages are used in K-12 CT education. For example, Hsu et al. (2018) and Lockwood and Mooney (2017) find that many schools have utilized visual programming languages to teach CT skills. Other studies indicate that using visual programming languages to teach students CT skills is effective in elementary education (The Horizon Report, 2017). Application of visual program languages in K-12 CS education is found to significantly improve students' understanding of computational concepts and computation practices (Saez-Lopez et al., 2016), logical thinking skills (Lindh and Holgersson 2007), and problem-solving skills in general (Chou 2018). \n\nGiven the mixed opinions of introducing visual or textual programming languages in K-12 CS education, Xu et al. (2019) conduct a meta-analysis on the block-based versus textual programming on student learning outcomes by reviewing 13 publications. They find a small effect size in favor of block-based programming languages on cognitive learning outcomes and suggest more research on the effectiveness of using block-based programming languages for novice learners in the future. \n\nTo sum up, the epistemology of K-12 CS education, including its necessity, its core competencies as well as programming languages that should be taught in its implementation, still need to be clarified.",
            "score": 0.3579152567309107,
            "section_title": "Programming Languages in CS Education",
            "char_start_offset": 8102,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 195
                },
                {
                    "start": 196,
                    "end": 351
                },
                {
                    "start": 352,
                    "end": 540
                },
                {
                    "start": 541,
                    "end": 865
                },
                {
                    "start": 866,
                    "end": 962
                },
                {
                    "start": 963,
                    "end": 1046
                },
                {
                    "start": 1047,
                    "end": 1194
                },
                {
                    "start": 1195,
                    "end": 1350
                },
                {
                    "start": 1351,
                    "end": 1652
                },
                {
                    "start": 1655,
                    "end": 1902
                },
                {
                    "start": 1903,
                    "end": 2134
                },
                {
                    "start": 2137,
                    "end": 2339
                }
            ],
            "ref_mentions": [
                {
                    "start": 326,
                    "end": 350,
                    "matchedPaperCorpusId": "9916677"
                },
                {
                    "start": 517,
                    "end": 539,
                    "matchedPaperCorpusId": "982597"
                },
                {
                    "start": 1060,
                    "end": 1077,
                    "matchedPaperCorpusId": "52813623"
                },
                {
                    "start": 1522,
                    "end": 1547,
                    "matchedPaperCorpusId": "27633066"
                },
                {
                    "start": 1573,
                    "end": 1600,
                    "matchedPaperCorpusId": "31042634"
                },
                {
                    "start": 1640,
                    "end": 1651,
                    "matchedPaperCorpusId": "55683453"
                },
                {
                    "start": 1757,
                    "end": 1773,
                    "matchedPaperCorpusId": "67914194"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.89697265625
        },
        {
            "corpus_id": "259335765",
            "title": "Using Visual Programming Games to Study Novice Programmers",
            "text": "In this paper, we have demonstrated the use of visual programming languages and serious games as a framework for studying novice programmers' abilities to use complex programming features. This is a novel use of serious games that could be applied to research on new programming languages and methodologies. This work fills a gap in the limited usability studies performed on new programming languages and methodologies by demonstrating the effectiveness of using visual programming languages and serious games to perform usability studies using novice programmers. This approach can be applied to research on new programming languages and methodologies. \n\nSeveral parts of this work can be generalized to other studies in programming education and research. First, the use of Blockly and serious games to represent complex programming language concepts can be used to analyze future work that proposes new programming languages and methodologies. Second, the analysis performed in the results section can be used by researchers to analyze and compare programming languages and methodologies, specifically as they apply to novice programmers. Finally, the insights learned from performing this study can be used to improve future studies on programming languages and methodologies using visual programming languages and serious games. \n\nThis work provides a framework for additional studies. The ability to understand how novice programmers approach a complex problem can guide how different parallel frameworks can be implemented to appeal to novice programmers. Additionally, the ability to understand how novice programmers think can lead to breakthroughs in teaching parallel concepts. The framework presented here can be expanded upon to different implementations to include locks, mutexes, and semaphores and each can be investigated for its ease of implementation. We plan to conduct a more thorough study of how well novice programmers can understand existing parallel programming paradigms and use this framework to conduct comparative studies of parallel programming methodologies. \n\nFrom the initial study we conducted using this framework, we can conclude that novice programmers can solve complex programming problems using a visual programming language paired with a serious game. Participants in the study were largely novices in both programming and parallel programming, but they were able to solve parallel programming problems using the visual programming language. Participants with more prior experience in programming took less attempts to solve these problems, but those with less prior experience were still able to produce a working solution. We hope that this framework can be applied to other programming languages, concepts, and methodologies to evaluate the usability of features using novice programmers.",
            "score": 0.3579152567309107,
            "section_title": "Future Work and Conclusions",
            "char_start_offset": 43866,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 188
                },
                {
                    "start": 189,
                    "end": 307
                },
                {
                    "start": 308,
                    "end": 565
                },
                {
                    "start": 566,
                    "end": 654
                },
                {
                    "start": 657,
                    "end": 758
                },
                {
                    "start": 759,
                    "end": 947
                },
                {
                    "start": 948,
                    "end": 1142
                },
                {
                    "start": 1143,
                    "end": 1334
                },
                {
                    "start": 1337,
                    "end": 1391
                },
                {
                    "start": 1392,
                    "end": 1563
                },
                {
                    "start": 1564,
                    "end": 1689
                },
                {
                    "start": 1690,
                    "end": 1871
                },
                {
                    "start": 1872,
                    "end": 2091
                },
                {
                    "start": 2094,
                    "end": 2294
                },
                {
                    "start": 2295,
                    "end": 2484
                },
                {
                    "start": 2485,
                    "end": 2667
                },
                {
                    "start": 2668,
                    "end": 2834
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.947265625
        },
        {
            "corpus_id": "231725028",
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "text": "The objective of this systematic literature review was to characterize and analyze the current evidence-based visual programming approaches, trends, interaction styles, and techniques. To achieve this objective, we examined 30 articles against 12 relevant dimensions. However, future researchers may develop an evaluation framework that can be used to compare visual programming tools. The research community has contributed such frameworks to be used to compare regular programming languages [84]. While the existing framework of cognitive dimensions of notations [66] can be used to compare tools in terms of their usability, a potentially new evaluation framework is needed to evaluate other quality attributes such as extensibility, security, testability, and portability.",
            "score": 0.3579152567309107,
            "section_title": "D. EVALUATION FRAMEWORK",
            "char_start_offset": 64878,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 184
                },
                {
                    "start": 185,
                    "end": 267
                },
                {
                    "start": 268,
                    "end": 385
                },
                {
                    "start": 386,
                    "end": 498
                },
                {
                    "start": 499,
                    "end": 776
                }
            ],
            "ref_mentions": [
                {
                    "start": 493,
                    "end": 497,
                    "matchedPaperCorpusId": "18678580"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.90869140625
        },
        {
            "corpus_id": "249431936",
            "title": "An Exploratory Analysis of Feedback Types Used in Online Coding Exercises",
            "text": "According to Shu [42], programming involves both hemispheres of the brain so that the use of images for learning processes in programming education is recommended. Likewise, visual programming languages, such as Scratch, are recommended by some educators as an adequate tool for the introductory phase of programming in higher education [25,46], or at least as a supportive measure [4]. Today, an extensive collection of Scratch projects with stories, games and animations is available for practice. Blockly The Blockly open source library [9] allows developers to create blockbased visual programs and integrate them into apps or web applications. The display of code blocks, the design of keywords, and how a block-based program runs, depends on the developers as well as the intended context [9,7,36]. Blockly is the basis for the author's development of a feedback prototype that offers a predefined selection of block-based code snippets [17,20]. The implemented task asks students to develop a recursive solution for the decomposition of a closed matryoshka doll. Students can drag and drop the \"blockly\" representations of code across the workspace and attach them to each other as illustrated in Figure 3. Pseudo code is generated and displayed simultaneously depending Fig. 3. Screenshot of a feedback prototype that utilizes Blockly to recursively unpack a matryoshka doll [17,16] on the blocks' use and arrangement in the workspace. As soon as learners hit the execute-button, an interactive visualizations and a short textual feedback is presented, each depending on the individual input. Individual error messages for 168 error combinations have been prepared. Moreover, a hint-button is available that offers additional, individual tutoring feedback. The help-button provides support regarding the usability of the blocks and the functions of the several buttons. A debugger enables the identification of the first incorrect block by highlighting it with a yellow frame and star.",
            "score": 0.3579152567309107,
            "section_title": "Tools Offering Online Coding Exercises",
            "char_start_offset": 10075,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 163
                },
                {
                    "start": 164,
                    "end": 386
                },
                {
                    "start": 387,
                    "end": 499
                },
                {
                    "start": 500,
                    "end": 648
                },
                {
                    "start": 649,
                    "end": 804
                },
                {
                    "start": 805,
                    "end": 951
                },
                {
                    "start": 952,
                    "end": 1069
                },
                {
                    "start": 1070,
                    "end": 1443
                },
                {
                    "start": 1444,
                    "end": 1600
                },
                {
                    "start": 1601,
                    "end": 1673
                },
                {
                    "start": 1674,
                    "end": 1764
                },
                {
                    "start": 1765,
                    "end": 1877
                },
                {
                    "start": 1878,
                    "end": 1993
                }
            ],
            "ref_mentions": [
                {
                    "start": 337,
                    "end": 341,
                    "matchedPaperCorpusId": "982597"
                },
                {
                    "start": 341,
                    "end": 344,
                    "matchedPaperCorpusId": "61034415"
                },
                {
                    "start": 382,
                    "end": 385,
                    "matchedPaperCorpusId": "56686833"
                },
                {
                    "start": 800,
                    "end": 803,
                    "matchedPaperCorpusId": "2701916"
                },
                {
                    "start": 1387,
                    "end": 1390,
                    "matchedPaperCorpusId": "4870931"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.796875
        },
        {
            "corpus_id": "231725028",
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "text": "Only a handful of studies reviewed visual programming related research. The studies reviewed how visual programming tools were used in specific domains such as IoT, robotics, and education. \n\nAs an example, the authors in [8] surveyed 16 visual programming environments allowing end users to create applications involving robots with social capabilities. Only one article out of the 16 articles was published in a journal. The study shows that recent tools are adopting component-based software engineering approaches, but the tools need to be evaluated with real end users as opposed to university students, and should be validated in a real setting as opposed to a laboratory. The study mainly focused on the analysis and challenges specific to robotics-related approaches such as scripting-based, rule-based systems, state-based and behavior-based systems. \n\nAnother example of a domain-specific visual programming review study is the study in [10]. The author surveyed 13 articles that use visual programming to support the creation of IoT-based applications. The vast majority of the articles were conference articles. The study reported that VPLs make it easy for end users to visualize the programming logic and eliminate the burden of handling syntactical errors. However, significant time is spent on creating small-scale IoT applications with visual programming. The study focused on IoT-specific attributes such as the hardware platform (e.g. Raspberry Pi, Arduino) and overlooked the broad VPL classifications (e.g. diagrammatic, iconic, block-based). \n\nA recent study conducted a systematic literature review to examine the role of visual and textual programming languages in helping students learn how to program [30]. The study reported that the choice of textual programming language is not a crucial one as languages are alike. However, the use of visual programming to introduce students to programming concepts is of utility as long as it is within a short time frame. \n\nTo sum up, all the aforementioned review studies are domain specific, and as such do not provide a generic view of VPL approaches applied in multiple domains beyond the domains of education, IoT and robotics. \n\nOur study differs from the aforementioned reviews by focusing on the articles related to visual programming tools that represent several domains, closely examining the visual programming approaches with all its classifications, and identifying how such approaches are used to solve particular problems in several domains.",
            "score": 0.3579152567309107,
            "section_title": "B. VISUAL PROGRAMMING REVIEW STUDIES",
            "char_start_offset": 15847,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 71
                },
                {
                    "start": 72,
                    "end": 189
                },
                {
                    "start": 192,
                    "end": 354
                },
                {
                    "start": 355,
                    "end": 422
                },
                {
                    "start": 423,
                    "end": 678
                },
                {
                    "start": 679,
                    "end": 859
                },
                {
                    "start": 862,
                    "end": 952
                },
                {
                    "start": 953,
                    "end": 1063
                },
                {
                    "start": 1064,
                    "end": 1123
                },
                {
                    "start": 1124,
                    "end": 1271
                },
                {
                    "start": 1272,
                    "end": 1372
                },
                {
                    "start": 1373,
                    "end": 1453
                },
                {
                    "start": 1454,
                    "end": 1527
                },
                {
                    "start": 1528,
                    "end": 1563
                },
                {
                    "start": 1566,
                    "end": 1732
                },
                {
                    "start": 1733,
                    "end": 1844
                },
                {
                    "start": 1845,
                    "end": 1987
                },
                {
                    "start": 1990,
                    "end": 2198
                },
                {
                    "start": 2201,
                    "end": 2522
                }
            ],
            "ref_mentions": [
                {
                    "start": 222,
                    "end": 225,
                    "matchedPaperCorpusId": "219455753"
                },
                {
                    "start": 947,
                    "end": 951,
                    "matchedPaperCorpusId": "30037917"
                },
                {
                    "start": 1727,
                    "end": 1731,
                    "matchedPaperCorpusId": "4039308"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.86669921875
        },
        {
            "corpus_id": "231785967",
            "title": "Hybrid Java: The creation of a Hybrid Programming Environment",
            "text": "Some researchers and educators have had good success using a visual FPL as their language of choice (Aktunc, 2013;Asamoah, 2006;Noone & Mooney, 2019a). \n\nResearch has shown that there is a certain age group (13-16 year olds) where many students begin to consider visual programming languages too limited; but they are still at a point where they consider text-based languages too verbose and difficult to learn (Cheung et al., 2009). There is an increasing need for languages that combine the power of a text-based language with the simplistic design of a visual language. These so-called hybrid programming languages would allow for the introduction of more complex programming concepts to students in a more welcoming and more suitable interface. A need for a hybrid language is growing alongside the increasing interest among young people in computer programming. To satisfy this need, we have created a programming environment that combines the effectiveness of a text-based programming language with the ease of use of a visual programming language. We call this programming environment \"Hybrid Java\". The goal for this environment is to combine the power of a text-based language with the ease of use of a visual language which may be used as a first programming language or as a bridge when moving from a visual language to a textbased language.",
            "score": 0.3579152567309107,
            "section_title": "Introduction",
            "char_start_offset": 2226,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 151
                },
                {
                    "start": 154,
                    "end": 433
                },
                {
                    "start": 434,
                    "end": 572
                },
                {
                    "start": 573,
                    "end": 748
                },
                {
                    "start": 749,
                    "end": 866
                },
                {
                    "start": 867,
                    "end": 1054
                },
                {
                    "start": 1055,
                    "end": 1106
                },
                {
                    "start": 1107,
                    "end": 1352
                }
            ],
            "ref_mentions": [
                {
                    "start": 100,
                    "end": 114,
                    "matchedPaperCorpusId": "16916893"
                },
                {
                    "start": 411,
                    "end": 432,
                    "matchedPaperCorpusId": "10839854"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7939453125
        },
        {
            "corpus_id": "224877240",
            "title": "Exploring the Effect of Training in Visual Block Programming for Preservice Teachers",
            "text": "In the context of K-12 elementary education, computing began to be considered in educational contexts based on the contributions of Seymour Papert at MIT in the 1980s. This author pioneered the idea of children developing procedural thinking through LOGO programming [14]. Subsequently, Ref. [15] has provided theoretical elements of interest focused on computational thinking. Computational thinking is \"the solution of problems, the design of systems and the understanding of human behavior, making use of the fundamental concepts of computer science\" [15] (p. 33). Computational methods and models allow us to solve problems and design systems that humans cannot do alone; in short, it is about using computational principles to solve a series of problems. It implies logical analysis and data organization, as well as modelling, abstractions, simulations, and the application of possible solutions. These approaches in the world of education help students acquire essential skills to solve complex problems. \n\nVarious authors (e.g., [16]) have emphasized that programming is an extension of writing and, as with traditional writing, there are powerful reasons for everyone to learn to program. In primary education, programming can be applied transversally in many subjects (e.g., mathematics, computer science, language, art, social sciences) so that, from an interdisciplinary perspective, students can learn strategies to solve problems, design projects, and communicate ideas [17]. \n\nThe visual block programming environment of Scratch provides a considerable advantage over other languages when the aim is to introduce students to computing, as it allows users to \"write\" by dragging and dropping graphic blocks to develop simple programs that, in turn, allow them to create games, interactive stories, or simulations [18]. Scratch is a visual block programming language created by the Lifelong Kindergarten group in the MIT Media Lab. Scratch's programming language offers more than 100 programming blocks, grouped into eight different categories (movement, appearance, sound, pencil, data, events, control, detection, operators, and variables). This programming environment allows young people to create their own interactive stories, games, and simulations, and then share those creations in an online community with other young programmers from around the world. \n\nVisual programming languages, specifically Scratch, solve many problems related to the difficulties of introducing programming into educational contexts [19].",
            "score": 0.3579131052510949,
            "section_title": "Introduction",
            "char_start_offset": 2467,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 167
                },
                {
                    "start": 168,
                    "end": 272
                },
                {
                    "start": 273,
                    "end": 377
                },
                {
                    "start": 378,
                    "end": 562
                },
                {
                    "start": 563,
                    "end": 567
                },
                {
                    "start": 568,
                    "end": 759
                },
                {
                    "start": 760,
                    "end": 902
                },
                {
                    "start": 903,
                    "end": 1011
                },
                {
                    "start": 1014,
                    "end": 1197
                },
                {
                    "start": 1198,
                    "end": 1489
                },
                {
                    "start": 1492,
                    "end": 1832
                },
                {
                    "start": 1833,
                    "end": 1944
                },
                {
                    "start": 1945,
                    "end": 2155
                },
                {
                    "start": 2156,
                    "end": 2375
                },
                {
                    "start": 2378,
                    "end": 2536
                }
            ],
            "ref_mentions": [
                {
                    "start": 292,
                    "end": 296,
                    "matchedPaperCorpusId": "41391768"
                },
                {
                    "start": 554,
                    "end": 558,
                    "matchedPaperCorpusId": "41391768"
                },
                {
                    "start": 1484,
                    "end": 1488,
                    "matchedPaperCorpusId": "155830909"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8828125
        },
        {
            "corpus_id": "265552580",
            "title": "University Language Instructors Programming Robotic Learning Applications: Design and implementation of encouraging programming workshop experiences",
            "text": "The use of robots in education has been a topic of interest for researchers, but the involvement of educational professionals with no programming knowledge in programming robotic applications has been limited [33,34], compared to educators with programming knowledge [14,38,42,43,58].This may be due to factors such as the lack of specialized training for educators in educational institutions or the insufficient content of available training programs [51].When it comes to programming robots, text-based programming languages like Python, C++, and Java can pose challenges for non-programmer teachers [11].Visual-based programming, an accessible alternative, involves dragging and dropping icons to create robot programs [11].While it simplifies coding, it still demands basic programming skills like loops and conditional statements.Other end-user development methods, such as content authoring [18], interaction parameterization [6], and trigger-action programming [40], do not require such skills.\n\nEnd-user programming [13,36] is a concept that enables people with non-professional programming skills to customize and retask robots according to their needs.It allows users to modify and create robotic applications within their own contexts [3].Enduser programming not only increases the capabilities of robots but also provides an opportunity for users to learn programming while enjoying the process.Natural and user-friendly interfaces are crucial for making robotic programming enjoyable and engaging [24].\n\nIn conclusion, the concept of end-user programming supported the research objective of teaching educators to design and implement their own robotic applications.Moreover, the review of previous literature which highlighted the best practices when designing robotic teacher training, was beneficial when designing and implementing the robotic programming workshops, as all the considerations were contemplated to create and provide educators with meaningful learning experiences.",
            "score": 0.3573136627613113,
            "section_title": "Educational Professionals Programming Robotic Applications",
            "char_start_offset": 5904,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 284
                },
                {
                    "start": 284,
                    "end": 458
                },
                {
                    "start": 458,
                    "end": 608
                },
                {
                    "start": 608,
                    "end": 728
                },
                {
                    "start": 728,
                    "end": 836
                },
                {
                    "start": 836,
                    "end": 1002
                },
                {
                    "start": 1004,
                    "end": 1163
                },
                {
                    "start": 1163,
                    "end": 1251
                },
                {
                    "start": 1251,
                    "end": 1408
                },
                {
                    "start": 1408,
                    "end": 1516
                },
                {
                    "start": 1518,
                    "end": 1679
                },
                {
                    "start": 1679,
                    "end": 1996
                }
            ],
            "ref_mentions": [
                {
                    "start": 209,
                    "end": 213,
                    "matchedPaperCorpusId": "18224184"
                },
                {
                    "start": 213,
                    "end": 216,
                    "matchedPaperCorpusId": "116180368"
                },
                {
                    "start": 267,
                    "end": 271,
                    "matchedPaperCorpusId": "60504821"
                },
                {
                    "start": 271,
                    "end": 274,
                    "matchedPaperCorpusId": "69685833"
                },
                {
                    "start": 274,
                    "end": 277,
                    "matchedPaperCorpusId": "11291939"
                },
                {
                    "start": 277,
                    "end": 280,
                    "matchedPaperCorpusId": "42720754"
                },
                {
                    "start": 280,
                    "end": 283,
                    "matchedPaperCorpusId": "18426272"
                },
                {
                    "start": 453,
                    "end": 457,
                    "matchedPaperCorpusId": "228818543"
                },
                {
                    "start": 603,
                    "end": 607,
                    "matchedPaperCorpusId": "5760219"
                },
                {
                    "start": 723,
                    "end": 727,
                    "matchedPaperCorpusId": "5760219"
                },
                {
                    "start": 898,
                    "end": 902,
                    "matchedPaperCorpusId": "252626451"
                },
                {
                    "start": 933,
                    "end": 936,
                    "matchedPaperCorpusId": "253205252"
                },
                {
                    "start": 969,
                    "end": 973,
                    "matchedPaperCorpusId": "140220651"
                },
                {
                    "start": 1025,
                    "end": 1029,
                    "matchedPaperCorpusId": "33943193"
                },
                {
                    "start": 1029,
                    "end": 1032,
                    "matchedPaperCorpusId": "128364433"
                },
                {
                    "start": 1247,
                    "end": 1250,
                    "matchedPaperCorpusId": "233739950"
                },
                {
                    "start": 1511,
                    "end": 1515,
                    "matchedPaperCorpusId": "46225607"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.83056640625
        },
        {
            "corpus_id": "21665365",
            "title": "Pocket Code: a mobile app for game jams to facilitate classroom learning through game creation",
            "text": "Tools, like Scratch3 or Snap4 that were designed to help programming beginners through a visual programming language are already well known and adopted in computing classes all over the world (Meerbaum-Salant, Armoni and Ben-Ari, 2010). These visual programming languages keep the focus on the semantics of programming and eliminate the need to deal with syntactical problems. Pocket Code5 is similar to Scratch but it can be directly programmed on the mobile device. \n\nIt is freely available at Google's Play Store and allows its users to create games, animations, music videos, and other kinds of apps on their smartphones. Pocket Code integrates with the device's sensors such as inclination, acceleration, loudness, or compass direction. It uses a visual, Lego\u00ae-style way to put code bricks together to form scripts. \n\nFor demonstrating the functionality of Pocket Code's concise user interface, a simple Pocket Code program is developed (see Figure 1). The program consists of two objects (left), the two looks used for animation (centre), and the bird's script that defines its behaviour (right). Every program has a number of objects and one background (which is a special object). Every object can hold a.) scripts to control the object, b.) looks, which can be changed and c.) sounds, to integrate music. The behaviour of the object and its looks and sounds can be controlled by scripts. The goal is to create a bird flapping its wings and always pointing to North, wherever the phone is pointing to. \n\nThis Pocket Code demo consists of two elements, a sky-blue background object and a bird object (Figure 1 (left)). The object bird has two different looks, which are used for the animation of its wings (Figure 1 (centre)). The bird's scripts section contains a single script that makes the bird flap its wings and updates the bird's direction to the North (Figure 1 (right)). The script consists of different-coloured bricks, indicating their originating brick category, e.g., control, motion, sound, looks, and data. The first brick, \"When program started,\" is a trigger that starts the execution of the script whenever the Pocket Code program is started by the user.",
            "score": 0.3563218540227138,
            "section_title": "Pocket Code: Creating games",
            "char_start_offset": 4974,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 236
                },
                {
                    "start": 237,
                    "end": 376
                },
                {
                    "start": 377,
                    "end": 467
                },
                {
                    "start": 470,
                    "end": 625
                },
                {
                    "start": 626,
                    "end": 741
                },
                {
                    "start": 742,
                    "end": 820
                },
                {
                    "start": 823,
                    "end": 957
                },
                {
                    "start": 958,
                    "end": 1102
                },
                {
                    "start": 1103,
                    "end": 1188
                },
                {
                    "start": 1189,
                    "end": 1313
                },
                {
                    "start": 1314,
                    "end": 1396
                },
                {
                    "start": 1397,
                    "end": 1509
                },
                {
                    "start": 1512,
                    "end": 1625
                },
                {
                    "start": 1626,
                    "end": 1733
                },
                {
                    "start": 1734,
                    "end": 1886
                },
                {
                    "start": 1887,
                    "end": 2028
                },
                {
                    "start": 2029,
                    "end": 2179
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8447265625
        },
        {
            "corpus_id": "276961580",
            "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs",
            "text": "A visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners. Advances in machine learning (ML) further stimulate growing interest in visual programming. Open-source ML hubs (e.g., TF-Hub [1], PyTorch-Hub [57], and Hugging Face [83]) contribute large numbers of encapsulated modules that accelerate AI project development and experimentation, and such libraries provide important resources for an ML-based visual programming platform. Recent advancements in large language models (LLMs) [3,8,77] and findings on Chain-of-Thought [81] have further stimulated community-wide interest in visual programming [4,19,84,86], suggesting further potential in the interactive exploration of AI chains. \n\nDespite the development of visual programming platforms in various domains, we observed that existing systems share one similar characteristic: users usually initiate a creative process in the workspace \"from scratch\". This implies that users need to 1) select nodes, 2) ideate the pipeline structure, and finally, 3) connect nodes within a completely empty workspace. As was also highlighted in existing literature in programming tools [92,95], such processes can easily overwhelm users, especially those who are unfamiliar with a particular visual programming platform. Providing pipeline templates may reduce on-boarding efforts [9,21], but the templates inherently lack flexibility and are not easily adaptable to users' specific needs. Similar issues also arise when users write programs using text-based editors (there exist many built-in functions in a particular programming language and multiple variables in a program), but advances in LLM assistants show that such challenges can be effectively reduced. For example, GitHub Copilot [23] enables users to generate code by simply describing users' requirements in natural language.",
            "score": 0.35619923442544343,
            "section_title": "Introduction",
            "char_start_offset": 1548,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 123
                },
                {
                    "start": 124,
                    "end": 291
                },
                {
                    "start": 292,
                    "end": 497
                },
                {
                    "start": 498,
                    "end": 589
                },
                {
                    "start": 590,
                    "end": 870
                },
                {
                    "start": 871,
                    "end": 1127
                },
                {
                    "start": 1130,
                    "end": 1348
                },
                {
                    "start": 1349,
                    "end": 1498
                },
                {
                    "start": 1499,
                    "end": 1701
                },
                {
                    "start": 1702,
                    "end": 1870
                },
                {
                    "start": 1871,
                    "end": 2144
                },
                {
                    "start": 2145,
                    "end": 2270
                }
            ],
            "ref_mentions": [
                {
                    "start": 641,
                    "end": 645,
                    "matchedPaperCorpusId": "202786778"
                },
                {
                    "start": 926,
                    "end": 928,
                    "matchedPaperCorpusId": "218971783"
                },
                {
                    "start": 928,
                    "end": 931,
                    "matchedPaperCorpusId": "13756489"
                },
                {
                    "start": 1040,
                    "end": 1043,
                    "matchedPaperCorpusId": "262044762"
                },
                {
                    "start": 1043,
                    "end": 1046,
                    "matchedPaperCorpusId": "264514979"
                },
                {
                    "start": 1046,
                    "end": 1049,
                    "matchedPaperCorpusId": "247447133"
                },
                {
                    "start": 1049,
                    "end": 1052,
                    "matchedPaperCorpusId": "238353829"
                },
                {
                    "start": 1567,
                    "end": 1571,
                    "matchedPaperCorpusId": "271903516"
                },
                {
                    "start": 1762,
                    "end": 1765,
                    "matchedPaperCorpusId": "267523023"
                },
                {
                    "start": 1765,
                    "end": 1768,
                    "matchedPaperCorpusId": "2452365"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.88818359375
        },
        {
            "corpus_id": "199002134",
            "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers",
            "text": "Most common syntax errors found in text-based languages are avoided or they cannot occur [41]. However, according to Bau et al. [40], \" . . . plain text as the representation of program text is still the norm for proficient and professional programmers and the accepted educational goal for programming instruction in schools in many countries (p. 1)\", which means that students will face a transition from blocks to text-based programming somewhere in their school life, but the move to new text-based environments is still a challenge. \n\nAnother problem attributed to block-based programming is that it becomes difficult to understand/debug programs when they start having many blocks of code. The diversity of colors of the blocks and the need to move the page from top to bottom (and vice versa) in search of execution errors, ends up confusing the programmers [21]. \n\nIn recent years, a new type of environment has emerged, joining the two models of programming, block-based and text-based. In these environments, pupils have the possibility to switch between the block-based and text-based versions of their programs. This strategy tends to be used by newcomers when using these environments to learn to program [42,43]. \n\nUsing these VPEs, pupils can learn and practice the main concepts of programming, such as instructions, containers (variables, constants and lists), conditional statements, loops, logical operators and input/output data. In addition, some studies concluded that block-based programming, together with efficient pedagogy, can promote a strong path for developing computational skills and prepare pupils for computer science education [44]. \n\nNowadays, there are many visual programming environments available as tools to introduce programming in primary and secondary schools. All these applications share the same principles of programming, but different core characteristics, forms of programming, system requirements, and types of processing, among others. In this article we report a cross-analysis of 26 selected VPEs (for example Scratch, App Inventor, Alice, Pencil Code, Tynker, Kodu, Code Studio, Thunkable, m-Block) focusing on their pedagogical potentialities and characteristics.",
            "score": 0.3556077513104975,
            "section_title": "Visual and Block-based Programming Environment",
            "char_start_offset": 14468,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 94
                },
                {
                    "start": 95,
                    "end": 141
                },
                {
                    "start": 142,
                    "end": 347
                },
                {
                    "start": 348,
                    "end": 537
                },
                {
                    "start": 540,
                    "end": 695
                },
                {
                    "start": 696,
                    "end": 870
                },
                {
                    "start": 873,
                    "end": 995
                },
                {
                    "start": 996,
                    "end": 1123
                },
                {
                    "start": 1124,
                    "end": 1226
                },
                {
                    "start": 1229,
                    "end": 1449
                },
                {
                    "start": 1450,
                    "end": 1667
                },
                {
                    "start": 1670,
                    "end": 1804
                },
                {
                    "start": 1805,
                    "end": 1987
                },
                {
                    "start": 1988,
                    "end": 2219
                }
            ],
            "ref_mentions": [
                {
                    "start": 89,
                    "end": 93,
                    "matchedPaperCorpusId": "62831677"
                },
                {
                    "start": 865,
                    "end": 869,
                    "matchedPaperCorpusId": "7587880"
                },
                {
                    "start": 1218,
                    "end": 1222,
                    "matchedPaperCorpusId": "17563407"
                },
                {
                    "start": 1222,
                    "end": 1225,
                    "matchedPaperCorpusId": "207220310"
                },
                {
                    "start": 1662,
                    "end": 1666,
                    "matchedPaperCorpusId": "557120"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.83154296875
        },
        {
            "corpus_id": "60833664",
            "title": "A visual programming language for novices",
            "text": "There are two basic reasons to turn to a visual language in a programming language for novices.\n\nFirst, a visual language provides the flexibility and expressiveness needed for a novice language to express a large vocabulary of programming plans. In our experience, a linear textual version of a plan-based programming language is quite unwieldy. Second, from a point of view of novice cognitive capability, a visual language is less likely to tax a novice's working memory. We discuss each of these points in detail.",
            "score": 0.3544289123930477,
            "section_title": "How Can Visual Languages Help Novices",
            "char_start_offset": 16488,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.927734375
        },
        {
            "corpus_id": "249431936",
            "title": "An Exploratory Analysis of Feedback Types Used in Online Coding Exercises",
            "text": "The visual programming language scratch allows learners to literally start from scratch by providing a great variety of resources for programming, e.g., categories of blocks for motion, looks, sounds, the creation of new blocks and variables, sprites, backdrops, and much more. Visual feedback is an important component of these multi-sensory resources and their application. Unlike other environments or tools, scratch can be used without solving a particular problem or tasks. Therefore, the interface itself was used for the analysis (see Figure 2), which resulted in the identification of the following types of tutoring feedback:",
            "score": 0.3544289123930477,
            "section_title": "Scratch",
            "char_start_offset": 17629,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 277
                },
                {
                    "start": 278,
                    "end": 375
                },
                {
                    "start": 376,
                    "end": 478
                },
                {
                    "start": 479,
                    "end": 634
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.828125
        },
        {
            "corpus_id": "235234208",
            "title": "Collaborative Coding in a Robotic Visual Language",
            "text": "Visual Programming reduces the need to write lond textual programs. Program thus have multiple dimensions not only the text (Burnett and McIntyre, 1995). The idea is that with visual constructs, it could have a better learning curve and be more appealing. \n\nFor example, with a robotic visual programming language, users can program the robot without writing a textual code and without significant knowledge of any programming language. Examples include Make Block1 and Open Roberta2 for programming different hardware systems using blocks. \n\nVisual programming languages have different several classes including block-based, diagrammatic, and iconic visual languages (Myers, 1990).",
            "score": 0.3544289123930477,
            "section_title": "VISUAL PROGRAMMING",
            "char_start_offset": 2075,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 67
                },
                {
                    "start": 68,
                    "end": 153
                },
                {
                    "start": 154,
                    "end": 255
                },
                {
                    "start": 258,
                    "end": 436
                },
                {
                    "start": 437,
                    "end": 540
                },
                {
                    "start": 543,
                    "end": 682
                }
            ],
            "ref_mentions": [
                {
                    "start": 124,
                    "end": 152,
                    "matchedPaperCorpusId": "14994189"
                },
                {
                    "start": 668,
                    "end": 681,
                    "matchedPaperCorpusId": "7335020"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.90966796875
        },
        {
            "corpus_id": "234174800",
            "title": "Training in Programming using Innovative Means",
            "text": "Programming training is mainly related to the study of data structures and algorithms that are suitable for visual presentation. \n\nTo reduce the problems related to the syntax of programming languages and to facilitate the perception of algorithms in their study, visualization tools are used, which illustrate and reduce the level of abstraction. \n\nThere are visualization tools that perform one or more of the following functions: \u2022 Description of an algorithm using a block diagram language; \n\n\u2022 Description of the algorithm by programming language, the elements of which are represented by separate blocks and the creation of the program , resembling the arrangement of jigsaw puzzle; \u2022 Testing of an algorithm represented by a block diagram or by a programming language; \n\n\u2022 Step-by-step execution of program code and interactive presentation in tabular form of the names of the variables and their current values during execution. They are considered and analyzed in detail in [2]. \n\nFlowgorithm is convenient and easy to use when presenting algorithms with simple and indexed variables that are elements of a one-dimensional array. \n\nPython Tutor can also be used for two-dimensional arrays and dynamic information structures. As the complexity of the presented structures increases, their perception becomes more difficult, because the visualization also becomes more complicated. In this paper we will present two additional tools: Lucidchart and Bandicam. \n\nLucidchart is a cloud solution that can create flowcharts by dragging and dropping the selected block to the appropriate location. There are options for changing the color, font and saving the created scheme in a different file format. Allows integration with Google documents and compatible with Microsoft Visio (import and export documents). The resulting block diagrams can be saved in file format and pdf, png and jpg [3]. \n\nBandicam is a video recording program that must be installed on a computer in order to be used. It can be used to record video from a webcam or to record on the screen. Video capture is done with a button that is convenient for the user and is set in the settings. One click of the button starts and stops recording. The created video can be saved in AVI or MP4 file formats [4].",
            "score": 0.3544289123930477,
            "section_title": "Innovative tools suitable for programming training",
            "char_start_offset": 1816,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 128
                },
                {
                    "start": 131,
                    "end": 347
                },
                {
                    "start": 350,
                    "end": 494
                },
                {
                    "start": 497,
                    "end": 775
                },
                {
                    "start": 778,
                    "end": 936
                },
                {
                    "start": 937,
                    "end": 987
                },
                {
                    "start": 990,
                    "end": 1138
                },
                {
                    "start": 1141,
                    "end": 1233
                },
                {
                    "start": 1234,
                    "end": 1388
                },
                {
                    "start": 1389,
                    "end": 1465
                },
                {
                    "start": 1468,
                    "end": 1598
                },
                {
                    "start": 1599,
                    "end": 1703
                },
                {
                    "start": 1704,
                    "end": 1811
                },
                {
                    "start": 1812,
                    "end": 1894
                },
                {
                    "start": 1897,
                    "end": 1992
                },
                {
                    "start": 1993,
                    "end": 2065
                },
                {
                    "start": 2066,
                    "end": 2161
                },
                {
                    "start": 2162,
                    "end": 2213
                },
                {
                    "start": 2214,
                    "end": 2276
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.70361328125
        },
        {
            "corpus_id": "233716462",
            "title": "Visual tools for teaching machine learning in K-12: A ten-year systematic mapping",
            "text": "2001). Therefore, to popularize ML, it is desirable to reduce the cognitive effort so the user can focus on the logic to solve the problem at hand (Knuth & Pardo, 1980). For this purpose, visual languages have been introduced that let users create programs by simply drag-and-drop a visual element on a canvas and subsequently connecting that element with other elements rather than by specifying them textually (Idrees et al., 2018;Weintrop & Wilensky, 2017). Such visual representations can take diverse forms, including block-based or flow-based languages (Burnett & Baker, 1994;Pasternak et al., 2017). Visual languages can improve learnability for novices by helping them to prevent errors, favor recognition over recall, and provide domain-specific limited instruction sets reducing the cognitive load (\u00c7akiro\u011flu et al. 2018). These advantages have led to widespread adoption within introductory programming contexts across different educational stages (Bau et al., 2017). Especially in K-12, block-based programming languages such as Scratch, SNAP!, Blockly, and App Inventor are widely used for teaching algorithms and programming concepts (Weintrop, 2019).\n\nFollowing this success, visual tools are also being proposed for teaching ML. These tools typically include a component for the development of an ML model and a deployment component (Rodr\u00edguez-Garc\u00eda et al., 2020). The ML development component supports collecting and labeling data, building a model using available ML algorithms (learning), evaluating the performance of the model with test data, and exporting the model to a programming platform. On the other hand, the deployment component is needed to develop an application using the ML model created by the ML development component to allow students to create usable intelligent solutions to make computing education engaging.\n\nYet, so far there are no systematic overviews on visual tools for teaching ML in K-12 and their characteristics. Rodr\u00edguez-Garc\u00eda et al. (2020) present a comparison of a few tools, whereas Hauck et al. (2019) focus only on tools to develop Internet of Things and AI-based business ideas. Other reviews on visual languages in K-12 focus on teaching computational thinking, not covering ML (Hubwieser et al., 2015;Kraleva et al., 2019;Noone &",
            "score": 0.35369553213067406,
            "section_title": "Introduction",
            "char_start_offset": 3951,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 147,
                    "end": 168,
                    "matchedPaperCorpusId": "60838702"
                },
                {
                    "start": 412,
                    "end": 433,
                    "matchedPaperCorpusId": "69746060"
                },
                {
                    "start": 433,
                    "end": 459,
                    "matchedPaperCorpusId": "10976181"
                },
                {
                    "start": 559,
                    "end": 582,
                    "matchedPaperCorpusId": "1426814"
                },
                {
                    "start": 1148,
                    "end": 1164,
                    "matchedPaperCorpusId": "198986538"
                },
                {
                    "start": 1349,
                    "end": 1380,
                    "matchedPaperCorpusId": "219039718"
                },
                {
                    "start": 1964,
                    "end": 1994,
                    "matchedPaperCorpusId": "219039718"
                },
                {
                    "start": 2040,
                    "end": 2059,
                    "matchedPaperCorpusId": "203169052"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.88671875
        },
        {
            "corpus_id": "227209010",
            "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications",
            "text": "Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments. In this study, Robot Operating System (ROS) compatible web based visual programming system has been developed for evarobot. ROS provides libraries and tools to help software developers create robot applications. It provides hardware abstraction, device drivers, libraries, visualizers, message-passing, package management, and more. Blockly has been used as VPL for the study and to generate / use blocks (commucation, sensing etc.). Some applications were generated like teleoperation, SLAM and wander etc. In this system, communication between server and client is supported by rosbridge package. Web page connected to ROS which runs on server using roslibjs library. Rosbridge provides a JSON API to ROS functionality for non-ROS programs.",
            "score": 0.35331484944901953,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9306640625
        },
        {
            "corpus_id": "231725028",
            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
            "text": "An increasing number of software applications are being written by end users without formal software development training. This inspired large technology companies such as Microsoft [91] and Amazon [90] to invest in low-code development environments empowering end users to create web and mobile applications. According to the 2019 Q1 Forrester report, the low-code market will witness an annual growth rate of 40%, with spending forecast to reach $21.2 billion by 2022 [102]. \n\nEnd-User Development (EUD) has emerged as a field that is concerned with tools and activities allowing end users \n\nThe associate editor coordinating the review of this manuscript and approving it for publication was Adnan Abid. \n\nwho are not professional software developers to write software applications [11]. This is promising as end users know their own domain and needs more than anyone else, and are often aware of specificities in their respective contexts. Further, as end users outnumber developers with professional software development training by a factor of 30-to-1, EUD enables a much larger pool of people to participate in software development [12]. \n\nA visual programming language (VPL), among other EUD techniques, allows end users to create a program by piecing together graphical elements rather than textually specifying them [9]. \n\nTraditionally, visual programming has been successfully used to help novices learn basics of programming by visualizing elements of a program. However, visual programming is increasingly being used by end users in various domains to create and tailor applications that are useful beyond the realm of education. For instance, VPLs are now being used in fields such as the Internet of Things (IoT) [3], [10], mobile application development [51], robotics [8], and Virtual/Augmented Reality [4]. \n\nA few review studies have been conducted recently aimed at analyzing and comparing different approaches to EUD including visual programming. Table 1 shows an overview of how these review studies compare with this study in several dimensions. The works found in [7], [26] and [29] analyzed a limited number of visual programming approaches and techniques since article retrieval mainly focused on EUD approaches in general as opposed to visual programming approaches.",
            "score": 0.3523888519949548,
            "section_title": "I. INTRODUCTION",
            "char_start_offset": 18,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 122
                },
                {
                    "start": 123,
                    "end": 309
                },
                {
                    "start": 310,
                    "end": 476
                },
                {
                    "start": 479,
                    "end": 591
                },
                {
                    "start": 594,
                    "end": 706
                },
                {
                    "start": 709,
                    "end": 790
                },
                {
                    "start": 791,
                    "end": 943
                },
                {
                    "start": 944,
                    "end": 1144
                },
                {
                    "start": 1147,
                    "end": 1330
                },
                {
                    "start": 1333,
                    "end": 1475
                },
                {
                    "start": 1476,
                    "end": 1643
                },
                {
                    "start": 1644,
                    "end": 1825
                },
                {
                    "start": 1828,
                    "end": 1968
                },
                {
                    "start": 1969,
                    "end": 2069
                },
                {
                    "start": 2070,
                    "end": 2294
                }
            ],
            "ref_mentions": [
                {
                    "start": 785,
                    "end": 789,
                    "matchedPaperCorpusId": "15559793"
                },
                {
                    "start": 1326,
                    "end": 1329,
                    "matchedPaperCorpusId": "8272806"
                },
                {
                    "start": 1729,
                    "end": 1732,
                    "matchedPaperCorpusId": "206841143"
                },
                {
                    "start": 1734,
                    "end": 1738,
                    "matchedPaperCorpusId": "30037917"
                },
                {
                    "start": 1771,
                    "end": 1775,
                    "matchedPaperCorpusId": "26243684"
                },
                {
                    "start": 1786,
                    "end": 1789,
                    "matchedPaperCorpusId": "219455753"
                },
                {
                    "start": 1821,
                    "end": 1824,
                    "matchedPaperCorpusId": "46851143"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.91455078125
        },
        {
            "corpus_id": "272053512",
            "title": "A Choice-Based Programming Learning Method to Develop Problem-Solving Skills",
            "text": "We implemented the proposed method as a web application that can be used from a smartphone. \n\nIn addition, the system separates how to plan a solution and code a solution and the user can focus on planning a solution in learning programming. The system automatically suggests the corresponding program code when the user selects the solution candidate for the given programming task. \n\nThe target environment is a programming learning environment for beginners using visual output from program execution, such as Processing [19] or p5.js [20]. The system supports developing programming learners' problem-solving skills while it does not support developing programming skills itself. Therefore, the system is intended to be used in parallel with classes on programming syntax and self-study. Figure 1 shows an example of the usage of the proposed system in solving the programming task. In this figure, the task is to write code that draws ten circles, painting the outside in red and the inside in blue. The system displays the options for the solution policy of the task in natural language, and the user selects the first option (a). Next, the user selects the option of an algorithm that can implement the chosen option before (b). The system displays a code for the chosen option (c). When the user confirms the code, the system will update the current code and output (d). Repeating these steps allows the user to concentrate on planning a solution. \n\nIn this paper, we implemented the proposed method as a system and conducted an evaluation experiment in a university introductory programming course. Contributions of this paper can be summarized as follows: \n\n\u2022 We propose a new programming learning method based on selecting options for solutions in natural language to improve the problem-solving skills of novices. The proposed method presents candidates for solutions in natural language and allows users to repeat quick trial-and-error solutions without being interrupted by coding-induced problems. \n\n\u2022 The proposed method is implemented as a user-friendly web application, ensuring easy access for users, even from their smartphones. \n\n\u2022 We applied the system in an actual programming class. As a result, the proposed system can potentially increase novices' lines of code and improve their programming task scores.",
            "score": 0.35230215385256736,
            "section_title": "I. INTRODUCTION",
            "char_start_offset": 2370,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 91
                },
                {
                    "start": 94,
                    "end": 241
                },
                {
                    "start": 242,
                    "end": 383
                },
                {
                    "start": 386,
                    "end": 543
                },
                {
                    "start": 544,
                    "end": 683
                },
                {
                    "start": 684,
                    "end": 791
                },
                {
                    "start": 792,
                    "end": 886
                },
                {
                    "start": 887,
                    "end": 1004
                },
                {
                    "start": 1005,
                    "end": 1136
                },
                {
                    "start": 1137,
                    "end": 1235
                },
                {
                    "start": 1236,
                    "end": 1289
                },
                {
                    "start": 1290,
                    "end": 1378
                },
                {
                    "start": 1379,
                    "end": 1455
                },
                {
                    "start": 1458,
                    "end": 1607
                },
                {
                    "start": 1608,
                    "end": 1665
                },
                {
                    "start": 1668,
                    "end": 1825
                },
                {
                    "start": 1826,
                    "end": 2012
                },
                {
                    "start": 2015,
                    "end": 2148
                },
                {
                    "start": 2151,
                    "end": 2206
                },
                {
                    "start": 2207,
                    "end": 2330
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.38427734375
        },
        {
            "corpus_id": "253043422",
            "title": "Visual authoring of virtual reality conversational scenarios for e-learning",
            "text": "The development of software solutions involves a considerable effort for those users who are not experts, limiting access to the use of the latest technological innovations. To solve this problem, in recent years, EUD has recently experienced a renewed interest, providing the necessary tools for non-expert users to develop their software solutions through adapted languages [11]. \n\nProgramming with VPLs does not require knowledge of textual programming syntax and provides a more visually stimulating environment, having a direct impact on user motivation [13]. Such languages are commonly used in educational settings for promoting students' development of computational thinking [14]. The suitability of block-based environments for novice programmers has already been demonstrated in different studies. Broll et al. [15] propose a web development environment based on Snap! that adds distributed programming capabilities. Kyfonidis et al. [16] present a block-based programming environment focused on learning the C language. Finally, Rao et al. [17] propose a visual programming environment for education in data science. \n\nVPLs can be classified into two categories: imperative languages and flow-based languages [18]. With the imperative languages, namely, block languages, the user creates their software by assembling different puzzle pieces intuitively. Within this category, Scratch, Snap! and Google Blockly stand out. Scratch enables novice programmers to create apps through its block-based language. However, the purpose with which these languages were created entails some limitations when it comes to use the latest technological innovations as, for instance, VR. On the other hand, with the flow-based languages, the models are created by joining different nodes and graphic lines representing the data flow or the transition between different states. Within this category, languages such as BPMN, PetriNet, DRAKON or UML activity diagrams can be found, among others [19].",
            "score": 0.3514346105606684,
            "section_title": "Visual programming languages",
            "char_start_offset": 5567,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 173
                },
                {
                    "start": 174,
                    "end": 381
                },
                {
                    "start": 384,
                    "end": 564
                },
                {
                    "start": 565,
                    "end": 689
                },
                {
                    "start": 690,
                    "end": 808
                },
                {
                    "start": 809,
                    "end": 927
                },
                {
                    "start": 928,
                    "end": 1031
                },
                {
                    "start": 1032,
                    "end": 1128
                },
                {
                    "start": 1131,
                    "end": 1226
                },
                {
                    "start": 1227,
                    "end": 1365
                },
                {
                    "start": 1366,
                    "end": 1432
                },
                {
                    "start": 1433,
                    "end": 1516
                },
                {
                    "start": 1517,
                    "end": 1682
                },
                {
                    "start": 1683,
                    "end": 1871
                },
                {
                    "start": 1872,
                    "end": 1992
                }
            ],
            "ref_mentions": [
                {
                    "start": 376,
                    "end": 380,
                    "matchedPaperCorpusId": "67770007"
                },
                {
                    "start": 559,
                    "end": 563,
                    "matchedPaperCorpusId": "219455753"
                },
                {
                    "start": 684,
                    "end": 688,
                    "matchedPaperCorpusId": "202252904"
                },
                {
                    "start": 822,
                    "end": 826,
                    "matchedPaperCorpusId": "44165140"
                },
                {
                    "start": 945,
                    "end": 949,
                    "matchedPaperCorpusId": "35843064"
                },
                {
                    "start": 1052,
                    "end": 1056,
                    "matchedPaperCorpusId": "53080670"
                },
                {
                    "start": 1221,
                    "end": 1225,
                    "matchedPaperCorpusId": "20439639"
                },
                {
                    "start": 1987,
                    "end": 1991,
                    "matchedPaperCorpusId": "6927128"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.88232421875
        },
        {
            "corpus_id": "224877240",
            "title": "Exploring the Effect of Training in Visual Block Programming for Preservice Teachers",
            "text": "The study followed a pre-experimental design as educational ethics prevented researchers to configure a control group, which is a clear limitation of the experiment and confers an exploratory nature to this piece of research. The intervention was carried out in two classroom-based instruction sessions of 5 h each, in two different weeks. Additionally, 10 h of autonomous student work were added, which was carried out outside the classroom. Figure 1 summarizes the different phases of the intervention. \n\nMultimodal Technol. Interact. 2020, 4, x FOR PEER REVIEW 3 of 11 \n\nScratch application was really valuable and accessible; something that has also been argued by other authors [30]. \n\nIn a study with elementary students, S\u00e1ez-L\u00f3pez et al. [2] reported statistically significant improvements in the understanding of computational concepts and practices due to the use of Scratch in the classroom, which suggests recommending educational authorities to implement programming in elementary educational environments. Students can approach computational practices and create their own content related to curricular areas, especially in the social sciences and arts, given the characteristics of the visual content these areas present, allowing the creation of colorful, dynamic, and motivating projects from an active perspective. These conclusions are reaffirmed in the study by [31] which demonstrated the acquisition of basic concepts of computer programming in the elementary education setting. \n\nThese investigations highlight the advantages related to student motivation, fun, commitment and enthusiasm through this pedagogical approach. Students are generally in favor of this pedagogical design, highlighting its usefulness and the active learning provided. The importance of an educational design that includes the approach of a visual programming language to understand the elements of logic, mathematics, and the creation of content in art and history, brings about significant improvements both in elementary [2] and higher education [32] through the understanding of computational concepts and active approaches. \n\nFrom our position as trainers of trainers, and from the application of approaches focused on visual block programming, we consider the impact generated by these emerging innovations in the initial training of future teachers, as well as the real presence of these key trends in the university training context. To address this, we specify the following aims: \u2022 O01-To assess the effect of a visual block programming-based intervention on pre-service teachers' mastery of coding.",
            "score": 0.3511924116472348,
            "section_title": "Materials and Methods",
            "char_start_offset": 8455,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 225
                },
                {
                    "start": 226,
                    "end": 339
                },
                {
                    "start": 340,
                    "end": 442
                },
                {
                    "start": 443,
                    "end": 504
                },
                {
                    "start": 507,
                    "end": 526
                },
                {
                    "start": 527,
                    "end": 536
                },
                {
                    "start": 537,
                    "end": 571
                },
                {
                    "start": 574,
                    "end": 688
                },
                {
                    "start": 691,
                    "end": 1019
                },
                {
                    "start": 1020,
                    "end": 1332
                },
                {
                    "start": 1333,
                    "end": 1500
                },
                {
                    "start": 1503,
                    "end": 1645
                },
                {
                    "start": 1646,
                    "end": 1767
                },
                {
                    "start": 1768,
                    "end": 2127
                },
                {
                    "start": 2130,
                    "end": 2440
                },
                {
                    "start": 2441,
                    "end": 2608
                }
            ],
            "ref_mentions": [
                {
                    "start": 683,
                    "end": 687,
                    "matchedPaperCorpusId": "57920371"
                },
                {
                    "start": 746,
                    "end": 749,
                    "matchedPaperCorpusId": "27633066"
                },
                {
                    "start": 1382,
                    "end": 1386,
                    "matchedPaperCorpusId": "151413422"
                },
                {
                    "start": 2023,
                    "end": 2026,
                    "matchedPaperCorpusId": "27633066"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.681640625
        },
        {
            "corpus_id": "3949077",
            "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications",
            "text": "languages. According to our study we see a gap in attracting mainstream programmers to using visual programming languages in each new programming task. The current VPLs are not equivalent to the current textual programming languages at the practical side. Yes, some limitations are a result of missing features that can be added but this doesn't count only for \"what we can do?\" but for \"how we can do things with respect to the productivity of the programmer during software development and the quality of the final software\".\n\nWe provided the requirements of a general purpose visual programming tool that can be used as replacement for the usage of popular programming languages like ( C,C++, C# and Java) + (visual programming environments like Visual Studio and Netbeans). We expect that after the implementation and marketing of this new tool, many new software projects can be developed using Visual Programming Language in less time with high quality. Also we expect attracting more users to real programming industry after the existence of this tool.\n\nAlso in this thesis, PWCT was presented. PWCT is a novel general purpose VPL that was designed to compete with textual programming languages such as C++ and Java. The novelty of this work comes from the invention of a technique called GCR. GCR uses graphical components to replace textual code in an easy and seamless process. PWCT's architecture, design, and implementation were covered in this thesis.\n\nThree types of evaluations were used to make sure that PWCT is a competitive VPL.\n\nUsability and capability evaluation shows that PWCT is extremely easy to use and requires a very short time for learning. Moreover, Efficiency evaluations show that PWCT requires",
            "score": 0.3509754580961078,
            "section_title": "Reputation Evaluation",
            "char_start_offset": 76357,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.82177734375
        },
        {
            "corpus_id": "111507400",
            "title": "VISUAL PROGRAMMING FOR BUILDING INFORMATION MODELING: ENERGY AND SHADING ANALYSIS CASE STUDIES",
            "text": "INTRODUCTION Although visual programming is being broadly implemented in other disciplines, it has only relatively recently become an important supplement to three-dimensional modeling programs in ...",
            "score": 0.3509754580961078,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.78466796875
        },
        {
            "corpus_id": "1063008",
            "title": "A General Framework for Overlay Visualization",
            "text": "Representation of the program text is the most basic form of program comprehension [14]. Since overlay visualization is superimposed on program text, it is especially suitable for novice programmers. Traditionally, program visualization systems visualize the program for the student. With overlay visualization, it is also easy to have the student specify the visualization using two of the most basic facilities: the program text, which is the most basic form of representation of the program (as compared to data space, flowchart, class graph, UML diagram, etc. which require a deeper understanding of the program), and mouse gestures, which are the most primitive form of user interaction. So, overlay visualization is especially amenable to active learning, and for use by novice programmers. \n\nWe plan to evaluate the effectiveness of overlay visualization in problets in fall 2006.",
            "score": 0.3509754580961078,
            "section_title": "Piskuliyski and Kumar",
            "char_start_offset": 11637,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 88
                },
                {
                    "start": 89,
                    "end": 199
                },
                {
                    "start": 200,
                    "end": 283
                },
                {
                    "start": 284,
                    "end": 692
                },
                {
                    "start": 693,
                    "end": 796
                },
                {
                    "start": 799,
                    "end": 887
                }
            ],
            "ref_mentions": [
                {
                    "start": 83,
                    "end": 87,
                    "matchedPaperCorpusId": "41137387"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.71484375
        },
        {
            "corpus_id": "209164949",
            "title": "The Development of a Visual Output Approach for Programming via the Application of Cognitive Load Theory and Constructivism",
            "text": "This article describes the development of the VJava Module that uses visual output approaches for a basic programming course. This module uses the developed MJava library that can be integrated into student programs to produce graphical and animated outputs. Cognitive load theory and constructivism are applied in the design of this module. The VJava module has been validated by programming and instruction design experts in terms of content, design and usability of the module. All experts have responded positively and agreed that this module is suitable for use in the teaching and learning of programming in higher education institutions. \n\nIn the next phase of this project, the VJava module will go through a pilot test process before being implemented in a real learning environment and evaluated for its effectiveness. The results of this evaluation will be reported in the subsequent paper.",
            "score": 0.3509754580961078,
            "section_title": "V. CONCLUSIONS",
            "char_start_offset": 27329,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 125
                },
                {
                    "start": 126,
                    "end": 258
                },
                {
                    "start": 259,
                    "end": 341
                },
                {
                    "start": 342,
                    "end": 480
                },
                {
                    "start": 481,
                    "end": 644
                },
                {
                    "start": 647,
                    "end": 828
                },
                {
                    "start": 829,
                    "end": 901
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.8505859375
        },
        {
            "corpus_id": "13395203",
            "title": "Visualizing Computer Programming in a Computer-based Simulated Environment",
            "text": "The goals of this research are to assemble literature related to the difficulties faced by novice programmers and students learning computer programming at the Higher Education (HE) level, investigating the advantages of program visualization techniques to this process and recommending an effective computer-based simulated environment to achieve this visualization. \n\nBoth quantitative and qualitative research methods have been applied to achieve the outcomes of this research (questionnaires, observations and students\" feedback). An intensive literature review has been carried out to document the problem formulation, and to support the research outcomes and recommendations.",
            "score": 0.3509754580961078,
            "section_title": "GOALS AND METHODS",
            "char_start_offset": 20,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 367
                },
                {
                    "start": 370,
                    "end": 534
                },
                {
                    "start": 535,
                    "end": 681
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.79541015625
        },
        {
            "corpus_id": "61439889",
            "title": "An Approach to Introductory Programming",
            "text": "The repeat statement and graphics are useful for providinginteresting exercises for several initial weeks. For example, after discussingdata types and a ss i g n me n t st at em en t s , w e c an w r i t e a programcontaining code such asthe following inti=1; repeat(40){ forward(i*10); left(90); i = i + 1; } As you might guess, this draws a spiral. Note that without therepeat, this code would have to wait for the looping constructs to betaught. \n\nGraphics is useful in explaining difficult concepts such asrecursion. That is because many pictures have a recursive structure. A simple example is a tree --it consists of smallertrees on top of a trunk. It can be easily drawn using a recursivefunction. Here is perhaps the simplest possible recursive function for drawing trees. Touse graphical objects in the coordinate graphics system, it isnecessary to use constructors and member functions. For example, hereis the code for creating a rectangle and moving it. \n\nRectangle r(xc,yc,L,H); // center coordinates, Length, Height r.move(deltax, deltay); This can be explained to students even without explaining objects:\"the first statement creates a rectangle namedr, the secondstatement moves it.\" Thus the students get introduced to constructorsand the dot notation well before object-oriented programming isintroduced. \n\nThe graphics functionality is implemented using a class hierarchy. Thus the graphics library itself can serve as an example when discussing object oriented programming.",
            "score": 0.3509754580961078,
            "section_title": "B. Utility of repeat and graphics",
            "char_start_offset": 14691,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 106
                },
                {
                    "start": 107,
                    "end": 350
                },
                {
                    "start": 351,
                    "end": 448
                },
                {
                    "start": 451,
                    "end": 520
                },
                {
                    "start": 521,
                    "end": 578
                },
                {
                    "start": 579,
                    "end": 654
                },
                {
                    "start": 655,
                    "end": 704
                },
                {
                    "start": 705,
                    "end": 780
                },
                {
                    "start": 781,
                    "end": 896
                },
                {
                    "start": 897,
                    "end": 965
                },
                {
                    "start": 968,
                    "end": 1199
                },
                {
                    "start": 1200,
                    "end": 1322
                },
                {
                    "start": 1325,
                    "end": 1391
                },
                {
                    "start": 1392,
                    "end": 1493
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.361572265625
        },
        {
            "corpus_id": "63111506",
            "title": "Primary School Pupils\u2019 Attitudes toward Learning Programming through Visual Interactive Environments",
            "text": "This section gives an overview of the use of visual tools in education. Rodger et al. (2009) introduced the integration of the Alice 3D into middle school and designed lessons in math, science, languages arts, social studies, and technology. Alice is an innovative 3D visual programming environment with which users can create interactive games, animations, and videos. It is a free teaching tool designed to create object-oriented programming. Ben-Ari (2012) introduced Scratch as a visual programming interactive medium in order to support the development of computational thinking skills. Wilson et al., (2009) introduced games-based learning, such as Scratch, and games-based construction into primary education to engage children at the primary level in developing computer programming skills. With Scratch, users can program interactive stories, games, and animations, which helps young people learn to think creatively. Stolee and Fristoe (2011) used Kodu Game Lab to introduce children to programming at an early age. Kodu is a 3D visual programming platform that can be used to teach creativity and problem solving, as well as programming. Ioannidou (2011) used games to support and develop computational thinking skills and to promote and increase opportunities for computer science education in the regular curriculum. Hero et.al. (2015) used the visual programming platform, MIT App, to increase interest and skills in computational practices. The visual programming platform, MIT App, enables users to create and design Android apps such as games, and more, and it can be used in various fields. MIT's App Inventor platform is used to learn how to program and create mobile apps. The materials available through the MIT App Inventor platform are suitable for teaching courses for middle school, high school, and college. Peluso and Sprechini (2012) used Alice to make a statement about the attitudes of high school student toward computer science. The students expressed their satisfaction with the use of Alice visual programming. The most common programming concepts gained from visual programming environments like Alice are loops (iteration), conditional statements that support problem solving, logic, reasoning and systematic thinking. We conclude that the development of educational visual programming environments like Alice, Scratch, Kodu, and Greenfoot, support the development of algorithmic thinking, and are effective for introducing primary school children to visual programming skills and concepts.",
            "score": 0.3509754580961078,
            "section_title": "Related Research",
            "char_start_offset": 1761,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 71
                },
                {
                    "start": 72,
                    "end": 241
                },
                {
                    "start": 242,
                    "end": 369
                },
                {
                    "start": 370,
                    "end": 444
                },
                {
                    "start": 445,
                    "end": 591
                },
                {
                    "start": 592,
                    "end": 798
                },
                {
                    "start": 799,
                    "end": 926
                },
                {
                    "start": 927,
                    "end": 1025
                },
                {
                    "start": 1026,
                    "end": 1148
                },
                {
                    "start": 1149,
                    "end": 1329
                },
                {
                    "start": 1330,
                    "end": 1455
                },
                {
                    "start": 1456,
                    "end": 1608
                },
                {
                    "start": 1609,
                    "end": 1692
                },
                {
                    "start": 1693,
                    "end": 1833
                },
                {
                    "start": 1834,
                    "end": 1960
                },
                {
                    "start": 1961,
                    "end": 2044
                },
                {
                    "start": 2045,
                    "end": 2254
                },
                {
                    "start": 2255,
                    "end": 2526
                }
            ],
            "ref_mentions": [
                {
                    "start": 592,
                    "end": 613,
                    "matchedPaperCorpusId": "61671687"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.94873046875
        },
        {
            "corpus_id": "219324467",
            "title": "Evaluation of Low-threshold Programming Learning Environments for the Blind and Partially Sighted",
            "text": "Many of the common programming learning environments are based on simplified programming languages, where the syntax is reduced to the essentials. With semantic, syntax and type errors being typical mistakes among novice programmers (Altadmri and Brown, 2015), this allows beginners to focus on semantic properties but also decimates the possibilities. The text-based, graphical or tangible programming languages and environments presented in this chapter were found through: \n\n\u2022 literature reviews of novice programming environments, mostly comparing text-based and block-based programming environments, such as (Xu et al., 2019), \n\n\u2022 a web-based search, where websites (such as (Baron, 2014)) were used to find easily accessible programming environments for children. \n\nAlthough introductory courses exist for most of the commonly used programming languages (such as Java and Python), several text-based programming languages and environments were specifically designed for novices. One famous example is BASIC, which stands for \"Beginner's All-purpose Symbolic Instruction Code\" and was developed in the 1960s (Kemeny and Kurtz, 1971). BASIC has since been widely used as an introductory programming language due to its simple syntax (Kemeny and Kurtz, 1971). Many so-called \"dialects\" of the programming language were developed, including Visual Basic and VB.NET, which belong to the most commonly used programming languages (Stack Overflow, 2019). \n\nOther examples of novice programming languages include Lisp and Logo, which is a variant of Lisp. These languages were developed at MIT in the 1950s (Papert, 1978;Winston and Horn, 1986). Whereas Lisp was mainly developed for the processing of lists, Logo was developed especially for the introduction into programming paradigms for children. Variants of both programming languages are still used today. \n\nFurthermore, programming environments targeting children as novice programmers were developed. KidsRuby (The Hybrid Group, 2011), for example, is a programming environment for children and teenagers that uses a simplified version of the Ruby programming language. An exemplary code is displayed in Listing 1. The commands that can be implemented in KidsRuby can be used without instructions, the syntax includes for and while loops, but without the need to implement variables.",
            "score": 0.350509195244577,
            "section_title": "EDUCATION-ORIENTED PROGRAMMING LANGUAGES",
            "char_start_offset": 5327,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 146
                },
                {
                    "start": 147,
                    "end": 352
                },
                {
                    "start": 353,
                    "end": 475
                },
                {
                    "start": 478,
                    "end": 631
                },
                {
                    "start": 634,
                    "end": 769
                },
                {
                    "start": 772,
                    "end": 984
                },
                {
                    "start": 985,
                    "end": 1138
                },
                {
                    "start": 1139,
                    "end": 1262
                },
                {
                    "start": 1263,
                    "end": 1452
                },
                {
                    "start": 1455,
                    "end": 1552
                },
                {
                    "start": 1553,
                    "end": 1642
                },
                {
                    "start": 1643,
                    "end": 1797
                },
                {
                    "start": 1798,
                    "end": 1858
                },
                {
                    "start": 1861,
                    "end": 1955
                },
                {
                    "start": 1956,
                    "end": 2124
                },
                {
                    "start": 2125,
                    "end": 2169
                },
                {
                    "start": 2170,
                    "end": 2338
                }
            ],
            "ref_mentions": [
                {
                    "start": 233,
                    "end": 259,
                    "matchedPaperCorpusId": "15380547"
                },
                {
                    "start": 613,
                    "end": 630,
                    "matchedPaperCorpusId": "67914194"
                },
                {
                    "start": 1604,
                    "end": 1618,
                    "matchedPaperCorpusId": "64758610"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.251220703125
        },
        {
            "corpus_id": "70006046",
            "title": "Evaluating a Course for Teaching Advanced Programming Concepts with Scratch to Preservice Kindergarten Teachers: A Case Study in Greece",
            "text": "to implement this new curriculum successfully [6]. For these reasons, CT and programming is taught in many parts of tertiary education that are not necessarily directly relevant to or focused on information technology or STEM. These faculties include pedagogical departments in which students have a first familiarity with CT and programming either for their direct educational use or to be able to produce interactive and multimedia learning materials [16]. Many researchers have already used Scratch at the university in introductory programming courses, and their experiences report on students' high motivation and sometimes also on higher performance [25].\n\nThe rest of the paper is structured as follows: in the next section, the advantages of choosing Scratch as an introductory programming environment are outlined; the second section presents the methodology of the Scratch course employed in this article; and the third section documents the results. The final section discusses the results obtained, outlining the limitations and recommendations for future research.",
            "score": 0.3490993348860696,
            "section_title": "Introduction",
            "char_start_offset": 2230,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 46,
                    "end": 49,
                    "matchedPaperCorpusId": "113853394"
                },
                {
                    "start": 453,
                    "end": 457,
                    "matchedPaperCorpusId": "16014776"
                },
                {
                    "start": 656,
                    "end": 660,
                    "matchedPaperCorpusId": "2129941"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.1324462890625
        },
        {
            "corpus_id": "246022597",
            "title": "Visual Programming for Artificial Intelligent and Robotic Application (VPAR) Framework",
            "text": "In order to create a computer program, an integrated development environment (IDE) is required. There are two basic components for every IDE, 1) text editor and 2) compiler or interpreter. Text editor is used for a text input to create a programming instruction. After the program is written, a compiler or interpreter (depending on which type of programming language) translates the human comprehensible language into a hardware native machine code. One of the drawbacks is when starting learning a program, programmers do not only learn syntax and sematic of the language but also have to learn how to perform an installation and configurations of the additional tools. Luckily, many modern IDEs have included all the required components in a single installation package. Yet, another issue is raised, with a different environment of each computer (e.g., OS, version, and previously install program). These can affect the operation of an IDE. In order to avoid this matter but still provide programming environment, a web-application online IDE seems to be a promising solution. A general idea of online-IDE is to provide a programming service via a web-browser without any installation of specified tool set. Moreover, variant of environment, compared to locally installed IDE, is relatively small (concerning on web-browser and its version). \n\nThe proposed visual programming for AI and Robotic Application system is designed for beginners in the world of programming. The key concept of the proposed system is the visual programming for representing a complex computation and logic flow while providing an insight of a program by translating the visual to text-based language. Users should be able to visualize a program flow via visual-based approach. Once they are competent in the flow of logic, a text-based approach is introduced to them. Thus, our system uses block-based for visualizing of program and providing a translation of that block-based to text-based code. In addition, the proposed system was designed to be web-application. The concern is on the complexity of tool setup and installation when writing a program. In that sense, the proposed system should be designed in ready-to-use manner without further installation. \n\nAs for block and text-based programming language, Python is selected because of its simplicity and suitability for novice programmers. For block-based programming, we use Google Blockly.",
            "score": 0.3490985787725012,
            "section_title": "Proposal of Visual Programming for AI and Robotic Application via Online IDE",
            "char_start_offset": 13497,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 95
                },
                {
                    "start": 96,
                    "end": 188
                },
                {
                    "start": 189,
                    "end": 262
                },
                {
                    "start": 263,
                    "end": 450
                },
                {
                    "start": 451,
                    "end": 671
                },
                {
                    "start": 672,
                    "end": 773
                },
                {
                    "start": 774,
                    "end": 902
                },
                {
                    "start": 903,
                    "end": 944
                },
                {
                    "start": 945,
                    "end": 1080
                },
                {
                    "start": 1081,
                    "end": 1211
                },
                {
                    "start": 1212,
                    "end": 1345
                },
                {
                    "start": 1348,
                    "end": 1472
                },
                {
                    "start": 1473,
                    "end": 1681
                },
                {
                    "start": 1682,
                    "end": 1757
                },
                {
                    "start": 1758,
                    "end": 1848
                },
                {
                    "start": 1849,
                    "end": 1977
                },
                {
                    "start": 1978,
                    "end": 2046
                },
                {
                    "start": 2047,
                    "end": 2134
                },
                {
                    "start": 2135,
                    "end": 2241
                },
                {
                    "start": 2244,
                    "end": 2378
                },
                {
                    "start": 2379,
                    "end": 2430
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.79345703125
        },
        {
            "corpus_id": "268272915",
            "title": "Automated code development based on genetic programming in graphical programming language: A pilot study",
            "text": "Graphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements. Since graphical programming does not require a strong understanding of the language and its syntax, these languages are often designed to make programming more intuitive and accessible to non-programmers. \n\nAutomated code development in LabVIEW or any other graphical programming environment is inspired by reversing a standard software development model. This engineering design process can be perceived as a methodical series of steps that allow programmers to create functional products and processes [1]. This process can be highly repetitive, and certain stages often require multiple iterations before proceeding to the next step. Since requirements-based testing and validation, also known as test-driven development, is a common and essential part of software development [2] and a standard procedure for programmers who must verify the code's functionality, by reversing this process, we can automatically generate code instead of developing programs or unit testing frameworks. In this reverse scenario, we can automatically create programs based on the predefined input requirements, and by backpropagating the input-output differences, we can modify the generated code until all requirements are satisfied. By transforming this task into a fully automated process, we can therefore fundamentally reshape the development principles for basic programs, and instead of employing human experts for code development and test report validation, we can utilize computers to generate programs and evaluate test reports. \n\nAutomated code generation in textual-based environments has been used in the software industry for decades [3], and especially in recent years, many novel program generation approaches have been proposed and evaluated on common benchmark problems [4]. These approaches to code generation employ various techniques, including artificial intelligence, machine learning, or genetic evolution methods, to repair or generate efficient and error-free codes. A significant research direction in this field involves the use of machine learning, especially neural network models.",
            "score": 0.3488628985507747,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 227
                },
                {
                    "start": 228,
                    "end": 507
                },
                {
                    "start": 508,
                    "end": 712
                },
                {
                    "start": 715,
                    "end": 863
                },
                {
                    "start": 864,
                    "end": 1016
                },
                {
                    "start": 1017,
                    "end": 1144
                },
                {
                    "start": 1145,
                    "end": 1495
                },
                {
                    "start": 1496,
                    "end": 1726
                },
                {
                    "start": 1727,
                    "end": 2031
                },
                {
                    "start": 2034,
                    "end": 2285
                },
                {
                    "start": 2286,
                    "end": 2485
                },
                {
                    "start": 2486,
                    "end": 2604
                }
            ],
            "ref_mentions": [
                {
                    "start": 1012,
                    "end": 1015,
                    "matchedPaperCorpusId": "225556207"
                },
                {
                    "start": 1288,
                    "end": 1291,
                    "matchedPaperCorpusId": "220647375"
                },
                {
                    "start": 2141,
                    "end": 2144,
                    "matchedPaperCorpusId": "3111613"
                },
                {
                    "start": 2281,
                    "end": 2284,
                    "matchedPaperCorpusId": "257038678"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.93603515625
        },
        {
            "corpus_id": "259318509",
            "title": "Visual Low-Code Language for Orchestrating Large-Scale Distributed Computing",
            "text": "Over many years, textual general-purpose programming languages have dominated software development. Such languages have multiple advantages, allowing programmers to develop solutions for different domains in the same language. At the same time, programming in contemporary programming languages like Java, Python or C# still necessitates significant professional skills. Especially challenging is the construction of time-efficient computation software that uses parallel and distributed processing. Considering that experienced programmers are scarce on the market, the need for new programming approaches is constantly growing. These approaches should reduce complexity by raising the level of abstraction and removing unwanted technology-related issues. This way, they would be accessible to non-professional programmers or even to domain experts. \n\nThis tendency to reduce the complexity of programming and raise the abstraction at which programming constructs are formulated led to the emergence of the low-code approach [1]. Low-code solutions are predominantly based on creating visual, model-based languages [2] with the aim of making them more understandable and accessible. It can be argued that such a solution should be easier to use by inexperienced programmers and raises the productivity of programming [3]. For this reason, the usage of visual programming languages is recently gaining popularity in engineering, and education [4,5]. This can be observed especially in the field of distributed computing, such as IoT [6], which shares multiple similarities with more powerful distributed Large-Scale Computing platforms. \n\nTypically, low-code systems are used to develop web-based business applications. However, recently it has been observed that the low-code paradigm can be easily applied to solve complex computation problems (using, e.g. Artificial Intelligence modules) [7]. This can be achieved by wrapping certain fragments of computation logic into computation units. These units can then be (re-)used when constructing computation applications at a significantly higher level of abstraction. This would lead to the emergence of a graphical (visual) programming language that would allow for expressing orchestrations (or choreographies [8]) of many computation units. \n\nThe main challenge for such a visual language would be dealing with typical computation parallelisation issues. Prominently, these issues pertain to High-Performance Computing (HPC) systems [9].",
            "score": 0.348781854681473,
            "section_title": "Introduction",
            "char_start_offset": 768,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 99
                },
                {
                    "start": 100,
                    "end": 226
                },
                {
                    "start": 227,
                    "end": 370
                },
                {
                    "start": 371,
                    "end": 499
                },
                {
                    "start": 500,
                    "end": 629
                },
                {
                    "start": 630,
                    "end": 756
                },
                {
                    "start": 757,
                    "end": 850
                },
                {
                    "start": 853,
                    "end": 1030
                },
                {
                    "start": 1031,
                    "end": 1183
                },
                {
                    "start": 1184,
                    "end": 1322
                },
                {
                    "start": 1323,
                    "end": 1449
                },
                {
                    "start": 1450,
                    "end": 1636
                },
                {
                    "start": 1639,
                    "end": 1719
                },
                {
                    "start": 1720,
                    "end": 1858
                },
                {
                    "start": 1859,
                    "end": 1896
                },
                {
                    "start": 1897,
                    "end": 1992
                },
                {
                    "start": 1993,
                    "end": 2117
                },
                {
                    "start": 2118,
                    "end": 2293
                },
                {
                    "start": 2296,
                    "end": 2407
                },
                {
                    "start": 2408,
                    "end": 2490
                }
            ],
            "ref_mentions": [
                {
                    "start": 1318,
                    "end": 1321,
                    "matchedPaperCorpusId": "254101606"
                },
                {
                    "start": 1443,
                    "end": 1446,
                    "matchedPaperCorpusId": "4039308"
                },
                {
                    "start": 1446,
                    "end": 1448,
                    "matchedPaperCorpusId": "231725028"
                },
                {
                    "start": 1533,
                    "end": 1536,
                    "matchedPaperCorpusId": "235414359"
                },
                {
                    "start": 1892,
                    "end": 1895,
                    "matchedPaperCorpusId": "254930853"
                },
                {
                    "start": 2262,
                    "end": 2265,
                    "matchedPaperCorpusId": "206447037"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9052734375
        },
        {
            "corpus_id": "208615635",
            "title": "Educational Robotics in Primary School: Measuring the Development of Computational Thinking Skills with the Bebras Tasks",
            "text": "Block programming is based on drag and drop of consecutive visual tiles on the editing area to compose different instructions; first of all, it facilitates the learning of programming skills because of a reduction in the cognitive load potentially required for textual programming [8,9]. Moreover, Kelleher, and Pausch [10] recognize further advantages in the use of visual programming for novice learners. Indeed, the visual block-based instruction is built using icons that facilitate students' recognition of its function, such as commands, conditions, and loops. Accordingly, visual programming allows students to focus their attention more on the logic and structures involved in programming tasks than in challenges related to writing code. Specifically, Lego \u00ae Education WeDo [11] is a programmable building system that was originally designed to foster children's learning in STEM disciplines and early development of computational thinking skills, through the implementation of a robotics artefact able to perform programmed actions. \n\nComputational thinking (CT) was first conceptualized as a set of cognitive processes that allow people to solve problems, design systems, and model human behavior by relying on concepts pertaining to computer science [12]. Later, the author [13] specified that CT refers to those thought processes whereby solutions to problems are designed to be implemented by an information-processing agent. In order to transfer the theoretical definition of CT to teaching and learning issues in K-12 education, the International Society for Technology in Education (ISTE) and the Computer Science Teachers Association (CSTA) have recently proposed an operational definition that can be profitably applied for educational purposes [14]. According to this definition, CT is basically a problem-solving process involving several cognitive skills, such as logically organizing and analyzing data, creating abstract representations of data through the use of models or simulations, designing solutions in terms of ordered steps (algorithmic thinking), and, most importantly, generalizing the acquired problem-solving skills to a wide range of problematic situations.",
            "score": 0.34855273228194605,
            "section_title": "Introduction",
            "char_start_offset": 2313,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 287
                },
                {
                    "start": 288,
                    "end": 406
                },
                {
                    "start": 407,
                    "end": 566
                },
                {
                    "start": 567,
                    "end": 746
                },
                {
                    "start": 747,
                    "end": 1042
                },
                {
                    "start": 1045,
                    "end": 1267
                },
                {
                    "start": 1268,
                    "end": 1439
                },
                {
                    "start": 1440,
                    "end": 1769
                },
                {
                    "start": 1770,
                    "end": 2195
                }
            ],
            "ref_mentions": [
                {
                    "start": 281,
                    "end": 284,
                    "matchedPaperCorpusId": "207226901"
                },
                {
                    "start": 284,
                    "end": 286,
                    "matchedPaperCorpusId": "10976181"
                },
                {
                    "start": 319,
                    "end": 323,
                    "matchedPaperCorpusId": "9916677"
                },
                {
                    "start": 1262,
                    "end": 1266,
                    "matchedPaperCorpusId": "41391768"
                },
                {
                    "start": 1286,
                    "end": 1290,
                    "matchedPaperCorpusId": "41391768"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9326171875
        },
        {
            "corpus_id": "277398472",
            "title": "A Bibliometric Exposition and Review on Leveraging LLMs for Programming Education",
            "text": "One of the most notable advantages of ChatGPT is its ability to generate good code for beginner-level programming tasks in multiple programming languages, be it Python [6], [60], Java and JavaScript [5], [26], [61], C++ or C# [5]. A comparative analysis in [60] revealed that ChatGPT generates code comparable to standard textbook solutions in terms of syntax, structure, and output, thus validating its alignment with educational standards. Reference [62] investigated ChatGPT's application for generating Object-Oriented Programming (OOP) exercises in programming education. \n\nA key finding was ChatGPT's ability to provide clear, stepby-step explanations, often surpassing the clarity of textbook material.",
            "score": 0.3483276534536713,
            "section_title": "a: EFFECTIVE CODE GENERATION AND EXPLANATION",
            "char_start_offset": 71315,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 230
                },
                {
                    "start": 231,
                    "end": 441
                },
                {
                    "start": 442,
                    "end": 576
                },
                {
                    "start": 579,
                    "end": 709
                }
            ],
            "ref_mentions": [
                {
                    "start": 168,
                    "end": 171,
                    "matchedPaperCorpusId": "259300053"
                },
                {
                    "start": 173,
                    "end": 177,
                    "matchedPaperCorpusId": "263204507"
                },
                {
                    "start": 199,
                    "end": 202,
                    "matchedPaperCorpusId": "260386372"
                },
                {
                    "start": 210,
                    "end": 214,
                    "matchedPaperCorpusId": "260935353"
                },
                {
                    "start": 226,
                    "end": 229,
                    "matchedPaperCorpusId": "260386372"
                },
                {
                    "start": 257,
                    "end": 261,
                    "matchedPaperCorpusId": "263204507"
                },
                {
                    "start": 452,
                    "end": 456,
                    "matchedPaperCorpusId": "261433946"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.0894775390625
        },
        {
            "corpus_id": "277624515",
            "title": "Learner stimulus intent: a framework for eye tracking data collection and feature extraction in computer programming education",
            "text": "For several decades, extensive research has been conducted on the essential principles and applications of eye tracking in education. Education studies focus on understanding how people learn and how teaching can facilitate this learning process. As time has progressed, eye tracking has proven to be an indispensable tool for examining learning processes 9 . Of the articles indexed by Scopus published since 2014 in education, most of the research on education focuses on computer science, social science, and medicine as shown in Fig. 1 where the research areas include collaborative learning 20 , reading 21 , instructional design 22 , proficiency level 23 , training 24 , assessment 25 , learning strategies 26 , problem-solving 16 , and teacher-student interaction 27 . Our research primarily concentrated on computer science education, with a specific emphasis on evaluating programming education. Based on the theory that there is a connection between learning to program and understanding how learners think, in 28 , the researcher proposed analyzing data gathered from eye movements to explore the cognitive processes of programmers. This study was pioneering in tracking eye movements to assess how attentively subjects were engaged with programming tasks. Between 2005 and 2008, a survey 29 revealed that most studies employed quantitative research methods, including eye-tracking, questionnaires, interviews, artifact analysis, observations, examinations, inventories, and course materials. By 2013, a review on the use of eye trackers in educational research 30 highlighted their increasing application. The survey also identified key research areas in programming, such as code comprehension, debugging, non-code comprehension, traceability, and collaborative programming. Most of the studies focused on participants reading source code and summarizing it or answering related questions, aiming to understand reading patterns and compare expert and novice programmers 31 . Other studies examined debugging, analyzing programmers' visual strategies for identifying errors 32,33 , non-code comprehension tasks involving software engineering resources like UML diagrams and flowcharts. There were also studies on collaborative programming 20 , exploring the visual attention of team programmers, and on traceability in software or programs 34 . \n\nIn programming education, we focussed on online assessment and related works using eye tracking technology. Even though online assessments present several advantages, they also pose numerous challenges for institutions, instructors, and learners 35 . Techniques such as self-reporting, instructor's questionnaires about learners, and written responses can have issues with validity, bias, and accuracy.",
            "score": 0.34767762397316837,
            "section_title": "Related works",
            "char_start_offset": 4175,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 133
                },
                {
                    "start": 134,
                    "end": 246
                },
                {
                    "start": 247,
                    "end": 359
                },
                {
                    "start": 360,
                    "end": 775
                },
                {
                    "start": 776,
                    "end": 904
                },
                {
                    "start": 905,
                    "end": 1143
                },
                {
                    "start": 1144,
                    "end": 1267
                },
                {
                    "start": 1268,
                    "end": 1503
                },
                {
                    "start": 1504,
                    "end": 1617
                },
                {
                    "start": 1618,
                    "end": 1787
                },
                {
                    "start": 1788,
                    "end": 1987
                },
                {
                    "start": 1988,
                    "end": 2197
                },
                {
                    "start": 2198,
                    "end": 2356
                },
                {
                    "start": 2359,
                    "end": 2466
                },
                {
                    "start": 2467,
                    "end": 2609
                },
                {
                    "start": 2610,
                    "end": 2761
                }
            ],
            "ref_mentions": [
                {
                    "start": 596,
                    "end": 598,
                    "matchedPaperCorpusId": "247858900"
                },
                {
                    "start": 609,
                    "end": 611,
                    "matchedPaperCorpusId": "248715536"
                },
                {
                    "start": 635,
                    "end": 637,
                    "matchedPaperCorpusId": "247060042"
                },
                {
                    "start": 658,
                    "end": 660,
                    "matchedPaperCorpusId": "253526667"
                },
                {
                    "start": 672,
                    "end": 674,
                    "matchedPaperCorpusId": "237207126"
                },
                {
                    "start": 688,
                    "end": 690,
                    "matchedPaperCorpusId": "239617053"
                },
                {
                    "start": 713,
                    "end": 715,
                    "matchedPaperCorpusId": "230284434"
                },
                {
                    "start": 734,
                    "end": 736,
                    "matchedPaperCorpusId": "69297708"
                },
                {
                    "start": 771,
                    "end": 773,
                    "matchedPaperCorpusId": "237806373"
                },
                {
                    "start": 1021,
                    "end": 1023,
                    "matchedPaperCorpusId": "17839650"
                },
                {
                    "start": 1300,
                    "end": 1302,
                    "matchedPaperCorpusId": "16622883"
                },
                {
                    "start": 1573,
                    "end": 1575,
                    "matchedPaperCorpusId": "14140012"
                },
                {
                    "start": 1983,
                    "end": 1985,
                    "matchedPaperCorpusId": "17027818"
                },
                {
                    "start": 2086,
                    "end": 2089,
                    "matchedPaperCorpusId": "3678615"
                },
                {
                    "start": 2089,
                    "end": 2091,
                    "matchedPaperCorpusId": "218597196"
                },
                {
                    "start": 2251,
                    "end": 2253,
                    "matchedPaperCorpusId": "247858900"
                },
                {
                    "start": 2352,
                    "end": 2354,
                    "matchedPaperCorpusId": "46955931"
                },
                {
                    "start": 2605,
                    "end": 2607,
                    "matchedPaperCorpusId": "232154573"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.31298828125
        },
        {
            "corpus_id": "55313608",
            "title": "Improving Performance and Progression of Novice Programmers: Factors Considerations",
            "text": "Teaching computer programming is recognized to be difficult and a real challenge. The biggest problem faced by novice programmers is their lack of understanding of basic programming concepts. A visualized learning tool was developed and used by volunteered first-year students for two semesters. The purposes of this paper are: Firstly, to emphasize factors which directly affect the performance of our students negatively. Secondly, to examine whether the proposed tool would improve their performance and learning progression or not. This tool provides many features and enhancement which were presented to students as pre-lecture material. The results of adopting this tool were conducted using a pre-survey and post-survey questionnaire. As a result, students who used the learning tool showed better performance in their programming subject. first programming course. With the assumption that students had no valuable knowledge, the methodological basis for the research was designed. Fig. 1. The learning environment.",
            "score": 0.3475544306000783,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.484375
        },
        {
            "corpus_id": "266989835",
            "title": "A Comprehensive Survey and Analysis of Diverse Visual Programming Languages",
            "text": "Visual Programming Languages (VPLs) provide ease of programming by reducing the need of manually typing code for programming. Although the existence of VPLs is almost as old as textual programming languages but they have not become a mainstream technology for developing professional programs. However, the recent introduction of web-based VPLs, such as Scratch and Snap, has reinvigorated the usefulness of VPLs. Today, there exist dozens of VPLs having diverse characteristics. However, a comprehensive analysis of these diverse visual programming languages has never been conducted. Such an analysis is required for identifying the strengths and weaknesses of VPLs, as well as to choose the most suitable VPS for the task in hand. To that end, this study has performed a comprehensive search of a large number of 40 VPLs and analyzed and compared these VPLS based on 14 characteristics.",
            "score": 0.3475544306000783,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.93505859375
        },
        {
            "corpus_id": "3949077",
            "title": "General-Purpose Visual Language and Information System with Case-Studies in Developing Business Applications",
            "text": "The questions that we aim to answer during this thesis are:\n\n1. What are the problems that prevent mainstream programmers from using the current visual programming languages?\n\n2. What is the design of a general-purpose visual programming language that can solve mainstream programmers problems and encourage them to use the proposed visual programming language in developing practical software?",
            "score": 0.3475544306000783,
            "section_title": "Research Questions",
            "char_start_offset": 10626,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.87255859375
        },
        {
            "corpus_id": "225476845",
            "title": "Plugged or Unplugged Teaching: A Case Study of Students' Preferences in the Teaching of Programming",
            "text": ", 2010), which makes learning programming is quite challenging (Helminen and Malmi, 2010), and students have an overall lower level of achievement in this subject (Robins, Rountree, and Rountree, 2003). In order to increase the success of teaching programming and to facilitate students' understanding, it is necessary to first teach the logic of algorithms to students (Ala-Mutka, 2004). For this purpose, interesting and entertaining visual programming tools have been developed in order to facilitate learning for beginners in programming education (Schwartz, Stagner, and Morrison, 2006).\n\nTeaching programming entails challenges in selecting suitable activities for a group of learners (\u00c7atlak, Tekdal, and Baz, 2015), helping students understand and apply algorithms (Futschek and Moschitz, 2010), and helping them use programming languages in writing codes (Arabac\u0131o\u011flu, B\u00fclb\u00fcl, and Filiz, 2007). The syntax of textbased programming is considered as one of the most challenging issues for students (Mannila, Peltomaki, and Salakoski, 2006;\u00d6zmen and Altun, 2014), while the code blocks presented in visual programming are easier for beginning level programmers to understand and apply (Wilson and Moffat, 2010). Calder (2010) argues that working with the block-based visual tools of programming software increases students' satisfaction and motivation to persist. In many studies, it was noted that the use of visual programming accelerates comprehension of the process (Naharro-Berrocal, Pareja-Flores, Urquiza-Fuentes, and Velazquez-Iturbide, 2002). For beginning learners, therefore, elementary level software programs such as Scratch (Malan and Leitner, 2007;Wu, Chang and He, 2010), Kodu (Stolee and Fristoe, 2011), StarLogo (Klopfer and Yoon, 2005), and Alice (Kelleher, Pausch, and Kiesler, 2007) are recommended as they allow students to perform coding by placing code blocks in order through drag and drop functions. In this way, the frequently faced problem of syntactic errors in text-based programming can be largely overcome.\n\nIn addition, attitudes toward programming (Gomes and Mendes",
            "score": 0.3475544306000783,
            "section_title": "Introduction",
            "char_start_offset": 1904,
            "sentence_offsets": [],
            "ref_mentions": [
                {
                    "start": 63,
                    "end": 89,
                    "matchedPaperCorpusId": "2011847"
                },
                {
                    "start": 163,
                    "end": 201,
                    "matchedPaperCorpusId": "10565822"
                },
                {
                    "start": 552,
                    "end": 591,
                    "matchedPaperCorpusId": "604956"
                },
                {
                    "start": 1046,
                    "end": 1068,
                    "matchedPaperCorpusId": "55080386"
                },
                {
                    "start": 1191,
                    "end": 1216,
                    "matchedPaperCorpusId": "14969243"
                },
                {
                    "start": 1218,
                    "end": 1231,
                    "matchedPaperCorpusId": "111179390"
                },
                {
                    "start": 1510,
                    "end": 1556,
                    "matchedPaperCorpusId": "8752964"
                },
                {
                    "start": 1644,
                    "end": 1669,
                    "matchedPaperCorpusId": "982597"
                },
                {
                    "start": 1669,
                    "end": 1692,
                    "matchedPaperCorpusId": "60583992"
                },
                {
                    "start": 1699,
                    "end": 1725,
                    "matchedPaperCorpusId": "3344110"
                },
                {
                    "start": 1772,
                    "end": 1809,
                    "matchedPaperCorpusId": "3910027"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.6962890625
        },
        {
            "corpus_id": "63111506",
            "title": "Primary School Pupils\u2019 Attitudes toward Learning Programming through Visual Interactive Environments",
            "text": "This study introduces a learning strategy based on visual coding tools. According to various studies in visual learning theory, seventy-five percent of all information processed by the brain is derived from visual formats. Furthermore, visual information is mapped better in students' minds. The learner understands the visual code, when the learner sees information in a regular classroom (Williams, 2009). The above mentioned formats can be used by students to display large amounts of information in ways that are easy to understand and that help reveal relationships and patterns. Based on various studies, students remember information better when it is represented and learned both visually and verbally. These strategies help students of all ages better manage learning objectives and achieve academic success. Visual learning environments help students to understand information better and develop their visual thinking (Raiyn, 2016). Visual thinking is a learning style where the learner understands and retains information more effectively when ideas, words and concepts are associated with images. Visual information is designed with various interactive visual tools, such as information and communication technology (e.g., web services), 2D visual coding, and 3D visual environment. This study focused on interactive visual coding, such as \"Code with Anna and Elsa\" and \"Turtle Academy\", which uses the LOGO programming language. It addressed the question: To what extent can learning programming skills through the above interactive visual environments contribute to a positive attitude on the part of young students toward learning programming? The main goal of the current research was to answer this question.",
            "score": 0.3475544306000783,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 71
                },
                {
                    "start": 72,
                    "end": 222
                },
                {
                    "start": 223,
                    "end": 291
                },
                {
                    "start": 292,
                    "end": 407
                },
                {
                    "start": 408,
                    "end": 584
                },
                {
                    "start": 585,
                    "end": 710
                },
                {
                    "start": 711,
                    "end": 817
                },
                {
                    "start": 818,
                    "end": 942
                },
                {
                    "start": 943,
                    "end": 1108
                },
                {
                    "start": 1109,
                    "end": 1294
                },
                {
                    "start": 1295,
                    "end": 1441
                },
                {
                    "start": 1442,
                    "end": 1658
                },
                {
                    "start": 1659,
                    "end": 1725
                }
            ],
            "ref_mentions": [
                {
                    "start": 928,
                    "end": 941,
                    "matchedPaperCorpusId": "55461478"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.607421875
        },
        {
            "corpus_id": "276684953",
            "title": "Two Approaches for Programming Education in the Domain of Graphics: An Experiment",
            "text": "This section starts by exploring the multifaceted relationship between graphics and programming education. We then review different approaches to program graphics, comment on the few studies that empirically evaluate them, and argue why one specific approach is worth investigating for transfer of specific programming concepts.",
            "score": 0.3475544306000783,
            "section_title": "Related Work",
            "char_start_offset": 3132,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 106
                },
                {
                    "start": 107,
                    "end": 328
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.58642578125
        },
        {
            "corpus_id": "259927065",
            "title": "Modeling Physical Phenomena and Processes in VPython",
            "text": "To describe physical phenomena, complex models are developed using tool environments and different programming languages. When a phenomenon is inaccessible to our sense, its description is indirect, and understanding can be difficult for students. By obtaining a direct visualization of a phenomenon inaccessible to the senses, a deeper understanding can be achieved, due to the effectiveness of such teaching methods. The use of various visualization tools for teaching is necessary for students to better understand physical phenomena and formulate appropriate mental models. This paper presents a simple visualization tool for 3D objects and graphs, designed for students with minimal programming experience. The purpose of the presented study is to determine the role of simple computer program codes in improving teaching methods in physical laboratories. Students will learn about the importance of the virtual laboratory as an element of visualization in the study of physics.",
            "score": 0.3475544306000783,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.330322265625
        },
        {
            "corpus_id": "15725477",
            "title": "Effectiveness of Combining Algorithm and Program Animation: A Case Study with Data Structure Course",
            "text": "On the basis literature evidence as well as personal experience, the author formulated the conjectures: \n\n1. Visualization of Algorithms helps students achieve greater understanding of the programming concepts. \n\n2. A teaching instrument Combining Algorithm Animation with Program Animation would enhance student learning more than a System with External Visualization. \n\nIn this section the study describe the experiment, method, participants, and procedures.",
            "score": 0.3475544306000783,
            "section_title": "Research Design",
            "char_start_offset": 17937,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 103
                },
                {
                    "start": 106,
                    "end": 210
                },
                {
                    "start": 213,
                    "end": 369
                },
                {
                    "start": 372,
                    "end": 460
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.6357421875
        },
        {
            "corpus_id": "62816171",
            "title": "An Evaluation of Open Digital Gaming Platforms for Developing Computational Thinking Skills",
            "text": "It is also important that all these tools seek to avoid novice programmers having to confront the complexity of text-based computer coding and to improve the learnability [7]. There are several ways to address this problem such as narrative tools, flow-model tools, or specialized output realizations [8]; in this chapter, we focus on the most common tools, which are those that use the block-based visual programming. These tools employ user interfaces based on visual blocks that are moved and placed constructively as an assembly game, usually with the visual abstraction of a puzzle with its pieces and fitting ways. These blocks work as an abstraction of programming components: sentences, data, control structures, procedures, and so on. Consequently, they considerably limit the prior knowledge required to program and reinforce the program structure, eliminating the possibility of syntax errors and focusing only on the logic that exists in the activity that is to be undertaken. \n\nIn this chapter, we review a number of existing platforms with features mentioned above. There are articles which discuss some of them [9][10][11]; our intention is to propose an objective analysis, reviewing their possibilities from different perspectives. From a pedagogical point of view, we study different dimensions that can affect the learning process in or out of class (such as the richness of the proposed interaction, the time that can be invested, and the depth of the exploration). From the point of view of the game, the fun and engagement generated. From a CT point of view, we will analyze what concepts involved in CT each platform covers and to what extent. Finally, we will analyze the degree of adaptation to the personal characteristics of programming learners, their skills, and knowledge. We will consider, among others, aspects such as feedback and interaction, registration possibilities, and learning design.",
            "score": 0.3475544306000783,
            "section_title": "Introduction",
            "char_start_offset": 2152,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 175
                },
                {
                    "start": 176,
                    "end": 418
                },
                {
                    "start": 419,
                    "end": 620
                },
                {
                    "start": 621,
                    "end": 743
                },
                {
                    "start": 744,
                    "end": 988
                },
                {
                    "start": 991,
                    "end": 1079
                },
                {
                    "start": 1080,
                    "end": 1248
                },
                {
                    "start": 1249,
                    "end": 1485
                },
                {
                    "start": 1486,
                    "end": 1555
                },
                {
                    "start": 1556,
                    "end": 1666
                },
                {
                    "start": 1667,
                    "end": 1802
                },
                {
                    "start": 1803,
                    "end": 1925
                }
            ],
            "ref_mentions": [
                {
                    "start": 301,
                    "end": 304,
                    "matchedPaperCorpusId": "8394893"
                },
                {
                    "start": 1129,
                    "end": 1133,
                    "matchedPaperCorpusId": "17824361"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.927734375
        },
        {
            "corpus_id": "221802417",
            "title": "A Visual Language for Composable Inductive Programming",
            "text": "Algorithmic information theory [20,21] suggests that any single notation used to describe software must either be as complex as the software it describes or else it must trade off generality. The use of multiple notations does not improve on this situation. \n\nWhilst visual programming has always seemed like a good idea, it has constantly grappled with the following issues: \n\n\u2022 Diagrams take up a lot of space on the screen compared to equivalent code; \n\n\u2022 Software is complex and diagrams of software can quickly become incomprehensible; \n\n\u2022 It often takes longer to produce a diagram than the equivalent code in a conventional language; \n\n\u2022 Literal visual languages have all of the same concepts as equivalent conventional programming language (variables, conditions, control structures, etc.) so learning such a visual language is not significantly easier; \n\n\u2022 Languages and frameworks often employ many classes and methods making it difficult to remember, find or discover relevant components and functions; \n\n\u2022 There are often too many concepts to represent visually in a distinctive or recognisable way so visual languages often rely heavily on textual annotation. \n\nThese issues have never been completely addressed. This is mostly due to the intrinsic complexity of the various visual languages themselves. While visual programming plays an important role in some areas a complete and compelling visual programming language remains elusive. \n\nAbstraction is often identified as a possible way of addressing some of these problems. As with conventional programming languages there is much interest in approaches that involve different programming paradigms, higher level languages and higher order programming. Unfortunately none of these approaches have addressed the issues associated with visual programming to a significant extent.",
            "score": 0.3475544306000783,
            "section_title": "Visual Programming",
            "char_start_offset": 5129,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 191
                },
                {
                    "start": 192,
                    "end": 257
                },
                {
                    "start": 260,
                    "end": 375
                },
                {
                    "start": 378,
                    "end": 454
                },
                {
                    "start": 457,
                    "end": 540
                },
                {
                    "start": 543,
                    "end": 640
                },
                {
                    "start": 643,
                    "end": 861
                },
                {
                    "start": 864,
                    "end": 1013
                },
                {
                    "start": 1016,
                    "end": 1172
                },
                {
                    "start": 1175,
                    "end": 1225
                },
                {
                    "start": 1226,
                    "end": 1316
                },
                {
                    "start": 1317,
                    "end": 1450
                },
                {
                    "start": 1453,
                    "end": 1540
                },
                {
                    "start": 1541,
                    "end": 1719
                },
                {
                    "start": 1720,
                    "end": 1844
                }
            ],
            "ref_mentions": [
                {
                    "start": 31,
                    "end": 35,
                    "matchedPaperCorpusId": "115528616"
                },
                {
                    "start": 35,
                    "end": 38,
                    "matchedPaperCorpusId": "271709362"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.6328125
        },
        {
            "corpus_id": "274656312",
            "title": "MindScratch: A Visual Programming Support Tool for Classroom Learning Based on Multimodal Generative AI",
            "text": "Programming has become an essential component of K-12 education and serves as a pathway for developing computational thinking skills. Given the complexity of programming and the advanced skills it requires, previous research has introduced user-friendly tools to support young learners. However, our interviews with six programming educators revealed that current tools often fail to reflect classroom learning objectives, offer flexible, high-quality guidance, and foster student creativity. This highlights the need for more adaptive and reflective tools. Therefore, we introduced MindScratch, a multimodal generative AI (GAI) powered visual programming support tool. MindScratch aims to balance structured classroom activities with free programming creation, supporting students in completing creative programming projects based on teacher-set learning objectives while also providing programming scaffolding. Our user study results indicate that, compared to the baseline, MindScratch more effectively helps students achieve high-quality projects aligned with learning objectives. It also enhances students' computational thinking skills and creative thinking. Overall, we believe that GAI-driven educational tools like MindScratch offer students a focused and engaging learning experience.",
            "score": 0.347361440289257,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.86083984375
        },
        {
            "corpus_id": "258193870",
            "title": "Analysis of Scratch Software in Scientific Production for 20 Years: Programming in Education to Develop Computational Thinking and STEAM Disciplines",
            "text": "Scratch dates back to 2003 (Figure 1), and the previous 20 years have made it one of the most popular programming languages in the educational world [31]. In turn, this technology can be a powerful tool for integrating art (A) and creativity in schools [32] by developing skills in STEAM disciplines [33]. In addition, students can explore and learn important skills such as algorithmic and critical thinking [34,35] in a fun way through the creation of projects, making it not only a one-to-one programme, but also a diverse and welcoming online community [36] that generates motivation [37][38][39][40] and sparks interest even in the scientific field of neuroeducation [41]. Students and users can be encouraged to share, collaborate and reinvent other users' creations from anywhere in the world, where computer syntax is not a problem and programming can be started from scratch [42]. It also features video tutorials that enable self-regulated and self-directed learning [43]. Thanks to Scratch's multilingual support available in more than 50 languages, languages can be learned [44] and this makes it accessible to a wide variety of people from different cultural and linguistic backgrounds. As a result of this internationalisation, \"Scratch Day\" [45] or \"Hour of Code\" [46], i.e., worldwide gatherings where schools celebrate the use of this tool, can be large or small events, for beginners or for more experienced \"Scratchers\". \n\nThe programming fundamentals of Scratch-EDU, tailored for children and adults, encourages inclusion and diversity in the classroom, and has even proven to be an engaging and successful tool [47] for bridging the gender gap in computer science and programming education [48] that has historically been dominated by men. By having a visual programming language, it makes programming more accessible to young people and people who do not have advanced reading and writing skills [49,50]. This allows for adaptation to the needs and learning paces of students [51] because it allows them to personalise and adapt their programming experience according to their individual needs and preferences, generating efficiency and interaction [52], and regardless of background or previous knowledge and skills in programming [53].",
            "score": 0.34686988636958505,
            "section_title": "Scratch in Education",
            "char_start_offset": 5970,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 154
                },
                {
                    "start": 155,
                    "end": 305
                },
                {
                    "start": 306,
                    "end": 677
                },
                {
                    "start": 678,
                    "end": 889
                },
                {
                    "start": 890,
                    "end": 982
                },
                {
                    "start": 983,
                    "end": 1199
                },
                {
                    "start": 1200,
                    "end": 1439
                },
                {
                    "start": 1442,
                    "end": 1760
                },
                {
                    "start": 1761,
                    "end": 1926
                },
                {
                    "start": 1927,
                    "end": 2259
                }
            ],
            "ref_mentions": [
                {
                    "start": 149,
                    "end": 153,
                    "matchedPaperCorpusId": "235475483"
                },
                {
                    "start": 253,
                    "end": 257,
                    "matchedPaperCorpusId": "245532362"
                },
                {
                    "start": 300,
                    "end": 304,
                    "matchedPaperCorpusId": "189513893"
                },
                {
                    "start": 409,
                    "end": 413,
                    "matchedPaperCorpusId": "237919797"
                },
                {
                    "start": 413,
                    "end": 416,
                    "matchedPaperCorpusId": "247457510"
                },
                {
                    "start": 557,
                    "end": 561,
                    "matchedPaperCorpusId": "237820843"
                },
                {
                    "start": 588,
                    "end": 592,
                    "matchedPaperCorpusId": "17366582"
                },
                {
                    "start": 592,
                    "end": 596,
                    "matchedPaperCorpusId": "202158133"
                },
                {
                    "start": 596,
                    "end": 600,
                    "matchedPaperCorpusId": "226263956"
                },
                {
                    "start": 600,
                    "end": 604,
                    "matchedPaperCorpusId": "247307391"
                },
                {
                    "start": 672,
                    "end": 676,
                    "matchedPaperCorpusId": "195351850"
                },
                {
                    "start": 884,
                    "end": 888,
                    "matchedPaperCorpusId": "247026497"
                },
                {
                    "start": 1256,
                    "end": 1260,
                    "matchedPaperCorpusId": "44162722"
                },
                {
                    "start": 1279,
                    "end": 1283,
                    "matchedPaperCorpusId": "241677349"
                },
                {
                    "start": 1632,
                    "end": 1636,
                    "matchedPaperCorpusId": "204881603"
                },
                {
                    "start": 1711,
                    "end": 1715,
                    "matchedPaperCorpusId": "225674489"
                },
                {
                    "start": 1918,
                    "end": 1922,
                    "matchedPaperCorpusId": "209002439"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.58203125
        },
        {
            "corpus_id": "231785967",
            "title": "Hybrid Java: The creation of a Hybrid Programming Environment",
            "text": "The study also further pointed to the existence of this \"educational gap\" around the ages of 14-17 where neither language type is ideal. Therefore, we have discerned that text-based languages have their weaknesses, but visual block-based languages also have their issues. This led us to the logical conclusion of taking the best parts of both language types and merging them together into a socalled hybrid programming language. In particular, we wanted to focus on a hybrid blocks-text environment. \n\nThe authors decided to investigate the creation of a hybrid form of Java (the FPL of choice at the authors institution). Other researchers have done similar testing using other languages with promising results (Weintrop, 2015). The premise is that, by creating and teaching with a hybrid programming environment we may see a curve where a visual language proves the easiest to learn for students, a text-based language appears the most difficult to learn but the hybrid \"language\" is placed between these two. This would suggest that a hybrid programming environment could be used within a CS1 module as an intervention tool for students who might be struggling with the text-based approach or additionally to provide a challenge to younger learners who might be bored with the visual programming approach.",
            "score": 0.34683192461644147,
            "section_title": "Motivation and Background",
            "char_start_offset": 7978,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 136
                },
                {
                    "start": 137,
                    "end": 271
                },
                {
                    "start": 272,
                    "end": 428
                },
                {
                    "start": 429,
                    "end": 499
                },
                {
                    "start": 502,
                    "end": 622
                },
                {
                    "start": 623,
                    "end": 729
                },
                {
                    "start": 730,
                    "end": 1011
                },
                {
                    "start": 1012,
                    "end": 1308
                }
            ],
            "ref_mentions": [
                {
                    "start": 712,
                    "end": 728,
                    "matchedPaperCorpusId": "19152833"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.5205078125
        },
        {
            "corpus_id": "225663487",
            "title": "Designing a Computer Programming Environment for Gifted Students: A Case Study",
            "text": "Learning to program contributes to development of various skills beyond gaining basic knowledge of programming. Programming improves problem solving skills (Saeli, Perrenet, Jochems, & Zwaneveld, 2011;Schwartz, Stagner, & Morrison, 2006), high-level thinking skills (Kafai & Burke, 2014) and creative thinking skills of students (Kobsiripat, 2015). Generally, beginner programmers perceive it difficult (Lahtinen, Ala-Mutka, & Jarvinen, 2005). Coding is one of the most problematic areas for students in the programming (\u00d6zmen & Altun, 2014). Even with the educational benefits, textbased programming has not been adopted because it requires language syntaxes and constructs knowledge and strong keyboarding skills (Lee, 2011). To make learning easier, interesting and entertaining visual programming environments have been developed (e.g. Scratch, Alice, Small Basic, Net Logo) (Schwartz et al., 2006). The environments, which visualize the algorithm, embody the coding process and provide easy editing possibilities (Cooper, Dann, & Pausch;2003). S\u00e1ez L\u00f3pez, Gonz\u00e1lez andCano (2016) found out that working on projects in the visual programming environment increases motivation of students. It is also important to know which methods and techniques can be used in programming education. Project based learning can be preferred in programming because it helps to recognize the importance of a real problem and necessity of each meaningful pieces (Ka\u015farc\u0131, 2013). Game-based learning is effective in understanding the logic of programming (Cristiane et al., 2010), and encourages students to do programming (Kazimoglu, Kiernan, Bacon, & Mackinnon, 2012;Theodoraki & Xinogalos, 2014). \n\nProgramming has just recently emerged as an area of interest in gifted education (Karnes & Siegle, 2005). Gifted children and their parents are also fascinated by programming, as it permits young learners to a lucrative and exciting career (Schroth, Daniels, & McCormick, 2019). Siegle expressed programming by writing, \"gifted and talented students excel at and are drawn to the thinking strategies used in the coding process\" (Siegle, 2017, p. 117).",
            "score": 0.34575647366957796,
            "section_title": "www.mojet.net",
            "char_start_offset": 4265,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 111
                },
                {
                    "start": 112,
                    "end": 348
                },
                {
                    "start": 349,
                    "end": 443
                },
                {
                    "start": 444,
                    "end": 542
                },
                {
                    "start": 543,
                    "end": 727
                },
                {
                    "start": 728,
                    "end": 839
                },
                {
                    "start": 840,
                    "end": 903
                },
                {
                    "start": 904,
                    "end": 1191
                },
                {
                    "start": 1192,
                    "end": 1287
                },
                {
                    "start": 1288,
                    "end": 1462
                },
                {
                    "start": 1463,
                    "end": 1682
                },
                {
                    "start": 1685,
                    "end": 1790
                },
                {
                    "start": 1791,
                    "end": 1963
                },
                {
                    "start": 1964,
                    "end": 2136
                }
            ],
            "ref_mentions": [
                {
                    "start": 156,
                    "end": 201,
                    "matchedPaperCorpusId": "7239142"
                },
                {
                    "start": 201,
                    "end": 237,
                    "matchedPaperCorpusId": "604956"
                },
                {
                    "start": 329,
                    "end": 347,
                    "matchedPaperCorpusId": "62571966"
                },
                {
                    "start": 403,
                    "end": 442,
                    "matchedPaperCorpusId": "6988391"
                },
                {
                    "start": 520,
                    "end": 541,
                    "matchedPaperCorpusId": "55080386"
                },
                {
                    "start": 715,
                    "end": 726,
                    "matchedPaperCorpusId": "141657904"
                },
                {
                    "start": 879,
                    "end": 902,
                    "matchedPaperCorpusId": "604956"
                },
                {
                    "start": 1018,
                    "end": 1042,
                    "matchedPaperCorpusId": "26602038"
                },
                {
                    "start": 1073,
                    "end": 1084,
                    "matchedPaperCorpusId": "27633066"
                },
                {
                    "start": 1538,
                    "end": 1562,
                    "matchedPaperCorpusId": "4883058"
                },
                {
                    "start": 1606,
                    "end": 1652,
                    "matchedPaperCorpusId": "54174799"
                },
                {
                    "start": 1652,
                    "end": 1681,
                    "matchedPaperCorpusId": "13848258"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.68115234375
        },
        {
            "corpus_id": "277780361",
            "title": "Leveraging Metaphors in a VR Serious Game for Computational Thinking",
            "text": "Several research studies as well as commercial platforms have explored computational thinking in VR. Pierre et al. [9] conducted a study examining student acceptance and the efficacy of VR games in programming education, revealing positive results attributed to the simulation of real-world scenarios and interactive elements. \n\nCoSpaces [2] [7] is an online platform that enables users to create, explore, and share 3D worlds, with support for virtual reality interaction. Similar to the well-known Scratch platform [13], CoSpaces is designed for beginners, allowing users to build virtual experiences without extensive programming knowledge. Projects can be developed using Blockly (a visual programming language) or JavaScript, making it a flexible tool for educational purposes [20]. Unlike many VR educational applications that focus primarily on passive visualization (e.g., virtual museum tours), CoSpaces emphasizes interactive content creation. \n\nVRCoding, a recent work based also on VR block coding [5][4], aims to teach computational thinking immersively by utilizing passive haptics (i.e., instead of relying on active haptic devices that generate forces or vibrations, passive haptics uses the inherent physical properties of objects) for enhanced interaction. User testing with secondary school students demonstrated positive feedback regarding presence and experience compared to standard monitorbased coding. \n\nIn the university context, a VR game, Imikode [16], was designed to teach object-oriented programming by building a 3D virtual world of objects such as trees, houses, and animals through a storytelling approach. The findings suggested that VR's immersion and direct visualization of abstract concepts motivate students and significantly enhance their programming comprehension and skills. \n\nSimilarly, Tanielu et al. developed OOPVR [17], a VR experience using analogies like houses and blueprints, to clarify abstract OOP concepts for students. Pre-and post-surveys showed a significant increase in students' confidence in visualizing OOP concepts after using OOPVR. Our research uses block-based characteristics and analogies from previous studies, but differentiates itself by implementing a novel and intuitive metaphor that enables a seamless introduction to programming. Nevertheless, despite the benefits, the recent literature reports that VR serious games raise ethical concerns regarding user data, immersion, accessibility, and safety.",
            "score": 0.34533506212432996,
            "section_title": "Related work",
            "char_start_offset": 2030,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 100
                },
                {
                    "start": 101,
                    "end": 326
                },
                {
                    "start": 329,
                    "end": 473
                },
                {
                    "start": 474,
                    "end": 643
                },
                {
                    "start": 644,
                    "end": 787
                },
                {
                    "start": 788,
                    "end": 953
                },
                {
                    "start": 956,
                    "end": 1274
                },
                {
                    "start": 1275,
                    "end": 1425
                },
                {
                    "start": 1428,
                    "end": 1639
                },
                {
                    "start": 1640,
                    "end": 1816
                },
                {
                    "start": 1819,
                    "end": 1973
                },
                {
                    "start": 1974,
                    "end": 2095
                },
                {
                    "start": 2096,
                    "end": 2304
                },
                {
                    "start": 2305,
                    "end": 2474
                }
            ],
            "ref_mentions": [
                {
                    "start": 115,
                    "end": 118,
                    "matchedPaperCorpusId": "220528951"
                },
                {
                    "start": 782,
                    "end": 786,
                    "matchedPaperCorpusId": "198986538"
                },
                {
                    "start": 1010,
                    "end": 1013,
                    "matchedPaperCorpusId": "265509625"
                },
                {
                    "start": 1474,
                    "end": 1478,
                    "matchedPaperCorpusId": "254562006"
                },
                {
                    "start": 1861,
                    "end": 1865,
                    "matchedPaperCorpusId": "145053242"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.60986328125
        },
        {
            "corpus_id": "224877240",
            "title": "Exploring the Effect of Training in Visual Block Programming for Preservice Teachers",
            "text": "These practices provided the students with satisfaction and fun (sub-dimension 4), and the students stated that they were happy, motivated and liked the programming activities (items 4.1, 4.2, 4.3, 4.4, and 4.5). \n\n7. The main obstacle to implementing block programming appeared to be the need for teacher training, due to the difficulty of these pedagogical approaches and computational practices, something that may be related to the pedagogical beliefs of teachers about the barriers in the use of technology in the classroom [41] and their perceived competence [42]. To a lesser extent, the need for material resources and the difficulty in curricular design for these types of activities were also mentioned, which underpins what was previously denoted in [29]. \n\nOnce the availability of resources, class planning and initial and continuous teacher training have been overcome, the implementation of visual block programming in educational contexts creates pedagogical advantages that allow greater student activity and prominence, taking advantage of the strength of interest and motivation that these approaches elicit, through collaboration, communication, creativity and student satisfaction. \n\nInternational studies and reports have proposed that these key trends be adopted in the short term, leading to a change in educational practices [1]. University education and initial teacher training must adapt to these challenges and the demands of today's society, taking into account the emerging trends that prospective professionals will encounter in their immediate future [33]. This and other studies [43,44] provide evidence concerning the attitudes, assessments, and perspectives of the application of programming in university contexts among future teachers. Due to the difficulty of ensuring adequate application, and the essential need for training to avoid the barriers and difficulties that arise due to erroneous pedagogical application, now is a key moment for the introduction of educational technology during initial teacher training in university contexts, since if such programming training is delayed, the opportunity to incorporate these technologies into the classroom will be lost. How to teach Scratch at elementary classrooms is beyond the scope of this study as the training was focused on developing a good command in Scratch, but it was not aimed at teaching the future teachers how to introduce this visual language to elementary students. However, this issue is essential to computer sciences education and should be addressed in future studies.",
            "score": 0.3450746704823775,
            "section_title": "Discussion",
            "char_start_offset": 27758,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 212
                },
                {
                    "start": 215,
                    "end": 570
                },
                {
                    "start": 571,
                    "end": 766
                },
                {
                    "start": 769,
                    "end": 1202
                },
                {
                    "start": 1205,
                    "end": 1354
                },
                {
                    "start": 1355,
                    "end": 1589
                },
                {
                    "start": 1590,
                    "end": 1773
                },
                {
                    "start": 1774,
                    "end": 2210
                },
                {
                    "start": 2211,
                    "end": 2474
                },
                {
                    "start": 2475,
                    "end": 2581
                }
            ],
            "ref_mentions": [
                {
                    "start": 529,
                    "end": 533,
                    "matchedPaperCorpusId": "63854734"
                },
                {
                    "start": 565,
                    "end": 569,
                    "matchedPaperCorpusId": "216271043"
                },
                {
                    "start": 761,
                    "end": 765,
                    "matchedPaperCorpusId": "31980722"
                },
                {
                    "start": 1584,
                    "end": 1588,
                    "matchedPaperCorpusId": "11141101"
                },
                {
                    "start": 1613,
                    "end": 1617,
                    "matchedPaperCorpusId": "35685619"
                },
                {
                    "start": 1617,
                    "end": 1620,
                    "matchedPaperCorpusId": "151144620"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.51953125
        },
        {
            "corpus_id": "257365325",
            "title": "Hiding task-oriented programming complexity: an industrial case study",
            "text": "In literature, visual programming interfaces commonly use flow diagrams, behaviour trees, blocks, and icons (Stenmark, Haaae, and Topp, 2017). Some visual programming systems propose personal graphical user interfaces (Schou et al., 2018) that use buttons, menus, windows, textual inputs, and sliders. The standard IEC-61131-3, which defines programming languages for automation, provide visual programming languages, such as the Function Block (FB) or the Sequential Flow Chart (SFC), that can also be used for robot programming as standard languages (Thormann and Winkler, 2021;Rendiniello et al., 2020). These languages are suitable for beginner programmers. The execution speed of visual applications is slow, and the programming requires more time than a textual one. A complex task requires a large number of operations, users spend time making room for things, encasing and rearranging them in macros, and the overall program can get crowded. \n\nAugmented/virtual reality allows overlapping the real-world environment with a virtual one. With this technology, some information or programming tools can appear directly in the environment. The possibility of overlapping a virtual robot and objects allows the operator to use the programming by demonstration without interacting directly with the robot (Blankemeyer et al., 2018). Visualising virtual panels with programming information (e.g., robot trajectory or parameter values) allows the operator to make decisions (Gadre et al., 2019). Using physical auxiliary tools (Ong et al., 2020) or object detection software (Apostolopoulos et al., 2022) can facilitate the user programming. This technology presents a high implementation cost; it needs to be more flexible as it is programmed for a specific task and prone to failures in case of environmental changes. \n\nNatural language programming uses speech and text to create programs. Usually, this technique works in parallel with another programming technique. The high complexity of human language requires some constraints, and this type of language cannot describe the action in its entirety. In literature, natural language programming was combined with programming by demonstration (Quintero et al., 2018), visual programming (Huang and Cakmak, 2017), and augmented reality (Andronas et al., 2021).",
            "score": 0.34505914067425497,
            "section_title": "Related works",
            "char_start_offset": 10548,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 142
                },
                {
                    "start": 143,
                    "end": 301
                },
                {
                    "start": 302,
                    "end": 606
                },
                {
                    "start": 607,
                    "end": 661
                },
                {
                    "start": 662,
                    "end": 772
                },
                {
                    "start": 773,
                    "end": 949
                },
                {
                    "start": 952,
                    "end": 1043
                },
                {
                    "start": 1044,
                    "end": 1143
                },
                {
                    "start": 1144,
                    "end": 1334
                },
                {
                    "start": 1335,
                    "end": 1495
                },
                {
                    "start": 1496,
                    "end": 1641
                },
                {
                    "start": 1642,
                    "end": 1819
                },
                {
                    "start": 1822,
                    "end": 1891
                },
                {
                    "start": 1892,
                    "end": 1969
                },
                {
                    "start": 1970,
                    "end": 2104
                },
                {
                    "start": 2105,
                    "end": 2312
                }
            ],
            "ref_mentions": [
                {
                    "start": 108,
                    "end": 141,
                    "matchedPaperCorpusId": "17034241"
                },
                {
                    "start": 218,
                    "end": 238,
                    "matchedPaperCorpusId": "46998839"
                },
                {
                    "start": 552,
                    "end": 580,
                    "matchedPaperCorpusId": "237597380"
                },
                {
                    "start": 580,
                    "end": 605,
                    "matchedPaperCorpusId": "222219690"
                },
                {
                    "start": 1307,
                    "end": 1333,
                    "matchedPaperCorpusId": "69786079"
                },
                {
                    "start": 1474,
                    "end": 1494,
                    "matchedPaperCorpusId": "86846328"
                },
                {
                    "start": 1527,
                    "end": 1545,
                    "matchedPaperCorpusId": "201246976"
                },
                {
                    "start": 1575,
                    "end": 1604,
                    "matchedPaperCorpusId": "247402386"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.81787109375
        },
        {
            "corpus_id": "233252446",
            "title": "Evolution of Human Computer Interaction",
            "text": "In the eighties, a large number of scientific journals devoted to computer topics were published. The materials of these journals were available to domestic researchers either through scientific libraries or through abstract journals, in which reports of almost all scientific articles were published. The full texts of these articles were available on paper or microfilm. The analysis of publications related to computer graphics allowed to identify the emergence of two new directions the visual programming and the program visualization. It is interesting that at first it was difficult to separate these concepts due to the similarity of the names. \n\nVisual programming implied the use of graphics, in particular schemes, diagrams, iconic images (icons) in the process of developing programs. Visualization of programming assumed that already developed programs were presented in the form of the same graphic elements. Within the framework of programming visualization, one could single out such sections as animation of algorithms, visual debugging etc. The ideas of visual programming languages appeared in the seventies when computer graphics systems began to work quite steadily. Visual languages of the seventies were built on the basis of flowcharts or diagrams of Nassi-Shneiderman, which served to describe structured programming. This direction had developed sufficiently by the end of the eighties. Diagrammatic and iconic programming languages were developed, compilers of visual languages were created, [24]. The first animation system for algorithms was developed back in the mid-sixties. Individual frames were shot on film, and the result was a movie describing the operation of the algorithm. In the eighties, animation systems of algorithms were implemented onthe basis of modern computer graphics at that time [25]. An interesting idea of algorithmic operations was proposed which served as the basis for the animation \"script\" [26]. \n\nIn general,visual debuggers were based on ideas for interactive debugging. The user had the opportunity to view, for example, the program trace to see a graphical displaying the data that the user was interested in. The development of visual debugging systems for parallel computing began. For this purpose both natural graphics for the application were being debugged and traditional schemes and diagrams could be used. The idea of creating software visual complexes was put forward, which consisted in the fact that both the development of programs, their debugging and their maintenance had to be carried out within a single system with the same graphical representation of software entities.",
            "score": 0.3441653753236377,
            "section_title": "Visualization software",
            "char_start_offset": 32910,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 97
                },
                {
                    "start": 98,
                    "end": 301
                },
                {
                    "start": 302,
                    "end": 372
                },
                {
                    "start": 373,
                    "end": 540
                },
                {
                    "start": 541,
                    "end": 652
                },
                {
                    "start": 655,
                    "end": 796
                },
                {
                    "start": 797,
                    "end": 922
                },
                {
                    "start": 923,
                    "end": 1058
                },
                {
                    "start": 1059,
                    "end": 1187
                },
                {
                    "start": 1188,
                    "end": 1342
                },
                {
                    "start": 1343,
                    "end": 1412
                },
                {
                    "start": 1413,
                    "end": 1524
                },
                {
                    "start": 1525,
                    "end": 1605
                },
                {
                    "start": 1606,
                    "end": 1712
                },
                {
                    "start": 1713,
                    "end": 1837
                },
                {
                    "start": 1838,
                    "end": 1955
                },
                {
                    "start": 1958,
                    "end": 2032
                },
                {
                    "start": 2033,
                    "end": 2173
                },
                {
                    "start": 2174,
                    "end": 2247
                },
                {
                    "start": 2248,
                    "end": 2378
                },
                {
                    "start": 2379,
                    "end": 2653
                }
            ],
            "ref_mentions": [
                {
                    "start": 1519,
                    "end": 1523,
                    "matchedPaperCorpusId": "47545019"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.84912109375
        },
        {
            "corpus_id": "259335765",
            "title": "Using Visual Programming Games to Study Novice Programmers",
            "text": "Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13]. \n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]. There are many options, but popular ones include code.org, Scratch, and Alice. In [6], Scratch was introduced to preschool educators and evaluated basic computational and logical thinking. All educators saw the direct benefits and 85.7% said it should be taught to preschool students. Continuing this idea, [16] concludes that the early introduction of computational and logical thinking into the kindergarten curriculum helps with cognitive thinking. Comparing the effectiveness of block-based programming to conventional text-based programming, [8] evaluated high-school students learning under different modalities.",
            "score": 0.3441653753236377,
            "section_title": "Visual Programming",
            "char_start_offset": 4631,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 76
                },
                {
                    "start": 77,
                    "end": 187
                },
                {
                    "start": 188,
                    "end": 278
                },
                {
                    "start": 279,
                    "end": 425
                },
                {
                    "start": 426,
                    "end": 548
                },
                {
                    "start": 549,
                    "end": 696
                },
                {
                    "start": 697,
                    "end": 788
                },
                {
                    "start": 789,
                    "end": 1016
                },
                {
                    "start": 1019,
                    "end": 1094
                },
                {
                    "start": 1095,
                    "end": 1231
                },
                {
                    "start": 1232,
                    "end": 1323
                },
                {
                    "start": 1324,
                    "end": 1441
                },
                {
                    "start": 1442,
                    "end": 1583
                },
                {
                    "start": 1584,
                    "end": 1737
                },
                {
                    "start": 1738,
                    "end": 1796
                },
                {
                    "start": 1797,
                    "end": 1816
                },
                {
                    "start": 1817,
                    "end": 1926
                },
                {
                    "start": 1927,
                    "end": 2022
                },
                {
                    "start": 2023,
                    "end": 2189
                },
                {
                    "start": 2190,
                    "end": 2356
                }
            ],
            "ref_mentions": [
                {
                    "start": 145,
                    "end": 148,
                    "matchedPaperCorpusId": "253196672"
                },
                {
                    "start": 148,
                    "end": 150,
                    "matchedPaperCorpusId": "235383033"
                },
                {
                    "start": 167,
                    "end": 170,
                    "matchedPaperCorpusId": "10976181"
                },
                {
                    "start": 183,
                    "end": 186,
                    "matchedPaperCorpusId": "35735491"
                },
                {
                    "start": 783,
                    "end": 787,
                    "matchedPaperCorpusId": "51750550"
                },
                {
                    "start": 1089,
                    "end": 1093,
                    "matchedPaperCorpusId": "199002134"
                },
                {
                    "start": 1226,
                    "end": 1230,
                    "matchedPaperCorpusId": "199002134"
                },
                {
                    "start": 1436,
                    "end": 1440,
                    "matchedPaperCorpusId": "198986538"
                },
                {
                    "start": 1578,
                    "end": 1582,
                    "matchedPaperCorpusId": "199002134"
                },
                {
                    "start": 1820,
                    "end": 1823,
                    "matchedPaperCorpusId": "253196672"
                },
                {
                    "start": 2045,
                    "end": 2049,
                    "matchedPaperCorpusId": "239681487"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.9443359375
        },
        {
            "corpus_id": "260787756",
            "title": "Visualization of sorting algorithms in the virtual reality environment",
            "text": "This study examines the use of virtual reality (VR) in programming, specifically in visualization of sorting methods. Addressing students\u2019 needs to better understand and implement sorting methods, \u201cVR sorting\u201d application was developed to visualize the bubble sorting and selection sorting abstract methods in the VR environment. The effects of visualization were evaluated drawing on an extended taxonomy, specifically developed by the authors of this study. The results indicate that VR might significantly enhance students\u2019 understanding of sorting tasks, further allowing them to employ these skills in practice. Specifically, 76.9% of students, who studied sorting methods in virtual environment drawing on \u201cVR sorting\u201d application, demonstrated higher outcomes in implementing sorting tasks. VR visualization of sorting methods, differs from existing ways of visualizing learning in the context of constructivism. Since VR allows the student to construct the algorithm himself directly interacting machine memory in the form of cells where the data is stored and managing the progress of sorting. These results shed some light to future research avenues on VR enabled constructive visualization.",
            "score": 0.3441653753236377,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.1627197265625
        },
        {
            "corpus_id": "235234208",
            "title": "Collaborative Coding in a Robotic Visual Language",
            "text": ": This paper presents a platform, that is a block-based visual programming environment. Students can collab-oratively interact using a \ufb02exible and versatile de\ufb01nition of visual programming code and interface created using Google Blockly, JavaScript, and Firebase. The web application is designed to allow students to program the Lego Mindstorms EV3. An experiment was conducted to investigate the effect of real-time collaboration on students working on the block-based visual programming web application.",
            "score": 0.3441653753236377,
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.85888671875
        },
        {
            "corpus_id": "272053512",
            "title": "A Choice-Based Programming Learning Method to Develop Problem-Solving Skills",
            "text": "First, we describe the target of the proposed system. The proposed system helps novice learners learn how to plan a solution in programming. The proposed system focuses novices on planning problem-solving solutions by eliminating the coding process. Therefore, the system is assumed to be used parallel with learning syntax and meaning in classes or self-study. \n\nThe target users are novice programmers, and the system targets programming learning using visual feedback of program execution, a typical programming environment for novice programmers. This study focuses on learning with p5.js. p5.js is designed to write the code with visual output in a relatively straightforward manner with minimum. For the program that draws the circle in Figure 1, the p5.js program can be represented as the following program 1. \n\nWe implemented the proposed system as a web application so users can easily use it from their smartphones. Although this system can be used in the classroom, in this paper, we apply it not for classroom use but for self-study outside of class.",
            "score": 0.3441653753236377,
            "section_title": "A. TARGET",
            "char_start_offset": 12993,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 53
                },
                {
                    "start": 54,
                    "end": 140
                },
                {
                    "start": 141,
                    "end": 249
                },
                {
                    "start": 250,
                    "end": 361
                },
                {
                    "start": 364,
                    "end": 550
                },
                {
                    "start": 551,
                    "end": 593
                },
                {
                    "start": 594,
                    "end": 701
                },
                {
                    "start": 702,
                    "end": 817
                },
                {
                    "start": 820,
                    "end": 926
                },
                {
                    "start": 927,
                    "end": 1063
                }
            ],
            "ref_mentions": [],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.712890625
        },
        {
            "corpus_id": "253660127",
            "title": "Incorporating Multimedia Teaching Methods and Computational Thinking into the Baking Dessert Course",
            "text": "According to Alberts and Stevenson (2017), \"multimedia\" materials are merely forms of media that combine two or more types of media to digitally exchange information or content [40]. Computers lie at the core of multimedia materials, as they can simultaneously present text, images, audio and animation. Students significantly improved their foodrelated knowledge, attitudes and intentions after receiving multimedia-based education. \n\nTraditional, text-based program design is largely rooted in abstract conceptions that are difficult to learn, resulting in low interest and even a fear of the topic among students [41]. Thus, visual programming languages have been specially designed to reduce the difficulty of learning programming. Kelleher and Pausch (2005) identify three common features of visual programming environments: a simplified program-design process, the provision of instructional material support to students and an emphasis on students' learning motivations [42]. Selby and Wollard (2013) assert that program-design activities are associated with computational capabilities, as the process of learning programming enables students to develop holistic computational thinking skills, such as debugging, pattern recognition and abstraction [43]. Hsu and Chien (2015), having applied web-based multimedia technology to a culinary course, show that this approach enhances students' culinary skills [44]. Malan and Leitner (2007) show that, when learning visual programming, students often perceive themselves to be playing a game rather than writing programs, enhancing their understanding of programming concepts [45]. The use of visual programming languages in education and block-based narrative programming enables students to progressively develop their thinking skills, avoid spelling and grammar errors, and concentrate on the logical and structural elements of program design [46]. In recent years, the ADDIE and ASSURE teaching models have been extensively used in the development of multimedia strategies in education. The models are described below: \n\n1. \n\nSystemized ADDIE teaching model According to Ismail et al. (2018), the ADDIE model primarily encompasses three concepts: what to learn, how to learn and how to determine that the student has achieved the desired learning outcomes [47]. ADDIE is an acronym covering five stages: Analysis, Design, Development, Implementation and Evaluation.",
            "score": 0.3441653753236377,
            "section_title": "Motion Media-Based Teaching",
            "char_start_offset": 11607,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 182
                },
                {
                    "start": 183,
                    "end": 303
                },
                {
                    "start": 304,
                    "end": 433
                },
                {
                    "start": 436,
                    "end": 621
                },
                {
                    "start": 622,
                    "end": 735
                },
                {
                    "start": 736,
                    "end": 982
                },
                {
                    "start": 983,
                    "end": 1261
                },
                {
                    "start": 1262,
                    "end": 1417
                },
                {
                    "start": 1418,
                    "end": 1633
                },
                {
                    "start": 1634,
                    "end": 1903
                },
                {
                    "start": 1904,
                    "end": 2042
                },
                {
                    "start": 2043,
                    "end": 2074
                },
                {
                    "start": 2077,
                    "end": 2079
                },
                {
                    "start": 2082,
                    "end": 2317
                },
                {
                    "start": 2318,
                    "end": 2421
                }
            ],
            "ref_mentions": [
                {
                    "start": 13,
                    "end": 41,
                    "matchedPaperCorpusId": "151987094"
                },
                {
                    "start": 177,
                    "end": 181,
                    "matchedPaperCorpusId": "151987094"
                },
                {
                    "start": 616,
                    "end": 620,
                    "matchedPaperCorpusId": "70424"
                },
                {
                    "start": 736,
                    "end": 762,
                    "matchedPaperCorpusId": "9916677"
                },
                {
                    "start": 977,
                    "end": 981,
                    "matchedPaperCorpusId": "9916677"
                },
                {
                    "start": 1262,
                    "end": 1282,
                    "matchedPaperCorpusId": "58938566"
                },
                {
                    "start": 1412,
                    "end": 1416,
                    "matchedPaperCorpusId": "58938566"
                },
                {
                    "start": 1418,
                    "end": 1442,
                    "matchedPaperCorpusId": "982597"
                },
                {
                    "start": 1628,
                    "end": 1632,
                    "matchedPaperCorpusId": "982597"
                },
                {
                    "start": 1898,
                    "end": 1902,
                    "matchedPaperCorpusId": "67714046"
                },
                {
                    "start": 2127,
                    "end": 2147,
                    "matchedPaperCorpusId": "56051537"
                },
                {
                    "start": 2312,
                    "end": 2316,
                    "matchedPaperCorpusId": "56051537"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.77001953125
        },
        {
            "corpus_id": "271993454",
            "title": "Developing Programming Competencies in School-Students With Block-Based Tools in Chile, Ecuador, and Peru",
            "text": "Schools can review their primary activities to incorporate and apply computational thinking across core subjects, necessitating adjustments to teaching curricula to encompass programming competencies and block-based environments tailored for children, such as Scratch and TinkerCAD [36]. Various fields incorporate computational thinking into their research endeavors, suggesting that developing programming competencies can be a rewarding and engaging pursuit [10]. \n\nMladenovi\u0107, Boljat, and \u017danko [62] studied programming concepts, mainly focusing on loops, comparing their use in Scratch, Logo, and Python. The study found that most misconceptions about loops are significantly reduced when they use block-based programming languages, such as Scratch, rather than text-based programming languages. The study also found that while students were equally successful in completing tasks in Logo and Python, issues arose predominantly with Python when nested loops were involved. These findings underscore the suitability of visual programming languages like Scratch for teaching programming to K-12 novices, mainly through game development. By eliminating syntax obstacles, students can concentrate on grasping fundamental algorithms. Moreover, compared to text-based languages, visual programming significantly minimizes misconceptions.",
            "score": 0.3441653753236377,
            "section_title": "D. RELATED WORK",
            "char_start_offset": 18562,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 287
                },
                {
                    "start": 288,
                    "end": 466
                },
                {
                    "start": 469,
                    "end": 609
                },
                {
                    "start": 610,
                    "end": 800
                },
                {
                    "start": 801,
                    "end": 977
                },
                {
                    "start": 978,
                    "end": 1139
                },
                {
                    "start": 1140,
                    "end": 1233
                },
                {
                    "start": 1234,
                    "end": 1336
                }
            ],
            "ref_mentions": [
                {
                    "start": 461,
                    "end": 465,
                    "matchedPaperCorpusId": "253880901"
                },
                {
                    "start": 499,
                    "end": 503,
                    "matchedPaperCorpusId": "22570972"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7822265625
        },
        {
            "corpus_id": "61308200",
            "title": "Dr. Scratch : an\u00e1lisis autom\u00e1tico de proyectos Scratch para evaluar y fomentar el pensamiento computacional",
            "text": "In the last decade we have witnessed a resurgence of programming and Computational Thinking (Wing, 2006) (CT) in schools (Lye & Koh, 2014). The educational use of coding, which had been introduced in the 70s and 80s mainly with the Logo programming language (Papert & Solomon, 1971), has come back strong due to new visual programming languages, like Alice, Kodu and especially Scratch, which allow young students to program applications without the need to learn the complex syntax of traditional programming languages. \n\nScratch (Resnick et al., 2009) is a visual programming environment designed for children over 6 years old, which also offers a website where users can share their projects and exchange ideas or suggestions with other (young) programmers. Scratch is massively used all over the world, with more than seven million registered users and more than ten million shared projects in the repository1 . One of the main goals of Scratch is that programming becomes an educational tool to develop other skills and to improve learning of other disciplines (Resnick, 2013). As a result, Scratch is being used both in extracurricular activities (Kafai, Fields, & Burke, 2012) and in all levels of formal educational environments, both in schools (Moreno-Le\u00f3n & Robles, 2015), high schools (Meerbaum-Salant, Armoni, & Ben-Ari, 2013) and even universities (Malan & Leitner, 2007) worldwide. \n\nNevertheless, there is a lack of tools that support educators when evaluating student programs and to assess the development of CT. This situation is partly caused by the fact that there is a lack of agreement in a definition of the CT concept, and in the way it should be included in the curriculum (Grover & Pea, 2013). This paper presents Dr. Scratch, a free/open source web tool that analyzes Scratch projects to (1) offer feedback to educators and learners and (2) assign a CT score to the projects. Learners can use this feedback to improve their programs, but also can realize how to improve their programming abilities. To test the effectiveness of Dr. Scratch, we have set up a set of workshops to measure the impact of its use on learning. Results show positive results and hint areas of future development.",
            "score": 0.3441653753236377,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 139
                },
                {
                    "start": 140,
                    "end": 520
                },
                {
                    "start": 523,
                    "end": 760
                },
                {
                    "start": 761,
                    "end": 915
                },
                {
                    "start": 916,
                    "end": 1082
                },
                {
                    "start": 1083,
                    "end": 1396
                },
                {
                    "start": 1399,
                    "end": 1530
                },
                {
                    "start": 1531,
                    "end": 1720
                },
                {
                    "start": 1721,
                    "end": 1903
                },
                {
                    "start": 1904,
                    "end": 2026
                },
                {
                    "start": 2027,
                    "end": 2148
                },
                {
                    "start": 2149,
                    "end": 2216
                }
            ],
            "ref_mentions": [
                {
                    "start": 92,
                    "end": 104,
                    "matchedPaperCorpusId": "41391768"
                },
                {
                    "start": 121,
                    "end": 138,
                    "matchedPaperCorpusId": "11994747"
                },
                {
                    "start": 531,
                    "end": 552,
                    "matchedPaperCorpusId": "273180521"
                },
                {
                    "start": 1153,
                    "end": 1183,
                    "matchedPaperCorpusId": "3253222"
                },
                {
                    "start": 1254,
                    "end": 1282,
                    "matchedPaperCorpusId": "440185"
                },
                {
                    "start": 1362,
                    "end": 1385,
                    "matchedPaperCorpusId": "982597"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.7578125
        },
        {
            "corpus_id": "3073823",
            "title": "A Family of Tools for Supporting the Learning of Programming",
            "text": "Programming is a fundamental part of Computer Science. Educators therefore typically expect that graduates of a CS course, or courses close to CS, will be able to program. However, many studies and the experiences of a large number of teachers agree that \"programming is not easy\", and that learning to program is also not easy, see, e.g., [1]. \n\nSome effort has been put into investigating what factors contribute to this difficulty. For example, the problems seem not to depend on gender, but are correlated with problem solving skills and the first language of the student [2]. \n\nOver the last two decades, several tools for supporting the process of teaching or learning programming have appeared. Tools like BlueJ [3][4][5], Alice [6,7], DrScheme [8][9][10], Greenfoot [11][12][13] or Academic Java [14] address programming in their own unique way. For example, while both BlueJ and Alice target novices in object-oriented programming, BlueJ is based on UML and Java, while Alice uses a built-in drag-and-drop interface to program a 3D world with a high degree of interaction. DrScheme is used for teaching the fundamentals of how to design (good) programs in a set of pedagogically motivated teaching languages based on the functional language Scheme, while Greenfoot offers a framework for two-dimensional grid assignments in Java together with an IDE usable by novice programmers. Academic Java finally provides an interface to a large number of small programming examples that previous research had indicated covered both important and often misunderstood concepts in Java. \n\nOn the other hand, there have been a number of approaches to help students better grasp programs by visualizing the program itself (\"program visualization\"), or to present the dynamic behavior of algorithms of data structures (\"algorithm visualization\"). These systems include for example Jeliot 3 [15], which can visualize Java programs stepwise, or Leonardo [16], which can execute and also reverse the execution of C programs. The tools for visualizing or animating algorithms and data structures include ANIMAL [17] and JHAV \u00c9 [18].",
            "score": 0.3441653753236377,
            "section_title": "Introduction",
            "char_start_offset": 15,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 54
                },
                {
                    "start": 55,
                    "end": 171
                },
                {
                    "start": 172,
                    "end": 344
                },
                {
                    "start": 347,
                    "end": 434
                },
                {
                    "start": 435,
                    "end": 580
                },
                {
                    "start": 583,
                    "end": 701
                },
                {
                    "start": 702,
                    "end": 853
                },
                {
                    "start": 854,
                    "end": 1081
                },
                {
                    "start": 1082,
                    "end": 1388
                },
                {
                    "start": 1389,
                    "end": 1582
                },
                {
                    "start": 1585,
                    "end": 1839
                },
                {
                    "start": 1840,
                    "end": 2014
                },
                {
                    "start": 2015,
                    "end": 2121
                }
            ],
            "ref_mentions": [
                {
                    "start": 576,
                    "end": 579,
                    "matchedPaperCorpusId": "626732"
                },
                {
                    "start": 719,
                    "end": 722,
                    "matchedPaperCorpusId": "14111675"
                },
                {
                    "start": 722,
                    "end": 725,
                    "matchedPaperCorpusId": "14490599"
                },
                {
                    "start": 739,
                    "end": 741,
                    "matchedPaperCorpusId": "207171674"
                },
                {
                    "start": 752,
                    "end": 755,
                    "matchedPaperCorpusId": "6126961"
                },
                {
                    "start": 755,
                    "end": 758,
                    "matchedPaperCorpusId": "7049137"
                },
                {
                    "start": 774,
                    "end": 778,
                    "matchedPaperCorpusId": "17481393"
                },
                {
                    "start": 778,
                    "end": 782,
                    "matchedPaperCorpusId": "6506699"
                },
                {
                    "start": 782,
                    "end": 786,
                    "matchedPaperCorpusId": "11589194"
                },
                {
                    "start": 1883,
                    "end": 1887,
                    "matchedPaperCorpusId": "8730376"
                },
                {
                    "start": 1945,
                    "end": 1949,
                    "matchedPaperCorpusId": "13356467"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.57958984375
        },
        {
            "corpus_id": "260682710",
            "title": "Evaluating ChatGPT and GPT-4 for Visual Programming",
            "text": "This section provides an overview of our evaluation setup, including the scenarios, visual programming domains, and the overall process used for evaluation. \n\nEvaluation scenarios. In our work, we consider the following three scenarios that capture various generative and problem-solving capabilities of LLMs in visual programming: \n\n(i) Execution trace, i.e., analyzing the behavior when executing a given code on a task, motivated by the application of analyzing students' attempts to provide feedback [23][24][25]. \n\n(ii) Solution synthesis, i.e., generating solution codes for a given task, motivated by the application of completing students' partial programs or giving next-step hints [26][27][28]. \n\n(iii) Task synthesis, i.e., generating new tasks that exercise specific concepts, motivated by the application of providing new practice tasks to students in visual programming domains [29][30][31]. \n\nVisual programming domains and tasks. We base our evaluation using ten reference tasks from the visual programming domains of Hour of Code: Maze Challenge by Code.org (in short, HoCMaze) [8,9] and Karel [10][11][12]. Figure 1 provides information about these reference tasks in terms of complexity and programming concepts exercised; Figures 2 and 3 show an illustrative task from HoCMaze and Karel domains, respectively. These tasks are typically suitable for elementarylevel programming education and variants of these tasks have been extensively used in literature [26,[28][29][30][31]. Each of these reference tasks has a unique minimal-sized solution code and the task  shows the minimal-sized solution code for this task. The task's visual grid comprises the following elements: avatar (purple dart), goal (red star), free cells (white-colored grid cells), and wall cells (gray-colored grid cells). When solving this task, the objective is to combine available code blocks for navigating the avatar to the goal. Importantly, there is also an upper limit on the number of blocks that can be used in a solution code (typically, this limit is set to be the size of the minimal solution code).",
            "score": 0.3441653753236377,
            "section_title": "Evaluation Setup",
            "char_start_offset": 3186,
            "sentence_offsets": [
                {
                    "start": 0,
                    "end": 156
                },
                {
                    "start": 159,
                    "end": 180
                },
                {
                    "start": 181,
                    "end": 331
                },
                {
                    "start": 334,
                    "end": 517
                },
                {
                    "start": 520,
                    "end": 704
                },
                {
                    "start": 707,
                    "end": 905
                },
                {
                    "start": 908,
                    "end": 945
                },
                {
                    "start": 946,
                    "end": 1074
                },
                {
                    "start": 1075,
                    "end": 1124
                },
                {
                    "start": 1125,
                    "end": 1329
                },
                {
                    "start": 1330,
                    "end": 1497
                },
                {
                    "start": 1498,
                    "end": 1635
                },
                {
                    "start": 1636,
                    "end": 1812
                },
                {
                    "start": 1813,
                    "end": 1925
                },
                {
                    "start": 1926,
                    "end": 2103
                }
            ],
            "ref_mentions": [
                {
                    "start": 504,
                    "end": 508,
                    "matchedPaperCorpusId": "237235796"
                },
                {
                    "start": 508,
                    "end": 512,
                    "matchedPaperCorpusId": "248506193"
                },
                {
                    "start": 695,
                    "end": 699,
                    "matchedPaperCorpusId": "11253026"
                },
                {
                    "start": 699,
                    "end": 703,
                    "matchedPaperCorpusId": "220933947"
                },
                {
                    "start": 896,
                    "end": 900,
                    "matchedPaperCorpusId": "251137666"
                },
                {
                    "start": 900,
                    "end": 904,
                    "matchedPaperCorpusId": "258968122"
                },
                {
                    "start": 1480,
                    "end": 1484,
                    "matchedPaperCorpusId": "220933947"
                },
                {
                    "start": 1488,
                    "end": 1492,
                    "matchedPaperCorpusId": "251137666"
                },
                {
                    "start": 1492,
                    "end": 1496,
                    "matchedPaperCorpusId": "258968122"
                }
            ],
            "pdf_hash": "",
            "stype": "vespa",
            "rerank_score": 0.83544921875
        },
        {
            "paperId": "52d3324968ee34d836f1845e76fe3bb9aaf5b1d5",
            "corpusId": 246290521,
            "title": "SmartBuilder: A Block-based Visual Programming Framework for Smart Contract Development",
            "venue": "International Congress on Blockchain and Applications",
            "year": 2021,
            "referenceCount": 0,
            "citationCount": 15,
            "influentialCitationCount": 1,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": null,
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.1109/Blockchain53845.2021.00023?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.1109/Blockchain53845.2021.00023, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2142856568",
                    "name": "Mpyana Mwamba Merlec"
                },
                {
                    "authorId": "2145420296",
                    "name": "Youn Kyu Lee"
                },
                {
                    "authorId": "1793283",
                    "name": "H. In"
                }
            ],
            "abstract": "Recently, smart contracts are increasingly gaining more attention from academia and industries, due to their potential of increasing efficiency in various application domains. However, building syntactically correct smart contracts is very complex and challenging for non-expert programmers. Besides, as smart contracts are still in the early emerging phase, there is a lack of expertise and tools for supporting practitioners to teach or learn smart contract development. In this paper, we introduce SmartBuilder, a block-based visual programming framework for building smart contracts using extended Google Blockly libraries. It allows Hyperledger Fabric smart contract (also known as Chaincode) development learners or non-expert users to build smart contracts using visual blocks without writing a single code. Moreover, it is a useful and efficient educational tool for teaching or learning how to build smart contracts.",
            "corpus_id": "246290521",
            "text": "Recently, smart contracts are increasingly gaining more attention from academia and industries, due to their potential of increasing efficiency in various application domains. However, building syntactically correct smart contracts is very complex and challenging for non-expert programmers. Besides, as smart contracts are still in the early emerging phase, there is a lack of expertise and tools for supporting practitioners to teach or learn smart contract development. In this paper, we introduce SmartBuilder, a block-based visual programming framework for building smart contracts using extended Google Blockly libraries. It allows Hyperledger Fabric smart contract (also known as Chaincode) development learners or non-expert users to build smart contracts using visual blocks without writing a single code. Moreover, it is a useful and efficient educational tool for teaching or learning how to build smart contracts.",
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "score": 0.0,
            "stype": "public_api",
            "pdf_hash": "",
            "rerank_score": 0.8603515625
        },
        {
            "paperId": "9ddc962a89411dca1d8224892cecdb9ec3c3a348",
            "corpusId": 276720952,
            "title": "DIDACTIC POTENTIAL OF TELEGRAM CHANNELS FOR ENGLISH LANGUAGE LEARNING IN NON-LINGUISTIC PROGRAMS",
            "venue": "Alfred Nobel University Journal of Pedagogy and Psychology",
            "year": 2024,
            "referenceCount": 0,
            "citationCount": 0,
            "influentialCitationCount": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://doi.org/10.32342/3041-2196-2024-2-28-2",
                "status": "GOLD",
                "license": "CCBY",
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.32342/3041-2196-2024-2-28-2?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.32342/3041-2196-2024-2-28-2, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "67310224",
                    "name": "Neliia M. Blynova"
                },
                {
                    "authorId": "2348043595",
                    "name": "Nataliia Bespalova"
                },
                {
                    "authorId": "2319541938",
                    "name": "Anna Voloboieva"
                }
            ],
            "abstract": "The article is devoted to analysing the possibility of using Telegram cannels as didactic materials.\nModern technologies can make the language learning process effective and affordable. However, the prob-\nlem of selecting the relevant didactic materials is still urgent. Telegram channels can become one of the ef-\nficient ways to learn foreign languages. They create the platform where users can exchange information,\nshare materials and learn in a convenient and relaxed way.\nThe purpose of the article is to determine the potential of Telegram channels for creating addition-\nal educational materials in English for applicants of non-philological specialties. To do this, the study com-\npares the content of Telegram channels created by non-native English speakers (Ukrainians) who have stud-\nied English as a foreign language and therefore are aware of the difficulties that students may face. We\nhave considered the positive and negative aspects of such materials, based on practical activities, and give\nadvice for those who want to learn English or improve their knowledge with the help of Telegram channels.\nThe study was conducted based on a comprehensive approach employing the following methods: a\ncontent analysis of scholarly literature to determine the current state of research on the use of Telegram\nchannels in foreign language learning in both domestic and international contexts; a comparative analysis\nto identify trends and best practices in the application of Internet channels for educational purposes; a con-\ntent analysis to assess the educational potential of Telegram channels; and the generalisation and system-\natisation of approaches to utilising Telegram channel content in the learning process, particularly for over-\ncoming language barriers, facilitating authentic communication, and enhancing the effective acquisition of\na foreign language.\nThe study investigates the didactic potential of 4 Telegram channels: FRIENDS Space, \u201cEnglish Lan-\nguage\u201d, \u201cHenry, kissfig\u201d, \u201cEngluencer | English\u201d.\nThe comparative and descriptive analysis of these Telegram channels and ways to apply them when\nteaching English to students of non-philological specialties from levels A2 to C1 highlighted several posi-\ntive points. It must be emphasized that whatever form of study a student chooses \u2013 full-time, part-time, dis-\ntance, or individual, attention to a foreign language should be regular. Only immersion into even artificial,\nlanguage environment makes it possible to learn the material. Also, for learning using Telegram channels\nto be truly effective, it is necessary to adhere to certain principles and use different methods.\nAmong the positive aspects inherent in thematic Telegram channels, practitioners highlight the fol-\nlowing factors:\n\u2013\nAccessibility. Telegram is available at any time and in any place, which allows you to gain new\nknowledge and consolidate existing ones without being tied to a schedule.\n\u2013\nRelevance of content. The information provided by the owners and hosts of channels is often up-\ndated. Subscribers are offered new and diverse materials (news, articles, videos etc.), which contributes to\nlearning a foreign language.\n\u2013\nVariety of formats. Unlike traditional textbooks, Telegram channels provide the most diverse con-\ntent in terms of format. These can be text lessons and fragments of them, audio files, video materials, quiz-\nzes, surveys, and more. Everything is aimed both at the versatile development of language skills and at\ngaining competitive advantages over other resources of a similar direction.\n\u2013\nInteractivity. There are channels that allow visitors to ask questions and receive professional an-\nswers from teachers or other participants, which makes learning more interactive.\n\u2013\nCommunity. Communicating with other channel subscribers, like-minded people who are also learn-\ning a foreign language, helps to overcome feelings of loneliness and receive support and feedback in gen-\neral. This contributes to socialization and the gradual disappearance of fear of communicating in English\nor any other language.\n\u2013\nTarget audience. Given the existence of a huge number of channels, everyone can find a resource\nfor their level of language proficiency \u2013 from beginner to advanced.\n\u2013\nGradual immersion in the language environment is extremely important for those who study a for-\neign language outside of countries where English is the main language of communication. Regular con-\nsumption of content in a foreign language helps to get used to the sound of the language and start think-\ning in it.\nConclusions. Learning a foreign language using Telegram channels is a convenient and effective way\nto improve one\u2019s knowledge. However, to achieve the best results, the participants need to engage system-\natically, use a variety of materials, and actively interact with other channel subscribers.",
            "corpus_id": "276720952",
            "text": "The article is devoted to analysing the possibility of using Telegram cannels as didactic materials.\nModern technologies can make the language learning process effective and affordable. However, the prob-\nlem of selecting the relevant didactic materials is still urgent. Telegram channels can become one of the ef-\nficient ways to learn foreign languages. They create the platform where users can exchange information,\nshare materials and learn in a convenient and relaxed way.\nThe purpose of the article is to determine the potential of Telegram channels for creating addition-\nal educational materials in English for applicants of non-philological specialties. To do this, the study com-\npares the content of Telegram channels created by non-native English speakers (Ukrainians) who have stud-\nied English as a foreign language and therefore are aware of the difficulties that students may face. We\nhave considered the positive and negative aspects of such materials, based on practical activities, and give\nadvice for those who want to learn English or improve their knowledge with the help of Telegram channels.\nThe study was conducted based on a comprehensive approach employing the following methods: a\ncontent analysis of scholarly literature to determine the current state of research on the use of Telegram\nchannels in foreign language learning in both domestic and international contexts; a comparative analysis\nto identify trends and best practices in the application of Internet channels for educational purposes; a con-\ntent analysis to assess the educational potential of Telegram channels; and the generalisation and system-\natisation of approaches to utilising Telegram channel content in the learning process, particularly for over-\ncoming language barriers, facilitating authentic communication, and enhancing the effective acquisition of\na foreign language.\nThe study investigates the didactic potential of 4 Telegram channels: FRIENDS Space, \u201cEnglish Lan-\nguage\u201d, \u201cHenry, kissfig\u201d, \u201cEngluencer | English\u201d.\nThe comparative and descriptive analysis of these Telegram channels and ways to apply them when\nteaching English to students of non-philological specialties from levels A2 to C1 highlighted several posi-\ntive points. It must be emphasized that whatever form of study a student chooses \u2013 full-time, part-time, dis-\ntance, or individual, attention to a foreign language should be regular. Only immersion into even artificial,\nlanguage environment makes it possible to learn the material. Also, for learning using Telegram channels\nto be truly effective, it is necessary to adhere to certain principles and use different methods.\nAmong the positive aspects inherent in thematic Telegram channels, practitioners highlight the fol-\nlowing factors:\n\u2013\nAccessibility. Telegram is available at any time and in any place, which allows you to gain new\nknowledge and consolidate existing ones without being tied to a schedule.\n\u2013\nRelevance of content. The information provided by the owners and hosts of channels is often up-\ndated. Subscribers are offered new and diverse materials (news, articles, videos etc.), which contributes to\nlearning a foreign language.\n\u2013\nVariety of formats. Unlike traditional textbooks, Telegram channels provide the most diverse con-\ntent in terms of format. These can be text lessons and fragments of them, audio files, video materials, quiz-\nzes, surveys, and more. Everything is aimed both at the versatile development of language skills and at\ngaining competitive advantages over other resources of a similar direction.\n\u2013\nInteractivity. There are channels that allow visitors to ask questions and receive professional an-\nswers from teachers or other participants, which makes learning more interactive.\n\u2013\nCommunity. Communicating with other channel subscribers, like-minded people who are also learn-\ning a foreign language, helps to overcome feelings of loneliness and receive support and feedback in gen-\neral. This contributes to socialization and the gradual disappearance of fear of communicating in English\nor any other language.\n\u2013\nTarget audience. Given the existence of a huge number of channels, everyone can find a resource\nfor their level of language proficiency \u2013 from beginner to advanced.\n\u2013\nGradual immersion in the language environment is extremely important for those who study a for-\neign language outside of countries where English is the main language of communication. Regular con-\nsumption of content in a foreign language helps to get used to the sound of the language and start think-\ning in it.\nConclusions. Learning a foreign language using Telegram channels is a convenient and effective way\nto improve one\u2019s knowledge. However, to achieve the best results, the participants need to engage system-\natically, use a variety of materials, and actively interact with other channel subscribers.",
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "score": 0.0,
            "stype": "public_api",
            "pdf_hash": "",
            "rerank_score": 0.00926971435546875
        },
        {
            "paperId": "3d6ebeed1a09da444be9b10919ec9101f716ddae",
            "corpusId": 255287754,
            "title": "Implementation of wireless mobile device drive control video systems in the MATLAB environment in the educational process",
            "venue": "ACM-SIGACT Symposium on Principles of Programming Languages",
            "year": 2022,
            "referenceCount": 0,
            "citationCount": 1,
            "influentialCitationCount": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://proceedings.vntu.edu.ua/index.php/proc/article/download/29/17",
                "status": "BRONZE",
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.31649/mccs2022.10?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.31649/mccs2022.10, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2198837292",
                    "name": "Aleksandr M. Trunov"
                },
                {
                    "authorId": "2165689067",
                    "name": "Maksym Skoroid"
                }
            ],
            "abstract": "The peculiarities of the application of computerized systems of wireless remote control of drives, which include single-board computers with Wi-Fi communication channels, are considered. The advantages and disadvantages of programming controllers for wireless control of drives of mobile devices using the Matlab environment are analyzed. The tasks of integrating the IDE programming environment for the most common single-board computers and the video interface to the Matlab environment are set. To assist programmers and developers in creating software for such devices, observation and control modules have been developed as a model for machine simulation and programming skills. Interfaces that ensure the implementation of Simulink graphical programming environment tools into the educational process are proposed. Using the example of creating and setting programs for remote wireless control of elements of robotic systems, including mobile devices for restorative medicine. This report presents a method of programming Arduino boards based on visual support of actions. The created model for visual representation of the operation of a robotic technical system with four degrees of freedom is considered. The clarity, simplicity and effectiveness of such interactive support have been demonstrated. This method is preferred because it does not require prior programming skills to write code to create complex tasks. The method is expected to lend itself well to teaching basic programming skills due to the visual elements offered. Further integration and experience of control program modules in Simulink will require the use of drop-down menus containing informational messages and links to examples. Simulation modeling and statistical evaluation will obviously become the basis for further improvement of the interface, which realizes the advantage of the board when programming using a Wi-Fi network. In addition, an important opportunity for collective problem solving opens up thanks to the transparency and convenience of teaching students programming and process modeling in the Matlab software environment.",
            "corpus_id": "255287754",
            "text": "The peculiarities of the application of computerized systems of wireless remote control of drives, which include single-board computers with Wi-Fi communication channels, are considered. The advantages and disadvantages of programming controllers for wireless control of drives of mobile devices using the Matlab environment are analyzed. The tasks of integrating the IDE programming environment for the most common single-board computers and the video interface to the Matlab environment are set. To assist programmers and developers in creating software for such devices, observation and control modules have been developed as a model for machine simulation and programming skills. Interfaces that ensure the implementation of Simulink graphical programming environment tools into the educational process are proposed. Using the example of creating and setting programs for remote wireless control of elements of robotic systems, including mobile devices for restorative medicine. This report presents a method of programming Arduino boards based on visual support of actions. The created model for visual representation of the operation of a robotic technical system with four degrees of freedom is considered. The clarity, simplicity and effectiveness of such interactive support have been demonstrated. This method is preferred because it does not require prior programming skills to write code to create complex tasks. The method is expected to lend itself well to teaching basic programming skills due to the visual elements offered. Further integration and experience of control program modules in Simulink will require the use of drop-down menus containing informational messages and links to examples. Simulation modeling and statistical evaluation will obviously become the basis for further improvement of the interface, which realizes the advantage of the board when programming using a Wi-Fi network. In addition, an important opportunity for collective problem solving opens up thanks to the transparency and convenience of teaching students programming and process modeling in the Matlab software environment.",
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "score": 0.0,
            "stype": "public_api",
            "pdf_hash": "",
            "rerank_score": 0.299072265625
        },
        {
            "paperId": "98a6ec9473d80bf0ceb72306708f24bce8b847cc",
            "corpusId": 218982399,
            "title": "LATTE: Visual Construction of Smart Contracts",
            "venue": "SIGMOD Conference",
            "year": 2020,
            "referenceCount": 7,
            "citationCount": 10,
            "influentialCitationCount": 1,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": null,
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.1145/3318464.3384687?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.1145/3318464.3384687, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "1453591054",
                    "name": "Sean Tan"
                },
                {
                    "authorId": "1730344",
                    "name": "S. Bhowmick"
                },
                {
                    "authorId": "3295445",
                    "name": "Huey-Eng Chua"
                },
                {
                    "authorId": "33285410",
                    "name": "Xiaokui Xiao"
                }
            ],
            "abstract": "Smart contracts enable developers to run instructions on blockchains (eg. Ethereum) and have broad range of real-world applications. Solidity is the most popular high-level smart contract programming language on Ethereum. Coding in such language, however, demands a user to be proficient in contract programming and debugging to construct smart contracts correctly. In practice, such expectation makes it harder for non-programmers to take advantage of smart contracts. In this demonstration, we present a novel visual smart contract construction system on Ethereum called latte to make smart contract development accessible to non-programmers. Specifically, it allows a user to construct a contract without writing Solidity code by manipulating visual objects in a direct manipulation-based interface. Furthermore, latte interactively guides users and makes them aware of the cost (in units of Gas) of visual actions undertaken by them during contract construction.",
            "corpus_id": "218982399",
            "text": "Smart contracts enable developers to run instructions on blockchains (eg. Ethereum) and have broad range of real-world applications. Solidity is the most popular high-level smart contract programming language on Ethereum. Coding in such language, however, demands a user to be proficient in contract programming and debugging to construct smart contracts correctly. In practice, such expectation makes it harder for non-programmers to take advantage of smart contracts. In this demonstration, we present a novel visual smart contract construction system on Ethereum called latte to make smart contract development accessible to non-programmers. Specifically, it allows a user to construct a contract without writing Solidity code by manipulating visual objects in a direct manipulation-based interface. Furthermore, latte interactively guides users and makes them aware of the cost (in units of Gas) of visual actions undertaken by them during contract construction.",
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "score": 0.0,
            "stype": "public_api",
            "pdf_hash": "",
            "rerank_score": 0.78564453125
        },
        {
            "paperId": "a5965b992219bcedf0c8c8a9f0751455ee8cc9f4",
            "corpusId": 275728425,
            "title": "IMPACT OF ART EDUCATION ON COGNITIVE DEVELOPMENT IN CHILDREN WITH HEARING IMPAIRMENT",
            "venue": "BULLETIN OF SERIES OF ART EDUCATION: ART, THEORY, METHODS",
            "year": 2024,
            "referenceCount": 2,
            "citationCount": 0,
            "influentialCitationCount": 0,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": "CLOSED",
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.51889/3005-6381.2024.81.4.001?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.51889/3005-6381.2024.81.4.001, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2341211107",
                    "name": "K. Ibrayeva"
                },
                {
                    "authorId": "2341209802",
                    "name": "L. Butabayeva"
                },
                {
                    "authorId": "2341211246",
                    "name": "Walachowska Magdalena"
                }
            ],
            "abstract": "This research investigates the influence of art education on the cognitive development of hearing-impaired children, representing an important gap in the field of special education research. Hearing-impaired children often struggle in the skills involved with cognitive development \u2014 problem solving, memory, visual-spatial reasoning \u2014 due to the limitations of auditory input and traditional teaching methods. Art education is a visually-centered and non-linguistic means of learning, which can uniquely meet the needs of this population. Using a mixed-methods design, the study assessed the effectiveness of a structured art education program through both quantitative assessments and qualitative observations. The study included sixty hearing-impaired children aged between 6 to 12 years, and they were randomly assigned either to an experimental group who had art education or to a control group. Cognitive outcomes were assessed pre and post intervention using standardized tests such as the Wechsler Nonverbal Scale of Ability and the Visual Spatial Reasoning Test, while engagement and behavioral changes were recorded through observational data. The experimental group experienced significant increases in different cognitive abilities, including visual-spatial reasoning (+30.9%), problem-solving (+29.9%) and memory (+30.8%), according to the results. During collaborative art projects, we observed heightened engagement, prolonged focus, and improved interaction amongst them. In comparison, the control group showed little improvement, highlighting the special advantages of art education. These results show that art education is a valid channel for contributing to both cognitive and social development of children with hearing impairments. Art-based interventions target their unique needs by utilizing visual and tactile modalities while encouraging creativity and emotional expression. The study argues for the inclusion of art education as a key aspect in specialized educational programs, highlighting its capacity to change the experience of learning. Broader implications from this work include the need for future research on both the long-term effects of art education and its interdisciplinary applications to determine how to scale the benefits to various populations.",
            "corpus_id": "275728425",
            "text": "This research investigates the influence of art education on the cognitive development of hearing-impaired children, representing an important gap in the field of special education research. Hearing-impaired children often struggle in the skills involved with cognitive development \u2014 problem solving, memory, visual-spatial reasoning \u2014 due to the limitations of auditory input and traditional teaching methods. Art education is a visually-centered and non-linguistic means of learning, which can uniquely meet the needs of this population. Using a mixed-methods design, the study assessed the effectiveness of a structured art education program through both quantitative assessments and qualitative observations. The study included sixty hearing-impaired children aged between 6 to 12 years, and they were randomly assigned either to an experimental group who had art education or to a control group. Cognitive outcomes were assessed pre and post intervention using standardized tests such as the Wechsler Nonverbal Scale of Ability and the Visual Spatial Reasoning Test, while engagement and behavioral changes were recorded through observational data. The experimental group experienced significant increases in different cognitive abilities, including visual-spatial reasoning (+30.9%), problem-solving (+29.9%) and memory (+30.8%), according to the results. During collaborative art projects, we observed heightened engagement, prolonged focus, and improved interaction amongst them. In comparison, the control group showed little improvement, highlighting the special advantages of art education. These results show that art education is a valid channel for contributing to both cognitive and social development of children with hearing impairments. Art-based interventions target their unique needs by utilizing visual and tactile modalities while encouraging creativity and emotional expression. The study argues for the inclusion of art education as a key aspect in specialized educational programs, highlighting its capacity to change the experience of learning. Broader implications from this work include the need for future research on both the long-term effects of art education and its interdisciplinary applications to determine how to scale the benefits to various populations.",
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "score": 0.0,
            "stype": "public_api",
            "pdf_hash": "",
            "rerank_score": 0.0312042236328125
        },
        {
            "paperId": "918db5ac08dea6bdddcd5de4248531018a7798c0",
            "corpusId": 257197671,
            "title": "A SCIENCE FICTION SERIOUS GAME FOR LEARNING PROGRAMMING LANGUAGES",
            "venue": "eLearning and Software for Education",
            "year": 2016,
            "referenceCount": 0,
            "citationCount": 2,
            "influentialCitationCount": 0,
            "isOpenAccess": false,
            "openAccessPdf": {
                "url": "",
                "status": null,
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.12753/2066-026x-16-082?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.12753/2066-026x-16-082, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2209790233",
                    "name": "Andrei Vasilateanu"
                },
                {
                    "authorId": "2209824800",
                    "name": "Sebastian Wyrazic"
                },
                {
                    "authorId": "9260395",
                    "name": "Bujor Pavaloiu"
                }
            ],
            "abstract": "The paper presents a serious game, implemented as a software application, aimed towards beginner programmers with the purpose of teaching programming languages fundamentals. The application is a top-down 2D game combining elements from the shooter and strategy (particularly tower defense) genres, with high-level visual programming elements, giving it an educational component. The user creates the scripts in a visual manner, creating the flow of scripting elements then programming each element.\nSerious games are games which are designed and developed without having entertainment as their main purpose. Instead, their primary purpose is to educate, train, or inform their audience. The meaning of the term has evolved in the last few years and currently it is usually assumed that serious games are video games, rather than physical, non-digital games. Digital game-based learning is a subset of serious games having as a main purpose to educate the player through the use of video games. Video games manage to keep the players interested, even if they find themselves in challenging situations, and this is on account of the intrinsic motivation they achieve to maintain on the players. What makes learning an intrinsically motivating process is similar to what makes a video game intrinsically motivating, this being challenge, curiosity, fantasy and control. Contextualization, personalization, and choice improve the intrinsic motivation of a learner, thus increasing their degree of engagement in the learning process and ameliorating their learning performance. These three properties are often present in most video games. This compatibility between video games and learning makes integrating the one to the other an easier accomplishment.\nWhile some other serious games aimed at programming exist, such as RoboCode, CodeCombat, Kernel Panic, CoLoBoT, CeeBot, CodeSpells, there is still much room for innovation, and our application explores new features and modes of play, focusing more on the program structure and logic than on the syntax.",
            "corpus_id": "257197671",
            "text": "The paper presents a serious game, implemented as a software application, aimed towards beginner programmers with the purpose of teaching programming languages fundamentals. The application is a top-down 2D game combining elements from the shooter and strategy (particularly tower defense) genres, with high-level visual programming elements, giving it an educational component. The user creates the scripts in a visual manner, creating the flow of scripting elements then programming each element.\nSerious games are games which are designed and developed without having entertainment as their main purpose. Instead, their primary purpose is to educate, train, or inform their audience. The meaning of the term has evolved in the last few years and currently it is usually assumed that serious games are video games, rather than physical, non-digital games. Digital game-based learning is a subset of serious games having as a main purpose to educate the player through the use of video games. Video games manage to keep the players interested, even if they find themselves in challenging situations, and this is on account of the intrinsic motivation they achieve to maintain on the players. What makes learning an intrinsically motivating process is similar to what makes a video game intrinsically motivating, this being challenge, curiosity, fantasy and control. Contextualization, personalization, and choice improve the intrinsic motivation of a learner, thus increasing their degree of engagement in the learning process and ameliorating their learning performance. These three properties are often present in most video games. This compatibility between video games and learning makes integrating the one to the other an easier accomplishment.\nWhile some other serious games aimed at programming exist, such as RoboCode, CodeCombat, Kernel Panic, CoLoBoT, CeeBot, CodeSpells, there is still much room for innovation, and our application explores new features and modes of play, focusing more on the program structure and logic than on the syntax.",
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "score": 0.0,
            "stype": "public_api",
            "pdf_hash": "",
            "rerank_score": 0.67626953125
        },
        {
            "paperId": "6fa1e32cae5fc75a2533b6c0d9c69a280579b5c1",
            "corpusId": 210704716,
            "title": "Prototyping Web instruments with Mosaicode",
            "venue": "Anais do  Simp\u00f3sio Brasileiro de Computa\u00e7\u00e3o Musical (SBCM 2019)",
            "year": 2019,
            "referenceCount": 14,
            "citationCount": 3,
            "influentialCitationCount": 0,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://sol.sbc.org.br/index.php/sbcm/article/download/10431/10298",
                "status": "BRONZE",
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.5753/sbcm.2019.10431?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.5753/sbcm.2019.10431, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "1752844",
                    "name": "A. Gomes"
                },
                {
                    "authorId": "1579691033",
                    "name": "F. Resende"
                },
                {
                    "authorId": "29793059",
                    "name": "L. Goncalves"
                },
                {
                    "authorId": "2116792",
                    "name": "F. Schiavoni"
                }
            ],
            "abstract": "Many HTML 5 features enable you to build audio applications for web browsers, simplifying the distribution of these applications, and turning any computer, mobile, and portable device into a digital musical instrument. Developing such applications is not an easy task for layprogrammers or non-programmers and may require some effort by musicians and artists to encode audio applications based on HTML5 technologies and APIs. In order to simplify this task, this paper presents the Mosaicode, a Visual programming environment that enables the development of Digital Musical Instruments using the visual programming paradigm. Applications can be developed in the Mosaicode from diagrams \u2013 blocks, which encapsulate basic programming functions, and connections, to exchange information among the blocks. The Mosaicode, by having the functionality of generating, compiling and executing codes, can be used to quickly prototype musical instruments, and make it easy to use for beginners looking for learn programming and expert developers who need to optimize the construction of musical applications.",
            "corpus_id": "210704716",
            "text": "Many HTML 5 features enable you to build audio applications for web browsers, simplifying the distribution of these applications, and turning any computer, mobile, and portable device into a digital musical instrument. Developing such applications is not an easy task for layprogrammers or non-programmers and may require some effort by musicians and artists to encode audio applications based on HTML5 technologies and APIs. In order to simplify this task, this paper presents the Mosaicode, a Visual programming environment that enables the development of Digital Musical Instruments using the visual programming paradigm. Applications can be developed in the Mosaicode from diagrams \u2013 blocks, which encapsulate basic programming functions, and connections, to exchange information among the blocks. The Mosaicode, by having the functionality of generating, compiling and executing codes, can be used to quickly prototype musical instruments, and make it easy to use for beginners looking for learn programming and expert developers who need to optimize the construction of musical applications.",
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "score": 0.0,
            "stype": "public_api",
            "pdf_hash": "",
            "rerank_score": 0.8701171875
        },
        {
            "paperId": "cc906fb6bd9915e2d40bf0e1772015a82a7ad628",
            "corpusId": 62831677,
            "title": "Frame-Based Editing",
            "venue": "Journal of Visual Languages and Sentient Systems",
            "year": 2017,
            "referenceCount": 63,
            "citationCount": 28,
            "influentialCitationCount": 2,
            "isOpenAccess": true,
            "openAccessPdf": {
                "url": "https://doi.org/10.18293/vlss2017-009",
                "status": "BRONZE",
                "license": null,
                "disclaimer": "Notice: Paper or abstract available at https://api.unpaywall.org/v2/10.18293/vlss2017-009?email=<INSERT_YOUR_EMAIL> or https://doi.org/10.18293/vlss2017-009, which is subject to the license by the author or copyright owner provided with this content. Please go to the source to verify the license and copyright information for your use."
            },
            "authors": [
                {
                    "authorId": "2736407",
                    "name": "Michael K\u00f6lling"
                },
                {
                    "authorId": "144679397",
                    "name": "Neil C. C. Brown"
                },
                {
                    "authorId": "8517482",
                    "name": "Amjad AlTadmri"
                }
            ],
            "abstract": "In introductory programming teaching, block-based editors have become very popular because they offer a number of strong advantages for beginning programmers: They avoid many syntax errors, can display all available instructions for visual selection and encourage experimentation with little requirement for recall. Among pro\ufb01cient programmers, however, text-based systems are strongly preferred due to several usability and productivity advantages for expert users. In this paper, we provide a comprehensive introduction to a novel editing paradigm, frame-based editing \u2013 including design, implementation, experimentation and analysis. We describe how the design of this paradigm combines many advantages of block-based and text-based systems, then we present and discuss an implementation of such a system for a new Java-like language called Stride, including the results of several evaluation studies. The resulting editing system has clear advantages for both novices and expert programmers: It improves program representation and error avoidance for beginners and can speed up program manipulation for experts. Stride can also serve as an ideal stepping stone from block-based to text-based languages in an educational context.",
            "corpus_id": "62831677",
            "text": "In introductory programming teaching, block-based editors have become very popular because they offer a number of strong advantages for beginning programmers: They avoid many syntax errors, can display all available instructions for visual selection and encourage experimentation with little requirement for recall. Among pro\ufb01cient programmers, however, text-based systems are strongly preferred due to several usability and productivity advantages for expert users. In this paper, we provide a comprehensive introduction to a novel editing paradigm, frame-based editing \u2013 including design, implementation, experimentation and analysis. We describe how the design of this paradigm combines many advantages of block-based and text-based systems, then we present and discuss an implementation of such a system for a new Java-like language called Stride, including the results of several evaluation studies. The resulting editing system has clear advantages for both novices and expert programmers: It improves program representation and error avoidance for beginners and can speed up program manipulation for experts. Stride can also serve as an ideal stepping stone from block-based to text-based languages in an educational context.",
            "section_title": "abstract",
            "char_start_offset": 0,
            "sentence_offsets": [],
            "ref_mentions": [],
            "score": 0.0,
            "stype": "public_api",
            "pdf_hash": "",
            "rerank_score": 0.552734375
        }
    ],
    "quotes": {
        "cost": 0.24777300000000005,
        "quotes": [
            {
                "idx": 0,
                "key": "[11795228 | Lucanin | 2012 | Citations: 1]",
                "snippets": "Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "abstract",
                        "pdf_hash": "",
                        "start": 435,
                        "end": 805,
                        "sentence_offsets": [],
                        "ref_mentions": [],
                        "quote": "Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task."
                    }
                ]
            },
            {
                "idx": 1,
                "key": "[19038821 | Sukumar et al. | 2017 | Citations: 0]",
                "snippets": "Visual Programming (VP) languages enable programming by means of interacting with graphical elements, such as blocks, symbols, and arrows, rather than text. They are known, in general, to promote program comprehension by representing content in two-dimensions (text is considered onedimensional) and by emphasizing the underlying semantics rather than the syntax (Myers, 1990)[53]. The contexts where VP is used mostly include learning environments (for both children and novice programmers) and specialized domains (Myers, 1990)[41].",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "VP concepts",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 514,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 156
                            },
                            {
                                "start": 157,
                                "end": 371
                            },
                            {
                                "start": 372,
                                "end": 514
                            }
                        ],
                        "ref_mentions": [
                            "7335020",
                            "7335020"
                        ],
                        "quote": "Visual Programming (VP) languages enable programming by means of interacting with graphical elements, such as blocks, symbols, and arrows, rather than text. They are known, in general, to promote program comprehension by representing content in two-dimensions (text is considered onedimensional) and by emphasizing the underlying semantics rather than the syntax (Myers, 1990)[53]. The contexts where VP is used mostly include learning environments (for both children and novice programmers) and specialized domains (Myers, 1990)[41]."
                    }
                ]
            },
            {
                "idx": 2,
                "key": "[199002134 | Joao et al. | 2019 | Citations: 23]",
                "snippets": "In 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs.\n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39].\n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes.\n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41].",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "quote": "In 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs.\n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39].\n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes.\n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41].",
                        "pdf_hash": ""
                    }
                ]
            },
            {
                "idx": 3,
                "key": "[208615635 | Chiazzese et al. | 2019 | Citations: 64]",
                "snippets": "Block programming is based on drag and drop of consecutive visual tiles on the editing area to compose different instructions; first of all, it facilitates the learning of programming skills because of a reduction in the cognitive load potentially required for textual programming (Weintrop et al., 2015)(Weintrop et al., 2017). Moreover, Kelleher, and Pausch (Kelleher et al., 2005) recognize further advantages in the use of visual programming for novice learners. Indeed, the visual block-based instruction is built using icons that facilitate students' recognition of its function, such as commands, conditions, and loops. Accordingly, visual programming allows students to focus their attention more on the logic and structures involved in programming tasks than in challenges related to writing code.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "Introduction",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 746,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 287
                            },
                            {
                                "start": 288,
                                "end": 406
                            },
                            {
                                "start": 407,
                                "end": 566
                            },
                            {
                                "start": 567,
                                "end": 746
                            }
                        ],
                        "ref_mentions": [
                            "207226901",
                            "10976181",
                            "9916677"
                        ],
                        "quote": "Block programming is based on drag and drop of consecutive visual tiles on the editing area to compose different instructions; first of all, it facilitates the learning of programming skills because of a reduction in the cognitive load potentially required for textual programming (Weintrop et al., 2015)(Weintrop et al., 2017). Moreover, Kelleher, and Pausch (Kelleher et al., 2005) recognize further advantages in the use of visual programming for novice learners. Indeed, the visual block-based instruction is built using icons that facilitate students' recognition of its function, such as commands, conditions, and loops. Accordingly, visual programming allows students to focus their attention more on the logic and structures involved in programming tasks than in challenges related to writing code."
                    }
                ]
            },
            {
                "idx": 4,
                "key": "[212726996 | Chiu | 2020 | Citations: 40]",
                "snippets": "Traditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming (Denny et al., 2011)- (Denny et al., 2012). Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions. Study by (Price et al., 2015) indicated that students who used the visual interface for programming spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface for programming. Saito, Washizaki, and Fukazawa also compared the learning effects of text-based and visual-based programming and found that visual-based programming induces a larger change in attitude toward programming (Saito et al., 2017). Therefore, research results suggest that visual-based programming is advantageous in a programming implementation environment for novice programmers.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[38535646 | Saito et al. | 2017 | Citations: 18]": "Findings The following results are revealed: (1) The visual input method induces a larger change in attitude toward programming. (2) The number of operations and input quantity influence both groups. (3) The overall results suggest that a visual input is advantageous in a programming implementation environment for first learners."
                },
                "metadata": [
                    {
                        "section_title": "Visual programming environment",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 1550,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 157
                            },
                            {
                                "start": 158,
                                "end": 329
                            },
                            {
                                "start": 330,
                                "end": 417
                            },
                            {
                                "start": 418,
                                "end": 627
                            },
                            {
                                "start": 628,
                                "end": 766
                            },
                            {
                                "start": 767,
                                "end": 953
                            },
                            {
                                "start": 954,
                                "end": 1190
                            },
                            {
                                "start": 1191,
                                "end": 1400
                            },
                            {
                                "start": 1401,
                                "end": 1550
                            }
                        ],
                        "ref_mentions": [
                            "33572463",
                            "2965215",
                            "16554511",
                            "38535646"
                        ],
                        "quote": "Traditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming (Denny et al., 2011)- (Denny et al., 2012). Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions. Study by (Price et al., 2015) indicated that students who used the visual interface for programming spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface for programming. Saito, Washizaki, and Fukazawa also compared the learning effects of text-based and visual-based programming and found that visual-based programming induces a larger change in attitude toward programming (Saito et al., 2017). Therefore, research results suggest that visual-based programming is advantageous in a programming implementation environment for novice programmers."
                    }
                ]
            },
            {
                "idx": 5,
                "key": "[227209010 | Karaca et al. | 2020 | Citations: 5]",
                "snippets": "Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments.\n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "quote": "Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments.\n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers.",
                        "pdf_hash": ""
                    }
                ]
            },
            {
                "idx": 6,
                "key": "[231725028 | Kuhail et al. | 2021 | Citations: 39]",
                "snippets": "Visual programming refers to approaches and methods that use two-dimensional graphical elements to allow nonprogrammer end-users to create, extend, and customize software applications [9]. Visual programming languages (VPLs) are described by programming constructs and rules which are visually depicted [13].\n\nTraditionally, visual programming has been successfully used to help novices learn basics of programming by visualizing elements of a program. However, visual programming is increasingly being used by end users in various domains to create and tailor applications that are useful beyond the realm of education. For instance, VPLs are now being used in fields such as the Internet of Things (IoT) [3], [10], mobile application development [51], robotics [8], and Virtual/Augmented Reality [4].\n\nDespite the difference of VPL approaches, most tools utilize high-level abstractions to hide implementation details, and use similar interaction styles such as direct manipulation (in the form of drag-drop) and menu selection. Some commonalities have been observed among tools of the same domain. For instance, tools that target IoT allow end users to access services using visual abstractions, while tools built for educational purposes mostly use a block-based approach, and use similar visual abstractions representing programming constructs.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "quote": "Visual programming refers to approaches and methods that use two-dimensional graphical elements to allow nonprogrammer end-users to create, extend, and customize software applications [9]. Visual programming languages (VPLs) are described by programming constructs and rules which are visually depicted [13].\n\nTraditionally, visual programming has been successfully used to help novices learn basics of programming by visualizing elements of a program. However, visual programming is increasingly being used by end users in various domains to create and tailor applications that are useful beyond the realm of education. For instance, VPLs are now being used in fields such as the Internet of Things (IoT) [3], [10], mobile application development [51], robotics [8], and Virtual/Augmented Reality [4].\n\nDespite the difference of VPL approaches, most tools utilize high-level abstractions to hide implementation details, and use similar interaction styles such as direct manipulation (in the form of drag-drop) and menu selection. Some commonalities have been observed among tools of the same domain. For instance, tools that target IoT allow end users to access services using visual abstractions, while tools built for educational purposes mostly use a block-based approach, and use similar visual abstractions representing programming constructs.",
                        "pdf_hash": ""
                    }
                ]
            },
            {
                "idx": 7,
                "key": "[235234208 | Dawoud et al. | 2021 | Citations: 1]",
                "snippets": "Visual Programming reduces the need to write lond textual programs. Program thus have multiple dimensions not only the text (Laporte et al., 2016). The idea is that with visual constructs, it could have a better learning curve and be more appealing. \n\nFor example, with a robotic visual programming language, users can program the robot without writing a textual code and without significant knowledge of any programming language. Examples include Make Block1 and Open Roberta2 for programming different hardware systems using blocks. \n\nVisual programming languages have different several classes including block-based, diagrammatic, and iconic visual languages (Myers, 1990).",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[14994189 | Laporte et al. | 2016 | Citations: 193]": "\"End-user development (EUD) is a research topic within the field of computer science and human-computer interaction, describing activities or techniques that allow end-users to program computers. People who are not professional developers can use EUD tools to create or modify software artifacts (descriptions of automated behavior) and complex data objects without significant knowledge of a programming language. The most popular EUD tool is the spreadsheet.\" Source: http://en.wikipedia.org/wiki/End-user_development"
                },
                "metadata": [
                    {
                        "section_title": "VISUAL PROGRAMMING",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 682,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 67
                            },
                            {
                                "start": 68,
                                "end": 153
                            },
                            {
                                "start": 154,
                                "end": 255
                            },
                            {
                                "start": 258,
                                "end": 436
                            },
                            {
                                "start": 437,
                                "end": 540
                            },
                            {
                                "start": 543,
                                "end": 682
                            }
                        ],
                        "ref_mentions": [
                            "14994189",
                            "7335020"
                        ],
                        "quote": "Visual Programming reduces the need to write lond textual programs. Program thus have multiple dimensions not only the text (Laporte et al., 2016). The idea is that with visual constructs, it could have a better learning curve and be more appealing. \n\nFor example, with a robotic visual programming language, users can program the robot without writing a textual code and without significant knowledge of any programming language. Examples include Make Block1 and Open Roberta2 for programming different hardware systems using blocks. \n\nVisual programming languages have different several classes including block-based, diagrammatic, and iconic visual languages (Myers, 1990)."
                    }
                ]
            },
            {
                "idx": 8,
                "key": "[236336244 | Daskalov et al. | 2021 | Citations: 2]",
                "snippets": "In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "Introduction",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 1648,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 207
                            },
                            {
                                "start": 208,
                                "end": 361
                            },
                            {
                                "start": 364,
                                "end": 544
                            },
                            {
                                "start": 547,
                                "end": 574
                            },
                            {
                                "start": 575,
                                "end": 691
                            },
                            {
                                "start": 692,
                                "end": 798
                            },
                            {
                                "start": 799,
                                "end": 980
                            },
                            {
                                "start": 981,
                                "end": 1017
                            },
                            {
                                "start": 1018,
                                "end": 1036
                            },
                            {
                                "start": 1037,
                                "end": 1148
                            },
                            {
                                "start": 1149,
                                "end": 1245
                            },
                            {
                                "start": 1246,
                                "end": 1350
                            },
                            {
                                "start": 1353,
                                "end": 1556
                            },
                            {
                                "start": 1559,
                                "end": 1648
                            }
                        ],
                        "ref_mentions": [],
                        "quote": "In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists."
                    }
                ]
            },
            {
                "idx": 9,
                "key": "[236566925 | Aldhlan et al. | 2021 | Citations: 2]",
                "snippets": "Visual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI).\n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations.\n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts...) and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer.\n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc.\n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "Visual programming:",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 848,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 149
                            },
                            {
                                "start": 150,
                                "end": 360
                            },
                            {
                                "start": 363,
                                "end": 692
                            },
                            {
                                "start": 695,
                                "end": 896
                            }
                        ],
                        "ref_mentions": [],
                        "quote": "Visual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI).\n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations.\n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts"
                    },
                    {
                        "section_title": "Visual programming:",
                        "pdf_hash": "",
                        "start": 697,
                        "end": 1543,
                        "sentence_offsets": [
                            {
                                "start": 695,
                                "end": 896
                            },
                            {
                                "start": 897,
                                "end": 978
                            },
                            {
                                "start": 979,
                                "end": 1158
                            },
                            {
                                "start": 1161,
                                "end": 1286
                            },
                            {
                                "start": 1287,
                                "end": 1305
                            },
                            {
                                "start": 1308,
                                "end": 1490
                            },
                            {
                                "start": 1491,
                                "end": 1701
                            }
                        ],
                        "ref_mentions": [],
                        "quote": ") and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer.\n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc.\n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions."
                    }
                ]
            },
            {
                "idx": 10,
                "key": "[248387201 | Kaivo et al. | 2024 | Citations: 0]",
                "snippets": "Visual programming tools have been developed to help with these challenges and aim to make programming more accessible for non-technical students. However, the differences between visual programming and traditional text-based programming are considerably extensive. Visual programming languages simplify procedures and guide the user through the creation, for example, with blocks that snap together or use colour-coding. (Vihavainen et al., 2011) noticed that a common problem when teaching text-based programming languages is that the focus is too much on learning specific syntax or semantics rather than understanding the process. When students understand the process of coding, they can construct more meaningful programs. Also, (Przybylla et al., 2014) assert that physical computing encourages learners to use their imagination and creativity, focusing more on ideas, not on technical limitation. Physical computing takes a hands-on approach to understand computational thinking, building tangible artefacts to visualise the abstract programming concepts.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[6485878 | Przybylla et al. | 2014 | Citations: 86]": "Physical computing covers the design and realization of interactive objects and instal- lations and allows students to develop concrete, tangible products of the real world, which arise from the learners' imagination. This can be used in computer science education to provide students with interesting and motivating access to the different topic areas of the subject in construction- ist and creative learning environments. To make many existing activities and examples of such project ideas available for classroom use and to expand the topic areas suitable for learning in such environments beyond introductory to programming, a physical computing syllabus for computer science courses in general education schools has been developed. In this paper the methods and different perspectives that were taken into account are presented. The resulting syllabus can be used to develop a constructionist computer science curriculum with physical computing."
                },
                "metadata": [
                    {
                        "section_title": "Background",
                        "pdf_hash": "",
                        "start": 334,
                        "end": 1414,
                        "sentence_offsets": [
                            {
                                "start": 334,
                                "end": 480
                            },
                            {
                                "start": 481,
                                "end": 599
                            },
                            {
                                "start": 600,
                                "end": 755
                            },
                            {
                                "start": 756,
                                "end": 984
                            },
                            {
                                "start": 985,
                                "end": 1077
                            },
                            {
                                "start": 1078,
                                "end": 1255
                            },
                            {
                                "start": 1256,
                                "end": 1414
                            }
                        ],
                        "ref_mentions": [
                            "3016237",
                            "6485878"
                        ],
                        "quote": "Visual programming tools have been developed to help with these challenges and aim to make programming more accessible for non-technical students. However, the differences between visual programming and traditional text-based programming are considerably extensive. Visual programming languages simplify procedures and guide the user through the creation, for example, with blocks that snap together or use colour-coding. (Vihavainen et al., 2011) noticed that a common problem when teaching text-based programming languages is that the focus is too much on learning specific syntax or semantics rather than understanding the process. When students understand the process of coding, they can construct more meaningful programs. Also, (Przybylla et al., 2014) assert that physical computing encourages learners to use their imagination and creativity, focusing more on ideas, not on technical limitation. Physical computing takes a hands-on approach to understand computational thinking, building tangible artefacts to visualise the abstract programming concepts."
                    }
                ]
            },
            {
                "idx": 11,
                "key": "[248510289 | Savidis | 2022 | Citations: 1]",
                "snippets": "Visual programming is widely adopted for teaching purposes, considered as an appropriate starting base before introducing learners to typical programming languages.\n\nThe notion of visual programming concerns methods to define programs in a multi-dimensional fashion (Myers, 1990). The latter is not linked to the underlying program representation, but concerns the interactive visual means through which a program is created, refined and managed. Hence, text-based code is considered as one-dimension method and is therefore not treated as visual programming.\n\nWhile visual programming adoption ranges from rapid application development, interactive software configurations, and system administration, it became popular for educational purposes, in particular for teaching programming skills. In this framework, Scratch (Maloney et al., 2010), a block-based tool and Lego Mindstorms\u2122 (Vallance et al., 2009) are amongst the most well-known visual tools in learning contexts. Historically, visual programing systems have been deployed to introduce students in the programming universe before being enabled to manage and master professional source-based programming languages. In this context, their scope is generally considered to be restricted in the early stages of acquiring programming skills. But today, there are visual tools for professional development purposes, ranging from business process, Internet of Things, 3d graphics and robotics, meaning their scope is not merely restricted to learning activities.\n\nVisual programming systems are currently the primary instruments for the early teaching of basic programming skills, while they are increasingly deployed in various domains for rapid development by non-professional programmers.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "quote": "Visual programming is widely adopted for teaching purposes, considered as an appropriate starting base before introducing learners to typical programming languages.\n\nThe notion of visual programming concerns methods to define programs in a multi-dimensional fashion (Myers, 1990). The latter is not linked to the underlying program representation, but concerns the interactive visual means through which a program is created, refined and managed. Hence, text-based code is considered as one-dimension method and is therefore not treated as visual programming.\n\nWhile visual programming adoption ranges from rapid application development, interactive software configurations, and system administration, it became popular for educational purposes, in particular for teaching programming skills. In this framework, Scratch (Maloney et al., 2010), a block-based tool and Lego Mindstorms\u2122 (Vallance et al., 2009) are amongst the most well-known visual tools in learning contexts. Historically, visual programing systems have been deployed to introduce students in the programming universe before being enabled to manage and master professional source-based programming languages. In this context, their scope is generally considered to be restricted in the early stages of acquiring programming skills. But today, there are visual tools for professional development purposes, ranging from business process, Internet of Things, 3d graphics and robotics, meaning their scope is not merely restricted to learning activities.\n\nVisual programming systems are currently the primary instruments for the early teaching of basic programming skills, while they are increasingly deployed in various domains for rapid development by non-professional programmers.",
                        "pdf_hash": ""
                    }
                ]
            },
            {
                "idx": 12,
                "key": "[249048171 | Wang et al. | 2022 | Citations: 8]",
                "snippets": "Visual programming plays an important role in programming education to promote students' understanding of programming and to maximize their engagement in problem-solving (Mladenovi\u0107 et al., 2020). Visual programming provides a programming interface that helps students learn programming concepts and processes (Lye et al., 2014)(Chao, 2016)(Essel et al., 2017)(Mladenovi\u0107 et al., 2018)(Scherer et al., 2020). In particular, (Hu et al., 2020) indicated that visual programming can improve student's academic performance with a small to medium significant overall mean effect size in this area. A visual programming environment allows students to focus on developing and designing programs (Mladenovi\u0107 et al., 2018)(Topalli et al., 2018), so they become more motivated to solve programming problems without grammar constraints. Visual programming has major learning benefits for students, including an intuitive programming interface and reduced difficulties related to programming (Lye et al., 2014)(Essel et al., 2017)(Mladenovi\u0107 et al., 2018)(Lindberg et al., 2018). Considering the need to effectively develop AI talents at the university level, it is necessary to consider the learning benefits provided by a visual programming learning environment. It helps university students quickly learn about AI and helps them gain a better understanding of AI.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[157063390 | Essel et al. | 2017 | Citations: 6]": "Owing to the innovative and technological intensification in the modern age,21st century skills have become a necessity for survival in the digital age. As the purpose of every education system is to make capable graduates to fit and function effectively in their environment, these skills have become inevitably relevant. Artmakes use of creativity, exploratory and imaginative skills, thus giving learners the urge to unearth and nurture talents. Programming is necessary for every student because it enhances 21st century skills in addition to logical thinking skills. When children get exposed to the concepts of art and programming early, they secure a good foundation for success in any 21stcentury career path. Evidently, in basic school level, teaching and learning activities are deficient of 21st century skill development components. The study employed Qualitative design and descriptive statistics, selecting 9 respondents: Curriculum Developers (3) and ICT teachers (6). This paper therefore presents a review of two essential subjects: Information Communication and Technology (ICT) and Basic Design and Technology (BDT). These are subjects of study in Ghanaian Junior High Schools. It also presents a conceptual framework to remediate the deficiency, and to enhance the development of the 21st century skills.",
                    "[225393741 | Mladenovic et al. | 2020 | Citations: 32]": "Novices enrolled in introductory programming courses often face many difficulties. These difficulties are more emphasized when novices are K\u201312 students. Many new visual programming languages have primarily been designed to provide a smooth introduction to programming for children. However, at some point, a general\u2010purpose text\u2010based programming language should be used. A well\u2010known and studied method is to visualize program execution to assist novices in forming correct mental models. Although many studies have investigated the effects of using visualizations in teaching and learning, most of them focus on courses taught at the university level. Studies that focus on investigating the impact of program visualizations at the K\u201312 level are, to the best of our knowledge, scarce. Therefore, we investigated the impact of using program visualizations with a group of K\u201312 students. Because of the underrepresentation of girls in computer science and known gender stereotypes, we additionally investigated student performance based on gender. Our research included 98 fifth\u2010grade students from three elementary schools. The lectures in the experimental group included different visualization techniques, including a program visualization tool and PowerPoint animations, whereas the control group had no program visualizations. All students learned Python as part of their curriculum. We present the results of our research in this paper.",
                    "[225492990 | Hu et al. | 2020 | Citations: 46]": "Block-based visual programming tools, such as Scratch, Alice, and MIT App Inventor, provide an intuitive and easy-to-use editing interface through which to promote programming learning for novice students of various ages. However, very little attention has been paid to investigating these tools\u2019 overall effects on students\u2019 academic achievement and the study features that may moderate the effects of block-based visual programming from a comprehensive perspective. Thus, the present study carried out a meta-analysis to systemically examine 29 empirical studies (extracting 34 effect sizes) using experimental or quasi-experiments involving the programming learning effects of employing block-based visual programming tools to date (until the end of 2019). The results showed a small to medium significant positive overall mean effect size (fixed-effect model g\u2009=\u20090.37; random-effects model g = 0.47) of the use of these block-based visual programming tools with respect to students\u2019 academic achievement. Furthermore, the overall mean effect size was significantly affected by the educational stage, programming tool used, experimental treatment, and school location. Discussions and implications based on the findings are provided.",
                    "[69960068 | Lindberg et al. | 2018 | Citations: 105]": "An increasing number of countries have recently included programming education in their curricula. Similarly, utilizing programming concepts in gameplay has become popular in the videogame industry. Although many games have been developed for learning to program, their variety and their correspondence to national curricula remain an uncharted territory. Consequently, this paper has three objectives. Firstly, an investigation on the guidelines on programming education in K\u201012 in seven countries was performed by collecting curricula and other relevant data official from governmental and non\u2010profit educational websites. Secondly, a review of existing acquirable games that utilize programming topics in their gameplay was conducted by searching popular game stores. Lastly, we compared the curricula and made suggestions as to which age group the identified games would be suitable. The results of this study can be useful to educators and curriculum designers who wish to gamify programming education. [ABSTRACT FROM AUTHOR] uracy of the copy. Users should refer to the original published version of the material for the full abstract. (Copyright applies to all Abstracts.)"
                },
                "metadata": [
                    {
                        "section_title": "LITERATURE REVIEW Visual Programming Learning Environment",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 1353,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 196
                            },
                            {
                                "start": 197,
                                "end": 405
                            },
                            {
                                "start": 406,
                                "end": 588
                            },
                            {
                                "start": 589,
                                "end": 826
                            },
                            {
                                "start": 827,
                                "end": 1066
                            },
                            {
                                "start": 1067,
                                "end": 1251
                            },
                            {
                                "start": 1252,
                                "end": 1353
                            }
                        ],
                        "ref_mentions": [
                            "225393741",
                            "11994747",
                            "206930744",
                            "157063390",
                            "22570972",
                            "216204126",
                            "225492990",
                            "22570972",
                            "4012511",
                            "11994747",
                            "157063390",
                            "22570972",
                            "69960068"
                        ],
                        "quote": "Visual programming plays an important role in programming education to promote students' understanding of programming and to maximize their engagement in problem-solving (Mladenovi\u0107 et al., 2020). Visual programming provides a programming interface that helps students learn programming concepts and processes (Lye et al., 2014)(Chao, 2016)(Essel et al., 2017)(Mladenovi\u0107 et al., 2018)(Scherer et al., 2020). In particular, (Hu et al., 2020) indicated that visual programming can improve student's academic performance with a small to medium significant overall mean effect size in this area. A visual programming environment allows students to focus on developing and designing programs (Mladenovi\u0107 et al., 2018)(Topalli et al., 2018), so they become more motivated to solve programming problems without grammar constraints. Visual programming has major learning benefits for students, including an intuitive programming interface and reduced difficulties related to programming (Lye et al., 2014)(Essel et al., 2017)(Mladenovi\u0107 et al., 2018)(Lindberg et al., 2018). Considering the need to effectively develop AI talents at the university level, it is necessary to consider the learning benefits provided by a visual programming learning environment. It helps university students quickly learn about AI and helps them gain a better understanding of AI."
                    }
                ]
            },
            {
                "idx": 13,
                "key": "[257145390 | Chen et al. | 2023 | Citations: 5]",
                "snippets": "Visual programming tools lead learners to contact the code language in the way of module splicing, which can make learners accept learning programming psychologically. Its main teaching function is to weaken the writing of programming code, emphasize the application of CT knowledge and methods, and enhance the learner's motivation (Zheng et al., 2021). Visual programming tools can describe and execute problems in real situations in a modular programming language according to the problemsolving plan (Xiang et al., 2021).",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[235749050 | Zheng et al. | 2021 | Citations: 111]": "In visual reasoning, the achievement of deep learning significantly improved the accuracy of results. Image features are primarily used as input to get answers. However, the image features are too redundant to learn accurate characterizations within a limited complexity and time. While in the process of human reasoning, abstract description of an image is usually to avoid irrelevant details. Inspired by this, a higher-level representation named semantic representation is introduced. In this paper, a detailed visual reasoning model is proposed. This new model contains an image understanding model based on semantic representation, feature extraction and process model refined with watershed and u-distance method, a feature vector learning model using pyramidal pooling and residual network, and a question understanding model combining problem embedding coding method and machine translation decoding method. The feature vector could better represent the whole image instead of overly focused on specific characteristics. The model using semantic representation as input verifies that more accurate results can be obtained by introducing a high-level semantic representation. The result also shows that it is feasible and effective to introduce high-level and abstract forms of knowledge representation into deep learning tasks. This study lays a theoretical and experimental foundation for introducing different levels of knowledge representation into deep learning in the future.",
                    "[237732833 | Xiang et al. | 2021 | Citations: 134]": "The availability of thermodynamic data for geologically relevant phases has made practical the calculation of stable phase relations throughout the mantle and crust of terrestrial planets. GeoPS (http://www.geops.org) is a program designed for this purpose in which both input and output are done through an intuitive graphical user interface. GeoPS provides a wide range of phase equilibrium calculations based on a novel Gibbs energy minimization algorithm. The algorithm provides for exceptionally robust and computationally efficient solution to the phase equilibrium problem by successive alternation between a linear programming step to identify stable phase compositions and a non\u2010linear programming step to refine the compositions estimated during the linear programming. Applications include calculation of various types of phase diagrams and path\u2010dependent phase fractionation. By combining an easy\u2010to\u2010use graphical user interface with a robust and efficient solver, GeoPS makes phase equilibrium modelling accessible to researchers and students with minimal training and provides a powerful tool for understanding natural phase relations and for planning experimental work."
                },
                "metadata": [
                    {
                        "section_title": "Visual Programming Problem-Solving Model.",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 493,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 167
                            },
                            {
                                "start": 168,
                                "end": 338
                            },
                            {
                                "start": 339,
                                "end": 493
                            }
                        ],
                        "ref_mentions": [
                            "235749050",
                            "237732833"
                        ],
                        "quote": "Visual programming tools lead learners to contact the code language in the way of module splicing, which can make learners accept learning programming psychologically. Its main teaching function is to weaken the writing of programming code, emphasize the application of CT knowledge and methods, and enhance the learner's motivation (Zheng et al., 2021). Visual programming tools can describe and execute problems in real situations in a modular programming language according to the problemsolving plan (Xiang et al., 2021)."
                    }
                ]
            },
            {
                "idx": 14,
                "key": "[259318509 | Rybinski et al. | 2023 | Citations: 1]",
                "snippets": "This tendency to reduce the complexity of programming and raise the abstraction at which programming constructs are formulated led to the emergence of the low-code approach [1]. Low-code solutions are predominantly based on creating visual, model-based languages [2] with the aim of making them more understandable and accessible. It can be argued that such a solution should be easier to use by inexperienced programmers and raises the productivity of programming (Trigo et al., 2022). For this reason, the usage of visual programming languages is recently gaining popularity in engineering, and education (Noone et al., 2017)(Kuhail et al., 2021).",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[231725028 | Kuhail et al. | 2021 | Citations: 39]": "Recently many researches have explored the potential of visual programming in robotics, the Internet of Things (IoT), and education. However, there is a lack of studies that analyze the recent evidence-based visual programming approaches that are applied in several domains. This study presents a systematic review to understand, compare, and reflect on recent visual programming approaches using twelve dimensions: visual programming classification, interaction style, target users, domain, platform, empirical evaluation type, test participants\u2019 type, number of test participants, test participants\u2019 programming skills, evaluation methods, evaluation measures, and accessibility of visual programming tools. The results show that most of the selected articles discussed tools that target IoT and education, while other fields such as data science, robotics are emerging. Further, most tools use abstractions to hide implementation details and use similar interaction styles. The predominant platforms for the tools are web and mobile, while desktop-based tools are on the decline. Only a few tools were evaluated with a formal experiment, whilst the remaining ones were evaluated with evaluation studies or informal feedback. Most tools were evaluated with students with little to no programming skills. There is a lack of emphasis on usability principles in the design stage of the tools. Additionally, only one of the tools was evaluated for expressiveness. Other areas for exploration include supporting end users throughout the life cycle of applications created with the tools, studying the impact of tutorials on improving learnability, and exploring the potential of machine learning to improve debugging solutions developed with visual programming.",
                    "[254101606 | Trigo et al. | 2022 | Citations: 8]": "Software is becoming increasingly larger and complex, and companies should be aware of which technologies and platforms allow for higher productivity, that then translates into lower costs, shorter development times, and fewer required specialized resources. This article presents the results of an experiment carried out to compare the productivity of two low-code/code-based software development technologies. The results show that the development and maintenance of software with low-code technology is significantly faster, thus supporting the high potential of this technology. The key lesson is that low-code technology needs to be seriously taken into account by companies because of the potential productivity increase it represents for the development of management information systems.",
                    "[4039308 | Noone et al. | 2017 | Citations: 95]": "It is well documented and has been the topic of much research as well that Computer Science courses tend to have higher than average drop-out rates at third level, particularly so, for students advancing from first year to second year. This is a problem that needs to be addressed not only with urgency but also with caution. The required number of Computer Science graduates is growing every year, but the number of graduates is not meeting this demand, and one way that this problem can be alleviated is to encourage students, at an early age, towards studying Computer Science courses. This paper presents a systematic literature review that examines the role of visual and textual programming languages when learning to program, particularly as a First Programming Language. The approach is systematic in that a structured search of electronic resources has been conducted, and the results are presented and quantitatively analysed. This study will provide insight into whether or not the current approaches to teaching young learners programming are viable, and examines what we can do to increase the interest and retention of these students as they progress through their education."
                },
                "metadata": [
                    {
                        "section_title": "Introduction",
                        "pdf_hash": "",
                        "start": 853,
                        "end": 1449,
                        "sentence_offsets": [
                            {
                                "start": 853,
                                "end": 1030
                            },
                            {
                                "start": 1031,
                                "end": 1183
                            },
                            {
                                "start": 1184,
                                "end": 1322
                            },
                            {
                                "start": 1323,
                                "end": 1449
                            }
                        ],
                        "ref_mentions": [
                            "254101606",
                            "4039308",
                            "231725028"
                        ],
                        "quote": "This tendency to reduce the complexity of programming and raise the abstraction at which programming constructs are formulated led to the emergence of the low-code approach [1]. Low-code solutions are predominantly based on creating visual, model-based languages [2] with the aim of making them more understandable and accessible. It can be argued that such a solution should be easier to use by inexperienced programmers and raises the productivity of programming (Trigo et al., 2022). For this reason, the usage of visual programming languages is recently gaining popularity in engineering, and education (Noone et al., 2017)(Kuhail et al., 2021)."
                    }
                ]
            },
            {
                "idx": 15,
                "key": "[259335765 | DeLozier et al. | 2023 | Citations: 6]",
                "snippets": "Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13].\n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13].",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[199002134 | Joao et al. | 2019 | Citations: 23]": "In the last few years, it has been pointed out that teaching programming is a strong strategy to develop pupils\u2019 competences in computational thinking (CT). In the Portuguese context, the curriculum changes in 2018 made programming and CT compulsory for every pupil in primary and secondary education. Nowadays, there is an information and communication technology (ICT) subject, taught by a computer science teacher in each school grade. In Portugal, to become a computer science teacher in primary and secondary education, it is compulsory to have a master\u2019s degree in computer science education. This article reports on a pedagogical activity developed with student-teachers of a Master in Teaching Informatics at the University of Lisbon. Within the activities of the master\u2019s program, we developed a cross-analysis of the core characteristics of 26 block-based and visual programming applications (apps) used to teach computational thinking and programming in school classes. In order to organize the analysis, a framework with several dimensions was developed and used by student-teachers to register the characteristics of each app. The product of this work is a comparative matrix mapping the core characteristics of each of the 26 apps that student-teachers used to select the most appropriate one for teaching programming and computational thinking according to each grade, age group and other characteristics.",
                    "[198986538 | Weintrop | 2019 | Citations: 146]": "Considering how block-based programming environments and tools might be used at the introductory level and beyond.",
                    "[235383033 | Papadakis | 2021 | Citations: 90]": "Data that shows that young children can learn and acquire Computational Thinking (CT) skills has led governments and policymakers internationally to integrate CT into the curriculum, starting in the earliest grades. Researchers support the idea that this introduction must not solely focus on a problem-solving process skill (CT) but instead provide children with new ways to express themselves, supporting their cognitive, language, and socio-emotional development (Computational Fluency-CF). Coupled with the media and government\u2019s rhetoric and an increasing number of apps offering various programming lessons, puzzles, and challenges, educators have been responsible for introducing young children to CT and CF using touchscreen technology. This paper presents a literature review (N = 21) of empirical studies on applying four coding apps to support young children\u2019s learning of CT and CF. The main conclusion is that all apps positively affect the development of children\u2019s CT skills. None of the apps can ultimately support the development of CF, although ScratchJr, with a \u201csandbox\u201d approach, can better help students express themselves.",
                    "[253196672 | Timur et al. | 2021 | Citations: 6]": "\"Abstract: In this study, it was aimed to examine the pre-service pre-school teachers\u2019 opinions about using block-based coding/Scratch in education. 28 pre-service pre-school teachers were participated studying at a public university in a Marmara province region. Within the scope of the study, pre-service teachers were trained on the block-based coding Scratch program for four weeks. A semi-structured interview form consisting of 12 questions was used to determine the opinions of the participants. The data of the study were analyzed using the descriptive analysis method. As a result of the study, 85.71% of pre-school teacher candidates stated that block-based coding education should start at an early age like a language education, this education is important as a necessity of the technology age and all students should benefit from this education in order to provide an effective education, 14.25% of teacher candidates specified that this education is untimely for younger age levels and should not be given to everyone. In addition, the pre-service teachers stated that the block-based coding/Scratch program training helped them gain new ideas in terms of creating materials, improved their creativity and contributed to design abstract material in addition to concrete ones. Additionally, 46.42% of pre-service teachers stated that block-based coding education should start between the ages of 5-7. In this context, it is recommended to provide coding education both in pre-school and undergraduate education.\"",
                    "[35735491 | Urness et al. | 2011 | Citations: 2]": "In this paper we describe several techniques that have helped increase enrollment in the computer science program from 23 computer science majors in 2008 to 42 computer science majors in 2010 - an increase of 82.6%. We discuss issues related to curriculum, programming assignments, and professor-student interactions that have made the discipline more attractive and manageable to a variety of students within the setting of a small liberal arts college."
                },
                "metadata": [
                    {
                        "section_title": "Visual Programming",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 1736,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 76
                            },
                            {
                                "start": 77,
                                "end": 187
                            },
                            {
                                "start": 188,
                                "end": 278
                            },
                            {
                                "start": 279,
                                "end": 425
                            },
                            {
                                "start": 426,
                                "end": 548
                            },
                            {
                                "start": 549,
                                "end": 696
                            },
                            {
                                "start": 697,
                                "end": 788
                            },
                            {
                                "start": 789,
                                "end": 1016
                            },
                            {
                                "start": 1019,
                                "end": 1094
                            },
                            {
                                "start": 1095,
                                "end": 1231
                            },
                            {
                                "start": 1232,
                                "end": 1323
                            },
                            {
                                "start": 1324,
                                "end": 1441
                            },
                            {
                                "start": 1442,
                                "end": 1583
                            },
                            {
                                "start": 1584,
                                "end": 1737
                            }
                        ],
                        "ref_mentions": [
                            "253196672",
                            "235383033",
                            "10976181",
                            "35735491",
                            "51750550",
                            "199002134",
                            "199002134",
                            "198986538",
                            "199002134"
                        ],
                        "quote": "Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13].\n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]."
                    }
                ]
            },
            {
                "idx": 16,
                "key": "[264168616 | Wen et al. | 2023 | Citations: 5]",
                "snippets": "In contrast to traditional textual languages, Scratch enables students to learn algorithms and programming logic with a simple interface and drag-and-drop structure without focusing on syntax, which renders the process more attractive by designing important and unique content (Erol et al., 2017) and supports a more intuitive and engaging experience. (Papadakis et al., 2019) Specifically, Scratch provides an interactive media-rich environment for learners to create animated stories and games, leading to creativity and programming skill development in an exciting, fun way. (Y\u00fckselt\u00fcrk et al., 2017)(Erol et al., 2017)(Papadakis et al., 2019) he advantages of Scratch for programming novices are evidential. Many researchers have identified positive results in learning, including programming knowledge and achievement, (Erol et al., 2017)(Papadakis et al., 2016)(Piedade et al., 2022) computational thinking skills, (Papadakis et al., 2016)(Piedade et al., 2022) a positive attitude toward programming, (Y\u00fckselt\u00fcrk et al., 2017)(Cheng, 2019)(Marcelino et al., 2018)(Papadakis et al., 2016) and learning motivation. (Erol et al., 2017) Scherer et al. (Scherer et al., 2020) meta-analyzed previous studies and found that interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code. The authors also suggested that Scratch accommodates different projects, allowing for different interests and learning styles that may positively influence learners' attitudes, resulting in better performance.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[133502863 | Papadakis et al. | 2019 | Citations: 61]": "A growing number of countries, in Europe and beyond have established clear policies and frameworks for introducing Computational Thinking and computer programming to young children. Researchers, educators, and key stakeholders believe that these skills should be taught and used in early childhood classrooms to initiate the cognitive development of students at an earlier age. The introduction of CT in the curriculum is creating a strong demand for pre-service development, as many teachers did not learn about CT and computer programming in their initial education. In response to this identified need, new initiatives in Universities are underway seeking to bring CT and programming into pre-service teachers' education around the world. We adopted Scratch as the introductory programming language for a semester course in the department of Preschool Education in the University of Crete. The aim of using Scratch was to excite students' interest and familiarise them with the basics of programming. For 13 weeks, students were introduced to the main Scratch concepts and, afterwards, were asked to prepare their projects. For the projects, they were required to develop a game to teach certain concepts about Mathematics or Physical Science and/or present an Aesop myth to preschool age students. The results we obtained were more satisfactory than expected and, in some regards, encouraging.",
                    "[253075433 | Piedade et al. | 2022 | Citations: 20]": "Computational Thinking (CT) has emerged in recent years as a thematic trend in education in many countries. initiatives have been developed for its inclusion in school curricula. There are many pedagogical strategies to promote the development of elementary school students\u2019 CT skills and knowledge. Unplugged learning tasks, block-based programming projects, and educational robotics are 3 of the most used strategies. This paper aimed to analyze the effect of Scratch-based activities, developed during one scholar year, on the computational thinking skills developed and concepts achieved by 4th-grade students. The study involved 189 students from two school clusters organized into an experimental group and a control group. To assess students\u2019 computational knowledge, the Beginners Computational Thinking Test developed by Several Zapata-C\u00e1ceres et al. (2020) was used. The results indicate statistically significant differences between the groups, in which students in the experimental group (who performed activities with scratch) scored higher on the test than students in the control group (who did not use Scratch).",
                    "[63450913 | Papadakis et al. | 2016 | Citations: 64]": "Paradoxically, as the role and significance of computing have increased in society and the economy, and coding is recognised as the fourth literacy, the number of students attending a programming course is in decline. In an attempt to increase interest in computer science (CS), there has been made much effort in developing tools and activities as preliminary learning materials in schools and universities. App Inventor and Scratch strive to engage the novice users by allowing them to write programs about things that connect with their interests in contrast to more conventional programming. In this paper, we focus on the use of these two block-based programming environments as tools to facilitate learning programming for novices. In our analysis, both novice programming environments (NPEs) seemed to be attractive platforms for introducing fundamental concepts in computer programming and both look appealing for majors and non-majors as well.",
                    "[7007858 | Yukselturk et al. | 2017 | Citations: 92]": "The purpose of this study was to analyze the effects of programming with Scratch on the views of preservice Information Technology (IT) teachers towards computer programming. The study sample consisted of 151 preservice IT teachers who took an elective course including a Scratch module in the 2013-14 academic year. Three online questionnaires (Personal Information Questionnaire, The Computer Programming Self-Efficacy Scale and The Computer Programming Learning Attitude Scale) were used to gather the quantitative data and focus group interviews were conducted to collect the qualitative data regarding the preservice IT teachers' views in more detail. According to the results, there were significant increases in the mean of the preservice IT teachers' self-efficacy perceptions regarding almost all complex programming tasks after their Scratch programming experience. The results also showed that the preservice IT teachers' negative attitudes towards programming decreased significantly and programming in the Scratch platform had significantly positive effects on the preservice IT teachers' attitudes regarding some items in the scale. [ABSTRACT FROM AUTHOR]"
                },
                "metadata": [
                    {
                        "section_title": "Scratch programming",
                        "pdf_hash": "",
                        "start": 296,
                        "end": 1620,
                        "sentence_offsets": [
                            {
                                "start": 296,
                                "end": 632
                            },
                            {
                                "start": 633,
                                "end": 840
                            },
                            {
                                "start": 841,
                                "end": 905
                            },
                            {
                                "start": 906,
                                "end": 1139
                            },
                            {
                                "start": 1140,
                                "end": 1410
                            },
                            {
                                "start": 1411,
                                "end": 1620
                            }
                        ],
                        "ref_mentions": [
                            "46157729",
                            "133502863",
                            "7007858",
                            "46157729",
                            "133502863",
                            "46157729",
                            "63450913",
                            "253075433",
                            "63450913",
                            "253075433",
                            "7007858",
                            "59528289",
                            "20505878",
                            "63450913",
                            "46157729",
                            "216204126"
                        ],
                        "quote": "In contrast to traditional textual languages, Scratch enables students to learn algorithms and programming logic with a simple interface and drag-and-drop structure without focusing on syntax, which renders the process more attractive by designing important and unique content (Erol et al., 2017) and supports a more intuitive and engaging experience. (Papadakis et al., 2019) Specifically, Scratch provides an interactive media-rich environment for learners to create animated stories and games, leading to creativity and programming skill development in an exciting, fun way. (Y\u00fckselt\u00fcrk et al., 2017)(Erol et al., 2017)(Papadakis et al., 2019) he advantages of Scratch for programming novices are evidential. Many researchers have identified positive results in learning, including programming knowledge and achievement, (Erol et al., 2017)(Papadakis et al., 2016)(Piedade et al., 2022) computational thinking skills, (Papadakis et al., 2016)(Piedade et al., 2022) a positive attitude toward programming, (Y\u00fckselt\u00fcrk et al., 2017)(Cheng, 2019)(Marcelino et al., 2018)(Papadakis et al., 2016) and learning motivation. (Erol et al., 2017) Scherer et al. (Scherer et al., 2020) meta-analyzed previous studies and found that interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code. The authors also suggested that Scratch accommodates different projects, allowing for different interests and learning styles that may positively influence learners' attitudes, resulting in better performance."
                    }
                ]
            },
            {
                "idx": 17,
                "key": "[264307073 | Rozen | 2023 | Citations: 4]",
                "snippets": "Visual programming environments have the potential to make programming more accessible to programmers of all backgrounds and skill levels. For instance, Domain-Specific Languages (DSLs) have been shown to help non-programmers raise their productivity, and improve the quality of their work (Deursen et al., 2000). DSLs offer specific abstractions and notations that provide increased expressiveness over particular problem domains, e.g., banking, digital forensics and game design.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[264769167 | Deursen et al. | 2000 | Citations: 496]": "We survey the literature available on the topic of domain-specific languages as used for the construction and maintenance of software systems. We list a selection of 75 key publications in the area, and provide a summary for each of the papers. Moreover, we discuss terminology, risks and benefits, example domain-specific languages, design methodologies, and implementation techniques."
                },
                "metadata": [
                    {
                        "section_title": "Introduction",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 463,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 138
                            },
                            {
                                "start": 139,
                                "end": 295
                            },
                            {
                                "start": 296,
                                "end": 463
                            }
                        ],
                        "ref_mentions": [
                            "264769167"
                        ],
                        "quote": "Visual programming environments have the potential to make programming more accessible to programmers of all backgrounds and skill levels. For instance, Domain-Specific Languages (DSLs) have been shown to help non-programmers raise their productivity, and improve the quality of their work (Deursen et al., 2000). DSLs offer specific abstractions and notations that provide increased expressiveness over particular problem domains, e.g., banking, digital forensics and game design."
                    }
                ]
            },
            {
                "idx": 18,
                "key": "[264371146 | Zhu et al. | 2023 | Citations: 3]",
                "snippets": "Some of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace. Thus, novice CS learners can focus on the computational concepts and logic without being bothered by the syntax (Bau et al., 2017;(Kelleher et al., 2005). Some research argues that visual programming languages might be more appropriate for novice learners as they are easier to learn (Bau et al., 2017;Chen et al., 2020;(Malan et al., 2007). For example, Chen et al. (2020) analyzed data from 10,000 undergraduate students who enrolled in CS courses and found that students whose first programming language was visual performed better than did students whose first programming language was textual when the programming languages were first introduced in K-12 stages. Moreover, the visual languages and environments provide scaffolds and enable knowledge transfer. Research indicates that visual programming languages are used in K-12 CT education. For example, (Hsu et al., 2018) and Lockwood and Mooney (2017) find that many schools have utilized visual programming languages to teach CT skills. Other studies indicate that using visual programming languages to teach students CT skills is effective in elementary education (The Horizon Report, 2017). Application of visual program languages in K-12 CS education is found to significantly improve students' understanding of computational concepts and computation practices (S\u00e1ez-L\u00f3pez et al., 2016), logical thinking skills (Lindh et al., 2007), and problem-solving skills in general (Chou, 2018).",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[55683453 | Chou | 2018 | Citations: 48]": "This study investigated elementary school students\u2019 learning performances and behaviors in a maker education program. An informal after-school learning environment entitled Robot MakerSpace was created at a public elementary school in Taiwan and 30 grade 5 students voluntarily participated in a 16-week educational experiment. The student participants were randomly divided into two experimental groups. Students in the maker group received weekly educational robotics lessons, whereas those in the nonmaker group only engaged in other after-school learning activities such as homework practice in traditional classrooms. Mixed methods research was used for data collection. An experiment with a pretest\u2013posttest and control group design was employed to measure the students\u2019 electrical engineering and computer programming content knowledge and problem-solving skills. In addition, a qualitative approach with an emphasis on filed observation was adopted to evaluate the instructional implementation of the maker education program. The quantitative findings revealed that maker education training significantly improved the electrical engineering and computer programming content knowledge of the students and improved their problem-solving skills. The qualitative findings showed the students required considerable learning support from the instructor such as strategies for software and hardware debugging.",
                    "[982597 | Malan et al. | 2007 | Citations: 399]": "Scratch is a \"media-rich programming environment\" recently developed by MIT's Media Lab that \"lets you create your own animations, games, and interactive art.\" Although Scratch is intended to \"enhance the development of technological fluency [among youths] at after-school centers in economically disadvantaged communities,\" we find rarkable potential in this programming environment for higher education as well.We propose Scratch as a first language for first-time programmers in introductory courses, for majors and non-majors alike. Scratch allows students to program with a mouse: programmatic constructs are represented as puzzle pieces that only fit together if \"syntactically\" appropriate. We argue that this environment allows students not only to master programmatic constructs before syntax but also to focus on probls of logic before syntax. We view Scratch as a gateway to languages like Java.To validate our proposal, we recently deployed Scratch for the first time in higher education via harvard Summer School's Computer Science S-1: Great Ideas in Computer Science, the summertime version of a course at harvard College. Our goal was not to improve scores but instead to improve first-time programmers' experiences. We ultimately transitioned to Java, but we first introduced programming itself via Scratch. We present in this paper the results of our trial.We find that, not only did Scratch excite students at a critical time (i.e.,, their first foray into computer science), it also familiarized the inexperienced among th with fundamentals of programming without the distraction of syntax. Moreover, when asked via surveys at term's end to reflect on how their initial experience with Scratch affected their subsequent experience with Java, most students (76%) felt that Scratch was a positive influence, particularly those without prior background. Those students (16%) who felt that Scratch was not an influence, positive or negative, all had prior programming experience."
                },
                "metadata": [
                    {
                        "section_title": "Programming Languages in CS Education",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 1652,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 195
                            },
                            {
                                "start": 196,
                                "end": 351
                            },
                            {
                                "start": 352,
                                "end": 540
                            },
                            {
                                "start": 541,
                                "end": 865
                            },
                            {
                                "start": 866,
                                "end": 962
                            },
                            {
                                "start": 963,
                                "end": 1046
                            },
                            {
                                "start": 1047,
                                "end": 1194
                            },
                            {
                                "start": 1195,
                                "end": 1350
                            },
                            {
                                "start": 1351,
                                "end": 1652
                            }
                        ],
                        "ref_mentions": [
                            "9916677",
                            "982597",
                            "52813623",
                            "27633066",
                            "31042634",
                            "55683453"
                        ],
                        "quote": "Some of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace. Thus, novice CS learners can focus on the computational concepts and logic without being bothered by the syntax (Bau et al., 2017;(Kelleher et al., 2005). Some research argues that visual programming languages might be more appropriate for novice learners as they are easier to learn (Bau et al., 2017;Chen et al., 2020;(Malan et al., 2007). For example, Chen et al. (2020) analyzed data from 10,000 undergraduate students who enrolled in CS courses and found that students whose first programming language was visual performed better than did students whose first programming language was textual when the programming languages were first introduced in K-12 stages. Moreover, the visual languages and environments provide scaffolds and enable knowledge transfer. Research indicates that visual programming languages are used in K-12 CT education. For example, (Hsu et al., 2018) and Lockwood and Mooney (2017) find that many schools have utilized visual programming languages to teach CT skills. Other studies indicate that using visual programming languages to teach students CT skills is effective in elementary education (The Horizon Report, 2017). Application of visual program languages in K-12 CS education is found to significantly improve students' understanding of computational concepts and computation practices (S\u00e1ez-L\u00f3pez et al., 2016), logical thinking skills (Lindh et al., 2007), and problem-solving skills in general (Chou, 2018)."
                    }
                ]
            },
            {
                "idx": 19,
                "key": "[268272915 | Kodytek et al. | 2024 | Citations: 1]",
                "snippets": "Graphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements. Since graphical programming does not require a strong understanding of the language and its syntax, these languages are often designed to make programming more intuitive and accessible to non-programmers.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "Introduction",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 712,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 227
                            },
                            {
                                "start": 228,
                                "end": 507
                            },
                            {
                                "start": 508,
                                "end": 712
                            }
                        ],
                        "ref_mentions": [],
                        "quote": "Graphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements. Since graphical programming does not require a strong understanding of the language and its syntax, these languages are often designed to make programming more intuitive and accessible to non-programmers."
                    }
                ]
            },
            {
                "idx": 20,
                "key": "[269747039 | Lin et al. | 2023 | Citations: 18]",
                "snippets": "Visual programming interfaces (VPIs) have been extensively studied as tools to aid users in designing and implementing systems through graphical elements rather than text-based code [31]. A key benefit of VPIs is their lower entry barrier for novice programmers [45]. There are primarily two main paradigms for VPIs. The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph. Pioneering work in this area includes Prograph [17] and LabVIEW [27]. The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together. Notable works in this area include Scratch [35] and Blockly [19]. Many commercial creative applications have adopted VPIs, including game engines such as Unity [11], CAD tools such as Grasshopper [9], and multimedia development tools such as Max/MSP [12].\n\nVPI concepts have been applied to machine learning applications. For example, Teachable Machine [15] uses a visual interface to help students learn to train a machine learning model...First, our tool leverages a block-based VPI paradigm, which has been shown to be effective in supporting novice programming learners [35].",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[218482766 | Carney et al. | 2020 | Citations: 237]": "Teachable Machine (teachablemachine.withgoogle.com) is a web-based GUI tool for creating custom machine learning classification models without specialized technical expertise. (Machine learning, or ML, lets systems learn to analyze data without being explicitly programmed.) We created it to help students, teachers, designers, and others learn about ML by creating and using their own classification models. Its broad uptake suggests it has empowered people to learn, teach, and explore ML concepts: People have created curriculum, tutorials, and other resources using Teachable Machine on topics like AI ethics at institutions including the Stanford d.school, NYU's Interactive Telecommunications Program, the MIT Media Lab, as well as creative experiments. Users in 201 countries have created over 125,000 classification models. Here we outline the project and its key contributions of (1) a flexible, approachable interface for ML classification models without ML or coding expertise, (2) a set of technical and design decisions that can inform future interactive machine learning tools, and (3) an example of how structured learning content surrounding the tool supports people accessing ML concepts."
                },
                "metadata": [
                    {
                        "section_title": "Visual Programming Interfaces",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 1110,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 187
                            },
                            {
                                "start": 187,
                                "end": 266
                            },
                            {
                                "start": 266,
                                "end": 314
                            },
                            {
                                "start": 314,
                                "end": 455
                            },
                            {
                                "start": 455,
                                "end": 524
                            },
                            {
                                "start": 524,
                                "end": 666
                            },
                            {
                                "start": 666,
                                "end": 731
                            },
                            {
                                "start": 731,
                                "end": 920
                            },
                            {
                                "start": 922,
                                "end": 986
                            },
                            {
                                "start": 986,
                                "end": 1103
                            },
                            {
                                "start": 1103,
                                "end": 1213
                            }
                        ],
                        "ref_mentions": [
                            "7335020",
                            "18983760",
                            "9693598",
                            "218482766"
                        ],
                        "quote": "Visual programming interfaces (VPIs) have been extensively studied as tools to aid users in designing and implementing systems through graphical elements rather than text-based code [31]. A key benefit of VPIs is their lower entry barrier for novice programmers [45]. There are primarily two main paradigms for VPIs. The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph. Pioneering work in this area includes Prograph [17] and LabVIEW [27]. The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together. Notable works in this area include Scratch [35] and Blockly [19]. Many commercial creative applications have adopted VPIs, including game engines such as Unity [11], CAD tools such as Grasshopper [9], and multimedia development tools such as Max/MSP [12].\n\nVPI concepts have been applied to machine learning applications. For example, Teachable Machine [15] uses a visual interface to help students learn to train a machine learning model"
                    },
                    {
                        "section_title": "Visual Programming Interfaces",
                        "pdf_hash": "",
                        "start": 2174,
                        "end": 2313,
                        "sentence_offsets": [
                            {
                                "start": 2174,
                                "end": 2312
                            }
                        ],
                        "ref_mentions": [],
                        "quote": "First, our tool leverages a block-based VPI paradigm, which has been shown to be effective in supporting novice programming learners [35]."
                    }
                ]
            },
            {
                "idx": 21,
                "key": "[270526114 | Ming et al. | 2024 | Citations: 0]",
                "snippets": "Scratch is a visual programming language primarily designed for education. It uses a blockbased system, allowing users to create applications by combining visual components such as images, sounds, and videos with scripted functionalities. The logic of these applications is defined by assembling pre-defined blocks, similar to building with Lego bricks (Ford (Jr.), 2014; Stewart & Baek, 2023). Each block represents a specific command or action, guiding the application through various tasks. Additionally, Scratch provides a wide range of media resources, including graphics and sound effects, as well as features for designing personalized graphical and audio elements (Ford (Jr.), 2014). It offers a comprehensive environment that empowers users of all ages (Stewart & Baek, 2023). The intuitive visual programming language removes barriers, allowing beginners to easily dive into application development and receive immediate feedback on their creations (Ford (Jr.), 2014). This fosters a hands-on learning experience that helps users grasp fundamental programming concepts (Rose et al., 2017).\n\nBeyond being a programming language, Scratch is also a valuable pedagogical tool when integrated into different subject areas and learning environments (Stewart & Baek, 2023;Voinohovska & Doncheva, 2021;Resnick & Rusk, 2020). According to the study by Silva et al. (2022), integrating Scratch into mathematics education enhances the teaching and learning process. This approach promotes a more meaningful, creative, and playful learning experience, as reported by four Mathematics undergraduate students from a Federal Public Institution in the Midwest.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[253005339 | Silva et al. | 2022 | Citations: 1]": "Este artigo apresenta uma pesquisa sobre o uso da linguagem de programa\u00e7\u00e3o Scratch, como poss\u00edvel ferramenta no processo de ensino e de aprendizagem de conceitos matem\u00e1ticos na forma\u00e7\u00e3o inicial de professores.\u00a0 Para o estudo, utilizou-se o Scratch que, al\u00e9m de desenvolver o pensamento computacional, possibilita ao professor trabalhar os conte\u00fados matem\u00e1ticos por meio de seus jogos, anima\u00e7\u00f5es e diversas outras atividades. Os dados emp\u00edricos foram constru\u00eddos com quatro estudantes da licenciatura em Matem\u00e1tica de uma Institui\u00e7\u00e3o P\u00fablica Federal do Centro-Oeste, por meio de question\u00e1rios, que foram socializados ao final de duas oficinas de constru\u00e7\u00e3o de jogos com o Scratch. Para compor os resultados, optou-se pela An\u00e1lise de Conte\u00fado de Bardin (2016). Constitu\u00edram-se como categorias: o trabalho e a intera\u00e7\u00e3o. Os resultados sugerem, na percep\u00e7\u00e3o dos licenciandos, que o uso do Scratch pode melhorar o processo de ensino e de aprendizagem da Matem\u00e1tica, tornando essa experi\u00eancia significativa, criativa e l\u00fadica."
                },
                "metadata": [
                    {
                        "section_title": "Literature Review Scratch Programming",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 1654,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 74
                            },
                            {
                                "start": 75,
                                "end": 238
                            },
                            {
                                "start": 239,
                                "end": 394
                            },
                            {
                                "start": 395,
                                "end": 493
                            },
                            {
                                "start": 494,
                                "end": 691
                            },
                            {
                                "start": 692,
                                "end": 785
                            },
                            {
                                "start": 786,
                                "end": 978
                            },
                            {
                                "start": 979,
                                "end": 1099
                            },
                            {
                                "start": 1102,
                                "end": 1327
                            },
                            {
                                "start": 1328,
                                "end": 1465
                            },
                            {
                                "start": 1466,
                                "end": 1655
                            }
                        ],
                        "ref_mentions": [
                            "233772013",
                            "253005339"
                        ],
                        "quote": "Scratch is a visual programming language primarily designed for education. It uses a blockbased system, allowing users to create applications by combining visual components such as images, sounds, and videos with scripted functionalities. The logic of these applications is defined by assembling pre-defined blocks, similar to building with Lego bricks (Ford (Jr.), 2014; Stewart & Baek, 2023). Each block represents a specific command or action, guiding the application through various tasks. Additionally, Scratch provides a wide range of media resources, including graphics and sound effects, as well as features for designing personalized graphical and audio elements (Ford (Jr.), 2014). It offers a comprehensive environment that empowers users of all ages (Stewart & Baek, 2023). The intuitive visual programming language removes barriers, allowing beginners to easily dive into application development and receive immediate feedback on their creations (Ford (Jr.), 2014). This fosters a hands-on learning experience that helps users grasp fundamental programming concepts (Rose et al., 2017).\n\nBeyond being a programming language, Scratch is also a valuable pedagogical tool when integrated into different subject areas and learning environments (Stewart & Baek, 2023;Voinohovska & Doncheva, 2021;Resnick & Rusk, 2020). According to the study by Silva et al. (2022), integrating Scratch into mathematics education enhances the teaching and learning process. This approach promotes a more meaningful, creative, and playful learning experience, as reported by four Mathematics undergraduate students from a Federal Public Institution in the Midwest."
                    }
                ]
            },
            {
                "idx": 22,
                "key": "[272639481 | Meepung | 2024 | Citations: 0]",
                "snippets": "A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly...Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users...Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[237618637 | Miller et al. | 2021 | Citations: 52]": "ABSTRACT In A Framework for K-12 Science Education, researchers call for teachers to make dramatic shifts in practice \u2013 and sustain in these changes in practice \u2013 so students can engage in rigorous and equitable three-dimensional science learning. Project-Based Learning (PBL) motivates students from diverse backgrounds to persist in learning. This project presents design features that bring together the assets of the Framework with PBL, and then tests these features to derive design principles that serve as commitments for designing for teacher change and student learning. Close ethnographic study of 10 teachers over 5 years in a design-based research study is triangulated with data collected across 41 districts in multiple states engaged in a PBL elementary science curriculum. The following design principles provide guidance for developing materials that support the depth necessary for promoting changes to teachers\u2019 practice at scale: Adaptive, Responsive, and both Enjoyable and Intellectually Satisfying."
                },
                "metadata": [
                    {
                        "section_title": "Visual Programming Language (VPL)",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 736,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 193
                            },
                            {
                                "start": 194,
                                "end": 324
                            },
                            {
                                "start": 325,
                                "end": 452
                            },
                            {
                                "start": 453,
                                "end": 584
                            },
                            {
                                "start": 585,
                                "end": 737
                            }
                        ],
                        "ref_mentions": [],
                        "quote": "A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly"
                    },
                    {
                        "section_title": "Visual Programming Language (VPL)",
                        "pdf_hash": "",
                        "start": 1346,
                        "end": 1526,
                        "sentence_offsets": [
                            {
                                "start": 1346,
                                "end": 1456
                            },
                            {
                                "start": 1457,
                                "end": 1526
                            }
                        ],
                        "ref_mentions": [],
                        "quote": "Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users"
                    },
                    {
                        "section_title": "Visual Programming Language (VPL)",
                        "pdf_hash": "",
                        "start": 1934,
                        "end": 2488,
                        "sentence_offsets": [
                            {
                                "start": 1934,
                                "end": 2054
                            },
                            {
                                "start": 2055,
                                "end": 2189
                            },
                            {
                                "start": 2190,
                                "end": 2352
                            },
                            {
                                "start": 2353,
                                "end": 2487
                            }
                        ],
                        "ref_mentions": [
                            "237618637"
                        ],
                        "quote": "Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills."
                    }
                ]
            },
            {
                "idx": 23,
                "key": "[276961580 | Zhou et al. | 2023 | Citations: 1]",
                "snippets": "Visual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace.\n\nA visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners.\n\nRecent work further explored the application of visual programming in education [9,35,40], XR creativity support [88,91,93], and robotics [14,30]31].",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "quote": "Visual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace.\n\nA visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners.\n\nRecent work further explored the application of visual programming in education [9,35,40], XR creativity support [88,91,93], and robotics [14,30]31].",
                        "pdf_hash": ""
                    }
                ]
            },
            {
                "idx": 24,
                "key": "[32610688 | Basu et al. | 2016 | Citations: 110]",
                "snippets": "In a visual programming (VP) environment, students construct programs using graphical objects and a drag-and-drop interface, thus making the programming more intuitive and accessible to the novice programmer (Kelleher et al., 2005). Visual constructs significantly reduce issues with program syntax and understanding textual structures making it easier for students to focus on the semantic meaning of the constructs (Soloway, 1993). For example, visual interfaces make it easier to interpret and use flow of control constructs, such as loops and conditionals (Parsons and Haden 2007a, b). \n\nCTSiM provides a library of visual constructs that students can choose from and arrange spatially to generate their computational models. If students try to drag and drop a programming construct incorrectly, the system disallows the action and indicates the error by explicitly displaying an \"x\" sign. Therefore, CTSiM eliminates the possibility of generating programs (that is, models) with syntax errors. Examples of other agent-based VP environments include AgentSheets (Repenning, 1993), StarLogo TNG (Klopfer et al., 2005), Scratch (Maloney et al. 2004), ViMAP (Sengupta et al., 2015), and Alice (Conway 1997). They have been used successfully in teaching children CT through game design, storytelling, and modeling activities.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "The advantages of visual programming",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 1324,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 235
                            },
                            {
                                "start": 236,
                                "end": 435
                            },
                            {
                                "start": 436,
                                "end": 591
                            },
                            {
                                "start": 594,
                                "end": 731
                            },
                            {
                                "start": 732,
                                "end": 895
                            },
                            {
                                "start": 896,
                                "end": 1000
                            },
                            {
                                "start": 1001,
                                "end": 1207
                            },
                            {
                                "start": 1208,
                                "end": 1324
                            }
                        ],
                        "ref_mentions": [
                            "9916677",
                            "15270981",
                            "3187251",
                            "54120970"
                        ],
                        "quote": "In a visual programming (VP) environment, students construct programs using graphical objects and a drag-and-drop interface, thus making the programming more intuitive and accessible to the novice programmer (Kelleher et al., 2005). Visual constructs significantly reduce issues with program syntax and understanding textual structures making it easier for students to focus on the semantic meaning of the constructs (Soloway, 1993). For example, visual interfaces make it easier to interpret and use flow of control constructs, such as loops and conditionals (Parsons and Haden 2007a, b). \n\nCTSiM provides a library of visual constructs that students can choose from and arrange spatially to generate their computational models. If students try to drag and drop a programming construct incorrectly, the system disallows the action and indicates the error by explicitly displaying an \"x\" sign. Therefore, CTSiM eliminates the possibility of generating programs (that is, models) with syntax errors. Examples of other agent-based VP environments include AgentSheets (Repenning, 1993), StarLogo TNG (Klopfer et al., 2005), Scratch (Maloney et al. 2004), ViMAP (Sengupta et al., 2015), and Alice (Conway 1997). They have been used successfully in teaching children CT through game design, storytelling, and modeling activities."
                    }
                ]
            },
            {
                "idx": 25,
                "key": "[3949077 | Fayed | 2017 | Citations: 3]",
                "snippets": "Learning computer programming has been always challenging. Since the sixties of the last century, many researchers developed Visual Programming Languages (VPLs) to help in this regard...Designing a General-Purpose visual programming language to make programming easier to understand for audiences other than programmers and to help expert programmers to quickly create programs and applications in less time.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "abstract",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 183,
                        "sentence_offsets": [],
                        "ref_mentions": [],
                        "quote": "Learning computer programming has been always challenging. Since the sixties of the last century, many researchers developed Visual Programming Languages (VPLs) to help in this regard"
                    },
                    {
                        "section_title": "Research Objectives",
                        "pdf_hash": "",
                        "start": 434,
                        "end": 657,
                        "sentence_offsets": [],
                        "ref_mentions": [],
                        "quote": "Designing a General-Purpose visual programming language to make programming easier to understand for audiences other than programmers and to help expert programmers to quickly create programs and applications in less time."
                    }
                ]
            },
            {
                "idx": 26,
                "key": "[53282492 | Dias et al. | 2018 | Citations: 14]",
                "snippets": "Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007].\n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as:\n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device.\n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002].\n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017].\n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003].",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "quote": "Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007].\n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as:\n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device.\n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002].\n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017].\n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003].",
                        "pdf_hash": ""
                    }
                ]
            },
            {
                "idx": 27,
                "key": "[55310713 | Doman et al. | 2015 | Citations: 3]",
                "snippets": "Research has shown VPEs are successful interventions to introduce programming to new students (Siiman et al., 2014). GameMaker, in particular, has been successfully utilized to teach programming concepts to children, adolescents, adults, and senior citizens (Guimar\u00e3es et al., 2008)(Overmars, 2004). This tool may be especially useful in engaging both genders, as women show a preference for computer games with a creative, versus solely destructive, component (Chamillard, 2006).",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {
                    "[1600632 | Guimaraes et al. | 2008 | Citations: 11]": "The computer game industry has exploded reaching sales of several billion dollars a year and, consequently, a majority of college students are familiar with the gaming environment. In fact, videogame development has been cited as one way to motivate students to explore the world of Computer Science. However, most videogames are extremely complex computer programs created by a team of developers including programmers and graphic artists and represent thousands of hours of work. Fortunately there are software tools available that provide a way for simple computer games to be created fairly easily using a building block approach. This paper discusses the successes and challenges of teaching a videogame design and development summer program using the software development tool, Game Maker, and from this experience examines how videogame development might be incorporated into a Computer Science curriculum. The first section provides an overview of the Game Maker program and outlines the material taught in the program. Observations of the most successful teaching methods and approaches utilized are also explored. We conclude with a discussion of where videogame design might best be suited in a Computer Science curriculum citing its attractiveness to non-Computer Science majors, its use as a way to introduce introductory programming concepts and as a way to help students learn to read code. While Game Maker is not sophisticated nor is it a substitute for teaching a standard programming language, it can be easily integrated into introductory Computer Science courses.",
                    "[54038126 | Siiman et al. | 2014 | Citations: 16]": "Abstract \u2014This article reviews and analyses the educational research literature on interventions to I.increase the recruitment and retention of information and communications technology (ICT) students. The results show that three changes in computing pedagogy characterize successful interventions, and consequently offer promising ways to attract and prepare more people for careers in ICT. The most important selection criterion considered when choosing papers to review was that interventions had been tested in practice and their effectiveness measured. Interventions were arranged into two groups: recruitment and retention. Recruitment interventions described initiatives to motivate interest in computing among secondary schools students, whereas retention interventions described efforts to retain students in ICT majors at universities. The three pedagogical approaches that emerged from an analysis of the successful interventions were: (1) visual programming environments to teach introductory programming, (2) inquiry learning activities to engage students in computing, and (3) integration of interdisciplinary knowledge to attract students from diverse disciplines. This review draws attention to innovative teaching practices currently shaping computer science education. Wider adoption of these pedagogical strategies has the potential to significantly increase the number of qualified ICT professionals."
                },
                "metadata": [
                    {
                        "section_title": "I. INTRODUCTION",
                        "pdf_hash": "",
                        "start": 434,
                        "end": 846,
                        "sentence_offsets": [
                            {
                                "start": 434,
                                "end": 532
                            },
                            {
                                "start": 533,
                                "end": 680
                            },
                            {
                                "start": 681,
                                "end": 846
                            }
                        ],
                        "ref_mentions": [
                            "54038126",
                            "1600632",
                            "6574895",
                            "199610"
                        ],
                        "quote": "Research has shown VPEs are successful interventions to introduce programming to new students (Siiman et al., 2014). GameMaker, in particular, has been successfully utilized to teach programming concepts to children, adolescents, adults, and senior citizens (Guimar\u00e3es et al., 2008)(Overmars, 2004). This tool may be especially useful in engaging both genders, as women show a preference for computer games with a creative, versus solely destructive, component (Chamillard, 2006)."
                    }
                ]
            },
            {
                "idx": 28,
                "key": "[60833664 | Bonar et al. | 1990 | Citations: 28]",
                "snippets": "There are two basic reasons to turn to a visual language in a programming language for novices.\n\nFirst, a visual language provides the flexibility and expressiveness needed for a novice language to express a large vocabulary of programming plans. In our experience, a linear textual version of a plan-based programming language is quite unwieldy. Second, from a point of view of novice cognitive capability, a visual language is less likely to tax a novice's working memory.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "How Can Visual Languages Help Novices",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 474,
                        "sentence_offsets": [],
                        "ref_mentions": [],
                        "quote": "There are two basic reasons to turn to a visual language in a programming language for novices.\n\nFirst, a visual language provides the flexibility and expressiveness needed for a novice language to express a large vocabulary of programming plans. In our experience, a linear textual version of a plan-based programming language is quite unwieldy. Second, from a point of view of novice cognitive capability, a visual language is less likely to tax a novice's working memory."
                    }
                ]
            },
            {
                "idx": 29,
                "key": "[60941791 | Plauska et al. | 2014 | Citations: 8]",
                "snippets": "Visual programming is a method to specify a program in a two (or more) dimensional fashion (Myers, 1986), whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification (Lee et al., 2011).",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "body",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 953,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 235
                            },
                            {
                                "start": 236,
                                "end": 403
                            },
                            {
                                "start": 404,
                                "end": 673
                            },
                            {
                                "start": 674,
                                "end": 953
                            }
                        ],
                        "ref_mentions": [
                            "12628167",
                            "220866115"
                        ],
                        "quote": "Visual programming is a method to specify a program in a two (or more) dimensional fashion (Myers, 1986), whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification (Lee et al., 2011)."
                    }
                ]
            },
            {
                "idx": 30,
                "key": "[61809687 | Corral et al. | 2019 | Citations: 22]",
                "snippets": "A visual programming language allows users and developers to create programs by manipulating program elements graphically. Several studies have shown the benefits of visual languages for learning purposes and their applicability to robot programming.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "abstract",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 250,
                        "sentence_offsets": [],
                        "ref_mentions": [],
                        "quote": "A visual programming language allows users and developers to create programs by manipulating program elements graphically. Several studies have shown the benefits of visual languages for learning purposes and their applicability to robot programming."
                    }
                ]
            },
            {
                "idx": 31,
                "key": "[62816171 | Eguiluz et al. | 2018 | Citations: 15]",
                "snippets": "It is also important that all these tools seek to avoid novice programmers having to confront the complexity of text-based computer coding and to improve the learnability [7]. There are several ways to address this problem such as narrative tools, flow-model tools, or specialized output realizations (8394893); in this chapter, we focus on the most common tools, which are those that use the block-based visual programming. These tools employ user interfaces based on visual blocks that are moved and placed constructively as an assembly game, usually with the visual abstraction of a puzzle with its pieces and fitting ways. These blocks work as an abstraction of programming components: sentences, data, control structures, procedures, and so on. Consequently, they considerably limit the prior knowledge required to program and reinforce the program structure, eliminating the possibility of syntax errors and focusing only on the logic that exists in the activity that is to be undertaken.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "Introduction",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 988,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 175
                            },
                            {
                                "start": 176,
                                "end": 418
                            },
                            {
                                "start": 419,
                                "end": 620
                            },
                            {
                                "start": 621,
                                "end": 743
                            },
                            {
                                "start": 744,
                                "end": 988
                            }
                        ],
                        "ref_mentions": [
                            "8394893"
                        ],
                        "quote": "It is also important that all these tools seek to avoid novice programmers having to confront the complexity of text-based computer coding and to improve the learnability [7]. There are several ways to address this problem such as narrative tools, flow-model tools, or specialized output realizations (8394893); in this chapter, we focus on the most common tools, which are those that use the block-based visual programming. These tools employ user interfaces based on visual blocks that are moved and placed constructively as an assembly game, usually with the visual abstraction of a puzzle with its pieces and fitting ways. These blocks work as an abstraction of programming components: sentences, data, control structures, procedures, and so on. Consequently, they considerably limit the prior knowledge required to program and reinforce the program structure, eliminating the possibility of syntax errors and focusing only on the logic that exists in the activity that is to be undertaken."
                    }
                ]
            },
            {
                "idx": 32,
                "key": "[63111506 | Asad et al. | 2016 | Citations: 24]",
                "snippets": "Rodger et al. (2009) introduced the integration of the Alice 3D into middle school and designed lessons in math, science, languages arts, social studies, and technology. Alice is an innovative 3D visual programming environment with which users can create interactive games, animations, and videos. It is a free teaching tool designed to create object-oriented programming. Ben-Ari (2012) introduced Scratch as a visual programming interactive medium in order to support the development of computational thinking skills. (Wilson et al., 2009) introduced games-based learning, such as Scratch, and games-based construction into primary education to engage children at the primary level in developing computer programming skills. With Scratch, users can program interactive stories, games, and animations, which helps young people learn to think creatively. Stolee and Fristoe (2011) used Kodu Game Lab to introduce children to programming at an early age. Kodu is a 3D visual programming platform that can be used to teach creativity and problem solving, as well as programming. Ioannidou (2011) used games to support and develop computational thinking skills and to promote and increase opportunities for computer science education in the regular curriculum. Hero et.al. (2015) used the visual programming platform, MIT App, to increase interest and skills in computational practices. The visual programming platform, MIT App, enables users to create and design Android apps such as games, and more, and it can be used in various fields. MIT's App Inventor platform is used to learn how to program and create mobile apps. The materials available through the MIT App Inventor platform are suitable for teaching courses for middle school, high school, and college. Peluso and Sprechini (2012) used Alice to make a statement about the attitudes of high school student toward computer science. The students expressed their satisfaction with the use of Alice visual programming. The most common programming concepts gained from visual programming environments like Alice are loops (iteration), conditional statements that support problem solving, logic, reasoning and systematic thinking. We conclude that the development of educational visual programming environments like Alice, Scratch, Kodu, and Greenfoot, support the development of algorithmic thinking, and are effective for introducing primary school children to visual programming skills and concepts.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "Related Research",
                        "pdf_hash": "",
                        "start": 72,
                        "end": 2526,
                        "sentence_offsets": [
                            {
                                "start": 72,
                                "end": 241
                            },
                            {
                                "start": 242,
                                "end": 369
                            },
                            {
                                "start": 370,
                                "end": 444
                            },
                            {
                                "start": 445,
                                "end": 591
                            },
                            {
                                "start": 592,
                                "end": 798
                            },
                            {
                                "start": 799,
                                "end": 926
                            },
                            {
                                "start": 927,
                                "end": 1025
                            },
                            {
                                "start": 1026,
                                "end": 1148
                            },
                            {
                                "start": 1149,
                                "end": 1329
                            },
                            {
                                "start": 1330,
                                "end": 1455
                            },
                            {
                                "start": 1456,
                                "end": 1608
                            },
                            {
                                "start": 1609,
                                "end": 1692
                            },
                            {
                                "start": 1693,
                                "end": 1833
                            },
                            {
                                "start": 1834,
                                "end": 1960
                            },
                            {
                                "start": 1961,
                                "end": 2044
                            },
                            {
                                "start": 2045,
                                "end": 2254
                            },
                            {
                                "start": 2255,
                                "end": 2526
                            }
                        ],
                        "ref_mentions": [
                            "61671687"
                        ],
                        "quote": "Rodger et al. (2009) introduced the integration of the Alice 3D into middle school and designed lessons in math, science, languages arts, social studies, and technology. Alice is an innovative 3D visual programming environment with which users can create interactive games, animations, and videos. It is a free teaching tool designed to create object-oriented programming. Ben-Ari (2012) introduced Scratch as a visual programming interactive medium in order to support the development of computational thinking skills. (Wilson et al., 2009) introduced games-based learning, such as Scratch, and games-based construction into primary education to engage children at the primary level in developing computer programming skills. With Scratch, users can program interactive stories, games, and animations, which helps young people learn to think creatively. Stolee and Fristoe (2011) used Kodu Game Lab to introduce children to programming at an early age. Kodu is a 3D visual programming platform that can be used to teach creativity and problem solving, as well as programming. Ioannidou (2011) used games to support and develop computational thinking skills and to promote and increase opportunities for computer science education in the regular curriculum. Hero et.al. (2015) used the visual programming platform, MIT App, to increase interest and skills in computational practices. The visual programming platform, MIT App, enables users to create and design Android apps such as games, and more, and it can be used in various fields. MIT's App Inventor platform is used to learn how to program and create mobile apps. The materials available through the MIT App Inventor platform are suitable for teaching courses for middle school, high school, and college. Peluso and Sprechini (2012) used Alice to make a statement about the attitudes of high school student toward computer science. The students expressed their satisfaction with the use of Alice visual programming. The most common programming concepts gained from visual programming environments like Alice are loops (iteration), conditional statements that support problem solving, logic, reasoning and systematic thinking. We conclude that the development of educational visual programming environments like Alice, Scratch, Kodu, and Greenfoot, support the development of algorithmic thinking, and are effective for introducing primary school children to visual programming skills and concepts."
                    }
                ]
            },
            {
                "idx": 33,
                "key": "[68068900 | Bai et al. | 2019 | Citations: 1]",
                "snippets": "According to the problems in teaching of computer programming course, brought visual programming tools to assist teaching, introduced the advantages of visual programming, and made use of it in algorithm design, coding and modular design. Practice shows that by introducing of visual programming, it helps the students to improve their interesting, and develop the ability of logic thinking as well as programming....But in teaching practice, it is quite difficult to reach the objects of this course. Firstly, it needs great efforts on coding and debugging of programs, but Students are often afraid of tedious syntax of the language, and finally lost confidence for programming when meet program errors again and again. Secondly, the procedure of programming is indeed a procedure of logical thinking, but for many fresh students, the ability of logical thinking is still weak, there is some difficulty for them to understand the logic of programs, so we need a gradual training method for logical thinking. Thirdly, the flow diagram that been used for expressing the algorithm, but for it cannot be executed, there has no way to verify the result of the algorithm, we need stronger tools to express algorithms and verify them. In recent years, a lot of visual programming tools came into being, for example, Scratch [3] , Blockly [4] , Snap [5] and so on. By introducing of visual programming tools in computer programming course, the problems mentioned above can be solved effectively. First, for that the core of computational thinking is the ideas rather than the language syntax, by using of visual tools will simplify programming, thus students will focus on the program logic rather than the language syntax, it will help to overcome the fear of programming and cultivate there interesting. Second, visual program help to express the logic of algorithm clearly, thus it helps to train logical thinking through visual programming, lastly, by modeling with visual programming tools, it is easy to execute the algorithm immediately, thus convenient to verify the algorithm.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "abstract",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 415,
                        "sentence_offsets": [],
                        "ref_mentions": [],
                        "quote": "According to the problems in teaching of computer programming course, brought visual programming tools to assist teaching, introduced the advantages of visual programming, and made use of it in algorithm design, coding and modular design. Practice shows that by introducing of visual programming, it helps the students to improve their interesting, and develop the ability of logic thinking as well as programming"
                    },
                    {
                        "section_title": "abstract",
                        "pdf_hash": "",
                        "start": 907,
                        "end": 2570,
                        "sentence_offsets": [],
                        "ref_mentions": [],
                        "quote": ".But in teaching practice, it is quite difficult to reach the objects of this course. Firstly, it needs great efforts on coding and debugging of programs, but Students are often afraid of tedious syntax of the language, and finally lost confidence for programming when meet program errors again and again. Secondly, the procedure of programming is indeed a procedure of logical thinking, but for many fresh students, the ability of logical thinking is still weak, there is some difficulty for them to understand the logic of programs, so we need a gradual training method for logical thinking. Thirdly, the flow diagram that been used for expressing the algorithm, but for it cannot be executed, there has no way to verify the result of the algorithm, we need stronger tools to express algorithms and verify them. In recent years, a lot of visual programming tools came into being, for example, Scratch [3] , Blockly [4] , Snap [5] and so on. By introducing of visual programming tools in computer programming course, the problems mentioned above can be solved effectively. First, for that the core of computational thinking is the ideas rather than the language syntax, by using of visual tools will simplify programming, thus students will focus on the program logic rather than the language syntax, it will help to overcome the fear of programming and cultivate there interesting. Second, visual program help to express the logic of algorithm clearly, thus it helps to train logical thinking through visual programming, lastly, by modeling with visual programming tools, it is easy to execute the algorithm immediately, thus convenient to verify the algorithm."
                    }
                ]
            },
            {
                "idx": 34,
                "key": "[86787308 | Hamzabegovic | 2019 | Citations: 0]",
                "snippets": "In computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun.\n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages.",
                "model": "claude-3-7-sonnet-20250219",
                "inline_citations": {},
                "metadata": [
                    {
                        "section_title": "Visual programming",
                        "pdf_hash": "",
                        "start": 0,
                        "end": 1614,
                        "sentence_offsets": [
                            {
                                "start": 0,
                                "end": 189
                            },
                            {
                                "start": 190,
                                "end": 345
                            },
                            {
                                "start": 346,
                                "end": 493
                            },
                            {
                                "start": 494,
                                "end": 798
                            },
                            {
                                "start": 801,
                                "end": 918
                            },
                            {
                                "start": 919,
                                "end": 1090
                            },
                            {
                                "start": 1091,
                                "end": 1125
                            },
                            {
                                "start": 1126,
                                "end": 1258
                            },
                            {
                                "start": 1259,
                                "end": 1408
                            },
                            {
                                "start": 1409,
                                "end": 1522
                            },
                            {
                                "start": 1523,
                                "end": 1615
                            }
                        ],
                        "ref_mentions": [],
                        "quote": "In computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun.\n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages."
                    }
                ]
            }
        ]
    },
    "cluster": {
        "cost": 0.045291,
        "cot": "I need to create a comprehensive overview of visual programming with a focus on its advantages and educational applications, especially for beginners and non-programmers. After analyzing the quotes, I can identify several key dimensions that would provide a structured response to this query:\n\n1. \"Introduction to Visual Programming\" - This should be a synthesis section explaining what visual programming is, its basic characteristics, and historical development. Quotes [1], [2], [8], [9], [19], [22], [26], and [34] provide good definitions and background information.\n\n2. \"Key Features of Visual Programming Languages\" - This should be a synthesis section describing the distinctive features of visual programming languages, how they differ from traditional text-based programming. Quotes [0], [5], [7], [8], [9], [19], [22], [23], [26], [29], and [34] provide information on VPL features.\n\n3. \"Types and Examples of Visual Programming Languages\" - This should be a list section showcasing different types of VPLs and specific examples that are commonly used. Quotes [2], [5], [8], [21], [22], [27], [31], and [32] mention various VPL types and examples.\n\n4. \"Advantages for Beginners and Non-Programmers\" - This should be a synthesis section focusing on how visual programming benefits beginners and non-programmers specifically. Quotes [0], [3], [4], [5], [10], [15], [17], [18], [20], and [25] provide excellent information on these advantages.\n\n5. \"Educational Applications and Effectiveness\" - This should be a synthesis section exploring how visual programming is used in educational contexts and its effectiveness. Quotes [1], [2], [3], [11], [12], [13], [15], [16], [18], [21], [22], [24], [27], [32], and [33] discuss educational applications.\n\n6. \"Cognitive Benefits of Visual Programming\" - This should be a synthesis section examining the cognitive advantages of using visual programming. Quotes [3], [4], [10], [15], [16], [24], [28], and [31] address cognitive aspects.\n\n7. \"Applications Beyond Education\" - This should be a list section covering domains where visual programming is applied outside of educational contexts. Quotes [6], [11], [14], [17], [20], [23], [26], [29], and [30] mention various applications.\n\nThis structure will provide a comprehensive overview while highlighting the advantages and educational applications as requested in the query. Each section will be supported by multiple quotes to ensure thorough coverage of the topic.",
        "plan": {
            "Introduction to Visual Programming (synthesis)": [
                1,
                2,
                8,
                9,
                19,
                22,
                26,
                34
            ],
            "Key Features of Visual Programming Languages (synthesis)": [
                0,
                5,
                7,
                8,
                9,
                19,
                22,
                23,
                26,
                29,
                34
            ],
            "Types and Examples of Visual Programming Languages (list)": [
                2,
                5,
                8,
                21,
                22,
                27,
                31,
                32
            ],
            "Advantages for Beginners and Non-Programmers (synthesis)": [
                0,
                3,
                4,
                5,
                10,
                15,
                17,
                18,
                20,
                25
            ],
            "Educational Applications and Effectiveness (synthesis)": [
                1,
                2,
                3,
                11,
                12,
                13,
                15,
                16,
                18,
                21,
                22,
                24,
                27,
                32,
                33
            ],
            "Cognitive Benefits of Visual Programming (synthesis)": [
                3,
                4,
                10,
                15,
                16,
                24,
                28,
                31
            ],
            "Applications Beyond Education (list)": [
                6,
                11,
                14,
                17,
                20,
                23,
                26,
                29,
                30
            ]
        },
        "model": "claude-3-7-sonnet-20250219"
    },
    "summary": {
        "sections": [
            {
                "title": "Introduction to Visual Programming",
                "tldr": "Visual Programming Languages (VPLs) enable users to create programs by manipulating graphical elements rather than writing text. They represent programs in two or more dimensions using elements like blocks, icons, and arrows, making programming more accessible to beginners and non-programmers. (8 sources)",
                "text": "\nVisual Programming Languages (VPLs) represent a paradigm shift from traditional text-based programming by allowing users to create programs through the manipulation of graphical elements rather than typing code. Myers defined visual programming in 1990 as \"any system that allows the user to specify a program in a two (or more) dimensional fashion\" <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. This multidimensional approach uses visual expressions such as blocks, symbols, arrows, diagrams, and spatial arrangements to represent program structure and logic <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper> <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper>.\n\nVPLs emerged from the integration of three fields: Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI) <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>. The history of VPLs dates back to the 1960s, when Logo was designed by Feurzeig, Seymour and Cynthia Solomon in 1967 to introduce programming to children <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>. Since then, VPLs have evolved significantly, with block-based programming becoming particularly popular in educational contexts.\n\nBlock-based programming, a form of visual programming, allows users to create programs by selecting and connecting blocks of code <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. In these environments, blocks are typically organized into colored categories to help users select appropriate code elements, and the interface prevents syntactically incorrect blocks from connecting <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. Popular block-based environments include Scratch, App Inventor, Alice, and PencilCode.\n\nVPLs are designed to emphasize underlying semantics rather than syntax, making them particularly valuable in learning environments for children and novice programmers, as well as in specialized domains <Paper corpusId=\"19038821\" paperTitle=\"(Sukumar et al., 2017)\" isShortName></Paper>. They have been applied across numerous fields, including educational activities, multimedia, video game development, system design, simulations, automation, data warehousing, and business analytics <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>. Kodu Game Lab exemplifies a VPL tailored for game development, expressing concepts like sight, hearing, and time to control character behavior in an intuitive manner <Paper corpusId=\"272639481\" paperTitle=\"(Meepung, 2024)\" isShortName></Paper>.\n\nThe primary goal of visual programming is to abstract low-level programming concepts into high-level logic through visual metaphors <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>, making programming more intuitive and accessible to non-programmers <Paper corpusId=\"268272915\" paperTitle=\"(Kodytek et al., 2024)\" isShortName></Paper>. This accessibility stems from VPLs' ability to reduce the need for understanding complex language syntax while emphasizing conceptual understanding <Paper corpusId=\"268272915\" paperTitle=\"(Kodytek et al., 2024)\" isShortName></Paper>.",
                "citations": [
                    {
                        "id": "(Joao et al., 2019)",
                        "snippets": [
                            "In 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs.\n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39].\n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes.\n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41]."
                        ],
                        "paper": {
                            "corpus_id": 199002134,
                            "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers",
                            "authors": [
                                {
                                    "authorId": "2157028104",
                                    "name": "Piedade Jo\u00e3o"
                                },
                                {
                                    "authorId": "72582337",
                                    "name": "Dorotea Nuno"
                                },
                                {
                                    "authorId": "2157024771",
                                    "name": "Sampaio Ferrentini F\u00e1bio"
                                },
                                {
                                    "authorId": "144370033",
                                    "name": "P. ana"
                                }
                            ],
                            "year": 2019,
                            "venue": "Education sciences",
                            "n_citations": 23
                        },
                        "score": 0.947265625
                    },
                    {
                        "id": "(Dias et al., 2018)",
                        "snippets": [
                            "Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007].\n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as:\n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device.\n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002].\n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017].\n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003]."
                        ],
                        "paper": {
                            "corpus_id": 53282492,
                            "title": "State of the Software Development Life-Cycle for the Internet-of-Things",
                            "authors": [
                                {
                                    "authorId": "145745979",
                                    "name": "Jo\u00e3o Pedro Dias"
                                },
                                {
                                    "authorId": "144027277",
                                    "name": "H. Ferreira"
                                }
                            ],
                            "year": 2018,
                            "venue": "arXiv.org",
                            "n_citations": 14
                        },
                        "score": 0.927734375
                    },
                    {
                        "id": "(Hamzabegovic, 2019)",
                        "snippets": [
                            "In computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun.\n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages."
                        ],
                        "paper": {
                            "corpus_id": 86787308,
                            "title": "Development of application software without programming",
                            "authors": [
                                {
                                    "authorId": "30811658",
                                    "name": "J. Hamzabegovi\u0107"
                                }
                            ],
                            "year": 2019,
                            "venue": "IOP Conference Series: Materials Science and Engineering",
                            "n_citations": 0
                        },
                        "score": 0.94091796875
                    },
                    {
                        "id": "(Aldhlan et al., 2021)",
                        "snippets": [
                            "Visual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI).\n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations.\n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts",
                            ") and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer.\n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc.\n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions."
                        ],
                        "paper": {
                            "corpus_id": 236566925,
                            "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games",
                            "authors": [
                                {
                                    "authorId": "9207310",
                                    "name": "Kawther A. Aldhlan"
                                },
                                {
                                    "authorId": "2836785",
                                    "name": "Hamad Alreshidi"
                                }
                            ],
                            "year": 2021,
                            "venue": "Indian Journal of Science and Technology",
                            "n_citations": 2
                        },
                        "score": 0.939453125
                    },
                    {
                        "id": "(Daskalov et al., 2021)",
                        "snippets": [
                            "In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists."
                        ],
                        "paper": {
                            "corpus_id": 236336244,
                            "title": "Hybrid Visual Programming Language Environment for Programming Training",
                            "authors": [
                                {
                                    "authorId": "2666781",
                                    "name": "R. Daskalov"
                                },
                                {
                                    "authorId": "94696738",
                                    "name": "G. Pashev"
                                },
                                {
                                    "authorId": "2299512",
                                    "name": "Silvia N. Gaftandzhieva"
                                }
                            ],
                            "year": 2021,
                            "venue": "TEM Journal",
                            "n_citations": 2
                        },
                        "score": 0.9521484375
                    },
                    {
                        "id": "(Sukumar et al., 2017)",
                        "snippets": [
                            "Visual Programming (VP) languages enable programming by means of interacting with graphical elements, such as blocks, symbols, and arrows, rather than text. They are known, in general, to promote program comprehension by representing content in two-dimensions (text is considered onedimensional) and by emphasizing the underlying semantics rather than the syntax (Myers, 1990)[53]. The contexts where VP is used mostly include learning environments (for both children and novice programmers) and specialized domains (Myers, 1990)[41]."
                        ],
                        "paper": {
                            "corpus_id": 19038821,
                            "title": "Design Space of Programming Tools on Mobile Touchscreen Devices",
                            "authors": [
                                {
                                    "authorId": "2207677",
                                    "name": "P. Sukumar"
                                },
                                {
                                    "authorId": "1809549",
                                    "name": "Ronald A. Metoyer"
                                }
                            ],
                            "year": 2017,
                            "venue": "arXiv.org",
                            "n_citations": 0
                        },
                        "score": 0.94091796875
                    },
                    {
                        "id": "(Meepung, 2024)",
                        "snippets": [
                            "A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly",
                            "Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users",
                            "Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills."
                        ],
                        "paper": {
                            "corpus_id": 272639481,
                            "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills",
                            "authors": [
                                {
                                    "authorId": "2128894602",
                                    "name": "Tippawan Meepung"
                                }
                            ],
                            "year": 2024,
                            "venue": "International Education Studies",
                            "n_citations": 0
                        },
                        "score": 0.97802734375
                    },
                    {
                        "id": "(Kodytek et al., 2024)",
                        "snippets": [
                            "Graphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements. Since graphical programming does not require a strong understanding of the language and its syntax, these languages are often designed to make programming more intuitive and accessible to non-programmers."
                        ],
                        "paper": {
                            "corpus_id": 268272915,
                            "title": "Automated code development based on genetic programming in graphical programming language: A pilot study",
                            "authors": [
                                {
                                    "authorId": "100971028",
                                    "name": "Pavel Kodytek"
                                },
                                {
                                    "authorId": "1910708525",
                                    "name": "Alexandra Bodzas"
                                },
                                {
                                    "authorId": "2290253497",
                                    "name": "Jan Zidek"
                                }
                            ],
                            "year": 2024,
                            "venue": "PLoS ONE",
                            "n_citations": 1
                        },
                        "score": 0.93603515625
                    }
                ],
                "format": "synthesis",
                "table": null,
                "model": "claude-3-7-sonnet-20250219"
            },
            {
                "title": "Key Features of Visual Programming Languages",
                "tldr": "Visual Programming Languages (VPLs) use graphical elements like blocks, icons, and diagrams that can be manipulated to create programs without writing traditional code. They eliminate syntax errors, emphasize program semantics over syntax, and provide intuitive interfaces that make programming more accessible to beginners and non-programmers. (11 sources)",
                "text": "\nVisual Programming Languages (VPLs) are characterized by several distinct features that differentiate them from traditional text-based programming approaches. The most fundamental aspect of VPLs is their use of graphical representations\u2014such as blocks, icons, symbols, diagrams, and spatial arrangements\u2014to represent program structure and logic <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper> <Paper corpusId=\"272639481\" paperTitle=\"(Meepung, 2024)\" isShortName></Paper>. This multidimensional approach extends beyond the one-dimensional text streams of conventional programming languages <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper>.\n\nVPLs typically employ a node-graph editor interface where users design programs by configuring and connecting visual elements with arrows, lines, or arcs that represent relationships between program components <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper> <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>. Many VPLs follow a \"boxes and arrows\" paradigm, treating screen objects as entities connected by lines representing relations <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper>.\n\nA key advantage of VPLs is their elimination of syntax errors. By design, they prevent common programming mistakes such as forgotten parentheses and semicolons, allowing users to focus on developing algorithms and logic rather than troubleshooting syntax problems <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper>. This shift in focus from syntax to semantics is intentional, as VPLs abstract low-level programming concepts into high-level logic through visual metaphors <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nVPLs are integrated with development environments that shift much of the programming burden from the user to the software, making the task more user-friendly <Paper corpusId=\"11795228\" paperTitle=\"(Lucanin, 2012)\" isShortName></Paper>. These integrated development environments (IDEs) provide intuitive interfaces with features like drag-and-drop functionality, color-coded categories, and built-in validation that prevents incorrect connections between elements <Paper corpusId=\"236566925\" paperTitle=\"(Aldhlan et al., 2021)\" isShortName></Paper>.\n\nThe nature of VPLs makes them particularly suitable for specific applications and audiences. They excel in educational settings, providing an accessible entry point for children and novice programmers <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper>. VPLs are also well-suited for specialized domains such as robotics programming, allowing users to program robots without significant knowledge of traditional programming languages <Paper corpusId=\"235234208\" paperTitle=\"(Dawoud et al., 2021)\" isShortName></Paper>. Beyond education, VPLs have found applications in multimedia development, video game creation, system design, simulations, automation, data warehousing, and business analytics <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\nThe design philosophy behind VPLs emphasizes intuitive interaction, making programming more accessible to non-programmers by creating a more natural programming environment <Paper corpusId=\"268272915\" paperTitle=\"(Kodytek et al., 2024)\" isShortName></Paper> <Paper corpusId=\"86787308\" paperTitle=\"(Hamzabegovic, 2019)\" isShortName></Paper>. This approach leverages visual thinking, which for many users provides a more natural way to specify program behavior than text-based languages <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper>. The result is a programming paradigm that accelerates experimentation and exploration while making advanced technology more accessible to beginners <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>.",
                "citations": [
                    {
                        "id": "(Daskalov et al., 2021)",
                        "snippets": [
                            "In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists."
                        ],
                        "paper": {
                            "corpus_id": 236336244,
                            "title": "Hybrid Visual Programming Language Environment for Programming Training",
                            "authors": [
                                {
                                    "authorId": "2666781",
                                    "name": "R. Daskalov"
                                },
                                {
                                    "authorId": "94696738",
                                    "name": "G. Pashev"
                                },
                                {
                                    "authorId": "2299512",
                                    "name": "Silvia N. Gaftandzhieva"
                                }
                            ],
                            "year": 2021,
                            "venue": "TEM Journal",
                            "n_citations": 2
                        },
                        "score": 0.9521484375
                    },
                    {
                        "id": "(Meepung, 2024)",
                        "snippets": [
                            "A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly",
                            "Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users",
                            "Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills."
                        ],
                        "paper": {
                            "corpus_id": 272639481,
                            "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills",
                            "authors": [
                                {
                                    "authorId": "2128894602",
                                    "name": "Tippawan Meepung"
                                }
                            ],
                            "year": 2024,
                            "venue": "International Education Studies",
                            "n_citations": 0
                        },
                        "score": 0.97802734375
                    },
                    {
                        "id": "(Hamzabegovic, 2019)",
                        "snippets": [
                            "In computer science, the visual programming language (hereinafter referred to as \"VPL\") allows users to create programs by manipulating more graphic elements of the program than text files. VPL allows programming with visual expressions, spatial layout of text and graphic symbols that are used either as elements of syntax or secondary writing. Visual programming languages also make it possible to create a more natural programming environment that will be familiar and familiar to the user. In order to be used by non-programmers, visual programming languages must use intuitive metadata and specific to the area they are intended to, reduce the cognitive load of end-users in their learning and adoption, to enable the writing of a readable and understandable code, and They are simple and fun.\n\nAs scientists point out, in this type of programming more than one dimension is used to represent the semantics [11]. Examples of such additional dimensions are reflected in the use of multidimensional objects, the use of spatial relationships, and the time dimension by typing, so-called. \"before-after\" semantic relations. Any such potentially significant object or relationship is a sign, and the collection of one or more of them is an image expression. Examples of visual expressions used in visual programming include diagrams, idle sketches, icons, or demonstrations of actions using graphic objects. If in some programming language the syntax includes visual expressions, then this programming language is visual. Multidimensionality is the important difference between VPLs and strictly textual languages."
                        ],
                        "paper": {
                            "corpus_id": 86787308,
                            "title": "Development of application software without programming",
                            "authors": [
                                {
                                    "authorId": "30811658",
                                    "name": "J. Hamzabegovi\u0107"
                                }
                            ],
                            "year": 2019,
                            "venue": "IOP Conference Series: Materials Science and Engineering",
                            "n_citations": 0
                        },
                        "score": 0.94091796875
                    },
                    {
                        "id": "(Zhou et al., 2023)",
                        "snippets": [
                            "Visual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace.\n\nA visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners.\n\nRecent work further explored the application of visual programming in education [9,35,40], XR creativity support [88,91,93], and robotics [14,30]31]."
                        ],
                        "paper": {
                            "corpus_id": 276961580,
                            "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs",
                            "authors": [
                                {
                                    "authorId": "2261898099",
                                    "name": "Zhongyi Zhou"
                                },
                                {
                                    "authorId": "2214751677",
                                    "name": "Jing Jin"
                                },
                                {
                                    "authorId": "95798184",
                                    "name": "Vrushank Phadnis"
                                },
                                {
                                    "authorId": "29436685",
                                    "name": "Xiuxiu Yuan"
                                },
                                {
                                    "authorId": "2261902264",
                                    "name": "Jun Jiang"
                                },
                                {
                                    "authorId": "2274943688",
                                    "name": "Xun Qian"
                                },
                                {
                                    "authorId": "2261902483",
                                    "name": "Kristen Wright"
                                },
                                {
                                    "authorId": "2261902982",
                                    "name": "Mark Sherwood"
                                },
                                {
                                    "authorId": "2261904117",
                                    "name": "Jason Mayes"
                                },
                                {
                                    "authorId": "2261943879",
                                    "name": "Jingtao Zhou"
                                },
                                {
                                    "authorId": "2275032507",
                                    "name": "Yiyi Huang"
                                },
                                {
                                    "authorId": "2275017028",
                                    "name": "Zheng Xu"
                                },
                                {
                                    "authorId": "2274975067",
                                    "name": "Yinda Zhang"
                                },
                                {
                                    "authorId": "2274929798",
                                    "name": "Johnny Lee"
                                },
                                {
                                    "authorId": "2292510931",
                                    "name": "Alex Olwal"
                                },
                                {
                                    "authorId": "2274972576",
                                    "name": "David Kim"
                                },
                                {
                                    "authorId": "2214753154",
                                    "name": "Ram Iyengar"
                                },
                                {
                                    "authorId": "2262397661",
                                    "name": "Na Li"
                                },
                                {
                                    "authorId": "2350823722",
                                    "name": "Ruofei Du"
                                }
                            ],
                            "year": 2023,
                            "venue": "International Conference on Human Factors in Computing Systems",
                            "n_citations": 1
                        },
                        "score": 0.90380859375
                    },
                    {
                        "id": "(Karaca et al., 2020)",
                        "snippets": [
                            "Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments.\n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers."
                        ],
                        "paper": {
                            "corpus_id": 227209010,
                            "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications",
                            "authors": [
                                {
                                    "authorId": "2069724711",
                                    "name": "Mustafa Karaca"
                                },
                                {
                                    "authorId": "2272032",
                                    "name": "U\u011fur Yayan"
                                }
                            ],
                            "year": 2020,
                            "venue": "arXiv.org",
                            "n_citations": 5
                        },
                        "score": 0.93505859375
                    },
                    {
                        "id": "(Dias et al., 2018)",
                        "snippets": [
                            "Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007].\n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as:\n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device.\n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002].\n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017].\n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003]."
                        ],
                        "paper": {
                            "corpus_id": 53282492,
                            "title": "State of the Software Development Life-Cycle for the Internet-of-Things",
                            "authors": [
                                {
                                    "authorId": "145745979",
                                    "name": "Jo\u00e3o Pedro Dias"
                                },
                                {
                                    "authorId": "144027277",
                                    "name": "H. Ferreira"
                                }
                            ],
                            "year": 2018,
                            "venue": "arXiv.org",
                            "n_citations": 14
                        },
                        "score": 0.927734375
                    },
                    {
                        "id": "(Lucanin, 2012)",
                        "snippets": [
                            "Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task."
                        ],
                        "paper": {
                            "corpus_id": 11795228,
                            "title": "Visual definition of procedures for automatic virtual scene generation",
                            "authors": [
                                {
                                    "authorId": "3352207",
                                    "name": "Dra\u017een Lu\u010danin"
                                }
                            ],
                            "year": 2012,
                            "venue": "arXiv.org",
                            "n_citations": 1
                        },
                        "score": 0.9287109375
                    },
                    {
                        "id": "(Aldhlan et al., 2021)",
                        "snippets": [
                            "Visual programming languages use drawing, graphics, and a graphical interface (GUI: Graphical User Interface) to issue instructions for the computer. It can be said that the field of visual programming develops as a result of a wonderful integration between three fields which are Programming Languages, Computer Graphics, and Human-Computer Interaction (HCI).\n\nIn visual programming languages, we can distinguish between two types of icons, (Process Icons) which denote accounts, and (Object Icons) which in turn consist of two types: The (Elementary) represents basic objects and (Composite) represents composite objects that are formed from several simple icons using specific operations.\n\nVisual programming is a relatively modern method of programming, in which assistant programs are used to design a graphical user interface (buttons, texts",
                            ") and linking it with the programming code. These assistant programs are called the Integrated Development Environment (IDE). This type of programming uses visual expressions in the programming process or it may treat the visual information or support visual interaction between the user and the computer.\n\nAmong the most popular graphic development environments are Visual C ++, Visual J ++, Delphi, Visual Basic, Visual Basic.net, Java Builder, etc.\n\nA programming language is known in more than one way, it can be said that it is a language that uses the (mouse) and (icons) on the screen and (menus) to prepare or develop programs. It can also be said that it is a language that uses Visual Representation of Logical Objects to process visual information and supports visual interaction in the programming process and uses visual expressions."
                        ],
                        "paper": {
                            "corpus_id": 236566925,
                            "title": "Using Scratch Program to Design Educational E-Games to raise Technological Awareness and Visual Programming Skills to Face Fatal E-Games",
                            "authors": [
                                {
                                    "authorId": "9207310",
                                    "name": "Kawther A. Aldhlan"
                                },
                                {
                                    "authorId": "2836785",
                                    "name": "Hamad Alreshidi"
                                }
                            ],
                            "year": 2021,
                            "venue": "Indian Journal of Science and Technology",
                            "n_citations": 2
                        },
                        "score": 0.939453125
                    },
                    {
                        "id": "(Plauska et al., 2014)",
                        "snippets": [
                            "Visual programming is a method to specify a program in a two (or more) dimensional fashion (Myers, 1986), whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification (Lee et al., 2011)."
                        ],
                        "paper": {
                            "corpus_id": 60941791,
                            "title": "Reflections on Using Robots and Visual Programming Environments for Project-Based Teaching",
                            "authors": [
                                {
                                    "authorId": "3102760",
                                    "name": "Ignas Plauska"
                                },
                                {
                                    "authorId": "69972564",
                                    "name": "R. Lukas"
                                },
                                {
                                    "authorId": null,
                                    "name": "Robertas Dama\u0161evi\u010dius"
                                }
                            ],
                            "year": 2014,
                            "venue": "",
                            "n_citations": 8
                        },
                        "score": 0.9453125
                    },
                    {
                        "id": "(Dawoud et al., 2021)",
                        "snippets": [
                            "Visual Programming reduces the need to write lond textual programs. Program thus have multiple dimensions not only the text (Laporte et al., 2016). The idea is that with visual constructs, it could have a better learning curve and be more appealing. \n\nFor example, with a robotic visual programming language, users can program the robot without writing a textual code and without significant knowledge of any programming language. Examples include Make Block1 and Open Roberta2 for programming different hardware systems using blocks. \n\nVisual programming languages have different several classes including block-based, diagrammatic, and iconic visual languages (Myers, 1990)."
                        ],
                        "paper": {
                            "corpus_id": 235234208,
                            "title": "Collaborative Coding in a Robotic Visual Language",
                            "authors": [
                                {
                                    "authorId": "2106215024",
                                    "name": "Farah Yasser Dawoud"
                                },
                                {
                                    "authorId": "143859112",
                                    "name": "A. Adel"
                                },
                                {
                                    "authorId": "2730794",
                                    "name": "Nada Sharaf"
                                }
                            ],
                            "year": 2021,
                            "venue": "International Conference on Computer Supported Education",
                            "n_citations": 1
                        },
                        "score": 0.90966796875
                    },
                    {
                        "id": "(Kodytek et al., 2024)",
                        "snippets": [
                            "Graphical programming refers to a category of programming languages that use visual representations, such as icons, symbols, diagrams, or other graphical elements, to facilitate the design and creation of software applications. Unlike traditional text-based programming languages, where the code, i.e., textual commands, are written in text editors or integrated development environments, graphical programming allows users to interactively create programs by manipulating and connecting graphical elements. Since graphical programming does not require a strong understanding of the language and its syntax, these languages are often designed to make programming more intuitive and accessible to non-programmers."
                        ],
                        "paper": {
                            "corpus_id": 268272915,
                            "title": "Automated code development based on genetic programming in graphical programming language: A pilot study",
                            "authors": [
                                {
                                    "authorId": "100971028",
                                    "name": "Pavel Kodytek"
                                },
                                {
                                    "authorId": "1910708525",
                                    "name": "Alexandra Bodzas"
                                },
                                {
                                    "authorId": "2290253497",
                                    "name": "Jan Zidek"
                                }
                            ],
                            "year": 2024,
                            "venue": "PLoS ONE",
                            "n_citations": 1
                        },
                        "score": 0.93603515625
                    }
                ],
                "format": "synthesis",
                "table": null,
                "model": "claude-3-7-sonnet-20250219"
            },
            {
                "title": "Types and Examples of Visual Programming Languages",
                "tldr": "Visual Programming Languages can be categorized into block-based, game development, dataflow, and educational VPLs. Popular examples include Scratch, Alice, App Inventor, Kodu Game Lab, and GameMaker, each serving specific educational purposes and application domains. (11 sources)",
                "text": "\nVisual Programming Languages (VPLs) come in several distinct types, each designed for specific audiences and purposes:\n\n## Block-Based Programming Languages\n* **Scratch**: A block-based VPL primarily designed for education that allows users to create applications by combining visual components with scripted functionalities. Users assemble pre-defined blocks (similar to Lego bricks) to define application logic, with access to media resources including graphics and sound effects <Paper corpusId=\"270526114\" paperTitle=\"(Ming et al., 2024)\" isShortName></Paper>. Scratch has been successfully integrated into mathematics education, promoting more meaningful and creative learning experiences <Paper corpusId=\"270526114\" paperTitle=\"(Ming et al., 2024)\" isShortName></Paper> <Paper corpusId=\"253005339\" paperTitle=\"(Silva et al., 2022)\" isShortName></Paper>.\n\n* **App Inventor**: A visual programming platform developed by MIT that enables users to create Android apps through a block-based interface. It's suitable for teaching programming in middle school, high school, and college settings <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>.\n\n* **Alice**: A 3D visual programming environment that allows users to create interactive games, animations, and videos. Alice has been used to introduce programming in middle schools across various subjects including math, science, language arts, and social studies <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>.\n\n* **PencilCode**: Another block-based programming environment with similar principles to Scratch but with its own unique features <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>.\n\n## Game Development VPLs\n* **Kodu Game Lab**: A 3D visual programming platform specifically designed for game development. Kodu uses concepts such as sight, hearing, and time to control character behavior in games, making it particularly effective for teaching programming to children <Paper corpusId=\"272639481\" paperTitle=\"(Meepung, 2024)\" isShortName></Paper>. It has been used to introduce children to programming at an early age while teaching problem-solving skills <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>.\n\n* **GameMaker**: A visual programming environment that has been successfully used to teach programming concepts to diverse age groups, including children, adolescents, adults, and senior citizens <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper> <Paper corpusId=\"1600632\" paperTitle=\"(Guimaraes et al., 2008)\" isShortName></Paper>. GameMaker may be particularly effective in engaging both genders, as research has shown women prefer computer games with creative components <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper>.\n\n## Historical and Other VPLs\n* **Logo**: One of the earliest visual programming languages, designed in 1967 by Feurzeig, Seymour and Cynthia Solomon specifically to introduce programming to children. Logo is famous for its turtle graphics, where commands for movement and drawing produced line or vector graphics <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>.\n\n* **Dataflow/Diagrammatic Programming**: Many VPLs follow the \"boxes and arrows\" paradigm, where screen objects are treated as entities connected by arrows, lines, or arcs representing relationships between program components <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper> <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>.\n\n* **Robot Programming VPLs**: Visual programming languages are increasingly being used in educational robotic environments, allowing users to program robots without extensive knowledge of traditional programming languages <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper>.\n\nEach of these VPLs is typically built on a text-based programming language (such as ActionScript, JavaScript, C#, Java, etc.), but users don't need to know these underlying languages to create programs <Paper corpusId=\"236336244\" paperTitle=\"(Daskalov et al., 2021)\" isShortName></Paper>. This abstraction is a key feature that makes VPLs accessible to beginners and non-programmers, as they use interfaces that eliminate syntax errors and focus on program logic rather than language syntax <Paper corpusId=\"62816171\" paperTitle=\"(Eguiluz et al., 2018)\" isShortName></Paper>.\n\nResearch has shown that visual programming environments are successful interventions for introducing programming to new students across various age groups <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper> <Paper corpusId=\"54038126\" paperTitle=\"(Siiman et al., 2014)\" isShortName></Paper>. These tools support the development of computational thinking skills, algorithmic thinking, and problem-solving abilities while making programming accessible and engaging for beginners <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>.",
                "citations": [
                    {
                        "id": "(Ming et al., 2024)",
                        "snippets": [
                            "Scratch is a visual programming language primarily designed for education. It uses a blockbased system, allowing users to create applications by combining visual components such as images, sounds, and videos with scripted functionalities. The logic of these applications is defined by assembling pre-defined blocks, similar to building with Lego bricks (Ford (Jr.), 2014; Stewart & Baek, 2023). Each block represents a specific command or action, guiding the application through various tasks. Additionally, Scratch provides a wide range of media resources, including graphics and sound effects, as well as features for designing personalized graphical and audio elements (Ford (Jr.), 2014). It offers a comprehensive environment that empowers users of all ages (Stewart & Baek, 2023). The intuitive visual programming language removes barriers, allowing beginners to easily dive into application development and receive immediate feedback on their creations (Ford (Jr.), 2014). This fosters a hands-on learning experience that helps users grasp fundamental programming concepts (Rose et al., 2017).\n\nBeyond being a programming language, Scratch is also a valuable pedagogical tool when integrated into different subject areas and learning environments (Stewart & Baek, 2023;Voinohovska & Doncheva, 2021;Resnick & Rusk, 2020). According to the study by Silva et al. (2022), integrating Scratch into mathematics education enhances the teaching and learning process. This approach promotes a more meaningful, creative, and playful learning experience, as reported by four Mathematics undergraduate students from a Federal Public Institution in the Midwest."
                        ],
                        "paper": {
                            "corpus_id": 270526114,
                            "title": "Mirror, Mirror, on The Wall, How Do We Measure What Our Students do in Scratch Programming?",
                            "authors": [
                                {
                                    "authorId": "2270269430",
                                    "name": "Goh Kok Ming"
                                },
                                {
                                    "authorId": "2306843847",
                                    "name": "Anuthra Sirisena"
                                },
                                {
                                    "authorId": "2235731262",
                                    "name": "Dayang Rafidah Syariff M. Fuad"
                                },
                                {
                                    "authorId": "2086538793",
                                    "name": "J. Juharyanto"
                                }
                            ],
                            "year": 2024,
                            "venue": "International Journal of Academic Research in Progressive Education and Development",
                            "n_citations": 0
                        },
                        "score": 0.912109375
                    },
                    {
                        "id": "(Silva et al., 2022)",
                        "snippets": [
                            "Este artigo apresenta uma pesquisa sobre o uso da linguagem de programa\u00e7\u00e3o Scratch, como poss\u00edvel ferramenta no processo de ensino e de aprendizagem de conceitos matem\u00e1ticos na forma\u00e7\u00e3o inicial de professores.\u00a0 Para o estudo, utilizou-se o Scratch que, al\u00e9m de desenvolver o pensamento computacional, possibilita ao professor trabalhar os conte\u00fados matem\u00e1ticos por meio de seus jogos, anima\u00e7\u00f5es e diversas outras atividades. Os dados emp\u00edricos foram constru\u00eddos com quatro estudantes da licenciatura em Matem\u00e1tica de uma Institui\u00e7\u00e3o P\u00fablica Federal do Centro-Oeste, por meio de question\u00e1rios, que foram socializados ao final de duas oficinas de constru\u00e7\u00e3o de jogos com o Scratch. Para compor os resultados, optou-se pela An\u00e1lise de Conte\u00fado de Bardin (2016). Constitu\u00edram-se como categorias: o trabalho e a intera\u00e7\u00e3o. Os resultados sugerem, na percep\u00e7\u00e3o dos licenciandos, que o uso do Scratch pode melhorar o processo de ensino e de aprendizagem da Matem\u00e1tica, tornando essa experi\u00eancia significativa, criativa e l\u00fadica."
                        ],
                        "paper": {
                            "corpus_id": 253005339,
                            "title": "A utiliza\u00e7\u00e3o do Scratch como ferramenta pedag\u00f3gica na percep\u00e7\u00e3o de quem ensinar\u00e1 matem\u00e1tica",
                            "authors": [
                                {
                                    "authorId": "2146549251",
                                    "name": "Jana\u00edna Mendes Pereira da Silva"
                                },
                                {
                                    "authorId": "133782099",
                                    "name": "C. Nogueira"
                                },
                                {
                                    "authorId": "2144852833",
                                    "name": "Regina da Silva Pina Neves"
                                },
                                {
                                    "authorId": "145953496",
                                    "name": "P. C. Silva"
                                }
                            ],
                            "year": 2022,
                            "venue": "Revista Brasileira de Ensino de Ci\u00eancia e Tecnologia",
                            "n_citations": 1
                        },
                        "score": 0
                    },
                    {
                        "id": "(Asad et al., 2016)",
                        "snippets": [
                            "Rodger et al. (2009) introduced the integration of the Alice 3D into middle school and designed lessons in math, science, languages arts, social studies, and technology. Alice is an innovative 3D visual programming environment with which users can create interactive games, animations, and videos. It is a free teaching tool designed to create object-oriented programming. Ben-Ari (2012) introduced Scratch as a visual programming interactive medium in order to support the development of computational thinking skills. (Wilson et al., 2009) introduced games-based learning, such as Scratch, and games-based construction into primary education to engage children at the primary level in developing computer programming skills. With Scratch, users can program interactive stories, games, and animations, which helps young people learn to think creatively. Stolee and Fristoe (2011) used Kodu Game Lab to introduce children to programming at an early age. Kodu is a 3D visual programming platform that can be used to teach creativity and problem solving, as well as programming. Ioannidou (2011) used games to support and develop computational thinking skills and to promote and increase opportunities for computer science education in the regular curriculum. Hero et.al. (2015) used the visual programming platform, MIT App, to increase interest and skills in computational practices. The visual programming platform, MIT App, enables users to create and design Android apps such as games, and more, and it can be used in various fields. MIT's App Inventor platform is used to learn how to program and create mobile apps. The materials available through the MIT App Inventor platform are suitable for teaching courses for middle school, high school, and college. Peluso and Sprechini (2012) used Alice to make a statement about the attitudes of high school student toward computer science. The students expressed their satisfaction with the use of Alice visual programming. The most common programming concepts gained from visual programming environments like Alice are loops (iteration), conditional statements that support problem solving, logic, reasoning and systematic thinking. We conclude that the development of educational visual programming environments like Alice, Scratch, Kodu, and Greenfoot, support the development of algorithmic thinking, and are effective for introducing primary school children to visual programming skills and concepts."
                        ],
                        "paper": {
                            "corpus_id": 63111506,
                            "title": "Primary School Pupils\u2019 Attitudes toward Learning Programming through Visual Interactive Environments",
                            "authors": [
                                {
                                    "authorId": "2521176",
                                    "name": "K. Asad"
                                },
                                {
                                    "authorId": "71281932",
                                    "name": "M. Tibi"
                                },
                                {
                                    "authorId": "2772208",
                                    "name": "J. Raiyn"
                                }
                            ],
                            "year": 2016,
                            "venue": "",
                            "n_citations": 24
                        },
                        "score": 0.94873046875
                    },
                    {
                        "id": "(Joao et al., 2019)",
                        "snippets": [
                            "In 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs.\n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39].\n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes.\n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41]."
                        ],
                        "paper": {
                            "corpus_id": 199002134,
                            "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers",
                            "authors": [
                                {
                                    "authorId": "2157028104",
                                    "name": "Piedade Jo\u00e3o"
                                },
                                {
                                    "authorId": "72582337",
                                    "name": "Dorotea Nuno"
                                },
                                {
                                    "authorId": "2157024771",
                                    "name": "Sampaio Ferrentini F\u00e1bio"
                                },
                                {
                                    "authorId": "144370033",
                                    "name": "P. ana"
                                }
                            ],
                            "year": 2019,
                            "venue": "Education sciences",
                            "n_citations": 23
                        },
                        "score": 0.947265625
                    },
                    {
                        "id": "(Meepung, 2024)",
                        "snippets": [
                            "A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly",
                            "Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users",
                            "Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills."
                        ],
                        "paper": {
                            "corpus_id": 272639481,
                            "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills",
                            "authors": [
                                {
                                    "authorId": "2128894602",
                                    "name": "Tippawan Meepung"
                                }
                            ],
                            "year": 2024,
                            "venue": "International Education Studies",
                            "n_citations": 0
                        },
                        "score": 0.97802734375
                    },
                    {
                        "id": "(Doman et al., 2015)",
                        "snippets": [
                            "Research has shown VPEs are successful interventions to introduce programming to new students (Siiman et al., 2014). GameMaker, in particular, has been successfully utilized to teach programming concepts to children, adolescents, adults, and senior citizens (Guimar\u00e3es et al., 2008)(Overmars, 2004). This tool may be especially useful in engaging both genders, as women show a preference for computer games with a creative, versus solely destructive, component (Chamillard, 2006)."
                        ],
                        "paper": {
                            "corpus_id": 55310713,
                            "title": "Effect of GameMaker on Student Attitudes and Perceptions of Instructors",
                            "authors": [
                                {
                                    "authorId": "38066480",
                                    "name": "M. Doman"
                                },
                                {
                                    "authorId": "46430396",
                                    "name": "M. Sleigh"
                                },
                                {
                                    "authorId": "48828482",
                                    "name": "C. Garrison"
                                }
                            ],
                            "year": 2015,
                            "venue": "",
                            "n_citations": 3
                        },
                        "score": 0.888671875
                    },
                    {
                        "id": "(Guimaraes et al., 2008)",
                        "snippets": [
                            "The computer game industry has exploded reaching sales of several billion dollars a year and, consequently, a majority of college students are familiar with the gaming environment. In fact, videogame development has been cited as one way to motivate students to explore the world of Computer Science. However, most videogames are extremely complex computer programs created by a team of developers including programmers and graphic artists and represent thousands of hours of work. Fortunately there are software tools available that provide a way for simple computer games to be created fairly easily using a building block approach. This paper discusses the successes and challenges of teaching a videogame design and development summer program using the software development tool, Game Maker, and from this experience examines how videogame development might be incorporated into a Computer Science curriculum. The first section provides an overview of the Game Maker program and outlines the material taught in the program. Observations of the most successful teaching methods and approaches utilized are also explored. We conclude with a discussion of where videogame design might best be suited in a Computer Science curriculum citing its attractiveness to non-Computer Science majors, its use as a way to introduce introductory programming concepts and as a way to help students learn to read code. While Game Maker is not sophisticated nor is it a substitute for teaching a standard programming language, it can be easily integrated into introductory Computer Science courses."
                        ],
                        "paper": {
                            "corpus_id": 1600632,
                            "title": "An exploratory overview of teaching computer game development",
                            "authors": [
                                {
                                    "authorId": "144654035",
                                    "name": "M. Guimar\u00e3es"
                                },
                                {
                                    "authorId": "4096538",
                                    "name": "M. Murray"
                                }
                            ],
                            "year": 2008,
                            "venue": "Journal of Computing Sciences in Colleges (JCSC; Formerly: Journal of Computing in Small Colleges)",
                            "n_citations": 11
                        },
                        "score": 0
                    },
                    {
                        "id": "(Daskalov et al., 2021)",
                        "snippets": [
                            "In computer science, a visual programming language (VPL) is any programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as syntax elements or secondary notation. \n\nMany VPLs [2] are based on the idea for boxes and arrows, where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. \n\nVPLs are not something new. Initially, the idea behind their development was to awake the passion for programming in children from an early age. For this reason, Feurzeig, Seymour and Cynthia Solomon designed the programming language Logo in 1967 [3]. Logo is famous for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on a screen or with a small robot termed a turtle. Later, blockbased VPL appeared (e.g. Scratch) [4], [5]. Scratch is a block-based VPL and website targeted primarily at children 8-16 as an educational tool for coding. Although Scratch is for beginners in programming, it is not as simple as functionality language. Other known VPLs for Scratch for Android are: Ardublock, GraspIO, ReactiveBlocks and AT&T Flow Designer. \n\nEach of these VPLs is built on a text-based programming language (such as ActionScript, JavaScript, C #, Java, etc.), which the user does not need to know to compile a program from the blocks of the VPL. \n\nMost VPLs are considered to be mainly for children's education or use by non-specialists."
                        ],
                        "paper": {
                            "corpus_id": 236336244,
                            "title": "Hybrid Visual Programming Language Environment for Programming Training",
                            "authors": [
                                {
                                    "authorId": "2666781",
                                    "name": "R. Daskalov"
                                },
                                {
                                    "authorId": "94696738",
                                    "name": "G. Pashev"
                                },
                                {
                                    "authorId": "2299512",
                                    "name": "Silvia N. Gaftandzhieva"
                                }
                            ],
                            "year": 2021,
                            "venue": "TEM Journal",
                            "n_citations": 2
                        },
                        "score": 0.9521484375
                    },
                    {
                        "id": "(Karaca et al., 2020)",
                        "snippets": [
                            "Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments.\n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers."
                        ],
                        "paper": {
                            "corpus_id": 227209010,
                            "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications",
                            "authors": [
                                {
                                    "authorId": "2069724711",
                                    "name": "Mustafa Karaca"
                                },
                                {
                                    "authorId": "2272032",
                                    "name": "U\u011fur Yayan"
                                }
                            ],
                            "year": 2020,
                            "venue": "arXiv.org",
                            "n_citations": 5
                        },
                        "score": 0.93505859375
                    },
                    {
                        "id": "(Eguiluz et al., 2018)",
                        "snippets": [
                            "It is also important that all these tools seek to avoid novice programmers having to confront the complexity of text-based computer coding and to improve the learnability [7]. There are several ways to address this problem such as narrative tools, flow-model tools, or specialized output realizations (8394893); in this chapter, we focus on the most common tools, which are those that use the block-based visual programming. These tools employ user interfaces based on visual blocks that are moved and placed constructively as an assembly game, usually with the visual abstraction of a puzzle with its pieces and fitting ways. These blocks work as an abstraction of programming components: sentences, data, control structures, procedures, and so on. Consequently, they considerably limit the prior knowledge required to program and reinforce the program structure, eliminating the possibility of syntax errors and focusing only on the logic that exists in the activity that is to be undertaken."
                        ],
                        "paper": {
                            "corpus_id": 62816171,
                            "title": "An Evaluation of Open Digital Gaming Platforms for Developing Computational Thinking Skills",
                            "authors": [
                                {
                                    "authorId": "38948497",
                                    "name": "A. Egu\u00edluz"
                                },
                                {
                                    "authorId": "2476416",
                                    "name": "P. Garaizar"
                                },
                                {
                                    "authorId": "3070661",
                                    "name": "M. Guenaga"
                                }
                            ],
                            "year": 2018,
                            "venue": "",
                            "n_citations": 15
                        },
                        "score": 0.927734375
                    },
                    {
                        "id": "(Siiman et al., 2014)",
                        "snippets": [
                            "Abstract \u2014This article reviews and analyses the educational research literature on interventions to I.increase the recruitment and retention of information and communications technology (ICT) students. The results show that three changes in computing pedagogy characterize successful interventions, and consequently offer promising ways to attract and prepare more people for careers in ICT. The most important selection criterion considered when choosing papers to review was that interventions had been tested in practice and their effectiveness measured. Interventions were arranged into two groups: recruitment and retention. Recruitment interventions described initiatives to motivate interest in computing among secondary schools students, whereas retention interventions described efforts to retain students in ICT majors at universities. The three pedagogical approaches that emerged from an analysis of the successful interventions were: (1) visual programming environments to teach introductory programming, (2) inquiry learning activities to engage students in computing, and (3) integration of interdisciplinary knowledge to attract students from diverse disciplines. This review draws attention to innovative teaching practices currently shaping computer science education. Wider adoption of these pedagogical strategies has the potential to significantly increase the number of qualified ICT professionals."
                        ],
                        "paper": {
                            "corpus_id": 54038126,
                            "title": "A Review of Interventions to Recruit and Retain ICT Students",
                            "authors": [
                                {
                                    "authorId": "2462457",
                                    "name": "L. Siiman"
                                },
                                {
                                    "authorId": "3222434",
                                    "name": "M. Pedaste"
                                },
                                {
                                    "authorId": "31881352",
                                    "name": "Eno T\u00f5nisson"
                                },
                                {
                                    "authorId": "37306732",
                                    "name": "R. Sell"
                                },
                                {
                                    "authorId": "29241908",
                                    "name": "Tomi Jaakkola"
                                },
                                {
                                    "authorId": "2604851",
                                    "name": "Dimitris Alimisis"
                                }
                            ],
                            "year": 2014,
                            "venue": "",
                            "n_citations": 16
                        },
                        "score": 0
                    }
                ],
                "format": "list",
                "table": null,
                "model": "claude-3-7-sonnet-20250219"
            },
            {
                "title": "Advantages for Beginners and Non-Programmers",
                "tldr": "Visual Programming Languages remove syntax barriers that often frustrate beginners, allowing them to focus on logic and problem-solving rather than complex language rules. They provide intuitive drag-and-drop interfaces that make programming more accessible, reduce cognitive load, and enable faster achievement of programming goals. (14 sources)",
                "text": "\nVisual Programming Languages (VPLs) offer numerous advantages that make programming significantly more accessible to beginners and non-programmers compared to traditional text-based languages. One of the most fundamental benefits is the elimination of syntax errors, which are a common frustration for novices. With VPLs, there are \"no forgotten parentheses and semicolons,\" allowing users to focus on developing algorithms and logic rather than troubleshooting syntax problems <Paper corpusId=\"227209010\" paperTitle=\"(Karaca et al., 2020)\" isShortName></Paper>. This shift in focus from syntax to semantics is crucial because traditional programming languages often require precise and complex syntax that is \"unfamiliar and unnatural for beginners\" <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper>.\n\nThe graphical user interfaces of VPLs transfer much of the programming burden from the user to the integrated development environment (IDE), \"making programming a user-friendlier task\" <Paper corpusId=\"11795228\" paperTitle=\"(Lucanin, 2012)\" isShortName></Paper>. Block-based programming, in particular, facilitates learning by reducing the cognitive load that would otherwise be required for textual programming <Paper corpusId=\"208615635\" paperTitle=\"(Chiazzese et al., 2019)\" isShortName></Paper>. This allows beginners to concentrate on the logic and structures involved in programming tasks rather than the challenges related to writing code.\n\nResearch has demonstrated the effectiveness of visual programming interfaces in making learning more efficient. Studies have shown that students using visual interfaces \"spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface\" <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper> <Paper corpusId=\"38535646\" paperTitle=\"(Saito et al., 2017)\" isShortName></Paper>. Visual programming also appears to induce \"a larger change in attitude toward programming,\" suggesting it can better motivate novice learners <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper> <Paper corpusId=\"38535646\" paperTitle=\"(Saito et al., 2017)\" isShortName></Paper>.\n\nThe intuitive nature of VPLs provides significant support for beginners. Visual block-based programming \"lowers the initial entry hurdles\" of conventional programming languages through drag-and-drop puzzle blocks <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper>. These languages often use visual cues, such as puzzle tabs, to indicate how blocks can be connected, preventing incorrect connections and eliminating syntax errors <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper>. Furthermore, many VPLs use icons that facilitate students' recognition of functions, such as commands, conditions, and loops <Paper corpusId=\"208615635\" paperTitle=\"(Chiazzese et al., 2019)\" isShortName></Paper>.\n\nThe accessibility of VPLs extends to specialized domains through Domain-Specific Languages (DSLs), which \"offer specific abstractions and notations that provide increased expressiveness over particular problem domains\" <Paper corpusId=\"264307073\" paperTitle=\"(Rozen, 2023)\" isShortName></Paper> <Paper corpusId=\"264769167\" paperTitle=\"(Deursen et al., 2000)\" isShortName></Paper>. This makes programming more relevant and applicable to non-programmers in fields such as banking, digital forensics, and game design.\n\nResearch comparing visual and textual programming languages indicates that students whose first programming language was visual performed better than those who started with textual languages, particularly when introduced at K-12 stages <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper>. Visual programming has been found to significantly improve students' understanding of computational concepts, logical thinking skills, and problem-solving abilities <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper> <Paper corpusId=\"55683453\" paperTitle=\"(Chou, 2018)\" isShortName></Paper>.\n\nThe block-based VPI paradigm has been shown to be \"effective in supporting novice programming learners\" <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>, and tools like Teachable Machine have successfully used visual interfaces to help students learn complex concepts such as training machine learning models <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper> <Paper corpusId=\"218482766\" paperTitle=\"(Carney et al., 2020)\" isShortName></Paper>.\n\nA significant advantage noted by educational researchers is that VPLs address a common teaching problem where \"the focus is too much on learning specific syntax or semantics rather than understanding the process\" <Paper corpusId=\"248387201\" paperTitle=\"(Kaivo et al., 2024)\" isShortName></Paper>. When students understand the process of coding through visual programming, they can construct more meaningful programs and exercise greater creativity, focusing on ideas rather than technical limitations <Paper corpusId=\"248387201\" paperTitle=\"(Kaivo et al., 2024)\" isShortName></Paper> <Paper corpusId=\"6485878\" paperTitle=\"(Przybylla et al., 2014)\" isShortName></Paper>.",
                "citations": [
                    {
                        "id": "(Karaca et al., 2020)",
                        "snippets": [
                            "Visual programming languages (VPLs) provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers. VPL is a new trend for educational robotic environments.\n\nA visual programming language is any programming language that allow users create programs by manipulating program elements graphically rather than by specifying them textually and VPL is a new trend for educational robotic environments [1]. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols used either as elements of syntax or secondary notation. For example, many VPLs (known as dataflow or diagrammatic programming) [2] are based on the idea of \"boxes and arrows\", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations. Visual programming languages provide coding without typing texts. VPL makes coding easy to programmers with automatically adding usually used some code structure. Beginners in coding have generally two main challenges; transforming ideas into logical expressions and syntax errors. Syntax errors are impossible with VPLs because of there is no forgotten parentheses and semicolons. VPLs provide to focus on algorithm for programmers."
                        ],
                        "paper": {
                            "corpus_id": 227209010,
                            "title": "ROS Based Visual Programming Tool for Mobile Robot Education and Applications",
                            "authors": [
                                {
                                    "authorId": "2069724711",
                                    "name": "Mustafa Karaca"
                                },
                                {
                                    "authorId": "2272032",
                                    "name": "U\u011fur Yayan"
                                }
                            ],
                            "year": 2020,
                            "venue": "arXiv.org",
                            "n_citations": 5
                        },
                        "score": 0.93505859375
                    },
                    {
                        "id": "(Chiu, 2020)",
                        "snippets": [
                            "Traditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming (Denny et al., 2011)- (Denny et al., 2012). Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions. Study by (Price et al., 2015) indicated that students who used the visual interface for programming spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface for programming. Saito, Washizaki, and Fukazawa also compared the learning effects of text-based and visual-based programming and found that visual-based programming induces a larger change in attitude toward programming (Saito et al., 2017). Therefore, research results suggest that visual-based programming is advantageous in a programming implementation environment for novice programmers."
                        ],
                        "paper": {
                            "corpus_id": 212726996,
                            "title": "Facilitating K-12 Teachers in Creating Apps by Visual Programming and Project-based Learning",
                            "authors": [
                                {
                                    "authorId": "2111748",
                                    "name": "Chiung-Fang Chiu"
                                }
                            ],
                            "year": 2020,
                            "venue": "International Journal of Emerging Technologies in Learning (iJET)",
                            "n_citations": 40
                        },
                        "score": 0.9560546875
                    },
                    {
                        "id": "(Lucanin, 2012)",
                        "snippets": [
                            "Luckily, graphical user interfaces has made a lot of tasks on computers easier to perform and out of the belief that creating computer programs can also be one of them, visual programming languages (VPLs) have emerged. The goal in VPLs is to shift more work from the programmer to the integrated development environment (IDE), making programming an user-friendlier task."
                        ],
                        "paper": {
                            "corpus_id": 11795228,
                            "title": "Visual definition of procedures for automatic virtual scene generation",
                            "authors": [
                                {
                                    "authorId": "3352207",
                                    "name": "Dra\u017een Lu\u010danin"
                                }
                            ],
                            "year": 2012,
                            "venue": "arXiv.org",
                            "n_citations": 1
                        },
                        "score": 0.9287109375
                    },
                    {
                        "id": "(Chiazzese et al., 2019)",
                        "snippets": [
                            "Block programming is based on drag and drop of consecutive visual tiles on the editing area to compose different instructions; first of all, it facilitates the learning of programming skills because of a reduction in the cognitive load potentially required for textual programming (Weintrop et al., 2015)(Weintrop et al., 2017). Moreover, Kelleher, and Pausch (Kelleher et al., 2005) recognize further advantages in the use of visual programming for novice learners. Indeed, the visual block-based instruction is built using icons that facilitate students' recognition of its function, such as commands, conditions, and loops. Accordingly, visual programming allows students to focus their attention more on the logic and structures involved in programming tasks than in challenges related to writing code."
                        ],
                        "paper": {
                            "corpus_id": 208615635,
                            "title": "Educational Robotics in Primary School: Measuring the Development of Computational Thinking Skills with the Bebras Tasks",
                            "authors": [
                                {
                                    "authorId": "1985775",
                                    "name": "G. Chiazzese"
                                },
                                {
                                    "authorId": "33520169",
                                    "name": "M. Arrigo"
                                },
                                {
                                    "authorId": "3344445",
                                    "name": "Antonella Chifari"
                                },
                                {
                                    "authorId": "1770175",
                                    "name": "Violetta Lonati"
                                },
                                {
                                    "authorId": "26632478",
                                    "name": "Crispino Tosto"
                                }
                            ],
                            "year": 2019,
                            "venue": "Informatics",
                            "n_citations": 64
                        },
                        "score": 0.9326171875
                    },
                    {
                        "id": "(Saito et al., 2017)",
                        "snippets": [
                            "Findings The following results are revealed: (1) The visual input method induces a larger change in attitude toward programming. (2) The number of operations and input quantity influence both groups. (3) The overall results suggest that a visual input is advantageous in a programming implementation environment for first learners."
                        ],
                        "paper": {
                            "corpus_id": 38535646,
                            "title": "Comparison of Text-Based and Visual-Based Programming Input Methods for First-Time Learners",
                            "authors": [
                                {
                                    "authorId": "2064115776",
                                    "name": "Daisuke Saito"
                                },
                                {
                                    "authorId": "1794290",
                                    "name": "H. Washizaki"
                                },
                                {
                                    "authorId": "1759835",
                                    "name": "Y. Fukazawa"
                                }
                            ],
                            "year": 2017,
                            "venue": "J. Inf. Technol. Educ. Res.",
                            "n_citations": 18
                        },
                        "score": 0
                    },
                    {
                        "id": "(DeLozier et al., 2023)",
                        "snippets": [
                            "Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13].\n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]."
                        ],
                        "paper": {
                            "corpus_id": 259335765,
                            "title": "Using Visual Programming Games to Study Novice Programmers",
                            "authors": [
                                {
                                    "authorId": "39722092",
                                    "name": "Christian DeLozier"
                                },
                                {
                                    "authorId": "38203562",
                                    "name": "James Shey"
                                }
                            ],
                            "year": 2023,
                            "venue": "Int. J. Serious Games",
                            "n_citations": 6
                        },
                        "score": 0.947265625
                    },
                    {
                        "id": "(Rozen, 2023)",
                        "snippets": [
                            "Visual programming environments have the potential to make programming more accessible to programmers of all backgrounds and skill levels. For instance, Domain-Specific Languages (DSLs) have been shown to help non-programmers raise their productivity, and improve the quality of their work (Deursen et al., 2000). DSLs offer specific abstractions and notations that provide increased expressiveness over particular problem domains, e.g., banking, digital forensics and game design."
                        ],
                        "paper": {
                            "corpus_id": 264307073,
                            "title": "Game Engine Wizardry for Programming Mischief",
                            "authors": [
                                {
                                    "authorId": "2163321",
                                    "name": "Riemer van Rozen"
                                }
                            ],
                            "year": 2023,
                            "venue": "PAINT@SPLASH",
                            "n_citations": 4
                        },
                        "score": 0.9169921875
                    },
                    {
                        "id": "(Deursen et al., 2000)",
                        "snippets": [
                            "We survey the literature available on the topic of domain-specific languages as used for the construction and maintenance of software systems. We list a selection of 75 key publications in the area, and provide a summary for each of the papers. Moreover, we discuss terminology, risks and benefits, example domain-specific languages, design methodologies, and implementation techniques."
                        ],
                        "paper": {
                            "corpus_id": 264769167,
                            "title": "Domain-specific languages: an annotated bibliography",
                            "authors": [
                                {
                                    "authorId": "1737202",
                                    "name": "A. Deursen"
                                },
                                {
                                    "authorId": "2257221078",
                                    "name": "P. Klint"
                                },
                                {
                                    "authorId": "2263636981",
                                    "name": "Joost Visser"
                                }
                            ],
                            "year": 2000,
                            "venue": "SIGP",
                            "n_citations": 496
                        },
                        "score": 0
                    },
                    {
                        "id": "(Zhu et al., 2023)",
                        "snippets": [
                            "Some of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace. Thus, novice CS learners can focus on the computational concepts and logic without being bothered by the syntax (Bau et al., 2017;(Kelleher et al., 2005). Some research argues that visual programming languages might be more appropriate for novice learners as they are easier to learn (Bau et al., 2017;Chen et al., 2020;(Malan et al., 2007). For example, Chen et al. (2020) analyzed data from 10,000 undergraduate students who enrolled in CS courses and found that students whose first programming language was visual performed better than did students whose first programming language was textual when the programming languages were first introduced in K-12 stages. Moreover, the visual languages and environments provide scaffolds and enable knowledge transfer. Research indicates that visual programming languages are used in K-12 CT education. For example, (Hsu et al., 2018) and Lockwood and Mooney (2017) find that many schools have utilized visual programming languages to teach CT skills. Other studies indicate that using visual programming languages to teach students CT skills is effective in elementary education (The Horizon Report, 2017). Application of visual program languages in K-12 CS education is found to significantly improve students' understanding of computational concepts and computation practices (S\u00e1ez-L\u00f3pez et al., 2016), logical thinking skills (Lindh et al., 2007), and problem-solving skills in general (Chou, 2018)."
                        ],
                        "paper": {
                            "corpus_id": 264371146,
                            "title": "Core competencies of K-12 computer science education from the perspectives of college faculties and K-12 teachers",
                            "authors": [
                                {
                                    "authorId": "2260904421",
                                    "name": "Meina Zhu"
                                },
                                {
                                    "authorId": "2119129129",
                                    "name": "Cheng Wang"
                                }
                            ],
                            "year": 2023,
                            "venue": "International Journal of Computer Science Education in Schools",
                            "n_citations": 3
                        },
                        "score": 0.89697265625
                    },
                    {
                        "id": "(Chou, 2018)",
                        "snippets": [
                            "This study investigated elementary school students\u2019 learning performances and behaviors in a maker education program. An informal after-school learning environment entitled Robot MakerSpace was created at a public elementary school in Taiwan and 30 grade 5 students voluntarily participated in a 16-week educational experiment. The student participants were randomly divided into two experimental groups. Students in the maker group received weekly educational robotics lessons, whereas those in the nonmaker group only engaged in other after-school learning activities such as homework practice in traditional classrooms. Mixed methods research was used for data collection. An experiment with a pretest\u2013posttest and control group design was employed to measure the students\u2019 electrical engineering and computer programming content knowledge and problem-solving skills. In addition, a qualitative approach with an emphasis on filed observation was adopted to evaluate the instructional implementation of the maker education program. The quantitative findings revealed that maker education training significantly improved the electrical engineering and computer programming content knowledge of the students and improved their problem-solving skills. The qualitative findings showed the students required considerable learning support from the instructor such as strategies for software and hardware debugging."
                        ],
                        "paper": {
                            "corpus_id": 55683453,
                            "title": "Skill Development and Knowledge Acquisition Cultivated by Maker Education: Evidence from Arduino-based Educational Robotics",
                            "authors": [
                                {
                                    "authorId": "3233604",
                                    "name": "Pao-Nan Chou"
                                }
                            ],
                            "year": 2018,
                            "venue": "Eurasia Journal of Mathematics, Science and Technology Education",
                            "n_citations": 48
                        },
                        "score": 0
                    },
                    {
                        "id": "(Lin et al., 2023)",
                        "snippets": [
                            "Visual programming interfaces (VPIs) have been extensively studied as tools to aid users in designing and implementing systems through graphical elements rather than text-based code [31]. A key benefit of VPIs is their lower entry barrier for novice programmers [45]. There are primarily two main paradigms for VPIs. The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph. Pioneering work in this area includes Prograph [17] and LabVIEW [27]. The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together. Notable works in this area include Scratch [35] and Blockly [19]. Many commercial creative applications have adopted VPIs, including game engines such as Unity [11], CAD tools such as Grasshopper [9], and multimedia development tools such as Max/MSP [12].\n\nVPI concepts have been applied to machine learning applications. For example, Teachable Machine [15] uses a visual interface to help students learn to train a machine learning model",
                            "First, our tool leverages a block-based VPI paradigm, which has been shown to be effective in supporting novice programming learners [35]."
                        ],
                        "paper": {
                            "corpus_id": 269747039,
                            "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models",
                            "authors": [
                                {
                                    "authorId": "2106412318",
                                    "name": "David Chuan-En Lin"
                                },
                                {
                                    "authorId": "3111790",
                                    "name": "Nikolas Martelaro"
                                }
                            ],
                            "year": 2023,
                            "venue": "International Conference on Human Factors in Computing Systems",
                            "n_citations": 18
                        },
                        "score": 0.9384765625
                    },
                    {
                        "id": "(Carney et al., 2020)",
                        "snippets": [
                            "Teachable Machine (teachablemachine.withgoogle.com) is a web-based GUI tool for creating custom machine learning classification models without specialized technical expertise. (Machine learning, or ML, lets systems learn to analyze data without being explicitly programmed.) We created it to help students, teachers, designers, and others learn about ML by creating and using their own classification models. Its broad uptake suggests it has empowered people to learn, teach, and explore ML concepts: People have created curriculum, tutorials, and other resources using Teachable Machine on topics like AI ethics at institutions including the Stanford d.school, NYU's Interactive Telecommunications Program, the MIT Media Lab, as well as creative experiments. Users in 201 countries have created over 125,000 classification models. Here we outline the project and its key contributions of (1) a flexible, approachable interface for ML classification models without ML or coding expertise, (2) a set of technical and design decisions that can inform future interactive machine learning tools, and (3) an example of how structured learning content surrounding the tool supports people accessing ML concepts."
                        ],
                        "paper": {
                            "corpus_id": 218482766,
                            "title": "Teachable Machine: Approachable Web-Based Tool for Exploring Machine Learning Classification",
                            "authors": [
                                {
                                    "authorId": "1664904153",
                                    "name": "Michelle Carney"
                                },
                                {
                                    "authorId": "72500270",
                                    "name": "Barron Webster"
                                },
                                {
                                    "authorId": "2062749837",
                                    "name": "Irene Alvarado"
                                },
                                {
                                    "authorId": "2056288455",
                                    "name": "Kyle Phillips"
                                },
                                {
                                    "authorId": "39707815",
                                    "name": "Noura Howell"
                                },
                                {
                                    "authorId": "2055443643",
                                    "name": "Jordan Griffith"
                                },
                                {
                                    "authorId": "153631211",
                                    "name": "J. Jongejan"
                                },
                                {
                                    "authorId": "2156576",
                                    "name": "Amit Pitaru"
                                },
                                {
                                    "authorId": "2116403860",
                                    "name": "Alexander Chen"
                                }
                            ],
                            "year": 2020,
                            "venue": "CHI Extended Abstracts",
                            "n_citations": 237
                        },
                        "score": 0
                    },
                    {
                        "id": "(Kaivo et al., 2024)",
                        "snippets": [
                            "Visual programming tools have been developed to help with these challenges and aim to make programming more accessible for non-technical students. However, the differences between visual programming and traditional text-based programming are considerably extensive. Visual programming languages simplify procedures and guide the user through the creation, for example, with blocks that snap together or use colour-coding. (Vihavainen et al., 2011) noticed that a common problem when teaching text-based programming languages is that the focus is too much on learning specific syntax or semantics rather than understanding the process. When students understand the process of coding, they can construct more meaningful programs. Also, (Przybylla et al., 2014) assert that physical computing encourages learners to use their imagination and creativity, focusing more on ideas, not on technical limitation. Physical computing takes a hands-on approach to understand computational thinking, building tangible artefacts to visualise the abstract programming concepts."
                        ],
                        "paper": {
                            "corpus_id": 248387201,
                            "title": "Designing activities and tools to support university students' creative and collaborative exploration of physical computing",
                            "authors": [
                                {
                                    "authorId": "151119319",
                                    "name": "Melissa Kaivo"
                                },
                                {
                                    "authorId": "1710284",
                                    "name": "David Cuartielles"
                                },
                                {
                                    "authorId": "3167385",
                                    "name": "Daniel Spikol"
                                }
                            ],
                            "year": 2024,
                            "venue": "Networked Learning Conference",
                            "n_citations": 0
                        },
                        "score": 0.89111328125
                    },
                    {
                        "id": "(Przybylla et al., 2014)",
                        "snippets": [
                            "Physical computing covers the design and realization of interactive objects and instal- lations and allows students to develop concrete, tangible products of the real world, which arise from the learners' imagination. This can be used in computer science education to provide students with interesting and motivating access to the different topic areas of the subject in construction- ist and creative learning environments. To make many existing activities and examples of such project ideas available for classroom use and to expand the topic areas suitable for learning in such environments beyond introductory to programming, a physical computing syllabus for computer science courses in general education schools has been developed. In this paper the methods and different perspectives that were taken into account are presented. The resulting syllabus can be used to develop a constructionist computer science curriculum with physical computing."
                        ],
                        "paper": {
                            "corpus_id": 6485878,
                            "title": "Physical Computing and its Scope - Towards a Constructionist Computer Science Curriculum with Physical Computing",
                            "authors": [
                                {
                                    "authorId": "1923328",
                                    "name": "M. Przybylla"
                                },
                                {
                                    "authorId": "1711129",
                                    "name": "R. Romeike"
                                }
                            ],
                            "year": 2014,
                            "venue": "Informatics Educ.",
                            "n_citations": 86
                        },
                        "score": 0
                    }
                ],
                "format": "synthesis",
                "table": null,
                "model": "claude-3-7-sonnet-20250219"
            },
            {
                "title": "Educational Applications and Effectiveness",
                "tldr": "Visual Programming Languages have been successfully deployed across educational settings from preschool to college, improving students' computational thinking, problem-solving abilities, and attitudes toward programming. Research demonstrates that VPLs help students perform better and complete learning goals more efficiently than text-based approaches. (21 sources)",
                "text": "\nVisual Programming Languages (VPLs) have been successfully implemented across various educational levels, from preschool and elementary school <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper> to high school and college <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper>. Their flexibility makes them valuable teaching tools across this wide age spectrum, providing an accessible entry point for learning computational concepts and programming principles.\n\nThe educational applications of VPLs are extensive and diverse. In middle schools, tools like Alice have been integrated across multiple subjects including mathematics, science, language arts, and social studies <Paper corpusId=\"63111506\" paperTitle=\"(Asad et al., 2016)\" isShortName></Paper>. Scratch has been effectively incorporated into mathematics education, promoting more meaningful and creative learning experiences <Paper corpusId=\"270526114\" paperTitle=\"(Ming et al., 2024)\" isShortName></Paper> <Paper corpusId=\"253005339\" paperTitle=\"(Silva et al., 2022)\" isShortName></Paper>. In game development education, tools like Kodu Game Lab help teach programming at an early age while developing problem-solving skills <Paper corpusId=\"272639481\" paperTitle=\"(Meepung, 2024)\" isShortName></Paper> <Paper corpusId=\"237618637\" paperTitle=\"(Miller et al., 2021)\" isShortName></Paper>.\n\nResearch consistently demonstrates the effectiveness of VPLs in educational settings. Studies show that students using visual programming interfaces \"spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface\" <Paper corpusId=\"199002134\" paperTitle=\"(Joao et al., 2019)\" isShortName></Paper>. Meta-analysis of multiple studies confirms that interventions using VPLs like Scratch are \"especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code\" <Paper corpusId=\"264168616\" paperTitle=\"(Wen et al., 2023)\" isShortName></Paper>.\n\nThe educational benefits of VPLs are substantial and well-documented. They significantly improve students' understanding of computational concepts <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper> <Paper corpusId=\"225393741\" paperTitle=\"(Mladenovic et al., 2020)\" isShortName></Paper>, enhance logical thinking skills <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper> <Paper corpusId=\"55683453\" paperTitle=\"(Chou, 2018)\" isShortName></Paper>, develop problem-solving abilities <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper>, and increase computational thinking skills <Paper corpusId=\"249048171\" paperTitle=\"(Wang et al., 2022)\" isShortName></Paper>. Block-based VPLs like Scratch have been found to be particularly effective in supporting novice programming learners <Paper corpusId=\"257145390\" paperTitle=\"(Chen et al., 2023)\" isShortName></Paper> <Paper corpusId=\"235749050\" paperTitle=\"(Zheng et al., 2021)\" isShortName></Paper> <Paper corpusId=\"237732833\" paperTitle=\"(Xiang et al., 2021)\" isShortName></Paper>.\n\nResearch comparing visual and textual programming languages indicates that students whose first programming language was visual performed better than those who started with textual languages, particularly when introduced at K-12 stages <Paper corpusId=\"264371146\" paperTitle=\"(Zhu et al., 2023)\" isShortName></Paper> <Paper corpusId=\"225492990\" paperTitle=\"(Hu et al., 2020)\" isShortName></Paper>. This advantage stems from VPLs' ability to help students focus on developing and designing programs without being hindered by syntax constraints <Paper corpusId=\"249048171\" paperTitle=\"(Wang et al., 2022)\" isShortName></Paper>.\n\nVisual programming tools have also proven successful in introducing programming concepts to diverse age groups and demographics. GameMaker, for instance, has been effectively used to teach programming to children, adolescents, adults, and senior citizens <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper> <Paper corpusId=\"1600632\" paperTitle=\"(Guimaraes et al., 2008)\" isShortName></Paper>. These tools may be particularly effective in engaging both genders, as research has shown women prefer computer games with creative components <Paper corpusId=\"55310713\" paperTitle=\"(Doman et al., 2015)\" isShortName></Paper>.\n\nThe adoption of visual programming in education is growing globally, with many countries now incorporating computational thinking and programming into their curricula starting from the earliest grades <Paper corpusId=\"235383033\" paperTitle=\"(Papadakis, 2021)\" isShortName></Paper> <Paper corpusId=\"69960068\" paperTitle=\"(Lindberg et al., 2018)\" isShortName></Paper>. Tools like Scratch, App Inventor, and Kodu are increasingly being used to introduce students to programming concepts in fun and engaging ways, making advanced technology more accessible to beginners <Paper corpusId=\"68068900\" paperTitle=\"(Bai et al., 2019)\" isShortName></Paper>. This trend reflects recognition of VPLs' ability to make programming more accessible while developing valuable computational thinking skills that are increasingly important in today's technology-driven world.",
                "citations": [
                    {
                        "id": "(DeLozier et al., 2023)",
                        "snippets": [
                            "Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13].\n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]."
                        ],
                        "paper": {
                            "corpus_id": 259335765,
                            "title": "Using Visual Programming Games to Study Novice Programmers",
                            "authors": [
                                {
                                    "authorId": "39722092",
                                    "name": "Christian DeLozier"
                                },
                                {
                                    "authorId": "38203562",
                                    "name": "James Shey"
                                }
                            ],
                            "year": 2023,
                            "venue": "Int. J. Serious Games",
                            "n_citations": 6
                        },
                        "score": 0.947265625
                    },
                    {
                        "id": "(Zhu et al., 2023)",
                        "snippets": [
                            "Some of the visual programming languages, such as Scratch and Alice, are block-based languages in the programming environments, of which students can drag and drop coding blocks to the workspace. Thus, novice CS learners can focus on the computational concepts and logic without being bothered by the syntax (Bau et al., 2017;(Kelleher et al., 2005). Some research argues that visual programming languages might be more appropriate for novice learners as they are easier to learn (Bau et al., 2017;Chen et al., 2020;(Malan et al., 2007). For example, Chen et al. (2020) analyzed data from 10,000 undergraduate students who enrolled in CS courses and found that students whose first programming language was visual performed better than did students whose first programming language was textual when the programming languages were first introduced in K-12 stages. Moreover, the visual languages and environments provide scaffolds and enable knowledge transfer. Research indicates that visual programming languages are used in K-12 CT education. For example, (Hsu et al., 2018) and Lockwood and Mooney (2017) find that many schools have utilized visual programming languages to teach CT skills. Other studies indicate that using visual programming languages to teach students CT skills is effective in elementary education (The Horizon Report, 2017). Application of visual program languages in K-12 CS education is found to significantly improve students' understanding of computational concepts and computation practices (S\u00e1ez-L\u00f3pez et al., 2016), logical thinking skills (Lindh et al., 2007), and problem-solving skills in general (Chou, 2018)."
                        ],
                        "paper": {
                            "corpus_id": 264371146,
                            "title": "Core competencies of K-12 computer science education from the perspectives of college faculties and K-12 teachers",
                            "authors": [
                                {
                                    "authorId": "2260904421",
                                    "name": "Meina Zhu"
                                },
                                {
                                    "authorId": "2119129129",
                                    "name": "Cheng Wang"
                                }
                            ],
                            "year": 2023,
                            "venue": "International Journal of Computer Science Education in Schools",
                            "n_citations": 3
                        },
                        "score": 0.89697265625
                    },
                    {
                        "id": "(Asad et al., 2016)",
                        "snippets": [
                            "Rodger et al. (2009) introduced the integration of the Alice 3D into middle school and designed lessons in math, science, languages arts, social studies, and technology. Alice is an innovative 3D visual programming environment with which users can create interactive games, animations, and videos. It is a free teaching tool designed to create object-oriented programming. Ben-Ari (2012) introduced Scratch as a visual programming interactive medium in order to support the development of computational thinking skills. (Wilson et al., 2009) introduced games-based learning, such as Scratch, and games-based construction into primary education to engage children at the primary level in developing computer programming skills. With Scratch, users can program interactive stories, games, and animations, which helps young people learn to think creatively. Stolee and Fristoe (2011) used Kodu Game Lab to introduce children to programming at an early age. Kodu is a 3D visual programming platform that can be used to teach creativity and problem solving, as well as programming. Ioannidou (2011) used games to support and develop computational thinking skills and to promote and increase opportunities for computer science education in the regular curriculum. Hero et.al. (2015) used the visual programming platform, MIT App, to increase interest and skills in computational practices. The visual programming platform, MIT App, enables users to create and design Android apps such as games, and more, and it can be used in various fields. MIT's App Inventor platform is used to learn how to program and create mobile apps. The materials available through the MIT App Inventor platform are suitable for teaching courses for middle school, high school, and college. Peluso and Sprechini (2012) used Alice to make a statement about the attitudes of high school student toward computer science. The students expressed their satisfaction with the use of Alice visual programming. The most common programming concepts gained from visual programming environments like Alice are loops (iteration), conditional statements that support problem solving, logic, reasoning and systematic thinking. We conclude that the development of educational visual programming environments like Alice, Scratch, Kodu, and Greenfoot, support the development of algorithmic thinking, and are effective for introducing primary school children to visual programming skills and concepts."
                        ],
                        "paper": {
                            "corpus_id": 63111506,
                            "title": "Primary School Pupils\u2019 Attitudes toward Learning Programming through Visual Interactive Environments",
                            "authors": [
                                {
                                    "authorId": "2521176",
                                    "name": "K. Asad"
                                },
                                {
                                    "authorId": "71281932",
                                    "name": "M. Tibi"
                                },
                                {
                                    "authorId": "2772208",
                                    "name": "J. Raiyn"
                                }
                            ],
                            "year": 2016,
                            "venue": "",
                            "n_citations": 24
                        },
                        "score": 0.94873046875
                    },
                    {
                        "id": "(Ming et al., 2024)",
                        "snippets": [
                            "Scratch is a visual programming language primarily designed for education. It uses a blockbased system, allowing users to create applications by combining visual components such as images, sounds, and videos with scripted functionalities. The logic of these applications is defined by assembling pre-defined blocks, similar to building with Lego bricks (Ford (Jr.), 2014; Stewart & Baek, 2023). Each block represents a specific command or action, guiding the application through various tasks. Additionally, Scratch provides a wide range of media resources, including graphics and sound effects, as well as features for designing personalized graphical and audio elements (Ford (Jr.), 2014). It offers a comprehensive environment that empowers users of all ages (Stewart & Baek, 2023). The intuitive visual programming language removes barriers, allowing beginners to easily dive into application development and receive immediate feedback on their creations (Ford (Jr.), 2014). This fosters a hands-on learning experience that helps users grasp fundamental programming concepts (Rose et al., 2017).\n\nBeyond being a programming language, Scratch is also a valuable pedagogical tool when integrated into different subject areas and learning environments (Stewart & Baek, 2023;Voinohovska & Doncheva, 2021;Resnick & Rusk, 2020). According to the study by Silva et al. (2022), integrating Scratch into mathematics education enhances the teaching and learning process. This approach promotes a more meaningful, creative, and playful learning experience, as reported by four Mathematics undergraduate students from a Federal Public Institution in the Midwest."
                        ],
                        "paper": {
                            "corpus_id": 270526114,
                            "title": "Mirror, Mirror, on The Wall, How Do We Measure What Our Students do in Scratch Programming?",
                            "authors": [
                                {
                                    "authorId": "2270269430",
                                    "name": "Goh Kok Ming"
                                },
                                {
                                    "authorId": "2306843847",
                                    "name": "Anuthra Sirisena"
                                },
                                {
                                    "authorId": "2235731262",
                                    "name": "Dayang Rafidah Syariff M. Fuad"
                                },
                                {
                                    "authorId": "2086538793",
                                    "name": "J. Juharyanto"
                                }
                            ],
                            "year": 2024,
                            "venue": "International Journal of Academic Research in Progressive Education and Development",
                            "n_citations": 0
                        },
                        "score": 0.912109375
                    },
                    {
                        "id": "(Silva et al., 2022)",
                        "snippets": [
                            "Este artigo apresenta uma pesquisa sobre o uso da linguagem de programa\u00e7\u00e3o Scratch, como poss\u00edvel ferramenta no processo de ensino e de aprendizagem de conceitos matem\u00e1ticos na forma\u00e7\u00e3o inicial de professores.\u00a0 Para o estudo, utilizou-se o Scratch que, al\u00e9m de desenvolver o pensamento computacional, possibilita ao professor trabalhar os conte\u00fados matem\u00e1ticos por meio de seus jogos, anima\u00e7\u00f5es e diversas outras atividades. Os dados emp\u00edricos foram constru\u00eddos com quatro estudantes da licenciatura em Matem\u00e1tica de uma Institui\u00e7\u00e3o P\u00fablica Federal do Centro-Oeste, por meio de question\u00e1rios, que foram socializados ao final de duas oficinas de constru\u00e7\u00e3o de jogos com o Scratch. Para compor os resultados, optou-se pela An\u00e1lise de Conte\u00fado de Bardin (2016). Constitu\u00edram-se como categorias: o trabalho e a intera\u00e7\u00e3o. Os resultados sugerem, na percep\u00e7\u00e3o dos licenciandos, que o uso do Scratch pode melhorar o processo de ensino e de aprendizagem da Matem\u00e1tica, tornando essa experi\u00eancia significativa, criativa e l\u00fadica."
                        ],
                        "paper": {
                            "corpus_id": 253005339,
                            "title": "A utiliza\u00e7\u00e3o do Scratch como ferramenta pedag\u00f3gica na percep\u00e7\u00e3o de quem ensinar\u00e1 matem\u00e1tica",
                            "authors": [
                                {
                                    "authorId": "2146549251",
                                    "name": "Jana\u00edna Mendes Pereira da Silva"
                                },
                                {
                                    "authorId": "133782099",
                                    "name": "C. Nogueira"
                                },
                                {
                                    "authorId": "2144852833",
                                    "name": "Regina da Silva Pina Neves"
                                },
                                {
                                    "authorId": "145953496",
                                    "name": "P. C. Silva"
                                }
                            ],
                            "year": 2022,
                            "venue": "Revista Brasileira de Ensino de Ci\u00eancia e Tecnologia",
                            "n_citations": 1
                        },
                        "score": 0
                    },
                    {
                        "id": "(Meepung, 2024)",
                        "snippets": [
                            "A Visual Programming Language (VPL) is a type of programming language that allows users to create programs by manipulating program elements graphically rather than by specifying them textually. VPLs are designed to be more intuitive and accessible, especially for beginners or those without extensive programming experience. VPLs, such as Kodu Game Lab, are particularly effective for game development, providing a basis derived from gaming situations. In Kodu Game Lab, games are expressed physically using concepts such as sight, hearing, and time to control a character's behavior. While not as general-purpose as traditional programming languages, Kodu Game Lab can express advanced game design concepts simply and straightforwardly",
                            "Kodu use a visual programming language, where users create game logic by connecting visual elements or blocks. This makes it accessible and intuitive, especially for younger users",
                            "Kodu is widely used in educational settings to teach programming concepts, logical thinking, and problem-solving skills. It encourages creativity and innovation by allowing learner to experiment with different game designs and mechanics (Miller et al., 2021). VPLs are powerful tools used in various fields, including software system modeling, control system learning and document image analysis (DIA) for non-programmers. VPL simplifies complex programming using visual elements, making code more accessible to users without traditional programming skills."
                        ],
                        "paper": {
                            "corpus_id": 272639481,
                            "title": "PBLGM Model Through Visual Programming Language (VPL) for Digital Competencies and Problem-Solving Skills",
                            "authors": [
                                {
                                    "authorId": "2128894602",
                                    "name": "Tippawan Meepung"
                                }
                            ],
                            "year": 2024,
                            "venue": "International Education Studies",
                            "n_citations": 0
                        },
                        "score": 0.97802734375
                    },
                    {
                        "id": "(Miller et al., 2021)",
                        "snippets": [
                            "ABSTRACT In A Framework for K-12 Science Education, researchers call for teachers to make dramatic shifts in practice \u2013 and sustain in these changes in practice \u2013 so students can engage in rigorous and equitable three-dimensional science learning. Project-Based Learning (PBL) motivates students from diverse backgrounds to persist in learning. This project presents design features that bring together the assets of the Framework with PBL, and then tests these features to derive design principles that serve as commitments for designing for teacher change and student learning. Close ethnographic study of 10 teachers over 5 years in a design-based research study is triangulated with data collected across 41 districts in multiple states engaged in a PBL elementary science curriculum. The following design principles provide guidance for developing materials that support the depth necessary for promoting changes to teachers\u2019 practice at scale: Adaptive, Responsive, and both Enjoyable and Intellectually Satisfying."
                        ],
                        "paper": {
                            "corpus_id": 237618637,
                            "title": "Motivating Teaching, Sustaining Change in Practice: Design Principles for Teacher Learning in Project-Based Learning Contexts",
                            "authors": [
                                {
                                    "authorId": "144324587",
                                    "name": "Emily Miller"
                                },
                                {
                                    "authorId": "23199794",
                                    "name": "Samuel J. Severance"
                                },
                                {
                                    "authorId": "1794213",
                                    "name": "J. Krajcik"
                                }
                            ],
                            "year": 2021,
                            "venue": "Journal of Science Teacher Education",
                            "n_citations": 52
                        },
                        "score": 0
                    },
                    {
                        "id": "(Joao et al., 2019)",
                        "snippets": [
                            "In 1990, Myers [37] defined visual programming as \"any system that allows the user to specify a program in a two (or more) dimensional fashion (p. 2)\" and visual languages as \"all systems that use graphics, including visual programming and program visualization systems (p. 3)\". According to Myers's perspective, in 'visual programming' applications, the graphics are used to create the programs, and in 'program visualization applications', the program is created in the traditional text-based way and the graphics are used to visualize the program execution and outputs.\n\nBlock-based programming is one form of visual programming and refers to a software or application where pupils can select the appropriate blocks of code and snap them together to create a program [29]. In this kind of introductory programming tool, blocks of coding are organized in coloured categories that can help pupils understand how to select the correct block, thus lowering some barriers to programming [38]. Programming in these environments takes the form of drag-and-drop blocks that can be snapped together to create programs; if two blocks cannot be joined to form a valid syntactic statement, the interface prevents them from snapping together [39].\n\nThe most popular of these environments used in early programming education is Scratch, but there many others available like App Inventor, Alice, and PencilCode. While these VPEs differ in many aspects and characteristics, they have similar programming principles and purposes.\n\nThis kind of programming environment is recognized by different researchers as an interesting way to preventing errors and reducing the cognitive overload to novice programmers [40]. Most common syntax errors found in text-based languages are avoided or they cannot occur [41]."
                        ],
                        "paper": {
                            "corpus_id": 199002134,
                            "title": "A Cross-analysis of Block-based and Visual Programming Apps with Computer Science Student-Teachers",
                            "authors": [
                                {
                                    "authorId": "2157028104",
                                    "name": "Piedade Jo\u00e3o"
                                },
                                {
                                    "authorId": "72582337",
                                    "name": "Dorotea Nuno"
                                },
                                {
                                    "authorId": "2157024771",
                                    "name": "Sampaio Ferrentini F\u00e1bio"
                                },
                                {
                                    "authorId": "144370033",
                                    "name": "P. ana"
                                }
                            ],
                            "year": 2019,
                            "venue": "Education sciences",
                            "n_citations": 23
                        },
                        "score": 0.947265625
                    },
                    {
                        "id": "(Wen et al., 2023)",
                        "snippets": [
                            "In contrast to traditional textual languages, Scratch enables students to learn algorithms and programming logic with a simple interface and drag-and-drop structure without focusing on syntax, which renders the process more attractive by designing important and unique content (Erol et al., 2017) and supports a more intuitive and engaging experience. (Papadakis et al., 2019) Specifically, Scratch provides an interactive media-rich environment for learners to create animated stories and games, leading to creativity and programming skill development in an exciting, fun way. (Y\u00fckselt\u00fcrk et al., 2017)(Erol et al., 2017)(Papadakis et al., 2019) he advantages of Scratch for programming novices are evidential. Many researchers have identified positive results in learning, including programming knowledge and achievement, (Erol et al., 2017)(Papadakis et al., 2016)(Piedade et al., 2022) computational thinking skills, (Papadakis et al., 2016)(Piedade et al., 2022) a positive attitude toward programming, (Y\u00fckselt\u00fcrk et al., 2017)(Cheng, 2019)(Marcelino et al., 2018)(Papadakis et al., 2016) and learning motivation. (Erol et al., 2017) Scherer et al. (Scherer et al., 2020) meta-analyzed previous studies and found that interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code. The authors also suggested that Scratch accommodates different projects, allowing for different interests and learning styles that may positively influence learners' attitudes, resulting in better performance."
                        ],
                        "paper": {
                            "corpus_id": 264168616,
                            "title": "Toward improving student motivation and performance in introductory programming learning by Scratch: The role of achievement emotions",
                            "authors": [
                                {
                                    "authorId": "133986052",
                                    "name": "Fu-Hsiang Wen"
                                },
                                {
                                    "authorId": "31324477",
                                    "name": "Tienhua Wu"
                                },
                                {
                                    "authorId": "2072747383",
                                    "name": "W. Hsu"
                                }
                            ],
                            "year": 2023,
                            "venue": "Science in progress",
                            "n_citations": 5
                        },
                        "score": 0.89306640625
                    },
                    {
                        "id": "(Mladenovic et al., 2020)",
                        "snippets": [
                            "Novices enrolled in introductory programming courses often face many difficulties. These difficulties are more emphasized when novices are K\u201312 students. Many new visual programming languages have primarily been designed to provide a smooth introduction to programming for children. However, at some point, a general\u2010purpose text\u2010based programming language should be used. A well\u2010known and studied method is to visualize program execution to assist novices in forming correct mental models. Although many studies have investigated the effects of using visualizations in teaching and learning, most of them focus on courses taught at the university level. Studies that focus on investigating the impact of program visualizations at the K\u201312 level are, to the best of our knowledge, scarce. Therefore, we investigated the impact of using program visualizations with a group of K\u201312 students. Because of the underrepresentation of girls in computer science and known gender stereotypes, we additionally investigated student performance based on gender. Our research included 98 fifth\u2010grade students from three elementary schools. The lectures in the experimental group included different visualization techniques, including a program visualization tool and PowerPoint animations, whereas the control group had no program visualizations. All students learned Python as part of their curriculum. We present the results of our research in this paper."
                        ],
                        "paper": {
                            "corpus_id": 225393741,
                            "title": "The impact of using program visualization techniques on learning basic programming concepts at the K\u201312 level",
                            "authors": [
                                {
                                    "authorId": "50980685",
                                    "name": "M. Mladenovi\u0107"
                                },
                                {
                                    "authorId": "84715380",
                                    "name": "\u017dana \u017danko"
                                },
                                {
                                    "authorId": "21173824",
                                    "name": "M. A. Cuvic"
                                }
                            ],
                            "year": 2020,
                            "venue": "Computer Applications in Engineering Education",
                            "n_citations": 32
                        },
                        "score": 0
                    },
                    {
                        "id": "(Chou, 2018)",
                        "snippets": [
                            "This study investigated elementary school students\u2019 learning performances and behaviors in a maker education program. An informal after-school learning environment entitled Robot MakerSpace was created at a public elementary school in Taiwan and 30 grade 5 students voluntarily participated in a 16-week educational experiment. The student participants were randomly divided into two experimental groups. Students in the maker group received weekly educational robotics lessons, whereas those in the nonmaker group only engaged in other after-school learning activities such as homework practice in traditional classrooms. Mixed methods research was used for data collection. An experiment with a pretest\u2013posttest and control group design was employed to measure the students\u2019 electrical engineering and computer programming content knowledge and problem-solving skills. In addition, a qualitative approach with an emphasis on filed observation was adopted to evaluate the instructional implementation of the maker education program. The quantitative findings revealed that maker education training significantly improved the electrical engineering and computer programming content knowledge of the students and improved their problem-solving skills. The qualitative findings showed the students required considerable learning support from the instructor such as strategies for software and hardware debugging."
                        ],
                        "paper": {
                            "corpus_id": 55683453,
                            "title": "Skill Development and Knowledge Acquisition Cultivated by Maker Education: Evidence from Arduino-based Educational Robotics",
                            "authors": [
                                {
                                    "authorId": "3233604",
                                    "name": "Pao-Nan Chou"
                                }
                            ],
                            "year": 2018,
                            "venue": "Eurasia Journal of Mathematics, Science and Technology Education",
                            "n_citations": 48
                        },
                        "score": 0
                    },
                    {
                        "id": "(Wang et al., 2022)",
                        "snippets": [
                            "Visual programming plays an important role in programming education to promote students' understanding of programming and to maximize their engagement in problem-solving (Mladenovi\u0107 et al., 2020). Visual programming provides a programming interface that helps students learn programming concepts and processes (Lye et al., 2014)(Chao, 2016)(Essel et al., 2017)(Mladenovi\u0107 et al., 2018)(Scherer et al., 2020). In particular, (Hu et al., 2020) indicated that visual programming can improve student's academic performance with a small to medium significant overall mean effect size in this area. A visual programming environment allows students to focus on developing and designing programs (Mladenovi\u0107 et al., 2018)(Topalli et al., 2018), so they become more motivated to solve programming problems without grammar constraints. Visual programming has major learning benefits for students, including an intuitive programming interface and reduced difficulties related to programming (Lye et al., 2014)(Essel et al., 2017)(Mladenovi\u0107 et al., 2018)(Lindberg et al., 2018). Considering the need to effectively develop AI talents at the university level, it is necessary to consider the learning benefits provided by a visual programming learning environment. It helps university students quickly learn about AI and helps them gain a better understanding of AI."
                        ],
                        "paper": {
                            "corpus_id": 249048171,
                            "title": "Research on the Impacts of Cognitive Style and Computational Thinking on College Students in a Visual Artificial Intelligence Course",
                            "authors": [
                                {
                                    "authorId": "2270159",
                                    "name": "Chi-Jane Wang"
                                },
                                {
                                    "authorId": "1753583551",
                                    "name": "Hua-Xu Zhong"
                                },
                                {
                                    "authorId": "3154987",
                                    "name": "Po-Sheng Chiu"
                                },
                                {
                                    "authorId": "144336191",
                                    "name": "Jui-Hung Chang"
                                },
                                {
                                    "authorId": "2153093796",
                                    "name": "Pei-Hsuan Wu"
                                }
                            ],
                            "year": 2022,
                            "venue": "Frontiers in Psychology",
                            "n_citations": 8
                        },
                        "score": 0.89208984375
                    },
                    {
                        "id": "(Chen et al., 2023)",
                        "snippets": [
                            "Visual programming tools lead learners to contact the code language in the way of module splicing, which can make learners accept learning programming psychologically. Its main teaching function is to weaken the writing of programming code, emphasize the application of CT knowledge and methods, and enhance the learner's motivation (Zheng et al., 2021). Visual programming tools can describe and execute problems in real situations in a modular programming language according to the problemsolving plan (Xiang et al., 2021)."
                        ],
                        "paper": {
                            "corpus_id": 257145390,
                            "title": "Computational Thinking Training and Deep Learning Evaluation Model Construction Based on Scratch Modular Programming Course",
                            "authors": [
                                {
                                    "authorId": "2157262938",
                                    "name": "Xiaoli Chen"
                                },
                                {
                                    "authorId": "2209867633",
                                    "name": "XiaoMing Wang"
                                }
                            ],
                            "year": 2023,
                            "venue": "Computational Intelligence and Neuroscience",
                            "n_citations": 5
                        },
                        "score": 0.90478515625
                    },
                    {
                        "id": "(Zheng et al., 2021)",
                        "snippets": [
                            "In visual reasoning, the achievement of deep learning significantly improved the accuracy of results. Image features are primarily used as input to get answers. However, the image features are too redundant to learn accurate characterizations within a limited complexity and time. While in the process of human reasoning, abstract description of an image is usually to avoid irrelevant details. Inspired by this, a higher-level representation named semantic representation is introduced. In this paper, a detailed visual reasoning model is proposed. This new model contains an image understanding model based on semantic representation, feature extraction and process model refined with watershed and u-distance method, a feature vector learning model using pyramidal pooling and residual network, and a question understanding model combining problem embedding coding method and machine translation decoding method. The feature vector could better represent the whole image instead of overly focused on specific characteristics. The model using semantic representation as input verifies that more accurate results can be obtained by introducing a high-level semantic representation. The result also shows that it is feasible and effective to introduce high-level and abstract forms of knowledge representation into deep learning tasks. This study lays a theoretical and experimental foundation for introducing different levels of knowledge representation into deep learning in the future."
                        ],
                        "paper": {
                            "corpus_id": 235749050,
                            "title": "Improving Visual Reasoning Through Semantic Representation",
                            "authors": [
                                {
                                    "authorId": "51452833",
                                    "name": "Wenfeng Zheng"
                                },
                                {
                                    "authorId": "2144226207",
                                    "name": "Xiangjun Liu"
                                },
                                {
                                    "authorId": "2121973028",
                                    "name": "X. Ni"
                                },
                                {
                                    "authorId": "143931711",
                                    "name": "Lirong Yin"
                                },
                                {
                                    "authorId": "143787142",
                                    "name": "Bo Yang"
                                }
                            ],
                            "year": 2021,
                            "venue": "IEEE Access",
                            "n_citations": 111
                        },
                        "score": 0
                    },
                    {
                        "id": "(Xiang et al., 2021)",
                        "snippets": [
                            "The availability of thermodynamic data for geologically relevant phases has made practical the calculation of stable phase relations throughout the mantle and crust of terrestrial planets. GeoPS (http://www.geops.org) is a program designed for this purpose in which both input and output are done through an intuitive graphical user interface. GeoPS provides a wide range of phase equilibrium calculations based on a novel Gibbs energy minimization algorithm. The algorithm provides for exceptionally robust and computationally efficient solution to the phase equilibrium problem by successive alternation between a linear programming step to identify stable phase compositions and a non\u2010linear programming step to refine the compositions estimated during the linear programming. Applications include calculation of various types of phase diagrams and path\u2010dependent phase fractionation. By combining an easy\u2010to\u2010use graphical user interface with a robust and efficient solver, GeoPS makes phase equilibrium modelling accessible to researchers and students with minimal training and provides a powerful tool for understanding natural phase relations and for planning experimental work."
                        ],
                        "paper": {
                            "corpus_id": 237732833,
                            "title": "GeoPS: An interactive visual computing tool for thermodynamic modelling of phase equilibria",
                            "authors": [
                                {
                                    "authorId": "2064888120",
                                    "name": "Hua Xiang"
                                },
                                {
                                    "authorId": "145109359",
                                    "name": "J. Connolly"
                                }
                            ],
                            "year": 2021,
                            "venue": "Journal of Metamorphic Geology",
                            "n_citations": 134
                        },
                        "score": 0
                    },
                    {
                        "id": "(Hu et al., 2020)",
                        "snippets": [
                            "Block-based visual programming tools, such as Scratch, Alice, and MIT App Inventor, provide an intuitive and easy-to-use editing interface through which to promote programming learning for novice students of various ages. However, very little attention has been paid to investigating these tools\u2019 overall effects on students\u2019 academic achievement and the study features that may moderate the effects of block-based visual programming from a comprehensive perspective. Thus, the present study carried out a meta-analysis to systemically examine 29 empirical studies (extracting 34 effect sizes) using experimental or quasi-experiments involving the programming learning effects of employing block-based visual programming tools to date (until the end of 2019). The results showed a small to medium significant positive overall mean effect size (fixed-effect model g\u2009=\u20090.37; random-effects model g = 0.47) of the use of these block-based visual programming tools with respect to students\u2019 academic achievement. Furthermore, the overall mean effect size was significantly affected by the educational stage, programming tool used, experimental treatment, and school location. Discussions and implications based on the findings are provided."
                        ],
                        "paper": {
                            "corpus_id": 225492990,
                            "title": "Exploring the Effectiveness and Moderators of Block-Based Visual Programming on Student Learning: A Meta-Analysis",
                            "authors": [
                                {
                                    "authorId": "2108955049",
                                    "name": "Yue Hu"
                                },
                                {
                                    "authorId": "2004926649",
                                    "name": "Cheng-Huan Chen"
                                },
                                {
                                    "authorId": "2355658",
                                    "name": "C. Su"
                                }
                            ],
                            "year": 2020,
                            "venue": "Journal of educational computing research",
                            "n_citations": 46
                        },
                        "score": 0
                    },
                    {
                        "id": "(Doman et al., 2015)",
                        "snippets": [
                            "Research has shown VPEs are successful interventions to introduce programming to new students (Siiman et al., 2014). GameMaker, in particular, has been successfully utilized to teach programming concepts to children, adolescents, adults, and senior citizens (Guimar\u00e3es et al., 2008)(Overmars, 2004). This tool may be especially useful in engaging both genders, as women show a preference for computer games with a creative, versus solely destructive, component (Chamillard, 2006)."
                        ],
                        "paper": {
                            "corpus_id": 55310713,
                            "title": "Effect of GameMaker on Student Attitudes and Perceptions of Instructors",
                            "authors": [
                                {
                                    "authorId": "38066480",
                                    "name": "M. Doman"
                                },
                                {
                                    "authorId": "46430396",
                                    "name": "M. Sleigh"
                                },
                                {
                                    "authorId": "48828482",
                                    "name": "C. Garrison"
                                }
                            ],
                            "year": 2015,
                            "venue": "",
                            "n_citations": 3
                        },
                        "score": 0.888671875
                    },
                    {
                        "id": "(Guimaraes et al., 2008)",
                        "snippets": [
                            "The computer game industry has exploded reaching sales of several billion dollars a year and, consequently, a majority of college students are familiar with the gaming environment. In fact, videogame development has been cited as one way to motivate students to explore the world of Computer Science. However, most videogames are extremely complex computer programs created by a team of developers including programmers and graphic artists and represent thousands of hours of work. Fortunately there are software tools available that provide a way for simple computer games to be created fairly easily using a building block approach. This paper discusses the successes and challenges of teaching a videogame design and development summer program using the software development tool, Game Maker, and from this experience examines how videogame development might be incorporated into a Computer Science curriculum. The first section provides an overview of the Game Maker program and outlines the material taught in the program. Observations of the most successful teaching methods and approaches utilized are also explored. We conclude with a discussion of where videogame design might best be suited in a Computer Science curriculum citing its attractiveness to non-Computer Science majors, its use as a way to introduce introductory programming concepts and as a way to help students learn to read code. While Game Maker is not sophisticated nor is it a substitute for teaching a standard programming language, it can be easily integrated into introductory Computer Science courses."
                        ],
                        "paper": {
                            "corpus_id": 1600632,
                            "title": "An exploratory overview of teaching computer game development",
                            "authors": [
                                {
                                    "authorId": "144654035",
                                    "name": "M. Guimar\u00e3es"
                                },
                                {
                                    "authorId": "4096538",
                                    "name": "M. Murray"
                                }
                            ],
                            "year": 2008,
                            "venue": "Journal of Computing Sciences in Colleges (JCSC; Formerly: Journal of Computing in Small Colleges)",
                            "n_citations": 11
                        },
                        "score": 0
                    },
                    {
                        "id": "(Papadakis, 2021)",
                        "snippets": [
                            "Data that shows that young children can learn and acquire Computational Thinking (CT) skills has led governments and policymakers internationally to integrate CT into the curriculum, starting in the earliest grades. Researchers support the idea that this introduction must not solely focus on a problem-solving process skill (CT) but instead provide children with new ways to express themselves, supporting their cognitive, language, and socio-emotional development (Computational Fluency-CF). Coupled with the media and government\u2019s rhetoric and an increasing number of apps offering various programming lessons, puzzles, and challenges, educators have been responsible for introducing young children to CT and CF using touchscreen technology. This paper presents a literature review (N = 21) of empirical studies on applying four coding apps to support young children\u2019s learning of CT and CF. The main conclusion is that all apps positively affect the development of children\u2019s CT skills. None of the apps can ultimately support the development of CF, although ScratchJr, with a \"sandbox\" approach, can better help students express themselves."
                        ],
                        "paper": {
                            "corpus_id": 235383033,
                            "title": "The Impact of Coding Apps to Support Young Children in Computational Thinking and Computational Fluency. A Literature Review",
                            "authors": [
                                {
                                    "authorId": "31818512",
                                    "name": "Stamatis Papadakis"
                                }
                            ],
                            "year": 2021,
                            "venue": "Frontiers in Education",
                            "n_citations": 90
                        },
                        "score": 0
                    },
                    {
                        "id": "(Lindberg et al., 2018)",
                        "snippets": [
                            "An increasing number of countries have recently included programming education in their curricula. Similarly, utilizing programming concepts in gameplay has become popular in the videogame industry. Although many games have been developed for learning to program, their variety and their correspondence to national curricula remain an uncharted territory. Consequently, this paper has three objectives. Firstly, an investigation on the guidelines on programming education in K\u201012 in seven countries was performed by collecting curricula and other relevant data official from governmental and non\u2010profit educational websites. Secondly, a review of existing acquirable games that utilize programming topics in their gameplay was conducted by searching popular game stores. Lastly, we compared the curricula and made suggestions as to which age group the identified games would be suitable. The results of this study can be useful to educators and curriculum designers who wish to gamify programming education. [ABSTRACT FROM AUTHOR] uracy of the copy. Users should refer to the original published version of the material for the full abstract. (Copyright applies to all Abstracts.)"
                        ],
                        "paper": {
                            "corpus_id": 69960068,
                            "title": "Gamifying programming education in K\u201012: A review of programming curricula in seven countries and programming games",
                            "authors": [
                                {
                                    "authorId": "40502733",
                                    "name": "Renny S. N. Lindberg"
                                },
                                {
                                    "authorId": "33012794",
                                    "name": "T. Laine"
                                },
                                {
                                    "authorId": "1785335",
                                    "name": "Lassi Haaranen"
                                }
                            ],
                            "year": 2018,
                            "venue": "British Journal of Educational Technology",
                            "n_citations": 105
                        },
                        "score": 0
                    },
                    {
                        "id": "(Bai et al., 2019)",
                        "snippets": [
                            "According to the problems in teaching of computer programming course, brought visual programming tools to assist teaching, introduced the advantages of visual programming, and made use of it in algorithm design, coding and modular design. Practice shows that by introducing of visual programming, it helps the students to improve their interesting, and develop the ability of logic thinking as well as programming",
                            ".But in teaching practice, it is quite difficult to reach the objects of this course. Firstly, it needs great efforts on coding and debugging of programs, but Students are often afraid of tedious syntax of the language, and finally lost confidence for programming when meet program errors again and again. Secondly, the procedure of programming is indeed a procedure of logical thinking, but for many fresh students, the ability of logical thinking is still weak, there is some difficulty for them to understand the logic of programs, so we need a gradual training method for logical thinking. Thirdly, the flow diagram that been used for expressing the algorithm, but for it cannot be executed, there has no way to verify the result of the algorithm, we need stronger tools to express algorithms and verify them. In recent years, a lot of visual programming tools came into being, for example, Scratch [3] , Blockly [4] , Snap [5] and so on. By introducing of visual programming tools in computer programming course, the problems mentioned above can be solved effectively. First, for that the core of computational thinking is the ideas rather than the language syntax, by using of visual tools will simplify programming, thus students will focus on the program logic rather than the language syntax, it will help to overcome the fear of programming and cultivate there interesting. Second, visual program help to express the logic of algorithm clearly, thus it helps to train logical thinking through visual programming, lastly, by modeling with visual programming tools, it is easy to execute the algorithm immediately, thus convenient to verify the algorithm."
                        ],
                        "paper": {
                            "corpus_id": 68068900,
                            "title": "Application of Visual Programming in Program Design Course",
                            "authors": [
                                {
                                    "authorId": "2114140303",
                                    "name": "Xiaojun Bai"
                                },
                                {
                                    "authorId": "2801842",
                                    "name": "Baili Liu"
                                }
                            ],
                            "year": 2019,
                            "venue": "DEStech Transactions on Social Science Education and Human Science",
                            "n_citations": 1
                        },
                        "score": 0.9365234375
                    }
                ],
                "format": "synthesis",
                "table": null,
                "model": "claude-3-7-sonnet-20250219"
            },
            {
                "title": "Cognitive Benefits of Visual Programming",
                "tldr": "Visual Programming Languages reduce cognitive load by eliminating syntax concerns and providing intuitive visual representations that better align with human spatial reasoning. This allows beginners to focus on program logic and problem-solving rather than language mechanics, making programming concepts more accessible and comprehensible. (10 sources)",
                "text": "\nVisual Programming Languages (VPLs) offer significant cognitive advantages that make them particularly effective for learning programming concepts. One of the primary cognitive benefits is the substantial reduction in cognitive load compared to text-based programming. Block-based programming, for instance, facilitates learning by reducing the mental effort that would otherwise be required for textual programming, allowing learners to focus on the logic and structures involved in programming rather than the challenges of writing code <Paper corpusId=\"208615635\" paperTitle=\"(Chiazzese et al., 2019)\" isShortName></Paper>.\n\nTraditional programming languages often impose a heavy cognitive burden due to their requirement for precise and complex syntax that is \"unfamiliar and unnatural for beginners\" <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper>. This syntax complexity frequently creates barriers to learning programming as novices struggle with language mechanics rather than conceptual understanding. Visual programming environments address this issue by providing block-based elements that offer clear visual cues on how to use commands, drastically reducing the cognitive resources devoted to syntax concerns <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper>.\n\nFrom a cognitive perspective, visual languages are \"less likely to tax a novice's working memory\" compared to text-based alternatives <Paper corpusId=\"60833664\" paperTitle=\"(Bonar et al., 1990)\" isShortName></Paper>. This reduced cognitive load manifests in practical learning outcomes, with research showing that students using visual interfaces \"spent less time off track and completed more of the activity's goals in less time\" compared to those using textual interfaces <Paper corpusId=\"212726996\" paperTitle=\"(Chiu, 2020)\" isShortName></Paper> <Paper corpusId=\"38535646\" paperTitle=\"(Saito et al., 2017)\" isShortName></Paper>.\n\nThe visual nature of VPLs aligns better with human spatial reasoning abilities. By using graphical elements that can be manipulated in two-dimensional space, VPLs leverage spatial cognition to make programming concepts more intuitive <Paper corpusId=\"32610688\" paperTitle=\"(Basu et al., 2016)\" isShortName></Paper>. Visual constructs significantly reduce issues with program syntax, allowing students to focus on the semantic meaning of programming constructs rather than textual structures <Paper corpusId=\"32610688\" paperTitle=\"(Basu et al., 2016)\" isShortName></Paper>. This is particularly helpful for understanding complex programming concepts like loops and conditionals, which are easier to interpret through visual representations <Paper corpusId=\"32610688\" paperTitle=\"(Basu et al., 2016)\" isShortName></Paper>.\n\nVPLs also address a common educational problem where \"the focus is too much on learning specific syntax or semantics rather than understanding the process\" <Paper corpusId=\"248387201\" paperTitle=\"(Kaivo et al., 2024)\" isShortName></Paper> <Paper corpusId=\"6485878\" paperTitle=\"(Przybylla et al., 2014)\" isShortName></Paper>. By shifting attention from syntax to the underlying logic of programming, VPLs help students construct more meaningful programs and exercise greater creativity, focusing on ideas rather than technical limitations <Paper corpusId=\"248387201\" paperTitle=\"(Kaivo et al., 2024)\" isShortName></Paper> <Paper corpusId=\"6485878\" paperTitle=\"(Przybylla et al., 2014)\" isShortName></Paper>.\n\nThe use of icons and visual cues in block-based programming facilitates students' recognition of programming functions, such as commands, conditions, and loops <Paper corpusId=\"208615635\" paperTitle=\"(Chiazzese et al., 2019)\" isShortName></Paper> <Paper corpusId=\"259335765\" paperTitle=\"(DeLozier et al., 2023)\" isShortName></Paper>. These visual elements help learners build mental models of programming concepts more easily than abstract textual representations. Meta-analysis of previous studies has found that \"interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code\" <Paper corpusId=\"264168616\" paperTitle=\"(Wen et al., 2023)\" isShortName></Paper>.\n\nThe puzzle-like interface common in many VPLs provides additional cognitive scaffolding. By using interfaces based on visual blocks that fit together like puzzle pieces, these tools \"considerably limit the prior knowledge required to program and reinforce the program structure\" <Paper corpusId=\"62816171\" paperTitle=\"(Eguiluz et al., 2018)\" isShortName></Paper>. This approach eliminates the possibility of syntax errors and allows learners to focus exclusively on the logic of the task at hand <Paper corpusId=\"62816171\" paperTitle=\"(Eguiluz et al., 2018)\" isShortName></Paper>.",
                "citations": [
                    {
                        "id": "(Chiazzese et al., 2019)",
                        "snippets": [
                            "Block programming is based on drag and drop of consecutive visual tiles on the editing area to compose different instructions; first of all, it facilitates the learning of programming skills because of a reduction in the cognitive load potentially required for textual programming (Weintrop et al., 2015)(Weintrop et al., 2017). Moreover, Kelleher, and Pausch (Kelleher et al., 2005) recognize further advantages in the use of visual programming for novice learners. Indeed, the visual block-based instruction is built using icons that facilitate students' recognition of its function, such as commands, conditions, and loops. Accordingly, visual programming allows students to focus their attention more on the logic and structures involved in programming tasks than in challenges related to writing code."
                        ],
                        "paper": {
                            "corpus_id": 208615635,
                            "title": "Educational Robotics in Primary School: Measuring the Development of Computational Thinking Skills with the Bebras Tasks",
                            "authors": [
                                {
                                    "authorId": "1985775",
                                    "name": "G. Chiazzese"
                                },
                                {
                                    "authorId": "33520169",
                                    "name": "M. Arrigo"
                                },
                                {
                                    "authorId": "3344445",
                                    "name": "Antonella Chifari"
                                },
                                {
                                    "authorId": "1770175",
                                    "name": "Violetta Lonati"
                                },
                                {
                                    "authorId": "26632478",
                                    "name": "Crispino Tosto"
                                }
                            ],
                            "year": 2019,
                            "venue": "Informatics",
                            "n_citations": 64
                        },
                        "score": 0.9326171875
                    },
                    {
                        "id": "(Chiu, 2020)",
                        "snippets": [
                            "Traditional textual programming languages have text-based interface that require precise and complex syntax which are unfamiliar and unnatural for beginners. The programming syntax is usually complicated and difficult to understand for novice programmers and syntax overload results in barriers to learning programming (Denny et al., 2011)- (Denny et al., 2012). Easier to read and easier to write programs may relieve syntax complexity for learners. Instead of inputting text-based statements, visual programming environments often contain block-based programming elements which provide useful visual cues on how and where to use commands to develop programs. A program can be easily created just by dragging-and-dropping block-based programming elements so that the syntax problems are eliminated. Visualization helps learners understand the semantics of introduced constructs, elucidate principles of program structure and execution, and protects them from developing misconceptions. Study by (Price et al., 2015) indicated that students who used the visual interface for programming spent less time off track and completed more of the activity's goals in less time when compared to those who used the textual interface for programming. Saito, Washizaki, and Fukazawa also compared the learning effects of text-based and visual-based programming and found that visual-based programming induces a larger change in attitude toward programming (Saito et al., 2017). Therefore, research results suggest that visual-based programming is advantageous in a programming implementation environment for novice programmers."
                        ],
                        "paper": {
                            "corpus_id": 212726996,
                            "title": "Facilitating K-12 Teachers in Creating Apps by Visual Programming and Project-based Learning",
                            "authors": [
                                {
                                    "authorId": "2111748",
                                    "name": "Chiung-Fang Chiu"
                                }
                            ],
                            "year": 2020,
                            "venue": "International Journal of Emerging Technologies in Learning (iJET)",
                            "n_citations": 40
                        },
                        "score": 0.9560546875
                    },
                    {
                        "id": "(Bonar et al., 1990)",
                        "snippets": [
                            "There are two basic reasons to turn to a visual language in a programming language for novices.\n\nFirst, a visual language provides the flexibility and expressiveness needed for a novice language to express a large vocabulary of programming plans. In our experience, a linear textual version of a plan-based programming language is quite unwieldy. Second, from a point of view of novice cognitive capability, a visual language is less likely to tax a novice's working memory."
                        ],
                        "paper": {
                            "corpus_id": 60833664,
                            "title": "A visual programming language for novices",
                            "authors": [
                                {
                                    "authorId": "143925072",
                                    "name": "Jeffrey Bonar"
                                },
                                {
                                    "authorId": "2074295",
                                    "name": "Blaise W. Liffick"
                                }
                            ],
                            "year": 1990,
                            "venue": "",
                            "n_citations": 28
                        },
                        "score": 0.927734375
                    },
                    {
                        "id": "(Saito et al., 2017)",
                        "snippets": [
                            "Findings The following results are revealed: (1) The visual input method induces a larger change in attitude toward programming. (2) The number of operations and input quantity influence both groups. (3) The overall results suggest that a visual input is advantageous in a programming implementation environment for first learners."
                        ],
                        "paper": {
                            "corpus_id": 38535646,
                            "title": "Comparison of Text-Based and Visual-Based Programming Input Methods for First-Time Learners",
                            "authors": [
                                {
                                    "authorId": "2064115776",
                                    "name": "Daisuke Saito"
                                },
                                {
                                    "authorId": "1794290",
                                    "name": "H. Washizaki"
                                },
                                {
                                    "authorId": "1759835",
                                    "name": "Y. Fukazawa"
                                }
                            ],
                            "year": 2017,
                            "venue": "J. Inf. Technol. Educ. Res.",
                            "n_citations": 18
                        },
                        "score": 0
                    },
                    {
                        "id": "(Basu et al., 2016)",
                        "snippets": [
                            "In a visual programming (VP) environment, students construct programs using graphical objects and a drag-and-drop interface, thus making the programming more intuitive and accessible to the novice programmer (Kelleher et al., 2005). Visual constructs significantly reduce issues with program syntax and understanding textual structures making it easier for students to focus on the semantic meaning of the constructs (Soloway, 1993). For example, visual interfaces make it easier to interpret and use flow of control constructs, such as loops and conditionals (Parsons and Haden 2007a, b). \n\nCTSiM provides a library of visual constructs that students can choose from and arrange spatially to generate their computational models. If students try to drag and drop a programming construct incorrectly, the system disallows the action and indicates the error by explicitly displaying an \"x\" sign. Therefore, CTSiM eliminates the possibility of generating programs (that is, models) with syntax errors. Examples of other agent-based VP environments include AgentSheets (Repenning, 1993), StarLogo TNG (Klopfer et al., 2005), Scratch (Maloney et al. 2004), ViMAP (Sengupta et al., 2015), and Alice (Conway 1997). They have been used successfully in teaching children CT through game design, storytelling, and modeling activities."
                        ],
                        "paper": {
                            "corpus_id": 32610688,
                            "title": "Identifying middle school students\u2019 challenges in computational thinking-based science learning",
                            "authors": [
                                {
                                    "authorId": "2843915",
                                    "name": "Satabdi Basu"
                                },
                                {
                                    "authorId": "145800351",
                                    "name": "Gautam Biswas"
                                },
                                {
                                    "authorId": "35019130",
                                    "name": "P. Sengupta"
                                },
                                {
                                    "authorId": "2813127",
                                    "name": "A. Dickes"
                                },
                                {
                                    "authorId": "1732269",
                                    "name": "J. Kinnebrew"
                                },
                                {
                                    "authorId": "34995102",
                                    "name": "Douglas B. Clark"
                                }
                            ],
                            "year": 2016,
                            "venue": "Research and Practice in Technology Enhanced Learning",
                            "n_citations": 110
                        },
                        "score": 0.90869140625
                    },
                    {
                        "id": "(Kaivo et al., 2024)",
                        "snippets": [
                            "Visual programming tools have been developed to help with these challenges and aim to make programming more accessible for non-technical students. However, the differences between visual programming and traditional text-based programming are considerably extensive. Visual programming languages simplify procedures and guide the user through the creation, for example, with blocks that snap together or use colour-coding. (Vihavainen et al., 2011) noticed that a common problem when teaching text-based programming languages is that the focus is too much on learning specific syntax or semantics rather than understanding the process. When students understand the process of coding, they can construct more meaningful programs. Also, (Przybylla et al., 2014) assert that physical computing encourages learners to use their imagination and creativity, focusing more on ideas, not on technical limitation. Physical computing takes a hands-on approach to understand computational thinking, building tangible artefacts to visualise the abstract programming concepts."
                        ],
                        "paper": {
                            "corpus_id": 248387201,
                            "title": "Designing activities and tools to support university students' creative and collaborative exploration of physical computing",
                            "authors": [
                                {
                                    "authorId": "151119319",
                                    "name": "Melissa Kaivo"
                                },
                                {
                                    "authorId": "1710284",
                                    "name": "David Cuartielles"
                                },
                                {
                                    "authorId": "3167385",
                                    "name": "Daniel Spikol"
                                }
                            ],
                            "year": 2024,
                            "venue": "Networked Learning Conference",
                            "n_citations": 0
                        },
                        "score": 0.89111328125
                    },
                    {
                        "id": "(Przybylla et al., 2014)",
                        "snippets": [
                            "Physical computing covers the design and realization of interactive objects and instal- lations and allows students to develop concrete, tangible products of the real world, which arise from the learners' imagination. This can be used in computer science education to provide students with interesting and motivating access to the different topic areas of the subject in construction- ist and creative learning environments. To make many existing activities and examples of such project ideas available for classroom use and to expand the topic areas suitable for learning in such environments beyond introductory to programming, a physical computing syllabus for computer science courses in general education schools has been developed. In this paper the methods and different perspectives that were taken into account are presented. The resulting syllabus can be used to develop a constructionist computer science curriculum with physical computing."
                        ],
                        "paper": {
                            "corpus_id": 6485878,
                            "title": "Physical Computing and its Scope - Towards a Constructionist Computer Science Curriculum with Physical Computing",
                            "authors": [
                                {
                                    "authorId": "1923328",
                                    "name": "M. Przybylla"
                                },
                                {
                                    "authorId": "1711129",
                                    "name": "R. Romeike"
                                }
                            ],
                            "year": 2014,
                            "venue": "Informatics Educ.",
                            "n_citations": 86
                        },
                        "score": 0
                    },
                    {
                        "id": "(DeLozier et al., 2023)",
                        "snippets": [
                            "Visual block-based programming is an effective way to introduce programming. It is used at all levels of introductory programming from preschool [6,7], to high school [8], to college [9]. The wide range of ages and skill levels highlights the flexibility of visual programmin g. Visual block-based programming lowers the initial entry hurdles of many conventional programming languages using drag-and-drop puzzle blocks [11]. These languages appeal to novice programmers as they are often browser-based and do not require the installation of tools. Additionally, these programming languages use visual cues, such as puzzle tabs, to indicate to the programmer how blocks can be connected together. This allows blocks to only be connected in particular ways and prevents syntax errors [12]. This ease of use often hides the fact that many of these languages still support sophisticated programming constructs to include complex data structures, file handling, arrays, mouse and keyboard inputs, and parallel code [13].\n\nProgramming requires computational, algorithmic, and logical thinking [14]. Solving a problem then requires problem identification, understanding syntax, semantics, and com plexity of a programming language [14]. Visual programming languages have the ability to introduce these topics to a wide audience. These languages have been available since the 1990s with LogoBlocks, but were limited in scope and availability [15]. Over the past decade, the field of introductory programming languages has proliferated with many different visual programming languages [14]. This explosion of options and the ease of use of the languages have fostered an environment where younger children can be introduced to programming [13]."
                        ],
                        "paper": {
                            "corpus_id": 259335765,
                            "title": "Using Visual Programming Games to Study Novice Programmers",
                            "authors": [
                                {
                                    "authorId": "39722092",
                                    "name": "Christian DeLozier"
                                },
                                {
                                    "authorId": "38203562",
                                    "name": "James Shey"
                                }
                            ],
                            "year": 2023,
                            "venue": "Int. J. Serious Games",
                            "n_citations": 6
                        },
                        "score": 0.947265625
                    },
                    {
                        "id": "(Wen et al., 2023)",
                        "snippets": [
                            "In contrast to traditional textual languages, Scratch enables students to learn algorithms and programming logic with a simple interface and drag-and-drop structure without focusing on syntax, which renders the process more attractive by designing important and unique content (Erol et al., 2017) and supports a more intuitive and engaging experience. (Papadakis et al., 2019) Specifically, Scratch provides an interactive media-rich environment for learners to create animated stories and games, leading to creativity and programming skill development in an exciting, fun way. (Y\u00fckselt\u00fcrk et al., 2017)(Erol et al., 2017)(Papadakis et al., 2019) he advantages of Scratch for programming novices are evidential. Many researchers have identified positive results in learning, including programming knowledge and achievement, (Erol et al., 2017)(Papadakis et al., 2016)(Piedade et al., 2022) computational thinking skills, (Papadakis et al., 2016)(Piedade et al., 2022) a positive attitude toward programming, (Y\u00fckselt\u00fcrk et al., 2017)(Cheng, 2019)(Marcelino et al., 2018)(Papadakis et al., 2016) and learning motivation. (Erol et al., 2017) Scherer et al. (Scherer et al., 2020) meta-analyzed previous studies and found that interventions focusing on visualization through Scratch are especially effective because visual programming languages may reduce the cognitive load associated with reading, understanding, and creating code. The authors also suggested that Scratch accommodates different projects, allowing for different interests and learning styles that may positively influence learners' attitudes, resulting in better performance."
                        ],
                        "paper": {
                            "corpus_id": 264168616,
                            "title": "Toward improving student motivation and performance in introductory programming learning by Scratch: The role of achievement emotions",
                            "authors": [
                                {
                                    "authorId": "133986052",
                                    "name": "Fu-Hsiang Wen"
                                },
                                {
                                    "authorId": "31324477",
                                    "name": "Tienhua Wu"
                                },
                                {
                                    "authorId": "2072747383",
                                    "name": "W. Hsu"
                                }
                            ],
                            "year": 2023,
                            "venue": "Science in progress",
                            "n_citations": 5
                        },
                        "score": 0.89306640625
                    },
                    {
                        "id": "(Eguiluz et al., 2018)",
                        "snippets": [
                            "It is also important that all these tools seek to avoid novice programmers having to confront the complexity of text-based computer coding and to improve the learnability [7]. There are several ways to address this problem such as narrative tools, flow-model tools, or specialized output realizations (8394893); in this chapter, we focus on the most common tools, which are those that use the block-based visual programming. These tools employ user interfaces based on visual blocks that are moved and placed constructively as an assembly game, usually with the visual abstraction of a puzzle with its pieces and fitting ways. These blocks work as an abstraction of programming components: sentences, data, control structures, procedures, and so on. Consequently, they considerably limit the prior knowledge required to program and reinforce the program structure, eliminating the possibility of syntax errors and focusing only on the logic that exists in the activity that is to be undertaken."
                        ],
                        "paper": {
                            "corpus_id": 62816171,
                            "title": "An Evaluation of Open Digital Gaming Platforms for Developing Computational Thinking Skills",
                            "authors": [
                                {
                                    "authorId": "38948497",
                                    "name": "A. Egu\u00edluz"
                                },
                                {
                                    "authorId": "2476416",
                                    "name": "P. Garaizar"
                                },
                                {
                                    "authorId": "3070661",
                                    "name": "M. Guenaga"
                                }
                            ],
                            "year": 2018,
                            "venue": "",
                            "n_citations": 15
                        },
                        "score": 0.927734375
                    }
                ],
                "format": "synthesis",
                "table": null,
                "model": "claude-3-7-sonnet-20250219"
            },
            {
                "title": "Applications Beyond Education",
                "tldr": "Visual Programming Languages have expanded beyond educational settings into numerous professional domains including Internet of Things, robotics, game development, and business applications. Their intuitive interfaces make complex technologies accessible to non-programmers while increasing productivity across specialized fields. (11 sources)",
                "text": "\nWhile Visual Programming Languages (VPLs) initially gained prominence in educational contexts, they have evolved to serve numerous practical applications across diverse professional domains:\n\n## Internet of Things (IoT)\nVPLs are increasingly being used in IoT applications, allowing end users to access and manage connected devices and services through visual abstractions <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. These tools enable non-programmers to create sophisticated IoT systems without requiring extensive programming knowledge.\n\n## Mobile Application Development\nVisual programming has become an important approach for creating mobile applications, making app development accessible to users without traditional coding expertise <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper>. This aligns with the growing low-code movement that aims to reduce programming complexity and raise abstraction levels <Paper corpusId=\"259318509\" paperTitle=\"(Rybinski et al., 2023)\" isShortName></Paper> <Paper corpusId=\"254101606\" paperTitle=\"(Trigo et al., 2022)\" isShortName></Paper>.\n\n## Robotics\nVPLs have found significant applications in robotics programming, allowing users to program robots without extensive knowledge of traditional programming languages <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper> <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper> <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper>. The 2D representation of visual languages is particularly suitable for representing the parallel behavior of complex robotic systems with multiple components <Paper corpusId=\"60941791\" paperTitle=\"(Plauska et al., 2014)\" isShortName></Paper> <Paper corpusId=\"61809687\" paperTitle=\"(Corral et al., 2019)\" isShortName></Paper>.\n\n## Virtual and Augmented Reality\nVPLs are being applied in VR/AR development, making these complex technologies more accessible to creators without specialized programming skills <Paper corpusId=\"231725028\" paperTitle=\"(Kuhail et al., 2021)\" isShortName></Paper> <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>.\n\n## Game Development\nVisual programming is widely used in game engines and development environments. Commercial creative applications like Unity have adopted visual programming interfaces to help developers create interactive experiences more intuitively <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper> <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>.\n\n## Business Applications\nVPLs have been applied to various business domains including:\n- Business process automation <Paper corpusId=\"248510289\" paperTitle=\"(Savidis, 2022)\" isShortName></Paper>\n- System administration <Paper corpusId=\"248510289\" paperTitle=\"(Savidis, 2022)\" isShortName></Paper>\n- Data warehousing and business analytics <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>\n- Banking applications <Paper corpusId=\"264307073\" paperTitle=\"(Rozen, 2023)\" isShortName></Paper> <Paper corpusId=\"264769167\" paperTitle=\"(Deursen et al., 2000)\" isShortName></Paper>\n\n## Domain-Specific Applications\nDomain-Specific Languages (DSLs) based on visual programming principles offer specific abstractions and notations that provide increased expressiveness for particular problem domains <Paper corpusId=\"264307073\" paperTitle=\"(Rozen, 2023)\" isShortName></Paper> <Paper corpusId=\"264769167\" paperTitle=\"(Deursen et al., 2000)\" isShortName></Paper>. These specialized VPLs have been successfully applied in fields such as:\n- Digital forensics <Paper corpusId=\"264307073\" paperTitle=\"(Rozen, 2023)\" isShortName></Paper> <Paper corpusId=\"264769167\" paperTitle=\"(Deursen et al., 2000)\" isShortName></Paper>\n- Multimedia development <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>\n- Computer-aided design (CAD) through tools like Grasshopper <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>\n- Simulations and system design <Paper corpusId=\"53282492\" paperTitle=\"(Dias et al., 2018)\" isShortName></Paper>\n\n## Creative and Artistic Applications\nVisual programming interfaces are used in creative fields through tools like Max/MSP for multimedia development <Paper corpusId=\"269747039\" paperTitle=\"(Lin et al., 2023)\" isShortName></Paper>. These environments \"often accelerate experimentation and exploration in the prototyping phases of creative applications\" <Paper corpusId=\"276961580\" paperTitle=\"(Zhou et al., 2023)\" isShortName></Paper>.\n\nThe expansion of VPLs beyond educational contexts reflects their ability to make programming more accessible while increasing productivity. Research indicates that low-code visual programming technologies enable \"significantly faster\" development and maintenance of software compared to traditional coding approaches <Paper corpusId=\"259318509\" paperTitle=\"(Rybinski et al., 2023)\" isShortName></Paper> <Paper corpusId=\"254101606\" paperTitle=\"(Trigo et al., 2022)\" isShortName></Paper>. This productivity advantage explains why visual programming systems \"are increasingly deployed in various domains for rapid development by non-professional programmers\" <Paper corpusId=\"248510289\" paperTitle=\"(Savidis, 2022)\" isShortName></Paper>.",
                "citations": [
                    {
                        "id": "(Kuhail et al., 2021)",
                        "snippets": [
                            "Visual programming refers to approaches and methods that use two-dimensional graphical elements to allow nonprogrammer end-users to create, extend, and customize software applications [9]. Visual programming languages (VPLs) are described by programming constructs and rules which are visually depicted [13].\n\nTraditionally, visual programming has been successfully used to help novices learn basics of programming by visualizing elements of a program. However, visual programming is increasingly being used by end users in various domains to create and tailor applications that are useful beyond the realm of education. For instance, VPLs are now being used in fields such as the Internet of Things (IoT) [3], [10], mobile application development [51], robotics [8], and Virtual/Augmented Reality [4].\n\nDespite the difference of VPL approaches, most tools utilize high-level abstractions to hide implementation details, and use similar interaction styles such as direct manipulation (in the form of drag-drop) and menu selection. Some commonalities have been observed among tools of the same domain. For instance, tools that target IoT allow end users to access services using visual abstractions, while tools built for educational purposes mostly use a block-based approach, and use similar visual abstractions representing programming constructs."
                        ],
                        "paper": {
                            "corpus_id": 231725028,
                            "title": "Characterizing Visual Programming Approaches for End-User Developers: A Systematic Review",
                            "authors": [
                                {
                                    "authorId": "1980707",
                                    "name": "M. Kuhail"
                                },
                                {
                                    "authorId": "153238394",
                                    "name": "Shahbano Farooq"
                                },
                                {
                                    "authorId": "3083161",
                                    "name": "R. Hammad"
                                },
                                {
                                    "authorId": "8357681",
                                    "name": "Mohammed Bahja"
                                }
                            ],
                            "year": 2021,
                            "venue": "IEEE Access",
                            "n_citations": 39
                        },
                        "score": 0.96044921875
                    },
                    {
                        "id": "(Rybinski et al., 2023)",
                        "snippets": [
                            "This tendency to reduce the complexity of programming and raise the abstraction at which programming constructs are formulated led to the emergence of the low-code approach [1]. Low-code solutions are predominantly based on creating visual, model-based languages [2] with the aim of making them more understandable and accessible. It can be argued that such a solution should be easier to use by inexperienced programmers and raises the productivity of programming (Trigo et al., 2022). For this reason, the usage of visual programming languages is recently gaining popularity in engineering, and education (Noone et al., 2017)(Kuhail et al., 2021)."
                        ],
                        "paper": {
                            "corpus_id": 259318509,
                            "title": "Visual Low-Code Language for Orchestrating Large-Scale Distributed Computing",
                            "authors": [
                                {
                                    "authorId": "1856819",
                                    "name": "Kamil Rybi\u0144ski"
                                },
                                {
                                    "authorId": "3073900",
                                    "name": "M. Smialek"
                                },
                                {
                                    "authorId": "2868722",
                                    "name": "A. Sostaks"
                                },
                                {
                                    "authorId": "152329569",
                                    "name": "Krzysztof Marek"
                                },
                                {
                                    "authorId": "79552271",
                                    "name": "Rados\u0142aw Roszczyk"
                                },
                                {
                                    "authorId": "50728919",
                                    "name": "Marek Wdowiak"
                                }
                            ],
                            "year": 2023,
                            "venue": "Journal of Grid Computing",
                            "n_citations": 1
                        },
                        "score": 0.9052734375
                    },
                    {
                        "id": "(Trigo et al., 2022)",
                        "snippets": [
                            "Software is becoming increasingly larger and complex, and companies should be aware of which technologies and platforms allow for higher productivity, that then translates into lower costs, shorter development times, and fewer required specialized resources. This article presents the results of an experiment carried out to compare the productivity of two low-code/code-based software development technologies. The results show that the development and maintenance of software with low-code technology is significantly faster, thus supporting the high potential of this technology. The key lesson is that low-code technology needs to be seriously taken into account by companies because of the potential productivity increase it represents for the development of management information systems."
                        ],
                        "paper": {
                            "corpus_id": 254101606,
                            "title": "Low-Code Versus Code-Based Software Development: Which Wins the Productivity Game?",
                            "authors": [
                                {
                                    "authorId": "144341645",
                                    "name": "Ant\u00f3nio Trigo"
                                },
                                {
                                    "authorId": "1743021",
                                    "name": "J. Varaj\u00e3o"
                                },
                                {
                                    "authorId": "2146567324",
                                    "name": "M. Almeida"
                                }
                            ],
                            "year": 2022,
                            "venue": "IT Professional",
                            "n_citations": 8
                        },
                        "score": 0
                    },
                    {
                        "id": "(Zhou et al., 2023)",
                        "snippets": [
                            "Visual programming has the potential of providing novice programmers with a low-code experience to build customized processing pipelines. Existing systems typically require users to build pipelines from scratch, implying that novice users are expected to set up and link appropriate nodes from a blank workspace.\n\nA visual programming interface provides users with a node-graph editor to program through interaction with visual elements. As opposed to writing code in a code editor, the node graph allows users to design pipelines by configuring nodes and connecting them with edges in a visual workspace. This alternative user interface approach often accelerates experimentation and exploration in the prototyping phases of creative applications, and can make advanced technology more accessible to beginners.\n\nRecent work further explored the application of visual programming in education [9,35,40], XR creativity support [88,91,93], and robotics [14,30]31]."
                        ],
                        "paper": {
                            "corpus_id": 276961580,
                            "title": "InstructPipe: Generating Visual Blocks Pipelines with Human Instructions and LLMs",
                            "authors": [
                                {
                                    "authorId": "2261898099",
                                    "name": "Zhongyi Zhou"
                                },
                                {
                                    "authorId": "2214751677",
                                    "name": "Jing Jin"
                                },
                                {
                                    "authorId": "95798184",
                                    "name": "Vrushank Phadnis"
                                },
                                {
                                    "authorId": "29436685",
                                    "name": "Xiuxiu Yuan"
                                },
                                {
                                    "authorId": "2261902264",
                                    "name": "Jun Jiang"
                                },
                                {
                                    "authorId": "2274943688",
                                    "name": "Xun Qian"
                                },
                                {
                                    "authorId": "2261902483",
                                    "name": "Kristen Wright"
                                },
                                {
                                    "authorId": "2261902982",
                                    "name": "Mark Sherwood"
                                },
                                {
                                    "authorId": "2261904117",
                                    "name": "Jason Mayes"
                                },
                                {
                                    "authorId": "2261943879",
                                    "name": "Jingtao Zhou"
                                },
                                {
                                    "authorId": "2275032507",
                                    "name": "Yiyi Huang"
                                },
                                {
                                    "authorId": "2275017028",
                                    "name": "Zheng Xu"
                                },
                                {
                                    "authorId": "2274975067",
                                    "name": "Yinda Zhang"
                                },
                                {
                                    "authorId": "2274929798",
                                    "name": "Johnny Lee"
                                },
                                {
                                    "authorId": "2292510931",
                                    "name": "Alex Olwal"
                                },
                                {
                                    "authorId": "2274972576",
                                    "name": "David Kim"
                                },
                                {
                                    "authorId": "2214753154",
                                    "name": "Ram Iyengar"
                                },
                                {
                                    "authorId": "2262397661",
                                    "name": "Na Li"
                                },
                                {
                                    "authorId": "2350823722",
                                    "name": "Ruofei Du"
                                }
                            ],
                            "year": 2023,
                            "venue": "International Conference on Human Factors in Computing Systems",
                            "n_citations": 1
                        },
                        "score": 0.90380859375
                    },
                    {
                        "id": "(Plauska et al., 2014)",
                        "snippets": [
                            "Visual programming is a method to specify a program in a two (or more) dimensional fashion (Myers, 1986), whereas in a textual language a programmer writes and a compiler or interpreter processes a program as a one-dimensional stream of symbols. Visual programming language uses meaningful graphic representation and manipulates visual information or supports visual interaction [5] in the process of programming. Visual elements based on imagery thinking provide a more natural approach for specifying a program than textual languages and the 2D representation is more suitable for representing parallel behaviour of complex systems consisting of multiple components such as robots. Visual languages are especially important in education, because their do not require formal knowledge of programming language syntax, are visually appealing and attractive to their users, and can be combined with additional engagement-enhancing concepts such as gamification (Lee et al., 2011)."
                        ],
                        "paper": {
                            "corpus_id": 60941791,
                            "title": "Reflections on Using Robots and Visual Programming Environments for Project-Based Teaching",
                            "authors": [
                                {
                                    "authorId": "3102760",
                                    "name": "Ignas Plauska"
                                },
                                {
                                    "authorId": "69972564",
                                    "name": "R. Lukas"
                                },
                                {
                                    "authorId": null,
                                    "name": "Robertas Dama\u0161evi\u010dius"
                                }
                            ],
                            "year": 2014,
                            "venue": "",
                            "n_citations": 8
                        },
                        "score": 0.9453125
                    },
                    {
                        "id": "(Corral et al., 2019)",
                        "snippets": [
                            "A visual programming language allows users and developers to create programs by manipulating program elements graphically. Several studies have shown the benefits of visual languages for learning purposes and their applicability to robot programming."
                        ],
                        "paper": {
                            "corpus_id": 61809687,
                            "title": "A Study on the Suitability of Visual Languages for Non-Expert Robot Programmers",
                            "authors": [
                                {
                                    "authorId": "70644982",
                                    "name": "Jos\u00e9 Mar\u00eda Rodr\u00edguez Corral"
                                },
                                {
                                    "authorId": "1409150721",
                                    "name": "Iv\u00e1n Ruiz-Rube"
                                },
                                {
                                    "authorId": "1410550855",
                                    "name": "Ant\u00f3n Civit Balcells"
                                },
                                {
                                    "authorId": "1410550098",
                                    "name": "Jos\u00e9 Miguel Mota-Mac\u00edas"
                                },
                                {
                                    "authorId": "1410538136",
                                    "name": "Arturo Morgado-Est\u00e9vez"
                                },
                                {
                                    "authorId": "1779677",
                                    "name": "J. Dodero"
                                }
                            ],
                            "year": 2019,
                            "venue": "IEEE Access",
                            "n_citations": 22
                        },
                        "score": 0.923828125
                    },
                    {
                        "id": "(Lin et al., 2023)",
                        "snippets": [
                            "Visual programming interfaces (VPIs) have been extensively studied as tools to aid users in designing and implementing systems through graphical elements rather than text-based code [31]. A key benefit of VPIs is their lower entry barrier for novice programmers [45]. There are primarily two main paradigms for VPIs. The first, the dataflow paradigm, lets users specify how a program transforms data from step to step by connecting nodes in a directed graph. Pioneering work in this area includes Prograph [17] and LabVIEW [27]. The second paradigm utilizes block-based function representations and lets users create programs by connecting compatible components together. Notable works in this area include Scratch [35] and Blockly [19]. Many commercial creative applications have adopted VPIs, including game engines such as Unity [11], CAD tools such as Grasshopper [9], and multimedia development tools such as Max/MSP [12].\n\nVPI concepts have been applied to machine learning applications. For example, Teachable Machine [15] uses a visual interface to help students learn to train a machine learning model",
                            "First, our tool leverages a block-based VPI paradigm, which has been shown to be effective in supporting novice programming learners [35]."
                        ],
                        "paper": {
                            "corpus_id": 269747039,
                            "title": "Jigsaw: Supporting Designers to Prototype Multimodal Applications by Chaining AI Foundation Models",
                            "authors": [
                                {
                                    "authorId": "2106412318",
                                    "name": "David Chuan-En Lin"
                                },
                                {
                                    "authorId": "3111790",
                                    "name": "Nikolas Martelaro"
                                }
                            ],
                            "year": 2023,
                            "venue": "International Conference on Human Factors in Computing Systems",
                            "n_citations": 18
                        },
                        "score": 0.9384765625
                    },
                    {
                        "id": "(Dias et al., 2018)",
                        "snippets": [
                            "Diagrams and other graphical logic and/or model representations have been playing a role in software development since the appearance of the modern digital computers in the 1940s. In the beginning, the diagrams were paper-based aids, used to design and understand the software structure, but then, interest appeared in the direct use of diagrams as a solution to improve software development tools. This led to the appearing of visual software project management tools, visual editors for graphical interface creation, visual tools for software modeling and engineering, and visual programming languages [Cox 2007].\n\nA Visual Programming Language (VPL) can be defined, as described in the Wiley Encyclopedia of Computer Science and Engineering [S. K. Chang 2002], as:\n\nA language in which significant parts of the structure of a program are represented in a pictorial notation, which may include icons, connecting lines indicating relationships, motion, color, texture, shading, or any other non-textual device.\n\nAs such, visual programming makes use of an extensive set of icons and diagrams to convey information and to allow multi-modal communication and interaction between humans and computers [S. K. Chang 2002].\n\nVPLs have been explored and used in several domains, including, but not limited to, educational activities (e.g. learning to program), multimedia, video game development, system design and development, simulations, automation, data warehousing and business analytics [ Ray 2017].\n\nVisual Programming Languages are commonly used with the intent of abstracting low-level concepts and details into a more high-level logic, through the use of visual metaphors [Barricelli and Valtolina 2015;Thomas and Barry 2003]."
                        ],
                        "paper": {
                            "corpus_id": 53282492,
                            "title": "State of the Software Development Life-Cycle for the Internet-of-Things",
                            "authors": [
                                {
                                    "authorId": "145745979",
                                    "name": "Jo\u00e3o Pedro Dias"
                                },
                                {
                                    "authorId": "144027277",
                                    "name": "H. Ferreira"
                                }
                            ],
                            "year": 2018,
                            "venue": "arXiv.org",
                            "n_citations": 14
                        },
                        "score": 0.927734375
                    },
                    {
                        "id": "(Savidis, 2022)",
                        "snippets": [
                            "Visual programming is widely adopted for teaching purposes, considered as an appropriate starting base before introducing learners to typical programming languages.\n\nThe notion of visual programming concerns methods to define programs in a multi-dimensional fashion (Myers, 1990). The latter is not linked to the underlying program representation, but concerns the interactive visual means through which a program is created, refined and managed. Hence, text-based code is considered as one-dimension method and is therefore not treated as visual programming.\n\nWhile visual programming adoption ranges from rapid application development, interactive software configurations, and system administration, it became popular for educational purposes, in particular for teaching programming skills. In this framework, Scratch (Maloney et al., 2010), a block-based tool and Lego Mindstorms\u2122 (Vallance et al., 2009) are amongst the most well-known visual tools in learning contexts. Historically, visual programing systems have been deployed to introduce students in the programming universe before being enabled to manage and master professional source-based programming languages. In this context, their scope is generally considered to be restricted in the early stages of acquiring programming skills. But today, there are visual tools for professional development purposes, ranging from business process, Internet of Things, 3d graphics and robotics, meaning their scope is not merely restricted to learning activities.\n\nVisual programming systems are currently the primary instruments for the early teaching of basic programming skills, while they are increasingly deployed in various domains for rapid development by non-professional programmers."
                        ],
                        "paper": {
                            "corpus_id": 248510289,
                            "title": "Programming Experience Requirements for Future Visual Development Environments",
                            "authors": [
                                {
                                    "authorId": "1685511",
                                    "name": "Anthony Savidis"
                                }
                            ],
                            "year": 2022,
                            "venue": "International Conference on Computer Supported Education",
                            "n_citations": 1
                        },
                        "score": 0.9267578125
                    },
                    {
                        "id": "(Rozen, 2023)",
                        "snippets": [
                            "Visual programming environments have the potential to make programming more accessible to programmers of all backgrounds and skill levels. For instance, Domain-Specific Languages (DSLs) have been shown to help non-programmers raise their productivity, and improve the quality of their work (Deursen et al., 2000). DSLs offer specific abstractions and notations that provide increased expressiveness over particular problem domains, e.g., banking, digital forensics and game design."
                        ],
                        "paper": {
                            "corpus_id": 264307073,
                            "title": "Game Engine Wizardry for Programming Mischief",
                            "authors": [
                                {
                                    "authorId": "2163321",
                                    "name": "Riemer van Rozen"
                                }
                            ],
                            "year": 2023,
                            "venue": "PAINT@SPLASH",
                            "n_citations": 4
                        },
                        "score": 0.9169921875
                    },
                    {
                        "id": "(Deursen et al., 2000)",
                        "snippets": [
                            "We survey the literature available on the topic of domain-specific languages as used for the construction and maintenance of software systems. We list a selection of 75 key publications in the area, and provide a summary for each of the papers. Moreover, we discuss terminology, risks and benefits, example domain-specific languages, design methodologies, and implementation techniques."
                        ],
                        "paper": {
                            "corpus_id": 264769167,
                            "title": "Domain-specific languages: an annotated bibliography",
                            "authors": [
                                {
                                    "authorId": "1737202",
                                    "name": "A. Deursen"
                                },
                                {
                                    "authorId": "2257221078",
                                    "name": "P. Klint"
                                },
                                {
                                    "authorId": "2263636981",
                                    "name": "Joost Visser"
                                }
                            ],
                            "year": 2000,
                            "venue": "SIGP",
                            "n_citations": 496
                        },
                        "score": 0
                    }
                ],
                "format": "list",
                "table": null,
                "model": "claude-3-7-sonnet-20250219"
            }
        ],
        "cost": 0.28169700000000003
    }
}